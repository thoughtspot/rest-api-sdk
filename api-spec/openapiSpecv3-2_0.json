{
  "openapi": "3.0.0",
  "info": {
    "title": "ThoughtSpot Public REST API",
    "version": "2.0"
  },
  "x-roles": [
    {
      "name": "9.0.0.cl",
      "id": "9.0.0.cl",
      "tags": [
        "9.0.0.cl"
      ],
      "description": "Roles for version 9.0.0.cl"
    },
    {
      "name": "9.7.0.cl",
      "id": "9.7.0.cl",
      "tags": [
        "9.7.0.cl"
      ],
      "description": "Roles for version 9.7.0.cl"
    },
    {
      "name": "9.2.0.cl",
      "id": "9.2.0.cl",
      "tags": [
        "9.2.0.cl"
      ],
      "description": "Roles for version 9.2.0.cl"
    },
    {
      "name": "9.9.0.cl",
      "id": "9.9.0.cl",
      "tags": [
        "9.9.0.cl"
      ],
      "description": "Roles for version 9.9.0.cl"
    },
    {
      "name": "9.5.0.cl",
      "id": "9.5.0.cl",
      "tags": [
        "9.5.0.cl"
      ],
      "description": "Roles for version 9.5.0.cl"
    },
    {
      "name": "9.4.0.cl",
      "id": "9.4.0.cl",
      "tags": [
        "9.4.0.cl"
      ],
      "description": "Roles for version 9.4.0.cl"
    },
    {
      "name": "9.6.0.cl",
      "id": "9.6.0.cl",
      "tags": [
        "9.6.0.cl"
      ],
      "description": "Roles for version 9.6.0.cl"
    }
  ],
  "tags": [],
  "paths": {
    "/api/rest/2.0/auth/session/user": {
      "get": {
        "operationId": "getCurrentUserInfo",
        "description": "\n <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>\n\n\nGets session information for the currently logged-in user.\n\nThis API does not require any parameters to be passed in the request.  \n\nAny ThoughtSpot user can access this endpoint and send an API request. The data returned in the API response varies according to user's privilege and object access permissions.\n\n\n\n\n#### Endpoint URL\n",
        "tags": [
          "Authentication",
          "9.0.0.cl"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Fetch current session user detail successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/auth/session/token": {
      "get": {
        "operationId": "getCurrentUserToken",
        "description": "\nGet token for the currently logged-in user. <br/>  <span class=\"since-beta-tag\">Version: 9.4.0.cl or later</span>\n\nGets token details for the currently logged-in user.  You can use this endpoint to obtain the token associated with the user's session.\n\nThis API does not require any parameters to be passed in the request.  \n\nAny ThoughtSpot user can access this endpoint and send an API request.\n\n\n\n\n#### Endpoint URL\n",
        "tags": [
          "Authentication",
          "9.4.0.cl"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Fetching token for current user successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTokenResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/users/search": {
      "post": {
        "operationId": "searchUsers",
        "description": "\n <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>\n\n\nGets a list of users available on the ThoughtSpot system.\n\nTo get details of a specific user, specify the user GUID or name. You can also filter the API response based on groups, Org ID, user visibility, account status, user type, and user preference settings and favorites.\n\nAvailable to all users. Users with `ADMINISTRATION` (**Can administer ThoughtSpot**) privileges can view all users properties.\n\n\n\n\n#### Endpoint URL\n",
        "tags": [
          "Users",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "user_identifier": {
                    "description": "GUID / name of the user to search",
                    "type": "string"
                  },
                  "display_name": {
                    "description": "A unique display name string for the user account, usually their first and last name",
                    "type": "string"
                  },
                  "name_pattern": {
                    "description": "A pattern to match case-insensitive name of the User object.",
                    "type": "string"
                  },
                  "visibility": {
                    "description": "Visibility of the user",
                    "type": "string",
                    "enum": [
                      "SHARABLE",
                      "NON_SHARABLE"
                    ]
                  },
                  "email": {
                    "description": "Email of the user account",
                    "type": "string"
                  },
                  "group_identifiers": {
                    "description": "GUID or name of the group to which the user belongs",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "privileges": {
                    "description": "Privileges assigned to the user",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "ADMINISTRATION",
                        "AUTHORING",
                        "USERDATAUPLOADING",
                        "DATADOWNLOADING",
                        "USERMANAGEMENT",
                        "DATAMANAGEMENT",
                        "SHAREWITHALL",
                        "JOBSCHEDULING",
                        "A3ANALYSIS",
                        "EXPERIMENTALFEATUREPRIVILEGE",
                        "BYPASSRLS",
                        "RANALYSIS",
                        "DEVELOPER",
                        "USER_ADMINISTRATION",
                        "GROUP_ADMINISTRATION",
                        "SYNCMANAGEMENT",
                        "CAN_CREATE_CATALOG",
                        "DISABLE_PINBOARD_CREATION",
                        "LIVEBOARD_VERIFIER",
                        "ENABLESPOTAPPCREATION",
                        "PREVIEW_THOUGHTSPOT_SAGE",
                        "APPLICATION_ADMINISTRATION",
                        "SYSTEM_INFO_ADMINISTRATION",
                        "ORG_ADMINISTRATION",
                        "ROLE_ADMINISTRATION",
                        "AUTHENTICATION_ADMINISTRATION",
                        "BILLING_INFO_ADMINISTRATION",
                        "CAN_MANAGE_CUSTOM_CALENDAR",
                        "CAN_CREATE_OR_EDIT_CONNECTIONS",
                        "CAN_CONFIGURE_CONNECTIONS",
                        "CAN_MANAGE_WORKSHEET_VIEWS_TABLES"
                      ]
                    }
                  },
                  "account_type": {
                    "description": "Type of the account",
                    "type": "string",
                    "enum": [
                      "LOCAL_USER",
                      "LDAP_USER",
                      "SAML_USER",
                      "OIDC_USER",
                      "REMOTE_USER"
                    ]
                  },
                  "account_status": {
                    "description": "Current status of the user account.",
                    "type": "string",
                    "enum": [
                      "ACTIVE",
                      "INACTIVE",
                      "EXPIRED",
                      "LOCKED",
                      "PENDING"
                    ]
                  },
                  "notify_on_share": {
                    "description": "User preference for receiving email notifications when another ThoughtSpot user\nshares a metadata object such as Answer, Liveboard, or Worksheet.",
                    "type": "boolean",
                    "nullable": true
                  },
                  "show_onboarding_experience": {
                    "description": "The user preference for revisiting the onboarding experience",
                    "type": "boolean",
                    "nullable": true
                  },
                  "onboarding_experience_completed": {
                    "description": "Indicates if the user has completed the onboarding walkthrough",
                    "type": "boolean",
                    "nullable": true
                  },
                  "org_identifiers": {
                    "description": "IDs or names of the Orgs to which the user belongs",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "home_liveboard_identifier": {
                    "description": "Unique ID or name of the user's home Liveboard.",
                    "type": "string"
                  },
                  "favorite_metadata": {
                    "description": "Metadata objects which are assigned as favorites of the user.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/FavoriteMetadataInput"
                    }
                  },
                  "record_offset": {
                    "description": "The starting record number from where the records should be included.",
                    "default": 0,
                    "type": "integer",
                    "format": "int32"
                  },
                  "record_size": {
                    "description": "The number of records that should be included.",
                    "default": 10,
                    "type": "integer",
                    "format": "int32"
                  },
                  "sort_options": {
                    "description": "Sort options.",
                    "$ref": "#/components/schemas/SortOptions"
                  },
                  "role_identifiers": {
                    "description": "Filters by the role assigned to the user.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "include_favorite_metadata": {
                    "description": "Indicates if the user's favorite objects should be displayed.",
                    "default": false,
                    "type": "boolean",
                    "nullable": true
                  }
                }
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "User search result.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/system": {
      "get": {
        "operationId": "getSystemInformation",
        "description": "\n <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>\n\nGets system information such as the release version, locale, time zone, deployment environment, date format, and date time format of the cluster.\n\nRequires `ADMINISTRATION` (**Can administer ThoughtSpot**) privileges.\n\nThis API does not require any parameters to be passed in the request.  \n\n\n\n\n#### Endpoint URL\n",
        "tags": [
          "System",
          "9.0.0.cl"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Cluster information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemInfo"
                },
                "examples": {
                  "example_1": {
                    "value": {
                      "id": "local",
                      "name": "local",
                      "release_version": "test",
                      "time_zone": "America/Los_Angeles",
                      "locale": "",
                      "date_format": "MM/dd/yyyy",
                      "api_version": "v1",
                      "type": "SW",
                      "environment": "DEV",
                      "license": "EAE",
                      "date_time_format": "MM/dd/yyyy h:mm a",
                      "time_format": "HH:mm:ss",
                      "system_user_id": "67e15c06-d153-4924-a4cd-ff615393b60f",
                      "super_user_id": "0f0dd0f7-7411-4195-a4aa-0dc6b58413c9",
                      "hidden_object_id": "31745bb4-defd-4e8b-8de9-8fd01db78827",
                      "system_group_id": "179d8867-cf36-4a8d-a019-63a226fd3196",
                      "tsadmin_user_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                      "admin_group_id": "d0326b56-ef23-4c8a-8327-a30e99bcc72b",
                      "all_tables_connection_id": "bfc6feb4-8dac-402c-8ae8-78b43d318777",
                      "all_user_group_id": "b25ee394-9d13-49e3-9385-cd97f5b253b4",
                      "accept_language": "undefined",
                      "all_user_group_member_user_count": 13,
                      "logical_model_version": 43
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/system/config": {
      "get": {
        "operationId": "getSystemConfig",
        "description": "\n <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>\n\nRetrieves the current configuration details of the cluster. If the request is successful, the API returns a list configuration settings applied on the cluster.\n\nRequires `ADMINISTRATION`(**Can administer ThoughtSpot**) privilege to view these complete configuration settings of the cluster.\n\nThis API does not require any parameters to be passed in the request.\n\n\n\n\n#### Endpoint URL\n",
        "tags": [
          "System",
          "9.0.0.cl"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Cluster config information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemConfig"
                },
                "examples": {
                  "example_1": {
                    "value": {
                      "onboarding_content_url": ""
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/system/config-overrides": {
      "get": {
        "operationId": "getSystemOverrideInfo",
        "description": "\n <span class=\"since-beta-tag\">Version: 9.2.0.cl or later</span>\n\nGets a list of configuration overrides applied on the cluster.  \n\nRequires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.\n\nThis API does not require any parameters to be passed in the request.  \n\n\n\n\n#### Endpoint URL\n",
        "tags": [
          "System",
          "9.2.0.cl"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Cluster configuration which can be overridden.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/orgs/search": {
      "post": {
        "operationId": "searchOrgs",
        "description": "\n <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>\n\nGets a list of Orgs configured on the ThoughtSpot system. To get details of a specific Org, specify the Org ID or name. You can also pass parameters such as status, visibility, and user identifiers to get a specific list of Orgs.\n\nRequires cluster administration (**Can administer Org**) privileges.\n\n\n\n\n#### Endpoint URL\n",
        "tags": [
          "Orgs",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "org_identifier": {
                    "description": "ID or name of the Org",
                    "type": "string"
                  },
                  "description": {
                    "description": "Description of the Org",
                    "type": "string"
                  },
                  "visibility": {
                    "description": "Visibility of the Org",
                    "type": "string",
                    "enum": [
                      "SHOW",
                      "HIDDEN"
                    ]
                  },
                  "status": {
                    "description": "Status of the Org",
                    "type": "string",
                    "enum": [
                      "ACTIVE",
                      "IN_ACTIVE"
                    ]
                  },
                  "user_identifiers": {
                    "description": "GUIDs or names of the users for which you want to retrieve the Orgs data",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Organization search result.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrgResponse"
                  }
                },
                "examples": {
                  "example_1": {
                    "value": [
                      {
                        "id": 0,
                        "name": "Primary",
                        "status": "ACTIVE",
                        "description": "Primary Org",
                        "visibility": "SHOW"
                      },
                      {
                        "id": 583464508,
                        "name": "test_org",
                        "status": "ACTIVE",
                        "description": "test_org",
                        "visibility": "SHOW"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/tags/search": {
      "post": {
        "operationId": "searchTags",
        "description": "\n <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>\n\nGets a list of tag objects available on the ThoughtSpot system. To get details of a specific tag object, specify the GUID or name.\n\nAny authenticated user can search for tag objects.\n\n\n\n\n#### Endpoint URL\n",
        "tags": [
          "Tags",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "tag_identifier": {
                    "description": "Name or Id of the tag.",
                    "type": "string"
                  },
                  "name_pattern": {
                    "description": "A pattern to match case-insensitive name of the Tag object.",
                    "type": "string"
                  },
                  "color": {
                    "description": "Color of the tag.",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Tags search result.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Tag"
                  }
                },
                "examples": {
                  "example_1": {
                    "value": [
                      {
                        "name": "test4",
                        "id": "0935bbb5-17e2-43ab-b657-da6bf347cbb4",
                        "color": "#342323",
                        "deleted": false,
                        "hidden": false,
                        "external": false,
                        "deprecated": false,
                        "creation_time_in_millis": 1684937524885,
                        "modification_time_in_millis": 1684937524885,
                        "author_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                        "modifier_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                        "owner_id": "0935bbb5-17e2-43ab-b657-da6bf347cbb4"
                      },
                      {
                        "name": "test6",
                        "id": "65a5c39a-daf5-4cae-975f-44283628494e",
                        "color": "#342323",
                        "deleted": false,
                        "hidden": false,
                        "external": false,
                        "deprecated": false,
                        "creation_time_in_millis": 1684988834183,
                        "modification_time_in_millis": 1684988887888,
                        "author_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                        "modifier_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                        "owner_id": "65a5c39a-daf5-4cae-975f-44283628494e"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/groups/search": {
      "post": {
        "operationId": "searchUserGroups",
        "description": "\n <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>\n\n\nGets a list of users available on the ThoughtSpot system.\n\nTo get details of a specific user, specify the user GUID or name. You can also filter the API response based on groups, Org ID, user visibility, account status, user type, and user preference settings and favorites.\n\nAvailable to all users. Users with `ADMINISTRATION` (**Can administer ThoughtSpot**) privileges can view all users properties.\n\n\n\n\n#### Endpoint URL\n",
        "tags": [
          "Groups",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "default_liveboard_identifiers": {
                    "description": "GUID of Liveboards that are assigned as default Liveboards to the users in the group.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "description": {
                    "description": "Description of the group",
                    "type": "string"
                  },
                  "display_name": {
                    "description": "Display name of the group",
                    "type": "string"
                  },
                  "name_pattern": {
                    "description": "A pattern to match case-insensitive name of the Group object.",
                    "type": "string"
                  },
                  "group_identifier": {
                    "description": "GUID or name of the group",
                    "type": "string"
                  },
                  "org_identifiers": {
                    "description": "ID or name of the Org to which the group belongs",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "privileges": {
                    "description": "Privileges assigned to the group.",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "ADMINISTRATION",
                        "AUTHORING",
                        "USERDATAUPLOADING",
                        "DATADOWNLOADING",
                        "USERMANAGEMENT",
                        "DATAMANAGEMENT",
                        "SHAREWITHALL",
                        "JOBSCHEDULING",
                        "A3ANALYSIS",
                        "EXPERIMENTALFEATUREPRIVILEGE",
                        "BYPASSRLS",
                        "RANALYSIS",
                        "DEVELOPER",
                        "USER_ADMINISTRATION",
                        "GROUP_ADMINISTRATION",
                        "SYNCMANAGEMENT",
                        "CAN_CREATE_CATALOG",
                        "DISABLE_PINBOARD_CREATION",
                        "LIVEBOARD_VERIFIER",
                        "ENABLESPOTAPPCREATION",
                        "PREVIEW_THOUGHTSPOT_SAGE",
                        "APPLICATION_ADMINISTRATION",
                        "SYSTEM_INFO_ADMINISTRATION",
                        "ORG_ADMINISTRATION",
                        "ROLE_ADMINISTRATION",
                        "AUTHENTICATION_ADMINISTRATION",
                        "BILLING_INFO_ADMINISTRATION",
                        "CAN_MANAGE_CUSTOM_CALENDAR",
                        "CAN_CREATE_OR_EDIT_CONNECTIONS",
                        "CAN_CONFIGURE_CONNECTIONS",
                        "CAN_MANAGE_WORKSHEET_VIEWS_TABLES"
                      ]
                    }
                  },
                  "sub_group_identifiers": {
                    "description": "GUID or name of the sub groups. A subgroup is a group assigned to a parent group.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "type": {
                    "description": "Group type.",
                    "type": "string",
                    "enum": [
                      "LOCAL_GROUP",
                      "LDAP_GROUP"
                    ]
                  },
                  "user_identifiers": {
                    "description": "GUID or name of the users assigned to the group.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "visibility": {
                    "description": "Visibility of the group. To make a group visible to other users and groups,\nset the visibility to SHAREABLE.",
                    "type": "string",
                    "enum": [
                      "SHARABLE",
                      "NON_SHARABLE"
                    ]
                  },
                  "role_identifiers": {
                    "description": "Filter groups with a list of roles assigned to a group",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "record_offset": {
                    "description": "The starting record number from where the records should be included.",
                    "default": 0,
                    "type": "integer",
                    "format": "int32"
                  },
                  "record_size": {
                    "description": "The number of records that should be included.",
                    "default": 10,
                    "type": "integer",
                    "format": "int32"
                  },
                  "sort_options": {
                    "description": "Sort options to filter group details.",
                    "$ref": "#/components/schemas/SortOptions"
                  }
                }
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "User group search result.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserGroupResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/metadata/search": {
      "post": {
        "operationId": "searchMetadata",
        "description": "\n <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>\n\n\nGets a list of metadata objects available on the ThoughtSpot system.\n\nThis API endpoint is available to all users who have view access to the object. Users with `ADMINISTRATION` (**Can administer ThoughtSpot**) privileges can view data for all metadata objects, including users and groups.\n\n#### Usage guidelines\n\n* To get all metadata objects, send the API request without any attributes.\n* To get metadata objects of a specific type, set the `type` attribute. For example, to fetch a Worksheet, set the type as `LOGICAL_TABLE`.\n* To get a specific metadata object, specify the GUID.\n* To customize your search and filter the API response, you can use several parameters.\n  You can search for objects created or modified by specific users, by tags applied to the objects, or by using the include parameters like `include_auto_created_objects`, `include_dependent_objects`, `include_headers`, `include_incomplete_objects`, and so on.\n  You can also define sorting options to sort the data retrieved in the API response.\n\n\n\n\n#### Endpoint URL\n",
        "tags": [
          "Metadata",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata": {
                    "description": "Metadata objects such as Liveboards, Answers, and Worksheets.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/MetadataListItemInput"
                    }
                  },
                  "permissions": {
                    "description": "Object permission details to search by.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/PermissionInput"
                    }
                  },
                  "created_by_user_identifiers": {
                    "description": "GUID or name of user who created the metadata object.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "dependent_object_version": {
                    "description": "Version of the dependent table of the metadata objects like Worksheets.",
                    "default": "V1",
                    "type": "string",
                    "enum": [
                      "V1",
                      "V2"
                    ]
                  },
                  "exclude_objects": {
                    "description": "List of metadata objects to exclude from search.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ExcludeMetadataListItemInput"
                    }
                  },
                  "favorite_object_options": {
                    "description": "Options to sort the API response by objects set as favorites\nfor the logged-in user or the users specified in the API request.",
                    "$ref": "#/components/schemas/FavoriteObjectOptionsInput"
                  },
                  "include_auto_created_objects": {
                    "description": "Includes system-generated metadata objects.",
                    "default": false,
                    "type": "boolean",
                    "nullable": true
                  },
                  "include_dependent_objects": {
                    "description": "Includes dependents of the metadata object specified in the API request.\nFor example, a worksheet can consist of dependent objects such as Liveboards or Answers.",
                    "default": false,
                    "type": "boolean",
                    "nullable": true
                  },
                  "include_details": {
                    "description": "Includes complete details of the metadata objects.",
                    "default": false,
                    "type": "boolean",
                    "nullable": true
                  },
                  "include_headers": {
                    "description": "Includes headers of the metadata objects.",
                    "default": true,
                    "type": "boolean",
                    "nullable": true
                  },
                  "include_hidden_objects": {
                    "description": "Includes details of the hidden objects, such as a column in a worksheet or a table.",
                    "default": false,
                    "type": "boolean",
                    "nullable": true
                  },
                  "include_incomplete_objects": {
                    "description": "Includes objects with incomplete metadata.",
                    "default": false,
                    "type": "boolean",
                    "nullable": true
                  },
                  "include_visualization_headers": {
                    "description": "Includes visualization headers of the specified Liveboard object.",
                    "default": false,
                    "type": "boolean",
                    "nullable": true
                  },
                  "include_worksheet_search_assist_data": {
                    "description": "If search assistance lessons are configured on a worksheet,\nthe API returns the search assist data for Worksheet objects.",
                    "type": "boolean",
                    "nullable": true
                  },
                  "modified_by_user_identifiers": {
                    "description": "Includes ID or names of the users who modified the metadata object.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "record_offset": {
                    "description": "The starting record number from where the records should be included.",
                    "default": 0,
                    "type": "integer",
                    "format": "int32"
                  },
                  "record_size": {
                    "description": "The number of records that should be included.",
                    "default": 10,
                    "type": "integer",
                    "format": "int32"
                  },
                  "sort_options": {
                    "description": "Sort options to filter metadata details.",
                    "$ref": "#/components/schemas/MetadataSearchSortOptions"
                  },
                  "tag_identifiers": {
                    "description": "Tags to filter metadata objects by",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "include_stats": {
                    "description": "Indicates whether to include stats of the metadata objects.",
                    "default": false,
                    "type": "boolean",
                    "nullable": true
                  }
                }
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Metadata objects search result.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MetadataSearchResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/metadata/liveboard/sql": {
      "post": {
        "operationId": "fetchLiveboardSqlQuery",
        "description": "\n <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>\n\nFetches the underlying SQL query data for a Liveboard object and its visualizations.\n\nRequires at least view access to the Liveboard object.\n\nTo get SQL query data for a Liveboard, specify the GUID of the Liveboard. Optionally, you can add an array of visualization GUIDs to retrieve the SQL query data for visualizations in the Liveboard.\n\nUpon successful execution, the API returns the SQL queries for the specified object as shown in this example:\n```\n{\n  \"metadata_id\": \"fa68ae91-7588-4136-bacd-d71fb12dda69\",\n  \"metadata_name\": \"Total Sales\",\n  \"metadata_type\": \"LIVEBOARD\",\n  \"sql_queries\": [\n    {\n      \"metadata_id\": \"b3b6d2b9-089a-490c-8e16-b144650b7843\",\n      \"metadata_name\": \"Total quantity purchased, Total sales by region\",\n      \"sql_query\": \"SELECT \\n  \\\"ta_1\\\".\\\"REGION\\\" \\\"ca_1\\\", \\n  CASE\\n    WHEN sum(\\\"ta_2\\\".\\\"QUANTITYPURCHASED\\\") IS NOT NULL THEN sum(\\\"ta_2\\\".\\\"QUANTITYPURCHASED\\\")\\n    ELSE 0\\n  END \\\"ca_2\\\", \\n  CASE\\n    WHEN sum(\\\"ta_2\\\".\\\"SALES\\\") IS NOT NULL THEN sum(\\\"ta_2\\\".\\\"SALES\\\")\\n    ELSE 0\\n  END \\\"ca_3\\\"\\nFROM \\\"RETAILAPPAREL\\\".\\\"PUBLIC\\\".\\\"FACT_RETAPP_SALES\\\" \\\"ta_2\\\"\\n  JOIN \\\"RETAILAPPAREL\\\".\\\"PUBLIC\\\".\\\"DIM_RETAPP_STORES\\\" \\\"ta_1\\\"\\n    ON \\\"ta_2\\\".\\\"STOREID\\\" = \\\"ta_1\\\".\\\"STOREID\\\"\\nGROUP BY \\\"ca_1\\\"\"\n    }\n  ]\n}\n```\n\n\n\n\n#### Endpoint URL\n",
        "tags": [
          "Metadata",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata_identifier": {
                    "description": "ID or name of the Liveboard.",
                    "type": "string"
                  },
                  "visualization_identifiers": {
                    "description": "Unique ID or name of visualizations.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "metadata_identifier"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Fetching SQL query of specified metadata object is successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SqlQueryResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/metadata/answer/sql": {
      "post": {
        "operationId": "fetchAnswerSqlQuery",
        "description": "\n <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>\n\nFetches the underlying SQL query data for an Answer object.\n\nRequires at least view access to the Answer object.\n\nUpon successful execution, the API returns the SQL queries for the specified object as shown in this example:\n```\n{\n   \"metadata_id\":\"8fbe44a8-46ad-4b16-8d39-184b2fada490\",\n   \"metadata_name\":\"Total sales\",\n   \"metadata_type\":\"ANSWER\",\n   \"sql_queries\":[\n      {\n         \"metadata_id\":\"8fbe44a8-46ad-4b16-8d39-184b2fada490\",\n         \"metadata_name\":\"Total sales -test\",\n         \"sql_query\":\"SELECT \\n  \\\"ta_1\\\".\\\"REGION\\\" \\\"ca_1\\\", \\n  \\\"ta_2\\\".\\\"PRODUCTNAME\\\" \\\"ca_2\\\", \\n  \\\"ta_1\\\".\\\"STORENAME\\\" \\\"ca_3\\\", \\n  CASE\\n    WHEN sum(\\\"ta_3\\\".\\\"SALES\\\") IS NOT NULL THEN sum(\\\"ta_3\\\".\\\"SALES\\\")\\n    ELSE 0\\n  END \\\"ca_4\\\", \\n  CASE\\n    WHEN sum(\\\"ta_3\\\".\\\"QUANTITYPURCHASED\\\") IS NOT NULL THEN sum(\\\"ta_3\\\".\\\"QUANTITYPURCHASED\\\")\\n    ELSE 0\\n  END \\\"ca_5\\\"\\nFROM \\\"RETAILAPPAREL\\\".\\\"PUBLIC\\\".\\\"FACT_RETAPP_SALES\\\" \\\"ta_3\\\"\\n  JOIN \\\"RETAILAPPAREL\\\".\\\"PUBLIC\\\".\\\"DIM_RETAPP_STORES\\\" \\\"ta_1\\\"\\n    ON \\\"ta_3\\\".\\\"STOREID\\\" = \\\"ta_1\\\".\\\"STOREID\\\"\\n  JOIN \\\"RETAILAPPAREL\\\".\\\"PUBLIC\\\".\\\"DIM_RETAPP_PRODUCTS\\\" \\\"ta_2\\\"\\n    ON \\\"ta_3\\\".\\\"PRODUCTID\\\" = \\\"ta_2\\\".\\\"PRODUCTID\\\"\\nGROUP BY \\n  \\\"ca_1\\\", \\n  \\\"ca_2\\\", \\n  \\\"ca_3\\\"\\n\"\n      }\n   ]\n}\n```\n\n\n\n\n#### Endpoint URL\n",
        "tags": [
          "Metadata",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata_identifier": {
                    "description": "ID or name of an Answer.",
                    "type": "string"
                  }
                },
                "required": [
                  "metadata_identifier"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Fetching SQL query of specified metadata object is successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SqlQueryResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/report/liveboard": {
      "post": {
        "operationId": "exportLiveboardReport",
        "description": "\n <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>\n\nExports the data from a Liveboard and its visualization in a given file format. You can download the Liveboard data as a PDF, PNG, CSV, or XLSX file.\n\nRequires `DATADOWNLOADING` (**Can download data**) privilege.\n\n#### Usage guidelines\n\nIn the request body, specify the GUID or name of the Liveboard. To generate a Liveboard report with specific visualizations, add GUIDs or names of the visualizations.\n\nThe default `file_format` is CSV. For PDF file format, you can specify additional parameters to customize the page orientation and include or exclude the cover page, logo, footer text, and page numbers. Similar customization options are also available for PNG output.\n\nYou can also apply [runtime filter](https://developers.thoughtspot.com/docs/?pageid=runtime-filters#_apply_runtime_filters_via_rest_api_v2_0_endpoints) overrides and [sort columns](https://developers.thoughtspot.com/docs/?pageid=runtime-sort#_rest_api_v2_0) to the data retrieved in the API response.\n\nTo include unsaved changes in the report, pass the `transient_pinboard_content` script generated from the `getExportRequestForCurrentPinboard` method in the Visual Embed SDK. Upon successful execution, the API returns the report with unsaved changes. If the new Liveboard experience mode, the transient content includes ad hoc changes to visualizations such as sorting, toggling of legends, and data drill down.\n\n\n\n\n#### Endpoint URL\n",
        "tags": [
          "Reports",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata_identifier": {
                    "description": "GUID or name of the Liveboard object.",
                    "type": "string"
                  },
                  "visualization_identifiers": {
                    "description": "GUID or name of visualizations on the Liveboard. If this parameter is\nnot defined, the API returns a report with all visualizations saved on a Liveboard.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "transient_content": {
                    "description": "Transient content of the Liveboard.",
                    "type": "string"
                  },
                  "file_format": {
                    "description": "Export file format.",
                    "default": "CSV",
                    "type": "string",
                    "enum": [
                      "CSV",
                      "PDF",
                      "XLSX",
                      "PNG"
                    ]
                  },
                  "runtime_filter": {
                    "description": "JSON string representing runtime filter.\n{ col1:'region', op1: 'EQ', val1: 'northeast' }",
                    "type": "object"
                  },
                  "runtime_sort": {
                    "description": "JSON string representing runtime sort.\n{ sortCol1: 'region', asc1 : true, sortCol2 : 'date' }",
                    "type": "object"
                  },
                  "pdf_options": {
                    "description": "Options for PDF export.",
                    "$ref": "#/components/schemas/PdfOptionsInput"
                  },
                  "png_options": {
                    "description": "Options for PNG export.",
                    "$ref": "#/components/schemas/PngOptionsInput"
                  },
                  "runtime_param_override": {
                    "description": "JSON object for setting values of parameters in runtime.",
                    "type": "object"
                  }
                },
                "required": [
                  "metadata_identifier"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Export report file of specified metadata object is successful.",
            "content": {
              "application/octet-stream": {}
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/report/answer": {
      "post": {
        "operationId": "exportAnswerReport",
        "description": "\n <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>\n\nExports an Answer in the given file format. You can download the Answer data as a PDF, PNG, CSV, or XLSX file.\n\nRequires `DATADOWNLOADING` (**Can download data**) privilege.\n\n#### Usage guidelines\n\nIn the request body, the GUID or name of the Answer and set `file_format`. The default file format is CSV.\n\nYou can apply [runtime filter](https://developers.thoughtspot.com/docs/?pageid=runtime-filters#_apply_runtime_filters_via_rest_api_v2_0_endpoints) overrides and [sort columns](https://developers.thoughtspot.com/docs/?pageid=runtime-sort#_rest_api_v2_0) to the data retrieved in the API response.\n\n\n\n\n#### Endpoint URL\n",
        "tags": [
          "Reports",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata_identifier": {
                    "description": "Unique ID or name of the metadata object.",
                    "type": "string"
                  },
                  "file_format": {
                    "description": "Export file format.",
                    "default": "CSV",
                    "type": "string",
                    "enum": [
                      "CSV",
                      "PDF",
                      "XLSX",
                      "PNG"
                    ]
                  },
                  "runtime_filter": {
                    "description": "JSON string representing runtime filter.\n{ col1:region, op1: EQ, val1: northeast }",
                    "type": "object"
                  },
                  "runtime_sort": {
                    "description": "JSON string representing runtime sort.\n{ sortCol1: region, asc1 :true, sortCol2 : date }",
                    "type": "object"
                  },
                  "runtime_param_override": {
                    "description": "JSON object for setting values of parameters in runtime.",
                    "type": "object"
                  }
                },
                "required": [
                  "metadata_identifier"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Export report file of specified metadata object is successful.",
            "content": {
              "application/octet-stream": {}
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/security/principals/fetch-permissions": {
      "post": {
        "operationId": "fetchPermissionsOfPrincipals",
        "description": "\n <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>\n\nFetches object permission details for a given principal object such as a user and group.\n\nRequires view access to the metadata object.\n\n#### Usage guidelines\n\n* To get a list of all metadata objects that a user or group can access, specify the `type` and GUID or name of the principal.\n* To get permission details for a specific object, add the `type` and GUID or name of the metadata object to your API request.\n\nUpon successful execution, the API returns a list of metadata objects and permission details for each object.  \n\n\n\n\n#### Endpoint URL\n",
        "tags": [
          "Security",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "principals": {
                    "description": "GUID or name of the user or group.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/PrincipalsInput"
                    }
                  },
                  "metadata": {
                    "description": "Metadata objects for which you want to fetch permission details.\nIf not specified, the API returns permission details for all\nmetadata objects that the specified users and groups can access.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/PermissionsMetadataTypeInput"
                    }
                  }
                },
                "required": [
                  "principals"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Fetching permissions of principals is successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "examples": {
                  "example_1": {
                    "value": {
                      "principal_permission_details": [
                        {
                          "principal_id": "7f5e7f87-09a1-487c-a1da-c4bb35e45270",
                          "principal_name": "test_user",
                          "principal_type": "USER",
                          "principal_sub_type": "LOCAL_USER",
                          "metadata_permission_info": [
                            {
                              "metadata_type": "LIVEBOARD",
                              "metadata_permissions": [
                                {
                                  "metadata_id": "2ff57a24-cf90-485f-8b4b-45fc17474c6f",
                                  "metadata_name": "Learn how to use ThoughtSpot",
                                  "metadata_owner": {
                                    "id": "2ff57a24-cf90-485f-8b4b-45fc17474c6f",
                                    "name": "Learn how to use ThoughtSpot"
                                  },
                                  "metadata_author": {
                                    "id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                                    "name": "tsadmin"
                                  },
                                  "permission": "READ_ONLY",
                                  "shared_permission": "NO_ACCESS",
                                  "group_permission": []
                                }
                              ]
                            }
                          ]
                        }
                      ],
                      "__args": {
                        "principals": [
                          {
                            "identifier": "test_user",
                            "type": "USER"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/security/metadata/fetch-permissions": {
      "post": {
        "operationId": "fetchPermissionsOnMetadata",
        "description": "\n <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>\n\nFetches permission details for a given metadata object.\n\nRequires view access to the metadata object.\n\n#### Usage guidelines\n\n* To fetch a list of users and groups for a metadata object, specify `type` and GUID or name of the metadata object.\n* To get permission details for a specific user or group, add `type` and GUID or name of the principal object to your API request.\n\nUpon successful execution, the API returns permission details and principal information for the object specified in the API request.\n\n\n\n\n#### Endpoint URL\n",
        "tags": [
          "Security",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata": {
                    "description": "GUID or name of the metadata object.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/PermissionsMetadataTypeInput"
                    }
                  },
                  "principals": {
                    "description": "User or group objects for which you want to fetch permissions.\nIf not specified, the API returns all users and groups that\ncan access the specified metadata objects.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/PrincipalsInput"
                    }
                  },
                  "include_dependent_objects": {
                    "description": "Indicates whether to fetch permissions of dependent metadata objects.",
                    "default": false,
                    "type": "boolean",
                    "nullable": true
                  }
                },
                "required": [
                  "metadata"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Fetching permissions of metadata objects is successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "examples": {
                  "example_1": {
                    "value": {
                      "metadata_permission_details": [
                        {
                          "metadata_id": "a62a5bf3-9f16-45b2-a174-7d30b3b577a9",
                          "metadata_name": "testing",
                          "metadata_type": "LIVEBOARD",
                          "metadata_owner": {
                            "id": "a62a5bf3-9f16-45b2-a174-7d30b3b577a9",
                            "name": "testing"
                          },
                          "metadata_author": {
                            "id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                            "name": "tsadmin"
                          },
                          "principal_permission_info": [
                            {
                              "principal_type": "USER_GROUP",
                              "principal_sub_type": "LOCAL_GROUP",
                              "principal_permissions": [
                                {
                                  "principal_id": "d0326b56-ef23-4c8a-8327-a30e99bcc72b",
                                  "principal_name": "Administrator",
                                  "permission": "MODIFY",
                                  "shared_permission": "NO_ACCESS",
                                  "group_permission": []
                                }
                              ]
                            },
                            {
                              "principal_type": "USER",
                              "principal_sub_type": "LOCAL_USER",
                              "principal_permissions": [
                                {
                                  "principal_id": "0f0dd0f7-7411-4195-a4aa-0dc6b58413c9",
                                  "principal_name": "su",
                                  "permission": "MODIFY",
                                  "shared_permission": "NO_ACCESS",
                                  "group_permission": []
                                },
                                {
                                  "principal_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                                  "principal_name": "tsadmin",
                                  "permission": "MODIFY",
                                  "shared_permission": "NO_ACCESS",
                                  "group_permission": []
                                }
                              ]
                            }
                          ]
                        }
                      ],
                      "__args": {
                        "metadata": [
                          {
                            "type": "LIVEBOARD",
                            "identifier": "a62a5bf3-9f16-45b2-a174-7d30b3b577a9"
                          }
                        ],
                        "include_dependent_objects": false
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/searchdata": {
      "post": {
        "operationId": "searchData",
        "description": "\n <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>\n\nGenerates an Answer from a given data source.\n\nRequires at least view access to the data source.\n\n#### Usage guidelines\n\nTo generate a new Answer, specify the data source GUID. The data source can be a Worksheet, View, Table, or SQL view.\n\nPass search tokens in the `query_string` attribute in the API request as shown in the following example. For more information passing search query string in API requests, see [`Components of a search query`](https://developers.thoughtspot.com/docs/?pageid=search-data-api#components).  \n```\n{\n  \"query_string\": \"[sales] by [store]\",\n  \"logical_table_identifier\": \"cd252e5c-b552-49a8-821d-3eadaa049cca\",\n}\n```\n\n\n\n\n#### Endpoint URL\n",
        "tags": [
          "Data",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query_string": {
                    "description": "Data search query string token.",
                    "type": "string"
                  },
                  "logical_table_identifier": {
                    "description": "GUID of the data source object, such as a Worksheet, View, or Table.",
                    "type": "string"
                  },
                  "data_format": {
                    "description": "JSON output format. By default, the API returns full data in the JSON.",
                    "default": "COMPACT",
                    "type": "string",
                    "enum": [
                      "COMPACT"
                    ]
                  },
                  "record_offset": {
                    "description": "The starting record number from where the records should be included.",
                    "default": 0,
                    "type": "integer",
                    "format": "int32"
                  },
                  "record_size": {
                    "description": "The number of records to include in a batch.",
                    "default": 10,
                    "type": "integer",
                    "format": "int32"
                  },
                  "runtime_filter": {
                    "description": "JSON object representing filter condition to filter the data.",
                    "type": "object"
                  },
                  "runtime_sort": {
                    "description": "JSON object representing columns to sort the data.",
                    "type": "object"
                  },
                  "runtime_param_override": {
                    "description": "JSON object for setting values of parameters in runtime.",
                    "type": "object"
                  }
                },
                "required": [
                  "query_string",
                  "logical_table_identifier"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Fetching data of specified metadata object is successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/metadata/liveboard/data": {
      "post": {
        "operationId": "fetchLiveboardData",
        "description": "\n <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>\n\nGets data from a Liveboard object and its visualization.  \n\nRequires at least view access to the Liveboard.\n\n#### Usage guidelines\n\nIn the request body, specify the GUID or name of the Liveboard. To get data for specific visualizations, add the GUIDs or names of the visualizations in the API request.\n\nTo include unsaved changes in the report, pass the `transient_pinboard_content` script generated from the `getExportRequestForCurrentPinboard` method in the Visual Embed SDK. Upon successful execution, the API returns the report with unsaved changes. If the new Liveboard experience mode, the transient content includes ad hoc changes to visualizations such as sorting, toggling of legends, and data drill down.\n\n\n\n\n#### Endpoint URL\n",
        "tags": [
          "Data",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata_identifier": {
                    "description": "GUID or name of the Liveboard.",
                    "type": "string"
                  },
                  "visualization_identifiers": {
                    "description": "GUIDs or names of the visualizations on the Liveboard.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "transient_content": {
                    "description": "Transient content of the Liveboard.",
                    "type": "string"
                  },
                  "data_format": {
                    "description": "JSON output format. By default, the API returns full data in the JSON.",
                    "default": "COMPACT",
                    "type": "string",
                    "enum": [
                      "COMPACT"
                    ]
                  },
                  "record_offset": {
                    "description": "The starting record number from where the records should be included.",
                    "default": 0,
                    "type": "integer",
                    "format": "int32"
                  },
                  "record_size": {
                    "description": "The number of records to include in a batch.",
                    "default": 10,
                    "type": "integer",
                    "format": "int32"
                  },
                  "runtime_filter": {
                    "description": "JSON object representing filter condition to filter the data.",
                    "type": "object"
                  },
                  "runtime_sort": {
                    "description": "JSON object representing columns to sort the data.",
                    "type": "object"
                  },
                  "runtime_param_override": {
                    "description": "JSON object for setting values of parameters in runtime.",
                    "type": "object"
                  }
                },
                "required": [
                  "metadata_identifier"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Fetching data of specified metadata object is successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LiveboardDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/metadata/answer/data": {
      "post": {
        "operationId": "fetchAnswerData",
        "description": "\n <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>\n\nFetches data from a saved Answer.\n\nRequires at least view access to the saved Answer.\n\n\n\n\n#### Endpoint URL\n",
        "tags": [
          "Data",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata_identifier": {
                    "description": "GUID or name of the Answer.",
                    "type": "string"
                  },
                  "data_format": {
                    "description": "JSON output format. By default, the API returns full data in the JSON.",
                    "default": "COMPACT",
                    "type": "string",
                    "enum": [
                      "COMPACT"
                    ]
                  },
                  "record_offset": {
                    "description": "The starting record number from where the records should be included.",
                    "default": 0,
                    "type": "integer",
                    "format": "int32"
                  },
                  "record_size": {
                    "description": "The number of records to include in a batch.",
                    "default": 10,
                    "type": "integer",
                    "format": "int32"
                  },
                  "runtime_filter": {
                    "description": "JSON object representing filter condition to filter the data.",
                    "type": "object"
                  },
                  "runtime_sort": {
                    "description": "JSON object representing columns to sort the data.",
                    "type": "object"
                  },
                  "runtime_param_override": {
                    "description": "JSON object for setting values of parameters in runtime.",
                    "type": "object"
                  }
                },
                "required": [
                  "metadata_identifier"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Fetching data of specified metadata object is successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnswerDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/logs/fetch": {
      "post": {
        "operationId": "fetchLogs",
        "description": "\n <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>\n\nFetches security audit logs.  \n\nRequires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.\n\n#### Usage guidelines\n\nBy default, the API retrieves logs for the last 24 hours. You can set a custom duration in EPOCH time. Make sure the log duration specified in your API request doesn’t exceed 24 hours. If you must fetch logs for a longer time range, modify the duration and make multiple sequential API requests.\n\nUpon successful execution, the API returns logs with the following information:\n* timestamp of the event\n* event ID\n* event type\n* name and GUID of the user\n* IP address of ThoughtSpot instance\n\n\n\n\n#### Endpoint URL\n",
        "tags": [
          "Log",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "log_type": {
                    "description": "Name of the log type",
                    "type": "string",
                    "enum": [
                      "SECURITY_AUDIT"
                    ]
                  },
                  "start_epoch_time_in_millis": {
                    "description": "Start time in EPOCH format",
                    "type": "number",
                    "format": "float"
                  },
                  "end_epoch_time_in_millis": {
                    "description": "End time in EPOCH format",
                    "type": "number",
                    "format": "float"
                  }
                },
                "required": [
                  "log_type"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Log fetched successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LogResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/vcs/git/config/search": {
      "post": {
        "operationId": "searchConfig",
        "description": "\n <span class=\"since-beta-tag\">Version: 9.2.0.cl or later</span>\n\nGets Git repository connections configured on the ThoughtSpot instance.\n\nRequires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.\n\n\n\n\n#### Endpoint URL\n",
        "tags": [
          "Version Control",
          "9.2.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "org_identifiers": {
                    "description": "   Applicable when Orgs is enabled in the cluster\n   \n\nList of Org ids or name. Provide value -1 for cluster level. Example : [\"OrgID1-or-Name1\", \"OrgID2-or-Name2\"] \n\n\n   \n\nNote: If no value is specified, then the configurations will be returned for all orgs the user has access to  <br/>  <span class=\"since-beta-tag\">Version: 9.5.0.cl or later</span>",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Details of local repository configuration",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RepoConfigObject"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/vcs/git/commits/search": {
      "post": {
        "operationId": "searchCommits",
        "description": "\n <span class=\"since-beta-tag\">Version: 9.2.0.cl or later</span>\n\nGets a list of commits for a given metadata object.\n\nRequires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.\n\n\n\n\n#### Endpoint URL\n",
        "tags": [
          "Version Control",
          "9.2.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata_identifier": {
                    "description": "Unique ID or name of the metadata.",
                    "type": "string"
                  },
                  "metadata_type": {
                    "description": "Type of metadata.",
                    "type": "string",
                    "enum": [
                      "LIVEBOARD",
                      "ANSWER",
                      "LOGICAL_TABLE"
                    ]
                  },
                  "branch_name": {
                    "description": "   Name of the branch from which commit history needs to be displayed.\n   \n\nNote: If no branch_name is specified, then commits will be returned for the default branch for this configuration.",
                    "type": "string"
                  },
                  "record_offset": {
                    "description": "    Record offset point in the commit history to display the response.\n    \n\nNote: If no record offset is specified, the beginning of the record will be considered.",
                    "type": "integer",
                    "format": "int32"
                  },
                  "record_size": {
                    "description": "    Number of history records from record offset point to be displayed in the response.\n    \n\nNote: If no record size is specified, then all the records will be considered.",
                    "type": "integer",
                    "format": "int32"
                  }
                },
                "required": [
                  "metadata_identifier"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Commit history of the metadata object",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommitHistoryResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/connection/search": {
      "post": {
        "operationId": "searchConnection",
        "description": "\n <span class=\"since-beta-tag\">Version: 9.2.0.cl or later</span>\n\nGets connection objects.\nRequires `DATAMANAGEMENT` (**Can manage data**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.\n- To get a list of all connections available in the ThoughtSpot system, send the API request without any attributes in the request body.\n- To get the connection objects for a specific type of data warehouse, specify the type in `data_warehouse_types`.\n- To fetch details of a connection object, specify the connection object GUID or name. The `name_pattern` attribute allows passing partial text with `%` for a wildcard match.\n- To get details of the database, schemas, tables, or columns from a data connection object, specify `data_warehouse_object_type`.\n- To get a specific database, schema, table, or column from a connection object, define the object type in `data_warehouse_object_type` and object properties in the `data_warehouse_objects` array. For example, to search for a column, you must pass the database, schema, and table names in the API request.\n  Note that in the following example, object properties are set in a hierarchical order (`database` > `schema` > `table` > `column`).\n```\n{\n  \"connections\": [\n    {\n      \"identifier\": \"b9d1f2ef-fa65-4a4b-994e-30fa2d57b0c2\",\n      \"data_warehouse_objects\": [\n        {\n          \"database\": \"NEBULADEV\",\n          \"schema\": \"INFORMATION_SCHEMA\",\n          \"table\": \"APPLICABLE_ROLES\",\n          \"column\": \"ROLE_NAME\"\n        }\n      ]\n    }\n  ],\n  \"data_warehouse_object_type\": \"COLUMN\"\n}\n```\n- To fetch data by `configuration`, specify `data_warehouse_object_type`. For example, to fetch columns from the `DEVELOPMENT` database, specify the `data_warehouse_object_type` as `DATABASE` and define the `configuration` string as `{\"database\":\"DEVELOPMENT\"}`. To get column data for a specific table, specify the table, for example,`{\"database\":\"RETAILAPPAREL\",\"table\":\"PIPES\"}`.\n- To query connections by `authentication_type`, specify `data_warehouse_object_type`. Supported values for `authentication_type` are:\n  * `SERVICE_ACCOUNT`: For connections that require service account credentials to authenticate to the Cloud Data Warehouse and fetch data.\n  * `OAUTH`: For connections that require OAuth credentials to authenticate to the Cloud Data Warehouse and fetch data. Teradata, Oracle, and Presto Cloud Data Warehouses do not support the OAuth authentication type.\n  * `IAM`: For connections that have the IAM OAuth set up. This authentication type is supported on Amazon Redshift connections only.\n  * `EXTOAUTH`: For connections that have external OAuth set up. ThoughtSpot supports external [OAuth with Microsoft Azure Active Directory (AD)](https://docs.thoughtspot.com/cloud/latest/ connections-snowflake-azure-ad-oauth) and [Okta for Snowflake data connections](https://docs.thoughtspot.com/cloud/latest/connections-snowflake-okta-oauth).\n- To include more details about connection objects in the API response, set `include_details` to `true`.\n- You can also sort the output by field names and filter connections by tags.\n\n\n\n#### Endpoint URL\n",
        "tags": [
          "Connections",
          "9.2.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "connections": {
                    "description": "List of connections and name pattern",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ConnectionInput"
                    }
                  },
                  "data_warehouse_types": {
                    "description": "Array of types of data warehouse defined for the connection.",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "SNOWFLAKE",
                        "AMAZON_REDSHIFT",
                        "GOOGLE_BIGQUERY",
                        "AZURE_SYNAPSE",
                        "TERADATA",
                        "SAP_HANA",
                        "STARBURST",
                        "ORACLE_ADW",
                        "DATABRICKS",
                        "DENODO",
                        "DREMIO",
                        "TRINO",
                        "PRESTO",
                        "POSTGRES",
                        "SQLSERVER",
                        "MYSQL",
                        "GENERIC_JDBC",
                        "AMAZON_RDS_POSTGRESQL",
                        "AMAZON_AURORA_POSTGRESQL",
                        "AMAZON_RDS_MYSQL",
                        "AMAZON_AURORA_MYSQL",
                        "LOOKER",
                        "AMAZON_ATHENA",
                        "SINGLESTORE",
                        "GCP_SQLSERVER",
                        "GCP_ALLOYDB_POSTGRESQL",
                        "GCP_POSTGRESQL",
                        "GCP_MYSQL"
                      ]
                    }
                  },
                  "record_offset": {
                    "description": "The starting record number from where the records should be included.",
                    "default": 0,
                    "type": "integer",
                    "format": "int32"
                  },
                  "record_size": {
                    "description": "The number of records that should be included.",
                    "default": 10,
                    "type": "integer",
                    "format": "int32"
                  },
                  "tag_identifiers": {
                    "description": "Unique ID or name of tags.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "data_warehouse_object_type": {
                    "description": "Data warehouse object type.",
                    "type": "string",
                    "enum": [
                      "DATABASE",
                      "SCHEMA",
                      "TABLE",
                      "COLUMN"
                    ]
                  },
                  "sort_options": {
                    "description": "Sort options.",
                    "$ref": "#/components/schemas/SortOptionInput"
                  },
                  "include_details": {
                    "description": "Indicates whether to include complete details of the connection objects.",
                    "type": "boolean",
                    "nullable": true
                  },
                  "configuration": {
                    "description": "Configuration values. If empty we are fetching configuration from datasource based on given connection id. If required you can provide config details to fetch specific details. Example input: {}, {\"warehouse\":\"SMALL_WH\",\"database\":\"DEVELOPMENT\"}. This is only applicable when data_warehouse_object_type is selected.",
                    "type": "object"
                  },
                  "authentication_type": {
                    "description": "List of authentication types to fetch data_ware_house_objects from external Data warehouse. This is only applicable when data_warehouse_object_type is selected.",
                    "default": "SERVICE_ACCOUNT",
                    "type": "string",
                    "enum": [
                      "SERVICE_ACCOUNT",
                      "OAUTH",
                      "IAM",
                      "EXTOAUTH"
                    ]
                  }
                }
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of connections to the datasource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SearchConnectionResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/roles/search": {
      "post": {
        "operationId": "searchRoles",
        "description": "Gets Roles configured on a ThoughtSpot instance.\nRequires cluster Administration, Role Administration or\nGroup Administration privileges. <br/>  <span class=\"since-beta-tag\">Version: 9.5.0.cl or later</span>",
        "tags": [
          "Roles",
          "9.5.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "role_identifiers": {
                    "description": "unique ID or name of the roles",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "org_identifiers": {
                    "description": "Unique Id or name of the Organisation",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "group_identifiers": {
                    "description": "Unique Id or name of the User Group",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "privileges": {
                    "description": "Privileges assigned to the Role.",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "UNKNOWN",
                        "ADMINISTRATION",
                        "AUTHORING",
                        "USERDATAUPLOADING",
                        "DATADOWNLOADING",
                        "USERMANAGEMENT",
                        "SECURITYMANAGEMENT",
                        "LOGICALMODELING",
                        "DATAMANAGEMENT",
                        "TAGMANAGEMENT",
                        "SHAREWITHALL",
                        "SYSTEMMANAGEMENT",
                        "JOBSCHEDULING",
                        "A3ANALYSIS",
                        "EXPERIMENTALFEATUREPRIVILEGE",
                        "BYPASSRLS",
                        "RANALYSIS",
                        "DISABLE_PINBOARD_CREATION",
                        "DEVELOPER",
                        "APPLICATION_ADMINISTRATION",
                        "USER_ADMINISTRATION",
                        "GROUP_ADMINISTRATION",
                        "BACKUP_ADMINISTRATION",
                        "SYSTEM_INFO_ADMINISTRATION",
                        "ENABLESPOTAPPCREATION",
                        "SYNCMANAGEMENT",
                        "ORG_ADMINISTRATION",
                        "ROLE_ADMINISTRATION",
                        "AUTHENTICATION_ADMINISTRATION",
                        "BILLING_INFO_ADMINISTRATION",
                        "PREVIEW_THOUGHTSPOT_SAGE",
                        "CAN_MANAGE_CUSTOM_CALENDAR",
                        "CAN_CREATE_OR_EDIT_CONNECTIONS",
                        "CAN_CONFIGURE_CONNECTIONS",
                        "CAN_MANAGE_WORKSHEET_VIEWS_TABLES"
                      ]
                    }
                  },
                  "deprecated": {
                    "description": "Indicates whether the role is deprecated.",
                    "type": "boolean",
                    "nullable": true
                  },
                  "external": {
                    "description": "Indicates whether the Role is external",
                    "type": "boolean",
                    "nullable": true
                  },
                  "shared_via_connection": {
                    "description": "Indicates whether the role is shared via connection",
                    "type": "boolean",
                    "nullable": true
                  },
                  "permissions": {
                    "description": "Permission details of the Role",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "READ_ONLY",
                        "MODIFY",
                        "NO_ACCESS"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Roles search result.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SearchRoleResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/customization/custom-actions/search": {
      "post": {
        "operationId": "searchCustomActions",
        "description": "\n <span class=\"since-beta-tag\">Version: 9.6.0.cl or later</span>\n\nGets custom actions configured on the cluster.\n\nRequires `DEVELOPER` (**Has Developer privilege**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.\n\n\n\n\n#### Endpoint URL\n",
        "tags": [
          "Custom Action",
          "9.6.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "custom_action_identifier": {
                    "description": "Name or ID of the custom action.",
                    "type": "string"
                  },
                  "name_pattern": {
                    "description": "A pattern to match case-insensitive name of the custom-action object.",
                    "type": "string"
                  },
                  "default_action_config": {
                    "description": "Default Custom action configuration. This includes if the custom action is available on all visualizations. By default, a custom action is added to all visualizations and Answers.",
                    "$ref": "#/components/schemas/Default_Action_Config_Search_Input"
                  },
                  "include_group_associations": {
                    "description": "When set to true, returns the associated groups for a custom action.",
                    "default": false,
                    "type": "boolean",
                    "nullable": true
                  },
                  "include_metadata_associations": {
                    "description": "When set to true, returns the associated metadata for a custom action.",
                    "default": false,
                    "type": "boolean",
                    "nullable": true
                  },
                  "metadata": {
                    "description": "Search with a given metadata identifier.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/CustomActionMetadataTypeInput"
                    }
                  },
                  "type": {
                    "description": "Filter the action objects based on type",
                    "type": "string",
                    "enum": [
                      "CALLBACK",
                      "URL"
                    ]
                  }
                }
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Custom action search is successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResponseCustomAction"
                  }
                },
                "examples": {
                  "example_1": {
                    "value": [
                      {
                        "action_details": {
                          "CALLBACK": {
                            "reference": "LEDE"
                          }
                        },
                        "default_action_config": {
                          "visibility": true
                        },
                        "id": "c59262df-cf9e-4947-96fa-52d494688797",
                        "name": "LEDE"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/auth/session/login": {
      "post": {
        "operationId": "login",
        "description": "\n <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>\n\n\nCreates a login session for a ThoughtSpot user with Basic authentication.\n\nIn Basic authentication method, REST clients log in to ThoughtSpot using `username` and `password` attributes. On a multi-tenant cluster with Orgs, users can pass the ID of the Org in the API request to log in to a specific Org context.\n\nA successful login returns a session cookie that can be used in your subsequent API requests.\n\n\n\n\n#### Endpoint URL\n",
        "tags": [
          "Authentication",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "description": "Username of the ThoughtSpot user",
                    "type": "string"
                  },
                  "password": {
                    "description": "Password of the user account",
                    "type": "string"
                  },
                  "org_identifier": {
                    "description": "ID of the Org context to log in to. If Org ID is not specified, the user will be logged in to the Org context of their previous login session.",
                    "type": "string"
                  },
                  "remember_me": {
                    "description": "A flag to remember the user session. When set to true, a session cookie is created and used in subsequent API requests.",
                    "default": false,
                    "type": "boolean",
                    "nullable": true
                  }
                }
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "204": {
            "description": "User login successful."
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/auth/token/object": {
      "post": {
        "operationId": "getObjectAccessToken",
        "description": "\n <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>\n\nGets an authentication token that provides access to a specific metadata object. By default, the token obtained from ThoughtSpot remains valid for 5 mins.\n\nYou can generate the token for a user by providing a `username` and `password` (for [Bearer token authentication](https://developers.thoughtspot.com/docs/?pageid=api-authv2#bearerToken)), or by using the cluster’s `secret key` (for [Trusted authentication](https://developers.thoughtspot.com/docs/?pageid=trusted-auth#trusted-auth-enable)).\n\nTo generate a `secret_key` on your cluster, the administrator must enable **Trusted authentication** in the **Develop** > **Customizations** > **Security Settings** page.\n\n**Note**: When both `password` and `secret_key` are included in the API request,  `password` takes precedence.\n\n#### Just-in-time provisioning\n\nFor just-in-time user creation and provisioning, use the following attributes.\n\n* `auto_create`\n* `username`\n\nTo assign privileges to the new user, specify the group name or GUID in `group_identifiers`.\n\nTo add the user to an Org, send the `Org ID` in the API request.\n\n**Note**: This feature is available only if Trusted authentication is enabled on your cluster.\n\nTo provision a new user and assign privileges, you need `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.\n\n\n\n\n#### Endpoint URL\n",
        "tags": [
          "Authentication",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "description": "Username of the ThoughtSpot user",
                    "type": "string"
                  },
                  "object_id": {
                    "description": "GUID of the ThoughtSpot metadata object that the user can access. The bearer will only have access to the object specified in the API request.",
                    "type": "string"
                  },
                  "password": {
                    "description": "Password of the user account",
                    "default": "",
                    "type": "string"
                  },
                  "secret_key": {
                    "description": "The secret key string provided by the ThoughtSpot application server. ThoughtSpot generates a secret key when Trusted authentication is enabled.",
                    "default": "",
                    "type": "string"
                  },
                  "validity_time_in_sec": {
                    "description": "Token validity duration in seconds",
                    "default": 300,
                    "type": "integer",
                    "format": "int32"
                  },
                  "org_id": {
                    "description": "ID of the Org context to log in to. If Org ID is not specified, the user will be logged in to the Org context of their previous login session.",
                    "default": 0,
                    "type": "integer",
                    "format": "int32"
                  },
                  "email": {
                    "description": "Email address of the user. Specify this attribute when creating a new user (just-in-time (JIT) provisioning).",
                    "type": "string"
                  },
                  "display_name": {
                    "description": "Display name of the user. Specify this attribute when creating a new user (just-in-time (JIT) provisioning).",
                    "type": "string"
                  },
                  "auto_create": {
                    "description": "   Creates a new user if the specified username does not exist in ThoughtSpot. To provision a user just-in-time (JIT), set this attribute to true.\n   \n\nNote: For JIT provisioning of a user, the secret_key is required. ",
                    "default": false,
                    "type": "boolean",
                    "nullable": true
                  },
                  "group_identifiers": {
                    "description": "Unique ID or name of the groups to which you want to assign the new user. You can specify this attribute to dynamically assign privileges during just-in-time (JIT) provisioning.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "jwt_user_options": {
                    "description": "JWT user options to create a JWT token given the payload.",
                    "$ref": "#/components/schemas/JWT_User_Options"
                  }
                },
                "required": [
                  "username",
                  "object_id"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Bearer auth token creation successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Token"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/api/rest/2.0/auth/token/full": {
      "post": {
        "operationId": "getFullAccessToken",
        "description": "\n <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>\n\nGets an authentication token and creates a full session in ThoughtSpot for a given user. By default, the token obtained from ThoughtSpot remains valid for 5 mins.\n\nYou can generate the token for a user by providing a `username` and `password` (for [Bearer token authentication](https://developers.thoughtspot.com/docs/?pageid=api-authv2#bearerToken)), or by using the cluster’s `secret_key` (for [Trusted authentication](https://developers.thoughtspot.com/docs/?pageid=trusted-auth#trusted-auth-enable)).\n\nTo generate a `secret_key` on your cluster, the administrator must enable **Trusted authentication** in the **Develop** > **Customizations** > **Security Settings** page. For more information, see [Trusted authentication](https://developers.thoughtspot.com/docs/?pageid=trusted-auth#trusted-auth-enable).\n\n**Note**: When both `password` and `secret_key` are included in the API request, `password` takes precedence.\n\n#### Just-in-time provisioning\n\nFor just-in-time user creation and provisioning, use the following attributes.\n\n* `auto_create`\n* `username`\n\nTo assign privileges to the new user, specify the group name or GUID in `group_identifiers`.\n\nTo add the user to an Org, specify the Org ID in the `org_id` attribute.\n\n**Note**: This feature is available only on clusters with trusted authentication enabled.\n\nTo provision a new user and assign privileges, you need `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.\n\n\n\n\n#### Endpoint URL\n",
        "tags": [
          "Authentication",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "description": "Username of the ThoughtSpot user",
                    "type": "string"
                  },
                  "password": {
                    "description": "Password of the user account",
                    "default": "",
                    "type": "string"
                  },
                  "secret_key": {
                    "description": "The secret key string provided by the ThoughtSpot application server. ThoughtSpot generates a secret key when Trusted authentication is enabled.",
                    "default": "",
                    "type": "string"
                  },
                  "validity_time_in_sec": {
                    "description": "Token validity duration in seconds",
                    "default": 300,
                    "type": "integer",
                    "format": "int32"
                  },
                  "org_id": {
                    "description": "ID of the Org context to log in to. If the Org ID is not specified, the user will be logged in to the Org context of their previous login session.",
                    "default": 0,
                    "type": "integer",
                    "format": "int32"
                  },
                  "email": {
                    "description": "Email address of the user. Specify this attribute when creating a new user (just-in-time (JIT) provisioning).",
                    "type": "string"
                  },
                  "display_name": {
                    "description": "Indicates display name of the user. Use this parameter to provision a user just-in-time (JIT).",
                    "type": "string"
                  },
                  "auto_create": {
                    "description": "   Creates a new user if the specified username does not already exist in ThoughtSpot. To provision a user just-in-time (JIT), set this attribute to true.\n   \n\nNote: For JIT provisioning of a user, the secret_key is required. ",
                    "default": false,
                    "type": "boolean",
                    "nullable": true
                  },
                  "group_identifiers": {
                    "description": "ID or name of the groups to which the newly created user belongs. Use this parameter to provision a user just-in-time (JIT).",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "jwt_user_options": {
                    "description": "JWT user options to create a JWT token given the payload.",
                    "$ref": "#/components/schemas/JWT_User_Options"
                  }
                },
                "required": [
                  "username"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Bearer auth token creation successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Token"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/api/rest/2.0/auth/session/logout": {
      "post": {
        "operationId": "logout",
        "description": "\n <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>\n\n\nLogs out a user from their current session.\n\n\n\n\n#### Endpoint URL\n",
        "tags": [
          "Authentication",
          "9.0.0.cl"
        ],
        "parameters": [],
        "responses": {
          "204": {
            "description": "User logout successful."
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/auth/token/revoke": {
      "post": {
        "operationId": "revokeToken",
        "description": "\n <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>\n\n\nRevokes the authentication token issued for current user session.\n\nThe token of your current session expires when you make a call to the `/api/rest/2.0/auth/token/revoke` endpoint.\nthe users will not be able to access ThoughtSpot objects until a new token is obtained.\n\nTo restart your session, request for a new token from ThoughtSpot. See [Get Object Access Token](#/http/api-endpoints/authentication/get-object-access-token)\nand [Get Full Access Token](#/http/api-endpoints/authentication/get-full-access-token).\n\n\n\n\n#### Endpoint URL\n",
        "tags": [
          "Authentication",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "user_identifier": {
                    "type": "string"
                  },
                  "token": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "204": {
            "description": "Token successfully revoked."
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/users/create": {
      "post": {
        "operationId": "createUser",
        "description": "\n <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>\n\nCreates a user in ThoughtSpot.\n\nThe API endpoint allows you to configure several user properties such as email address, account status, share notification preferences, and sharing visibility. You can provision the user to [groups](https://docs.thoughtspot.com/cloud/latest/groups-privileges) and [Orgs](https://docs.thoughtspot.com/cloud/latest/orgs-overview). You can also add Liveboard, Answer, and Worksheet objects to the user’s favorites list, assign a default Liveboard for the user, and set user preferences.\n\nRequires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.\n\n\n\n\n#### Endpoint URL\n",
        "tags": [
          "Users",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of the user. The username string must be unique.",
                    "type": "string"
                  },
                  "display_name": {
                    "description": "A unique display name string for the user account, usually their first and last name",
                    "type": "string"
                  },
                  "password": {
                    "description": "Password for the user account.",
                    "type": "string"
                  },
                  "email": {
                    "description": "Email of the user account",
                    "type": "string"
                  },
                  "account_type": {
                    "description": "Type of the account.",
                    "default": "LOCAL_USER",
                    "type": "string",
                    "enum": [
                      "LOCAL_USER",
                      "LDAP_USER",
                      "SAML_USER",
                      "OIDC_USER",
                      "REMOTE_USER"
                    ]
                  },
                  "account_status": {
                    "description": "Current status of the user account.",
                    "default": "ACTIVE",
                    "type": "string",
                    "enum": [
                      "ACTIVE",
                      "INACTIVE",
                      "EXPIRED",
                      "LOCKED",
                      "PENDING"
                    ]
                  },
                  "org_identifiers": {
                    "description": "List of Org IDs to which the user belongs.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "group_identifiers": {
                    "description": "GUIDs or names of the groups to which the newly created user belongs.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "visibility": {
                    "description": "Visibility of the users. When set to SHARABLE, the user is visible to other users and groups when they try to share an object.",
                    "default": "SHARABLE",
                    "type": "string",
                    "enum": [
                      "SHARABLE",
                      "NON_SHARABLE"
                    ]
                  },
                  "notify_on_share": {
                    "description": "User preference for receiving email notifications when another ThoughtSpot\nuser shares a metadata object such as Answer, Liveboard, or Worksheet.",
                    "default": true,
                    "type": "boolean",
                    "nullable": true
                  },
                  "show_onboarding_experience": {
                    "description": "The user preference for revisiting the onboarding experience.",
                    "default": true,
                    "type": "boolean",
                    "nullable": true
                  },
                  "onboarding_experience_completed": {
                    "description": "flag to get the on-boarding experience is completed or not.",
                    "default": false,
                    "type": "boolean",
                    "nullable": true
                  },
                  "home_liveboard_identifier": {
                    "description": "GUID of the Liveboard to set a default Liveboard for the user.\nThoughtSpot displays this Liveboard on the Home page when the user logs in.",
                    "type": "string"
                  },
                  "favorite_metadata": {
                    "description": "Metadata objects to add to the user's favorites list.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/FavoriteMetadataInput"
                    }
                  },
                  "preferred_locale": {
                    "description": "Locale for the user.",
                    "type": "string",
                    "enum": [
                      "en-CA",
                      "en-GB",
                      "en-US",
                      "de-DE",
                      "ja-JP",
                      "zh-CN",
                      "pt-BR",
                      "fr-FR",
                      "fr-CA",
                      "es-US",
                      "da-DK",
                      "es-ES",
                      "fi-FI",
                      "sv-SE",
                      "nb-NO",
                      "pt-PT",
                      "nl-NL",
                      "it-IT",
                      "ru-RU",
                      "en-IN"
                    ]
                  },
                  "extended_properties": {
                    "description": "Properties for the user",
                    "type": "object"
                  },
                  "extended_preferences": {
                    "description": "Preferences for the user",
                    "type": "object"
                  },
                  "trigger_welcome_email": {
                    "description": "Flag to indicate whether welcome email should be sent to user",
                    "type": "boolean",
                    "nullable": true
                  }
                },
                "required": [
                  "name",
                  "display_name",
                  "password",
                  "email"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "User successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/users/{user_identifier}/update": {
      "post": {
        "operationId": "updateUser",
        "description": "\n <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>\n\nUpdates a user object.\n\nYou can modify user properties such as username, email, and share notification settings. You can also assign new groups and Orgs, remove the user from a group or Org, reset password, and modify user preferences.\n\nRequires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.\n\n\n\n\n#### Endpoint URL\n",
        "tags": [
          "Users",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of the user. The username string must be unique.",
                    "type": "string"
                  },
                  "display_name": {
                    "description": "A unique display name string for the user account, usually their first and last name",
                    "type": "string"
                  },
                  "visibility": {
                    "description": "Visibility of the users. When set to SHARABLE, the user is visible to other users and groups when they try to share an object.",
                    "type": "string",
                    "enum": [
                      "SHARABLE",
                      "NON_SHARABLE"
                    ]
                  },
                  "email": {
                    "description": "Email of the user account",
                    "type": "string"
                  },
                  "account_status": {
                    "description": "Current status of the user account.",
                    "type": "string",
                    "enum": [
                      "ACTIVE",
                      "INACTIVE",
                      "EXPIRED",
                      "LOCKED",
                      "PENDING"
                    ]
                  },
                  "notify_on_share": {
                    "description": "User preference for receiving email notifications when another ThoughtSpot user\nshares a metadata object such as Answer, Liveboard, or Worksheet.",
                    "type": "boolean",
                    "nullable": true
                  },
                  "show_onboarding_experience": {
                    "description": "The user preference for revisiting the onboarding experience.",
                    "type": "boolean",
                    "nullable": true
                  },
                  "onboarding_experience_completed": {
                    "description": "Indicates if the user has completed the onboarding and allows turning off the onboarding walkthrough.",
                    "type": "boolean",
                    "nullable": true
                  },
                  "account_type": {
                    "description": "Type of the account.",
                    "type": "string",
                    "enum": [
                      "LOCAL_USER",
                      "LDAP_USER",
                      "SAML_USER",
                      "OIDC_USER",
                      "REMOTE_USER"
                    ]
                  },
                  "group_identifiers": {
                    "description": "GUIDs or names of the groups.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "home_liveboard_identifier": {
                    "description": "GUID of the Liveboard to set a default Liveboard for the user. ThoughtSpot displays\nthis Liveboard on the Home page when the user logs in.",
                    "type": "string"
                  },
                  "favorite_metadata": {
                    "description": "Metadata objects to add to the user's favorites list.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/FavoriteMetadataInput"
                    }
                  },
                  "org_identifiers": {
                    "description": "IDs of the Orgs.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "operation": {
                    "description": "Type of update operation. Default operation type is REPLACE",
                    "default": "REPLACE",
                    "type": "string",
                    "enum": [
                      "ADD",
                      "REMOVE",
                      "REPLACE"
                    ]
                  },
                  "preferred_locale": {
                    "description": "Locale for the user.",
                    "type": "string",
                    "enum": [
                      "en-CA",
                      "en-GB",
                      "en-US",
                      "de-DE",
                      "ja-JP",
                      "zh-CN",
                      "pt-BR",
                      "fr-FR",
                      "fr-CA",
                      "es-US",
                      "da-DK",
                      "es-ES",
                      "fi-FI",
                      "sv-SE",
                      "nb-NO",
                      "pt-PT",
                      "nl-NL",
                      "it-IT",
                      "ru-RU",
                      "en-IN"
                    ]
                  },
                  "extended_properties": {
                    "description": "Properties for the user",
                    "type": "object"
                  },
                  "extended_preferences": {
                    "description": "Preferences for the user",
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "user_identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "GUID / name of the user"
          }
        ],
        "responses": {
          "204": {
            "description": "User successfully updated."
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/users/{user_identifier}/delete": {
      "post": {
        "operationId": "deleteUser",
        "description": "\n <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>\n\nDeletes a user from the ThoughtSpot system.\n\nIf you want to remove a user from a specific Org but not from ThoughtSpot, update the group and Org mapping properties of the user object via a POST API call to the [/api/rest/2.0/users/{user_identifier}/update](#/http/api-endpoints/users/update-user) endpoint.\n\nRequires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.\n\n\n\n\n#### Endpoint URL\n",
        "tags": [
          "Users",
          "9.0.0.cl"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "user_identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "GUID / name of the user"
          }
        ],
        "responses": {
          "204": {
            "description": "User successfully deleted."
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/users/import": {
      "post": {
        "operationId": "importUsers",
        "description": "\n <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>\n\nImports user data from external databases into ThoughtSpot. During the user import operation:\n\n* If the specified users are not available in ThoughtSpot, the users are created and assigned a default password. Defining a `default_password` in the API request is optional.\n* If `delete_unspecified_users` is set to `true`, the users not specified in the API request, excluding the `tsadmin`, `guest`, `system` and `su` users, are deleted.\n* If the specified user objects are already available in ThoughtSpot, the object properties are updated and synchronized as per the input data in the API request.\n\nA successful API call returns the object that represents the changes made in the ThoughtSpot system.\n\nRequires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.\n\n\n\n\n#### Endpoint URL\n",
        "tags": [
          "Users",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "users": {
                    "description": "List of users needs to be imported.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ImportUser"
                    }
                  },
                  "default_password": {
                    "description": "The default password to assign to users if they do not have a password assigned in ThoughtSpot.",
                    "type": "string"
                  },
                  "dry_run": {
                    "description": "If true, the API performs a test operation and returns user IDs whose data will be edited after the import.",
                    "default": true,
                    "type": "boolean",
                    "nullable": true
                  },
                  "delete_unspecified_users": {
                    "description": "If set to true, removes the users that are not specified in the API request.",
                    "default": false,
                    "type": "boolean",
                    "nullable": true
                  }
                },
                "required": [
                  "users"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Import users operation successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportUsersResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/users/change-password": {
      "post": {
        "operationId": "changeUserPassword",
        "description": "\n <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>\n\nUpdates the current password of the user.\n\nRequires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.\n\n\n\n\n#### Endpoint URL\n",
        "tags": [
          "Users",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "current_password": {
                    "description": "Current password of the user.",
                    "type": "string"
                  },
                  "new_password": {
                    "description": "New password for the user.",
                    "type": "string"
                  },
                  "user_identifier": {
                    "description": "GUID or name of the user.",
                    "type": "string"
                  }
                },
                "required": [
                  "current_password",
                  "new_password",
                  "user_identifier"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "204": {
            "description": "User password change operation successful."
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/users/reset-password": {
      "post": {
        "operationId": "resetUserPassword",
        "description": "\n <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>\n\nResets the password of a user account. Administrators can reset password on behalf of a user.\n\nRequires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.\n\n\n\n\n#### Endpoint URL\n",
        "tags": [
          "Users",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "new_password": {
                    "description": "New password for the user.",
                    "type": "string"
                  },
                  "user_identifier": {
                    "description": "GUID or name of the user.",
                    "type": "string"
                  }
                },
                "required": [
                  "new_password",
                  "user_identifier"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "204": {
            "description": "User password reset operation successful."
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/users/force-logout": {
      "post": {
        "operationId": "forceLogoutUsers",
        "description": "\n <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>\n\nEnforces logout on current user sessions.  \n\nUse this API with caution as it may invalidate active user sessions and force users to re-login. Make sure you specify the usernames or GUIDs. If you pass null values in the API call, all user sessions on your cluster become invalid, and the users are forced to re-login.\n\nRequires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.\n\n\n\n\n#### Endpoint URL\n",
        "tags": [
          "Users",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "user_identifiers": {
                    "description": "GUID or name of the users for force logging out their sessions.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "204": {
            "description": "Force logging out of users operation successful."
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/users/activate": {
      "post": {
        "operationId": "activateUser",
        "description": " <span class=\"since-beta-tag\">Version: 9.7.0.cl or later</span>",
        "tags": [
          "Users",
          "9.7.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "user_identifier": {
                    "description": "Unique ID or name of the user.",
                    "type": "string"
                  },
                  "auth_token": {
                    "description": "Auth token for the user.",
                    "type": "string"
                  },
                  "password": {
                    "description": "New password for the user to access the account.",
                    "type": "string"
                  }
                },
                "required": [
                  "user_identifier",
                  "auth_token",
                  "password"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "User activated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/users/deactivate": {
      "post": {
        "operationId": "deactivateUser",
        "description": " <span class=\"since-beta-tag\">Version: 9.7.0.cl or later</span>",
        "tags": [
          "Users",
          "9.7.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "user_identifier": {
                    "description": "Unique ID or name of the user.",
                    "type": "string"
                  },
                  "base_url": {
                    "description": "Base url of the cluster.",
                    "type": "string"
                  }
                },
                "required": [
                  "user_identifier",
                  "base_url"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "User deactivated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseActivationURL"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/system/config-update": {
      "post": {
        "operationId": "updateSystemConfig",
        "description": "\n <span class=\"since-beta-tag\">Version: 9.2.0.cl or later</span>\n\nUpdates the current configuration of the cluster. You must send the configuration settings in JSON format.\n\nRequires `ADMINISTRATION` (**Can administer ThoughtSpot**) privileges.\n\n\n\n\n#### Endpoint URL\n",
        "tags": [
          "System",
          "9.2.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "configuration": {
                    "description": "Configuration JSON with the key-value pair of configuration attributes to be updated.",
                    "type": "object"
                  }
                },
                "required": [
                  "configuration"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "204": {
            "description": "Configuration successfully updated."
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/orgs/create": {
      "post": {
        "operationId": "createOrg",
        "description": "\n <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>\n\nCreates an Org object.\n\nTo use this API, the [Orgs](https://docs.thoughtspot.com/cloud/latest/orgs-overview) feature must be enabled in your cluster.\n\nRequires cluster administration (**Can administer Org**) privileges.\n\n\n\n\n#### Endpoint URL\n",
        "tags": [
          "Orgs",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of the Org.",
                    "type": "string"
                  },
                  "description": {
                    "description": "Description of the Org.",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Organization successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrgResponse"
                },
                "examples": {
                  "example_1": {
                    "value": {
                      "id": 1980035173,
                      "name": "test_org",
                      "status": "ACTIVE",
                      "description": "test_org",
                      "visibility": "SHOW"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/orgs/{org_identifier}/update": {
      "post": {
        "operationId": "updateOrg",
        "description": "\n <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>\n\nUpdates an Org object. You can modify Org properties such as name, description, and user associations.\n\nRequires cluster administration (**Can administer Org**) privileges.\n\n\n\n\n#### Endpoint URL\n",
        "tags": [
          "Orgs",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of the Org",
                    "type": "string"
                  },
                  "description": {
                    "description": "Description of the Org",
                    "type": "string"
                  },
                  "user_identifiers": {
                    "description": "Add Users to an Org",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "group_identifiers": {
                    "description": "Add Default Groups to an Org",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "operation": {
                    "description": "Type of update operation. Default operation type is ADD",
                    "default": "ADD",
                    "type": "string",
                    "enum": [
                      "ADD",
                      "REMOVE",
                      "REPLACE"
                    ]
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "org_identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID or name of the Org"
          }
        ],
        "responses": {
          "204": {
            "description": "Organization successfully updated."
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/orgs/{org_identifier}/delete": {
      "post": {
        "operationId": "deleteOrg",
        "description": "\n <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>\n\nDeletes an Org object from the ThoughtSpot system.\n\nRequires cluster administration (**Can administer Org**) privilege.\n\nWhen you delete an Org, all its users and objects created in that Org context are removed. However, if the users in the deleted Org also exists in other Orgs, they are removed only from the deleted Org.\n\n\n\n\n#### Endpoint URL\n",
        "tags": [
          "Orgs",
          "9.0.0.cl"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org_identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID or name of the Org"
          }
        ],
        "responses": {
          "204": {
            "description": "Organization successfully deleted."
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/tags/create": {
      "post": {
        "operationId": "createTag",
        "description": "\n <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>\n\nCreates a tag object.\n\nTags are labels that identify a metadata object. For example, you can create a tag to designate subject areas, such as sales, HR, marketing, and finance.\n\nRequires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.\n\n\n\n\n#### Endpoint URL\n",
        "tags": [
          "Tags",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of the tag.",
                    "type": "string"
                  },
                  "color": {
                    "description": "Hex color code to be assigned to the tag. For example, #ff78a9.",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Tag successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                },
                "examples": {
                  "example_1": {
                    "value": {
                      "name": "test5",
                      "id": "6abf5aec-3485-4f83-b25f-8c55b92e2b20",
                      "color": "#342323",
                      "deleted": false,
                      "hidden": false,
                      "external": false,
                      "deprecated": false,
                      "creation_time_in_millis": 1685441468684,
                      "modification_time_in_millis": 1685441468684,
                      "author_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                      "modifier_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                      "owner_id": "6abf5aec-3485-4f83-b25f-8c55b92e2b20"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/tags/{tag_identifier}/update": {
      "post": {
        "operationId": "updateTag",
        "description": "\n <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>\n\nUpdates a tag object.\n\nYou can modify the `name` and `color` properties of a tag object.  \n\nRequires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.\n\n\n\n\n#### Endpoint URL\n",
        "tags": [
          "Tags",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of the tag.",
                    "type": "string"
                  },
                  "color": {
                    "description": "Hex color code to be assigned to the tag. For example, #ff78a9.",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "tag_identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Name or Id of the tag."
          }
        ],
        "responses": {
          "204": {
            "description": "Tag successfully updated."
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/tags/{tag_identifier}/delete": {
      "post": {
        "operationId": "deleteTag",
        "description": "\n <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>\n\nDeletes a tag object from the ThoughtSpot system\n\nRequires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.\n\n\n\n\n#### Endpoint URL\n",
        "tags": [
          "Tags",
          "9.0.0.cl"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "tag_identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Tag identifier Tag name or Tag id."
          }
        ],
        "responses": {
          "204": {
            "description": "Tag successfully deleted."
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/tags/assign": {
      "post": {
        "operationId": "assignTag",
        "description": "\n <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>\n\nAssigns tags to Liveboards, Answers, Tables, and Worksheets.\n\nRequires edit access to the metadata object.\n\n\n\n\n#### Endpoint URL\n",
        "tags": [
          "Tags",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata": {
                    "description": "Metadata objects.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/TagMetadataTypeInput"
                    }
                  },
                  "tag_identifiers": {
                    "description": "GUID or name of the tag.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "metadata",
                  "tag_identifiers"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "204": {
            "description": "Tags successfully assigned."
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/tags/unassign": {
      "post": {
        "operationId": "unassignTag",
        "description": "\n <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>\n\nRemoves the tags applied to a Liveboard, Answer, Table, or Worksheet.\n\nRequires edit access to the metadata object.\n\n\n\n\n#### Endpoint URL\n",
        "tags": [
          "Tags",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata": {
                    "description": "Metadata objects.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/TagMetadataTypeInput"
                    }
                  },
                  "tag_identifiers": {
                    "description": "GUID or name of the tag.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "metadata",
                  "tag_identifiers"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "204": {
            "description": "Tags successfully unassigned."
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/groups/create": {
      "post": {
        "operationId": "createUserGroup",
        "description": "\n <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>\n\nCreates a group object in ThoughtSpot.\n\nRequires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.\n\n#### About groups\nGroups in ThoughtSpot are used by the administrators to define privileges and organize users based on their roles and access requirements. To know more about groups and privileges, see [ThoughtSpot Product Documentation](https://docs.thoughtspot.com/cloud/latest/groups-privileges).\n\n#### Supported operations\n\nThe API endpoint lets you perform the following operations:\n\n* Assign [privileges](https://developers.thoughtspot.com/docs/?pageid=api-user-management#group-privileges)\n* Add users\n* Define sharing visibility\n* Add sub-groups\n* Assign a default Liveboard\n\n\n\n\n#### Endpoint URL\n",
        "tags": [
          "Groups",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of the group. The group name must be unique.",
                    "type": "string"
                  },
                  "display_name": {
                    "description": "Display name for the group.",
                    "type": "string"
                  },
                  "default_liveboard_identifiers": {
                    "description": "GUID of the Liveboards to assign as default Liveboards to the users in the group.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "description": {
                    "description": "Description of the group",
                    "type": "string"
                  },
                  "privileges": {
                    "description": "Privileges to assign to the group",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "ADMINISTRATION",
                        "AUTHORING",
                        "USERDATAUPLOADING",
                        "DATADOWNLOADING",
                        "USERMANAGEMENT",
                        "DATAMANAGEMENT",
                        "SHAREWITHALL",
                        "JOBSCHEDULING",
                        "A3ANALYSIS",
                        "EXPERIMENTALFEATUREPRIVILEGE",
                        "BYPASSRLS",
                        "RANALYSIS",
                        "DEVELOPER",
                        "USER_ADMINISTRATION",
                        "GROUP_ADMINISTRATION",
                        "SYNCMANAGEMENT",
                        "CAN_CREATE_CATALOG",
                        "DISABLE_PINBOARD_CREATION",
                        "ENABLESPOTAPPCREATION",
                        "LIVEBOARD_VERIFIER",
                        "PREVIEW_THOUGHTSPOT_SAGE"
                      ]
                    }
                  },
                  "sub_group_identifiers": {
                    "description": "GUID or name of the sub groups. A subgroup is a group assigned to a parent group.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "type": {
                    "description": "Group type.",
                    "default": "LOCAL_GROUP",
                    "type": "string",
                    "enum": [
                      "LOCAL_GROUP",
                      "LDAP_GROUP"
                    ]
                  },
                  "user_identifiers": {
                    "description": "GUID or name of the users to assign to the group.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "visibility": {
                    "description": "Visibility of the group. To make a group visible to other users and groups,\nset the visibility to SHAREABLE.",
                    "default": "SHARABLE",
                    "type": "string",
                    "enum": [
                      "SHARABLE",
                      "NON_SHARABLE"
                    ]
                  },
                  "role_identifiers": {
                    "description": "Role identifiers of the roles that should be assigned to the group.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "name",
                  "display_name"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "User group successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroupResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/groups/{group_identifier}/update": {
      "post": {
        "operationId": "updateUserGroup",
        "description": "\n <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>\n\nUpdates the properties of a group object in ThoughtSpot.\n\nRequires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.\n\n#### Supported operations\n\nThis API endpoint lets you perform the following operations in a single API request:\n\n* Edit [privileges](https://developers.thoughtspot.com/docs/?pageid=api-user-management#group-privileges)\n* Add or remove users\n* Change sharing visibility settings\n* Add or remove sub-groups\n* Assign a default Liveboard  or update the existing settings\n\n\n\n\n#### Endpoint URL\n",
        "tags": [
          "Groups",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of the group to modify.",
                    "type": "string"
                  },
                  "default_liveboard_identifiers": {
                    "description": "ID of the Liveboards to be assigned as default Liveboards to the users in the group.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "description": {
                    "description": "Description for the group.",
                    "type": "string"
                  },
                  "display_name": {
                    "description": "Display name of the group.",
                    "type": "string"
                  },
                  "privileges": {
                    "description": "Privileges to assign to the group.",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "ADMINISTRATION",
                        "AUTHORING",
                        "USERDATAUPLOADING",
                        "DATADOWNLOADING",
                        "USERMANAGEMENT",
                        "DATAMANAGEMENT",
                        "SHAREWITHALL",
                        "JOBSCHEDULING",
                        "A3ANALYSIS",
                        "EXPERIMENTALFEATUREPRIVILEGE",
                        "BYPASSRLS",
                        "RANALYSIS",
                        "DEVELOPER",
                        "USER_ADMINISTRATION",
                        "GROUP_ADMINISTRATION",
                        "SYNCMANAGEMENT",
                        "CAN_CREATE_CATALOG",
                        "DISABLE_PINBOARD_CREATION",
                        "ENABLESPOTAPPCREATION",
                        "LIVEBOARD_VERIFIER",
                        "PREVIEW_THOUGHTSPOT_SAGE"
                      ]
                    }
                  },
                  "sub_group_identifiers": {
                    "description": "GUID or name of the sub groups. A subgroup is a group assigned to a parent group.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "type": {
                    "description": "Type of the group",
                    "type": "string",
                    "enum": [
                      "LOCAL_GROUP",
                      "LDAP_GROUP"
                    ]
                  },
                  "user_identifiers": {
                    "description": "GUID or name of the users to assign to the group.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "visibility": {
                    "description": "Visibility of the group. To make a group visible to other users and\ngroups, set the visibility to SHAREABLE.",
                    "type": "string",
                    "enum": [
                      "SHARABLE",
                      "NON_SHARABLE"
                    ]
                  },
                  "role_identifiers": {
                    "description": "Role identifiers of the roles that should be assigned to the group.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "operation": {
                    "description": "Type of update operation. Default operation type is REPLACE",
                    "default": "REPLACE",
                    "type": "string",
                    "enum": [
                      "ADD",
                      "REMOVE",
                      "REPLACE"
                    ]
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "group_identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "GUID or name of the group."
          }
        ],
        "responses": {
          "204": {
            "description": "User group successfully updated."
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/groups/{group_identifier}/delete": {
      "post": {
        "operationId": "deleteUserGroup",
        "description": "\n <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>\n\nRemoves the specified group object from the ThoughtSpot system.\n\nRequires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.\n\n\n\n\n#### Endpoint URL\n",
        "tags": [
          "Groups",
          "9.0.0.cl"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "group_identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "GUID or name of the group."
          }
        ],
        "responses": {
          "204": {
            "description": "User group successfully deleted."
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/groups/import": {
      "post": {
        "operationId": "importUserGroups",
        "description": "\n <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>\n\nImports group objects from external databases into ThoughtSpot.\n\nRequires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.\n\nDuring the import operation:\n\n* If the specified group is not available in ThoughtSpot, it will be added to ThoughtSpot.\n* If `delete_unspecified_groups` is set to `true`, the groups not specified in the API request, excluding administrator and system user groups, are deleted.\n* If the specified groups are already available in ThoughtSpot, the object properties of these groups are modified and synchronized as per the input data in the API request.\n\nA successful API call returns the object that represents the changes made in the ThoughtSpot system.\n\n\n\n\n#### Endpoint URL\n",
        "tags": [
          "Groups",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "groups": {
                    "description": "Details of groups which are to be imported",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/GroupsImportListInput"
                    }
                  },
                  "delete_unspecified_groups": {
                    "description": "If set to true, removes groups that are not specified in the API request.",
                    "default": false,
                    "type": "boolean",
                    "nullable": true
                  },
                  "dry_run": {
                    "description": "If true, the API performs a test operation and returns user IDs whose\ndata will be edited after the import.",
                    "default": true,
                    "type": "boolean",
                    "nullable": true
                  }
                }
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Import user groups operation successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportUserGroupsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/metadata/tml/import": {
      "post": {
        "operationId": "importMetadataTML",
        "description": "\n <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>\n\nImports [TML](https://docs.thoughtspot.com/cloud/latest/tml) files into ThoughtSpot.\n\nRequires `DATAMANAGEMENT` (**Can manage data**) or `ADMINISTRATION` (**Can administer ThoughtsSpot**) privilege.\n\n#### Usage guidelines\n\n*  Import all related objects in a single TML Import API call. For example, Tables that use the same Connection object and Worksheets connected to these Tables.\n* Include the `fqn` property to distinguish objects that have the same name.\n  For example, if you have multiple Connections or Worksheets with the same name on ThoughtSpot and the Connection or Worksheet referenced in your TML file does not have a unique name to distinguish, it may result in invalid object references.\n  Adding `fqn` helps ThoughtSpot differentiate a Table from another with the same name.\n  We recommend [exporting TML with FQNs](#/http/api-endpoints/metadata/export-metadata-tml) and using these during the import operation.\n* You can upload multiple TML files at a time.\n  If you import a Worksheet along with Liveboards, Answers, and other dependent objects in a single API call, the imported objects will be immediately available for use.\n  When you import only a Worksheet object, it may take some time for the Worksheet to become available in the ThoughtSpot system. Please wait for a few minutes, and then proceed to create an Answer and Liveboard from the newly imported Worksheet.\n\n\n\n\n#### Endpoint URL\n",
        "tags": [
          "Metadata",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata_tmls": {
                    "description": "Details of TML objects.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "import_policy": {
                    "description": "Specifies the import policy for the TML import.",
                    "default": "PARTIAL",
                    "type": "string",
                    "enum": [
                      "PARTIAL",
                      "ALL_OR_NONE",
                      "VALIDATE_ONLY"
                    ]
                  },
                  "create_new": {
                    "description": "If selected, creates TML objects with new GUIDs.",
                    "default": false,
                    "type": "boolean",
                    "nullable": true
                  }
                },
                "required": [
                  "metadata_tmls"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Import metadata objects using specified TMLs is successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/metadata/tml/export": {
      "post": {
        "operationId": "exportMetadataTML",
        "description": "\n <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>\n\nExports the [TML](https://docs.thoughtspot.com/cloud/latest/tml) representation of metadata objects in JSON or YAML format.\n\nRequires `DATAMANAGEMENT` (**Can manage data**) or `ADMINISTRATION` (**Can administer ThoughtsSpot**) privilege.\n\n#### Usage guidelines\n\n* You can export one or several objects by passing metadata object GUIDs in the `metadata` array.\n* When exporting TML content for a Liveboard or Answer object, you can set `export_associated` to `true` to retrieve TML content for underlying Worksheets, Tables, or Views, including the GUID of each object within the headers. When   `export_associated` is set to `true`, consider retrieving one metadata object at a time.\n* Set `export_fqns` to `true` to add FQNs of the referenced objects in the TML content. For example, if you send an API request to retrieve TML for a Liveboard and its associated objects, the API returns the TML content with FQNs of the referenced Worksheet. Exporting TML with FQNs is useful if ThoughtSpot has multiple objects with the same name and you want to eliminate ambiguity when importing TML files into ThoughtSpot. It eliminates the need for adding FQNs of the referenced objects manually during the import operation.\n\n\n\n\n#### Endpoint URL\n",
        "tags": [
          "Metadata",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata": {
                    "description": "Metadata objects.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ExportMetadataTypeInput"
                    }
                  },
                  "export_associated": {
                    "description": "Indicates whether to export associated metadata objects of specified metadata objects.",
                    "default": false,
                    "type": "boolean",
                    "nullable": true
                  },
                  "export_fqn": {
                    "description": "Adds FQNs of the referenced objects. For example, if you are exporting a Liveboard and its associated objects,\nthe API returns the Liveboard TML data with the FQNs of the referenced worksheet.\nIf the exported TML data includes FQNs, you don't need to manually add FQNs of the referenced objects during TML import.",
                    "default": false,
                    "type": "boolean",
                    "nullable": true
                  },
                  "edoc_format": {
                    "description": "TML EDOC content format.",
                    "default": "JSON",
                    "type": "string",
                    "enum": [
                      "JSON",
                      "YAML"
                    ]
                  }
                },
                "required": [
                  "metadata"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Export TMLs of specified metadata objects is successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/metadata/delete": {
      "post": {
        "operationId": "deleteMetadata",
        "description": "\n <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>\n\nRemoves the specified metadata object from the ThoughtSpot system.\n\nRequires edit access to the metadata object or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.\n\n\n\n\n#### Endpoint URL\n",
        "tags": [
          "Metadata",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata": {
                    "description": "Metadata objects.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/DeleteMetadataTypeInput"
                    }
                  },
                  "delete_disabled_objects": {
                    "description": "Indicates whether to delete disabled metadata objects.",
                    "default": false,
                    "type": "boolean",
                    "nullable": true
                  }
                },
                "required": [
                  "metadata"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "204": {
            "description": "Metadata objects successfully deleted."
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/security/metadata/assign": {
      "post": {
        "operationId": "assignChangeAuthor",
        "description": "\n <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>\n\nTransfers the ownership of one or several objects from one user to another.\n\nRequires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.\n\n\n\n\n#### Endpoint URL\n",
        "tags": [
          "Security",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata": {
                    "description": "GUID or name of the metadata object.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AuthorMetadataTypeInput"
                    }
                  },
                  "user_identifier": {
                    "description": "GUID or name of the user who you want to assign as the author.",
                    "type": "string"
                  },
                  "current_owner_identifier": {
                    "description": "GUID or name of the current author.  When defined, the metadata objects\nauthored by the specified owner are filtered for the API operation.",
                    "type": "string"
                  }
                },
                "required": [
                  "metadata",
                  "user_identifier"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "204": {
            "description": "Author assignment for given metadata objects is successful."
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/security/metadata/share": {
      "post": {
        "operationId": "shareMetadata",
        "description": "\n <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>\n\nAllows sharing one or several metadata objects with users and groups in ThoughtSpot.\n\nRequires edit access to the metadata object.\n\nThe API endpoint allows sharing only the following types of metadata objects:\n* Liveboards\n* Visualizations\n* Answers\n* Worksheets\n* Views\n\nYou can provide `READ_ONLY` or `MODIFY` access when sharing an object with another user or group. With `READ_ONLY` access grants view access to the shared object, whereas `MODIFY` provides edit access.\n\nTo prevent a user or group from accessing the shared object, specify the GUID or name of the principal and set `shareMode` to `NO_ACCESS`.\n\n\n\n\n#### Endpoint URL\n",
        "tags": [
          "Security",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata_type": {
                    "description": "Type of metadata.\n1. Liveboard\n2. Answers\n3. LOGICAL_TABLE for any data object such as table, worksheet or view.",
                    "type": "string",
                    "enum": [
                      "LIVEBOARD",
                      "ANSWER",
                      "LOGICAL_TABLE"
                    ]
                  },
                  "metadata_identifiers": {
                    "description": "Unique ID or name of metadata objects.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "permissions": {
                    "description": "Permission details for sharing the objects.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SharePermissionsInput"
                    }
                  },
                  "visualization_identifiers": {
                    "description": "Options to specify details of Liveboard.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "emails": {
                    "description": "Email IDs to which notifications will be sent.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "message": {
                    "description": "Message to be included in notification.",
                    "type": "string"
                  },
                  "enable_custom_url": {
                    "description": "Sends object URLs in the customized format in email notifications.",
                    "default": false,
                    "type": "boolean",
                    "nullable": true
                  }
                },
                "required": [
                  "metadata_identifiers",
                  "permissions",
                  "emails",
                  "message"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "204": {
            "description": "Sharing metadata objects is successful."
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/vcs/git/config/create": {
      "post": {
        "operationId": "createConfig",
        "description": "\n <span class=\"since-beta-tag\">Version: 9.2.0.cl or later</span>\n\nAllows you to connect a ThoughtSpot instance to a Git repository.\n\nRequires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.\n\nYou can use this API endpoint to connect your ThoughtSpot development and production environments to the development and production branches of a Git repository.\n\nBefore using this endpoint to connect your ThoughtSpot instance to a Git repository, check the following prerequisites:\n\n* You have a Git repository. If you are using GitHub, make sure you have a valid account and an access token to connect ThoughtSpot to GitHub. For information about generating a token, see [GitHub Documentation](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens).\n\n* Your access token has `repo` scope that grants full access to public and private repositories.\n* Your Git repository has a branch that can be configured as a default branch in ThoughtSpot.\n\nFor more information, see [Git integration documentation](https://developers.thoughtspot.com/docs/?pageid=git-integration).\n\n\n\n\n#### Endpoint URL\n",
        "tags": [
          "Version Control",
          "9.2.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "repository_url": {
                    "description": "URL for connecting to remote repository",
                    "type": "string"
                  },
                  "username": {
                    "description": "Username to authenticate connection to remote repository",
                    "type": "string"
                  },
                  "access_token": {
                    "description": "Access token corresponding to the user to authenticate connection to remote repository",
                    "type": "string"
                  },
                  "org_identifier": {
                    "description": "   Applicable when Orgs is enabled in the cluster\n   \n\nList of Org ids or name. Provide value -1 for cluster level. Example : [\"OrgID1-or-Name1\", \"OrgID2-or-Name2\"] \n\n\n   \n\nNote: If no value is specified, then the configurations will be returned for all orgs the user has access to  <br/>  <span class=\"since-beta-tag\">Version: 9.5.0.cl or later</span>",
                    "type": "string"
                  },
                  "branch_names": {
                    "description": "List the remote branches to configure. Example:[development, production]",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "commit_branch_name": {
                    "description": "Name of the remote branch where objects from this Thoughtspot instance will be versioned. <br/>  <span class=\"since-beta-tag\">Version: 9.7.0.cl or later</span>",
                    "type": "string"
                  },
                  "default_branch_name": {
                    "description": "   Use commit_branch_name instead.\n   \n\nName of the remote branch where objects from this Thoughtspot instance will be versioned.\n\n\n   \n\n*Deprecated from 10.0.0.cl : Replaced by commit_branch_name* ",
                    "type": "string",
                    "deprecated": true
                  },
                  "enable_guid_mapping": {
                    "description": "Maintain mapping of guid for the deployment to an instance <br/>  <span class=\"since-beta-tag\">Version: 9.4.0.cl or later</span>",
                    "default": true,
                    "type": "boolean",
                    "nullable": true
                  },
                  "configuration_branch_name": {
                    "description": "   Name of the branch where the configuration files related to operations between Thoughtspot and version control repo should be maintained.\n   \n\nNote: If no branch name is specified, then by default, ts_config_files branch is considered. Ensure this branch exists before configuration. <br/>  <span class=\"since-beta-tag\">Version: 9.7.0.cl or later</span>",
                    "type": "string"
                  },
                  "guid_mapping_branch_name": {
                    "description": "   Use configuration_branch_name instead.\n   \n\nName of the branch where the configuration files related to operations between Thoughtspot and version control repo should be maintained.\n\n\n   \n\nNote: If no branch name is specified, then by default, ts_config_files branch is considered. Ensure this branch exists before configuration. \n\n\n   \n\n*Deprecated from 10.0.0.cl : Replaced by configuration_branch_name*  <br/>  <span class=\"since-beta-tag\">Version: 9.4.0.cl or later</span>",
                    "type": "string",
                    "deprecated": true
                  }
                },
                "required": [
                  "repository_url",
                  "username",
                  "access_token"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully configured local repository",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepoConfigObject"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/vcs/git/config/update": {
      "post": {
        "operationId": "updateConfig",
        "description": "\n <span class=\"since-beta-tag\">Version: 9.2.0.cl or later</span>\n\nUpdates Git repository configuration settings.\n\nRequires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.\n\n\n\n\n#### Endpoint URL\n",
        "tags": [
          "Version Control",
          "9.2.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "description": "Username to authenticate connection to version control system",
                    "type": "string"
                  },
                  "access_token": {
                    "description": "Access token corresponding to the user to authenticate connection to version control system",
                    "type": "string"
                  },
                  "org_identifier": {
                    "description": "   Applicable when Orgs is enabled in the cluster\n   \n\nList of Org ids or name. Provide value -1 for cluster level. Example : [\"OrgID1-or-Name1\", \"OrgID2-or-Name2\"] \n\n\n   \n\nNote: If no value is specified, then the configurations will be returned for all orgs the user has access to  <br/>  <span class=\"since-beta-tag\">Version: 9.5.0.cl or later</span>",
                    "type": "string"
                  },
                  "branch_names": {
                    "description": "List the remote branches to configure. Example:[development, production]",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "commit_branch_name": {
                    "description": "Name of the remote branch where objects from this Thoughtspot instance will be versioned. <br/>  <span class=\"since-beta-tag\">Version: 9.7.0.cl or later</span>",
                    "type": "string"
                  },
                  "default_branch_name": {
                    "description": "   Use commit_branch_name instead.\n   \n\nName of the remote branch where objects from this Thoughtspot instance will be versioned.\n\n\n   \n\n*Deprecated from 10.0.0.cl : Replaced by commit_branch_name* ",
                    "type": "string",
                    "deprecated": true
                  },
                  "enable_guid_mapping": {
                    "description": "Maintain mapping of guid for the deployment to an instance <br/>  <span class=\"since-beta-tag\">Version: 9.4.0.cl or later</span>",
                    "type": "boolean",
                    "nullable": true
                  },
                  "configuration_branch_name": {
                    "description": "Name of the branch where the configuration files related to operations between Thoughtspot and version control repo should be maintained. <br/>  <span class=\"since-beta-tag\">Version: 9.7.0.cl or later</span>",
                    "type": "string"
                  },
                  "guid_mapping_branch_name": {
                    "description": "   Use configuration_branch_name instead.\n   \n\nName of the branch where the configuration files related to operations between Thoughtspot and version control repo should be maintained.\n\n\n   \n\n*Deprecated from 10.0.0.cl : Replaced by configuration_branch_name*  <br/>  <span class=\"since-beta-tag\">Version: 9.4.0.cl or later</span>",
                    "type": "string",
                    "deprecated": true
                  }
                }
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully updated local repository configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepoConfigObject"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/vcs/git/config/delete": {
      "post": {
        "operationId": "deleteConfig",
        "description": "\n <span class=\"since-beta-tag\">Version: 9.2.0.cl or later</span>\n\nDeletes Git repository configuration from your ThoughtSpot instance.\n\nRequires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.\n\n\n\n\n#### Endpoint URL\n",
        "tags": [
          "Version Control",
          "9.2.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "cluster_level": {
                    "description": "   Applicable when Orgs is enabled in the cluster\n   \n\nIndicator to consider cluster level or org level config. Set it to false to delete configuration from current org. If set to true, then the configuration at cluster level and orgs that inherited the configuration from cluster level will be deleted.  <br/>  <span class=\"since-beta-tag\">Version: 9.5.0.cl or later</span>",
                    "type": "boolean",
                    "nullable": true
                  }
                }
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "204": {
            "description": "Successfully deleted local repository configuration"
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/vcs/git/branches/commit": {
      "post": {
        "operationId": "commitBranch",
        "description": "\n <span class=\"since-beta-tag\">Version: 9.2.0.cl or later</span>\n\nCommits TML files of metadata objects to the Git branch configured on your instance.\n\nRequires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.\n\nBefore using this endpoint to push your commits:\n\n* Enable Git integration on your instance.\n* Make sure the Git repository and branch details are configured on your instance.\n\nFor more information, see [Git integration documentation](https://developers.thoughtspot.com/docs/?pageid=git-integration).\n\n\n\n\n#### Endpoint URL\n",
        "tags": [
          "Version Control",
          "9.2.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata": {
                    "description": "Metadata objects.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/MetadataObject"
                    }
                  },
                  "delete_aware": {
                    "description": "Delete the tml files from version control repo if it does not exist in the ThoughSpot instance",
                    "default": true,
                    "type": "boolean",
                    "nullable": true
                  },
                  "branch_name": {
                    "description": "   Name of the remote branch where object should be pushed\n   \n\nNote: If no branch_name is specified, then the commit_branch_name will be considered.",
                    "type": "string"
                  },
                  "comment": {
                    "description": "Comment to be added to the commit",
                    "type": "string"
                  }
                },
                "required": [
                  "metadata",
                  "comment"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully committed the metadata objects",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommitResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/vcs/git/commits/{commit_id}/revert": {
      "post": {
        "operationId": "revertCommit",
        "description": "\n <span class=\"since-beta-tag\">Version: 9.2.0.cl or later</span>\n\nReverts TML objects to a previous commit specified in the API request.\n\nRequires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.\n\nIn the API request, specify the `commit_id`. If the branch name is not specified in the request, the API will consider the default branch configured on your instance.\n\nBy default, the API reverts all objects. If the revert operation fails for one of the objects provided in the commit, the API returns an error and does not revert any object.\n\n\n\n\n#### Endpoint URL\n",
        "tags": [
          "Version Control",
          "9.2.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata": {
                    "description": "Metadata objects.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/MetadataObject"
                    }
                  },
                  "branch_name": {
                    "description": "   Name of the branch where the reverted version should be committed\n   \n\nNote: If no branch_name is specified, then the commit_branch_name will be considered.",
                    "type": "string"
                  },
                  "revert_policy": {
                    "description": "Policy to apply when reverting a commit. Valid values: [ALL_OR_NONE, PARTIAL]",
                    "default": "ALL_OR_NONE",
                    "type": "string",
                    "enum": [
                      "ALL_OR_NONE",
                      "PARTIAL"
                    ]
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "commit_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Commit id to which the object should be reverted"
          }
        ],
        "responses": {
          "200": {
            "description": "Reverted the object to the commit point specified",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RevertResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/vcs/git/branches/validate": {
      "post": {
        "operationId": "validateMerge",
        "description": "\n <span class=\"since-beta-tag\">Version: 9.2.0.cl or later</span>\n\nValidates the content of your source branch against the objects in your destination environment.\n\nBefore merging content from your source branch to the destination branch, run this API operation from your destination environment and ensure that the changes from the source branch function in the destination environment.\n\nRequires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.\n\n\n\n\n#### Endpoint URL\n",
        "tags": [
          "Version Control",
          "9.2.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "source_branch_name": {
                    "description": "Name of the branch from which changes need to be picked for validation",
                    "type": "string"
                  },
                  "target_branch_name": {
                    "description": "Name of the branch where files will be merged",
                    "type": "string"
                  }
                },
                "required": [
                  "source_branch_name",
                  "target_branch_name"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "validation done successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeployResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/vcs/git/commits/deploy": {
      "post": {
        "operationId": "deployCommit",
        "description": "\n <span class=\"since-beta-tag\">Version: 9.2.0.cl or later</span>\n\nAllows you to deploy a commit and publish TML content to your ThoughtSpot instance.\n\nRequires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.\n\nThe API deploys the head of the branch unless a `commit_id` is specified in the API request. If the branch name is not defined in the request, the default branch is considered for deploying commits.\n\n\n\n\n#### Endpoint URL\n",
        "tags": [
          "Version Control",
          "9.2.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "commit_id": {
                    "description": "   Commit_id against which the files should be picked to deploy.\n   \n\nNote: If no commit_id is specified, then the head of the branch is considered.",
                    "type": "string"
                  },
                  "branch_name": {
                    "description": "Name of the remote branch where changes should be picked",
                    "type": "string"
                  },
                  "deploy_type": {
                    "description": "Indicates if all files or only modified file at specified commit point should be considered",
                    "default": "DELTA",
                    "type": "string",
                    "enum": [
                      "FULL",
                      "DELTA"
                    ]
                  },
                  "deploy_policy": {
                    "description": "Define the policy to follow while importing TML in the ThoughtSpot environment. Use “ALL_OR_NONE” to cancel the deployment of all ThoughtSpot objects if at least one of them fails to import. Use “Partial” to import ThoughtSpot objects that validate successfully even if other objects in the same deploy operations fail to import.",
                    "default": "ALL_OR_NONE",
                    "type": "string",
                    "enum": [
                      "ALL_OR_NONE",
                      "PARTIAL",
                      "VALIDATE_ONLY"
                    ]
                  }
                },
                "required": [
                  "branch_name"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully deployed the changes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeployResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/connection/create": {
      "post": {
        "operationId": "createConnection",
        "description": "\n <span class=\"since-beta-tag\">Version: 9.2.0.cl or later</span>\n\nCreates a connection to a data warehouse for live query services.  \n\nRequires `DATAMANAGEMENT` (**Can manage data**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.\n\n#### Create a connection without tables\n\nTo create a connection without tables:\n\n1. Pass these parameters in your API request.\n * Name of the connection.\n * Type of the data warehouse to connect to.\n * A JSON map of configuration attributes in `data_warehouse_config`. The following example shows the configuration attributes for a SnowFlake connection:\n  ```\n  {\n     \"configuration\":{\n        \"accountName\":\"thoughtspot_partner\",\n        \"user\":\"tsadmin\",\n        \"password\":\"TestConn123\",\n        \"role\":\"sysadmin\",\n        \"warehouse\":\"MEDIUM_WH\"\n     },\n     \"externalDatabases\":[\n\n     ]\n  }\n  ```\n2. Set `validate` to `false`.\n\n#### Create a connection with tables\n\nTo create a connection with tables:\n\n1. Pass these parameters in your API request.\n * Name of the connection.\n * Type of the data warehouse to connect to.\n * A JSON map of configuration attributes, database details, and table properties in `data_warehouse_config` as shown in the following example:\n  ```\n  {\n     \"configuration\":{\n        \"accountName\":\"thoughtspot_partner\",\n        \"user\":\"tsadmin\",\n        \"password\":\"TestConn123\",\n        \"role\":\"sysadmin\",\n        \"warehouse\":\"MEDIUM_WH\"\n     },\n     \"externalDatabases\":[\n        {\n           \"name\":\"AllDatatypes\",\n           \"isAutoCreated\":false,\n           \"schemas\":[\n              {\n                 \"name\":\"alldatatypes\",\n                 \"tables\":[\n                    {\n                       \"name\":\"allDatatypes\",\n                       \"type\":\"TABLE\",\n                       \"description\":\"\",\n                       \"selected\":true,\n                       \"linked\":true,\n                       \"columns\":[\n                          {\n                             \"name\":\"CNUMBER\",\n                             \"type\":\"INT64\",\n                             \"canImport\":true,\n                             \"selected\":true,\n                             \"isLinkedActive\":true,\n                             \"isImported\":false,\n                             \"tableName\":\"allDatatypes\",\n                             \"schemaName\":\"alldatatypes\",\n                             \"dbName\":\"AllDatatypes\"\n                          },\n                          {\n                             \"name\":\"CDECIMAL\",\n                             \"type\":\"INT64\",\n                             \"canImport\":true,\n                             \"selected\":true,\n                             \"isLinkedActive\":true,\n                             \"isImported\":false,\n                             \"tableName\":\"allDatatypes\",\n                             \"schemaName\":\"alldatatypes\",\n                             \"dbName\":\"AllDatatypes\"\n                          }\n                       ]\n                    }\n                 ]\n              }\n           ]\n        }\n     ]\n  }\n  ```\n2. Set `validate` to `true`.\n\n\n\n\n#### Endpoint URL\n",
        "tags": [
          "Connections",
          "9.2.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Unique name for the connection.",
                    "type": "string"
                  },
                  "description": {
                    "description": "Description of the connection.",
                    "type": "string"
                  },
                  "data_warehouse_type": {
                    "description": "Type of the data warehouse.",
                    "type": "string",
                    "enum": [
                      "SNOWFLAKE",
                      "AMAZON_REDSHIFT",
                      "GOOGLE_BIGQUERY",
                      "AZURE_SYNAPSE",
                      "TERADATA",
                      "SAP_HANA",
                      "STARBURST",
                      "ORACLE_ADW",
                      "DATABRICKS",
                      "DENODO",
                      "DREMIO",
                      "TRINO",
                      "PRESTO",
                      "POSTGRES",
                      "SQLSERVER",
                      "MYSQL",
                      "GENERIC_JDBC",
                      "AMAZON_RDS_POSTGRESQL",
                      "AMAZON_AURORA_POSTGRESQL",
                      "AMAZON_RDS_MYSQL",
                      "AMAZON_AURORA_MYSQL",
                      "LOOKER",
                      "AMAZON_ATHENA",
                      "SINGLESTORE",
                      "GCP_SQLSERVER",
                      "GCP_ALLOYDB_POSTGRESQL",
                      "GCP_POSTGRESQL",
                      "GCP_MYSQL"
                    ]
                  },
                  "data_warehouse_config": {
                    "description": "Connection configuration attributes in JSON format. To create a connection with tables, include table attributes. See the documentation above for sample JSON.",
                    "type": "object"
                  },
                  "validate": {
                    "description": "Validates the connection metadata if tables are included. If you are creating a connection without tables, specify `false`.",
                    "default": true,
                    "type": "boolean",
                    "nullable": true
                  }
                },
                "required": [
                  "name",
                  "data_warehouse_type",
                  "data_warehouse_config"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Connection to the datasource successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateConnectionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/connection/delete": {
      "post": {
        "operationId": "deleteConnection",
        "description": "\n <span class=\"since-beta-tag\">Version: 9.2.0.cl or later</span>\n\nDeletes a connection object.\n\n**Note**: If a connection has dependent objects, make sure you remove its associations before the delete operation.\n\nRequires `DATAMANAGEMENT` (**Can manage data**) and edit permissions to the connection object, or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.\n\n\n\n\n#### Endpoint URL\n",
        "tags": [
          "Connections",
          "9.2.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "connection_identifier": {
                    "description": "Unique ID or name of the connection.",
                    "type": "string"
                  }
                },
                "required": [
                  "connection_identifier"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "204": {
            "description": "Connection successfully deleted."
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/connection/update": {
      "post": {
        "operationId": "updateConnection",
        "description": "\n <span class=\"since-beta-tag\">Version: 9.2.0.cl or later</span>\n\nUpdates a connection object.  \n\nRequires `DATAMANAGEMENT` (**Can manage data**) and edit permissions to the connection object, or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.\n\nTo update a connection object, pass these parameters in your API request:\n\n1. GUID of the connection object.\n2. If you are updating tables or database schema of a connection object:\n   a. Add the updated JSON map of metadata with database, schema, and tables in `data_warehouse_config`.\n   b. Set `validate` to `true`.\n3. If you are updating a configuration attribute, connection name, or description, you can set `validate` to `false`.\n\n\n\n\n#### Endpoint URL\n",
        "tags": [
          "Connections",
          "9.2.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "connection_identifier": {
                    "description": "Unique ID or name of the connection.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Updated name of the connection.",
                    "type": "string"
                  },
                  "description": {
                    "description": "Updated description of the connection.",
                    "type": "string"
                  },
                  "data_warehouse_config": {
                    "description": "Configuration of the data warehouse in JSON.",
                    "type": "object"
                  },
                  "validate": {
                    "description": "Indicates whether to validate the connection details.",
                    "default": true,
                    "type": "boolean",
                    "nullable": true
                  }
                },
                "required": [
                  "connection_identifier"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "204": {
            "description": "Connection successfully updated."
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/connections/fetch-connection-diff-status/{connection_identifier}": {
      "post": {
        "operationId": "fetchConnectionDiffStatus",
        "description": "\n <span class=\"since-beta-tag\">Version: 9.9.0.cl or later</span>\n\nValidates the difference in connection metadata between CDW and ThoughtSpot\n\nRequires `DATAMANAGEMENT` (**Can manage data**) privilege\n\nReturns a boolean indicating whether there is any difference between the connection metadata at ThoughtSpot and CDW.\n\nTo get the connection metadata difference status, pass the connection GUID as `connection_identifier` in the API request.\n\n\n\n\n#### Endpoint URL\n",
        "tags": [
          "Connections",
          "9.9.0.cl"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "connection_identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "GUID of the connection"
          }
        ],
        "responses": {
          "200": {
            "description": "true/false",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FetchConnectionDiffStatusResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/connections/download-connection-metadata-changes/{connection_identifier}": {
      "post": {
        "operationId": "downloadConnectionMetadataChanges",
        "description": "\n <span class=\"since-beta-tag\">Version: 9.9.0.cl or later</span>\n\nExports the difference in connection metadata between CDW and ThoughtSpot\n\nRequires `DATAMANAGEMENT` (**Can manage data**) privilege\n\nTo download the connection metadata difference between ThoughtSpot and CDW, pass the connection GUID as `connection_identifier` in the API request.\n\n\n\n\n#### Endpoint URL\n",
        "tags": [
          "Connections",
          "9.9.0.cl"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "connection_identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "GUID of the connection"
          }
        ],
        "responses": {
          "200": {
            "description": "Export metadata changes.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/roles/create": {
      "post": {
        "operationId": "createRole",
        "description": "Creates a Role.\nRequires cluster Administration or Role Administration privileges. <br/>  <span class=\"since-beta-tag\">Version: 9.5.0.cl or later</span>",
        "tags": [
          "Roles",
          "9.5.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Unique name of the role.",
                    "type": "string"
                  },
                  "description": {
                    "description": "Description of the role.",
                    "type": "string"
                  },
                  "privileges": {
                    "description": "Privileges granted to the role.",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "USERDATAUPLOADING",
                        "DATADOWNLOADING",
                        "DATAMANAGEMENT",
                        "SHAREWITHALL",
                        "JOBSCHEDULING",
                        "A3ANALYSIS",
                        "EXPERIMENTALFEATUREPRIVILEGE",
                        "BYPASSRLS",
                        "DISABLE_PINBOARD_CREATION",
                        "DEVELOPER",
                        "APPLICATION_ADMINISTRATION",
                        "USER_ADMINISTRATION",
                        "GROUP_ADMINISTRATION",
                        "SYSTEM_INFO_ADMINISTRATION",
                        "SYNCMANAGEMENT",
                        "ORG_ADMINISTRATION",
                        "ROLE_ADMINISTRATION",
                        "AUTHENTICATION_ADMINISTRATION",
                        "BILLING_INFO_ADMINISTRATION",
                        "CAN_MANAGE_CUSTOM_CALENDAR",
                        "CAN_CREATE_OR_EDIT_CONNECTIONS",
                        "CAN_CONFIGURE_CONNECTIONS",
                        "CAN_MANAGE_WORKSHEET_VIEWS_TABLES"
                      ]
                    }
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Role successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/roles/{role_identifier}/update": {
      "post": {
        "operationId": "updateRole",
        "description": "Updates a Role.\nRequires cluster Administration or Role Administration privileges. <br/>  <span class=\"since-beta-tag\">Version: 9.5.0.cl or later</span>",
        "tags": [
          "Roles",
          "9.5.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of the Role.",
                    "type": "string"
                  },
                  "description": {
                    "description": "Description of the Role",
                    "type": "string"
                  },
                  "privileges": {
                    "description": "Privileges granted to the role.",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "USERDATAUPLOADING",
                        "DATADOWNLOADING",
                        "DATAMANAGEMENT",
                        "SHAREWITHALL",
                        "JOBSCHEDULING",
                        "A3ANALYSIS",
                        "EXPERIMENTALFEATUREPRIVILEGE",
                        "BYPASSRLS",
                        "DISABLE_PINBOARD_CREATION",
                        "DEVELOPER",
                        "APPLICATION_ADMINISTRATION",
                        "USER_ADMINISTRATION",
                        "GROUP_ADMINISTRATION",
                        "SYSTEM_INFO_ADMINISTRATION",
                        "SYNCMANAGEMENT",
                        "ORG_ADMINISTRATION",
                        "ROLE_ADMINISTRATION",
                        "AUTHENTICATION_ADMINISTRATION",
                        "BILLING_INFO_ADMINISTRATION",
                        "CAN_MANAGE_CUSTOM_CALENDAR",
                        "CAN_CREATE_OR_EDIT_CONNECTIONS",
                        "CAN_CONFIGURE_CONNECTIONS",
                        "CAN_MANAGE_WORKSHEET_VIEWS_TABLES"
                      ]
                    }
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [
          {
            "in": "path",
            "name": "role_identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique ID or name of the role."
          }
        ],
        "responses": {
          "200": {
            "description": "Role successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/roles/{role_identifier}/delete": {
      "post": {
        "operationId": "deleteRole",
        "description": "Deletes a Role.\nRequires cluster Administration or Role Administration privileges. <br/>  <span class=\"since-beta-tag\">Version: 9.5.0.cl or later</span>",
        "tags": [
          "Roles",
          "9.5.0.cl"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "role_identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique ID or name of the role."
          }
        ],
        "responses": {
          "204": {
            "description": "Role successfully deleted."
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/schedules/create": {
      "post": {
        "operationId": "createSchedule",
        "description": "\nCreate schedule. <br/>  <span class=\"since-beta-tag\">Version: 9.4.0.cl or later</span>\n\nCreates a Liveboard schedule job.\n\nRequires at least edit access to Liveboards. To create a schedule on behalf of another user, you need  `ADMINISTRATION` (**Can administer Org**) or `JOBSCHEDULING` (**Can schedule for others**) privilege and edit access to the Liveboard.\n\n#### Usage guidelines\n\n* The description text is mandatory.  The description text appears as **Description: <your content>** in the Liveboard schedule email notifications.\n* The API endpoint supports exporting Liveboard data to the recipients in CSV or PDF format. If your Liveboard has tables, you can set `file_format` to CSV to send CSV files in the email notification to the recipients. For PDF generation, you can define PDF layout options.\n* To include only specific visualizations, specify the visualization GUIDs in the `visualization_identifiers` array.\n* You can schedule a Liveboard job to run periodically by setting frequency parameters. You can set the schedule to run daily, weekly, monthly or every n minutes or hours. The scheduled job can also be configured to run at a specific time of the day or on specific days of the week or month.\n* If the `frequency` parameters are defined, you can set the time zone to a value that matches your server's time zone. For example, `US/Central`, `Etc/UTC`, `CET`. The default time zone is `America/Los_Angeles`.\n\nFor more information about Liveboard jobs, see [ThoughtSpot Product Documentation](https://docs.thoughtspot.com/cloud/latest/liveboard-schedule).\n\n\n\n\n#### Endpoint URL\n",
        "tags": [
          "Schedules",
          "9.4.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of the scheduled job.",
                    "type": "string"
                  },
                  "description": {
                    "description": "Description of the job.",
                    "type": "string"
                  },
                  "metadata_type": {
                    "description": "Type of the metadata object.",
                    "type": "string",
                    "enum": [
                      "LIVEBOARD"
                    ]
                  },
                  "metadata_identifier": {
                    "description": "Unique ID or name of the metadata object.",
                    "type": "string"
                  },
                  "file_format": {
                    "description": "Export file format.",
                    "default": "PDF",
                    "type": "string",
                    "enum": [
                      "CSV",
                      "PDF"
                    ]
                  },
                  "liveboard_options": {
                    "description": "Options to specify details of Liveboard.",
                    "$ref": "#/components/schemas/LiveboardOptionsInput"
                  },
                  "pdf_options": {
                    "description": "PDF layout and orientation settings. Applicable only if the `file_format` is specified as `PDF`.",
                    "$ref": "#/components/schemas/SchedulesPdfOptionsInput"
                  },
                  "time_zone": {
                    "description": "Time zone",
                    "default": "America/Los_Angeles",
                    "type": "string",
                    "enum": [
                      "Africa/Abidjan",
                      "Africa/Accra",
                      "Africa/Addis_Ababa",
                      "Africa/Algiers",
                      "Africa/Asmara",
                      "Africa/Asmera",
                      "Africa/Bamako",
                      "Africa/Bangui",
                      "Africa/Banjul",
                      "Africa/Bissau",
                      "Africa/Blantyre",
                      "Africa/Brazzaville",
                      "Africa/Bujumbura",
                      "Africa/Cairo",
                      "Africa/Casablanca",
                      "Africa/Ceuta",
                      "Africa/Conakry",
                      "Africa/Dakar",
                      "Africa/Dar_es_Salaam",
                      "Africa/Djibouti",
                      "Africa/Douala",
                      "Africa/El_Aaiun",
                      "Africa/Freetown",
                      "Africa/Gaborone",
                      "Africa/Harare",
                      "Africa/Johannesburg",
                      "Africa/Juba",
                      "Africa/Kampala",
                      "Africa/Khartoum",
                      "Africa/Kigali",
                      "Africa/Kinshasa",
                      "Africa/Lagos",
                      "Africa/Libreville",
                      "Africa/Lome",
                      "Africa/Luanda",
                      "Africa/Lubumbashi",
                      "Africa/Lusaka",
                      "Africa/Malabo",
                      "Africa/Maputo",
                      "Africa/Maseru",
                      "Africa/Mbabane",
                      "Africa/Mogadishu",
                      "Africa/Monrovia",
                      "Africa/Nairobi",
                      "Africa/Ndjamena",
                      "Africa/Niamey",
                      "Africa/Nouakchott",
                      "Africa/Ouagadougou",
                      "Africa/Porto-Novo",
                      "Africa/Sao_Tome",
                      "Africa/Timbuktu",
                      "Africa/Tripoli",
                      "Africa/Tunis",
                      "Africa/Windhoek",
                      "America/Adak",
                      "America/Anchorage",
                      "America/Anguilla",
                      "America/Antigua",
                      "America/Araguaina",
                      "America/Argentina/Buenos_Aires",
                      "America/Argentina/Catamarca",
                      "America/Argentina/ComodRivadavia",
                      "America/Argentina/Cordoba",
                      "America/Argentina/Jujuy",
                      "America/Argentina/La_Rioja",
                      "America/Argentina/Mendoza",
                      "America/Argentina/Rio_Gallegos",
                      "America/Argentina/Salta",
                      "America/Argentina/San_Juan",
                      "America/Argentina/San_Luis",
                      "America/Argentina/Tucuman",
                      "America/Argentina/Ushuaia",
                      "America/Aruba",
                      "America/Asuncion",
                      "America/Atikokan",
                      "America/Atka",
                      "America/Bahia",
                      "America/Bahia_Banderas",
                      "America/Barbados",
                      "America/Belem",
                      "America/Belize",
                      "America/Blanc-Sablon",
                      "America/Boa_Vista",
                      "America/Bogota",
                      "America/Boise",
                      "America/Buenos_Aires",
                      "America/Cambridge_Bay",
                      "America/Campo_Grande",
                      "America/Cancun",
                      "America/Caracas",
                      "America/Catamarca",
                      "America/Cayenne",
                      "America/Cayman",
                      "America/Chicago",
                      "America/Chihuahua",
                      "America/Coral_Harbour",
                      "America/Cordoba",
                      "America/Costa_Rica",
                      "America/Creston",
                      "America/Cuiaba",
                      "America/Curacao",
                      "America/Danmarkshavn",
                      "America/Dawson",
                      "America/Dawson_Creek",
                      "America/Denver",
                      "America/Detroit",
                      "America/Dominica",
                      "America/Edmonton",
                      "America/Eirunepe",
                      "America/El_Salvador",
                      "America/Ensenada",
                      "America/Fort_Nelson",
                      "America/Fort_Wayne",
                      "America/Fortaleza",
                      "America/Glace_Bay",
                      "America/Godthab",
                      "America/Goose_Bay",
                      "America/Grand_Turk",
                      "America/Grenada",
                      "America/Guadeloupe",
                      "America/Guatemala",
                      "America/Guayaquil",
                      "America/Guyana",
                      "America/Halifax",
                      "America/Havana",
                      "America/Hermosillo",
                      "America/Indiana/Indianapolis",
                      "America/Indiana/Knox",
                      "America/Indiana/Marengo",
                      "America/Indiana/Petersburg",
                      "America/Indiana/Tell_City",
                      "America/Indiana/Vevay",
                      "America/Indiana/Vincennes",
                      "America/Indiana/Winamac",
                      "America/Indianapolis",
                      "America/Inuvik",
                      "America/Iqaluit",
                      "America/Jamaica",
                      "America/Jujuy",
                      "America/Juneau",
                      "America/Kentucky/Louisville",
                      "America/Kentucky/Monticello",
                      "America/Knox_IN",
                      "America/Kralendijk",
                      "America/La_Paz",
                      "America/Lima",
                      "America/Los_Angeles",
                      "America/Louisville",
                      "America/Lower_Princes",
                      "America/Maceio",
                      "America/Managua",
                      "America/Manaus",
                      "America/Marigot",
                      "America/Martinique",
                      "America/Matamoros",
                      "America/Mazatlan",
                      "America/Mendoza",
                      "America/Menominee",
                      "America/Merida",
                      "America/Metlakatla",
                      "America/Mexico_City",
                      "America/Miquelon",
                      "America/Moncton",
                      "America/Monterrey",
                      "America/Montevideo",
                      "America/Montreal",
                      "America/Montserrat",
                      "America/Nassau",
                      "America/New_York",
                      "America/Nipigon",
                      "America/Nome",
                      "America/Noronha",
                      "America/North_Dakota/Beulah",
                      "America/North_Dakota/Center",
                      "America/North_Dakota/New_Salem",
                      "America/Nuuk",
                      "America/Ojinaga",
                      "America/Panama",
                      "America/Pangnirtung",
                      "America/Paramaribo",
                      "America/Phoenix",
                      "America/Port-au-Prince",
                      "America/Port_of_Spain",
                      "America/Porto_Acre",
                      "America/Porto_Velho",
                      "America/Puerto_Rico",
                      "America/Punta_Arenas",
                      "America/Rainy_River",
                      "America/Rankin_Inlet",
                      "America/Recife",
                      "America/Regina",
                      "America/Resolute",
                      "America/Rio_Branco",
                      "America/Rosario",
                      "America/Santa_Isabel",
                      "America/Santarem",
                      "America/Santiago",
                      "America/Santo_Domingo",
                      "America/Sao_Paulo",
                      "America/Scoresbysund",
                      "America/Shiprock",
                      "America/Sitka",
                      "America/St_Barthelemy",
                      "America/St_Johns",
                      "America/St_Kitts",
                      "America/St_Lucia",
                      "America/St_Thomas",
                      "America/St_Vincent",
                      "America/Swift_Current",
                      "America/Tegucigalpa",
                      "America/Thule",
                      "America/Thunder_Bay",
                      "America/Tijuana",
                      "America/Toronto",
                      "America/Tortola",
                      "America/Vancouver",
                      "America/Virgin",
                      "America/Whitehorse",
                      "America/Winnipeg",
                      "America/Yakutat",
                      "America/Yellowknife",
                      "Antarctica/Casey",
                      "Antarctica/Davis",
                      "Antarctica/DumontDUrville",
                      "Antarctica/Macquarie",
                      "Antarctica/Mawson",
                      "Antarctica/McMurdo",
                      "Antarctica/Palmer",
                      "Antarctica/Rothera",
                      "Antarctica/South_Pole",
                      "Antarctica/Syowa",
                      "Antarctica/Troll",
                      "Antarctica/Vostok",
                      "Arctic/Longyearbyen",
                      "Asia/Aden",
                      "Asia/Almaty",
                      "Asia/Amman",
                      "Asia/Anadyr",
                      "Asia/Aqtau",
                      "Asia/Aqtobe",
                      "Asia/Ashgabat",
                      "Asia/Ashkhabad",
                      "Asia/Atyrau",
                      "Asia/Baghdad",
                      "Asia/Bahrain",
                      "Asia/Baku",
                      "Asia/Bangkok",
                      "Asia/Barnaul",
                      "Asia/Beirut",
                      "Asia/Bishkek",
                      "Asia/Brunei",
                      "Asia/Calcutta",
                      "Asia/Chita",
                      "Asia/Choibalsan",
                      "Asia/Chongqing",
                      "Asia/Chungking",
                      "Asia/Colombo",
                      "Asia/Dacca",
                      "Asia/Damascus",
                      "Asia/Dhaka",
                      "Asia/Dili",
                      "Asia/Dubai",
                      "Asia/Dushanbe",
                      "Asia/Famagusta",
                      "Asia/Gaza",
                      "Asia/Harbin",
                      "Asia/Hebron",
                      "Asia/Ho_Chi_Minh",
                      "Asia/Hong_Kong",
                      "Asia/Hovd",
                      "Asia/Irkutsk",
                      "Asia/Istanbul",
                      "Asia/Jakarta",
                      "Asia/Jayapura",
                      "Asia/Jerusalem",
                      "Asia/Kabul",
                      "Asia/Kamchatka",
                      "Asia/Karachi",
                      "Asia/Kashgar",
                      "Asia/Kathmandu",
                      "Asia/Katmandu",
                      "Asia/Khandyga",
                      "Asia/Kolkata",
                      "Asia/Krasnoyarsk",
                      "Asia/Kuala_Lumpur",
                      "Asia/Kuching",
                      "Asia/Kuwait",
                      "Asia/Macao",
                      "Asia/Macau",
                      "Asia/Magadan",
                      "Asia/Makassar",
                      "Asia/Manila",
                      "Asia/Muscat",
                      "Asia/Nicosia",
                      "Asia/Novokuznetsk",
                      "Asia/Novosibirsk",
                      "Asia/Omsk",
                      "Asia/Oral",
                      "Asia/Phnom_Penh",
                      "Asia/Pontianak",
                      "Asia/Pyongyang",
                      "Asia/Qatar",
                      "Asia/Qostanay",
                      "Asia/Qyzylorda",
                      "Asia/Rangoon",
                      "Asia/Riyadh",
                      "Asia/Saigon",
                      "Asia/Sakhalin",
                      "Asia/Samarkand",
                      "Asia/Seoul",
                      "Asia/Shanghai",
                      "Asia/Singapore",
                      "Asia/Srednekolymsk",
                      "Asia/Taipei",
                      "Asia/Tashkent",
                      "Asia/Tbilisi",
                      "Asia/Tehran",
                      "Asia/Tel_Aviv",
                      "Asia/Thimbu",
                      "Asia/Thimphu",
                      "Asia/Tokyo",
                      "Asia/Tomsk",
                      "Asia/Ujung_Pandang",
                      "Asia/Ulaanbaatar",
                      "Asia/Ulan_Bator",
                      "Asia/Urumqi",
                      "Asia/Ust-Nera",
                      "Asia/Vientiane",
                      "Asia/Vladivostok",
                      "Asia/Yakutsk",
                      "Asia/Yangon",
                      "Asia/Yekaterinburg",
                      "Asia/Yerevan",
                      "Atlantic/Azores",
                      "Atlantic/Bermuda",
                      "Atlantic/Canary",
                      "Atlantic/Cape_Verde",
                      "Atlantic/Faeroe",
                      "Atlantic/Faroe",
                      "Atlantic/Jan_Mayen",
                      "Atlantic/Madeira",
                      "Atlantic/Reykjavik",
                      "Atlantic/South_Georgia",
                      "Atlantic/St_Helena",
                      "Atlantic/Stanley",
                      "Australia/ACT",
                      "Australia/Adelaide",
                      "Australia/Brisbane",
                      "Australia/Broken_Hill",
                      "Australia/Canberra",
                      "Australia/Currie",
                      "Australia/Darwin",
                      "Australia/Eucla",
                      "Australia/Hobart",
                      "Australia/LHI",
                      "Australia/Lindeman",
                      "Australia/Lord_Howe",
                      "Australia/Melbourne",
                      "Australia/NSW",
                      "Australia/North",
                      "Australia/Perth",
                      "Australia/Queensland",
                      "Australia/South",
                      "Australia/Sydney",
                      "Australia/Tasmania",
                      "Australia/Victoria",
                      "Australia/West",
                      "Australia/Yancowinna",
                      "Brazil/Acre",
                      "Brazil/DeNoronha",
                      "Brazil/East",
                      "Brazil/West",
                      "CET",
                      "CST6CDT",
                      "Canada/Atlantic",
                      "Canada/Central",
                      "Canada/Eastern",
                      "Canada/Mountain",
                      "Canada/Newfoundland",
                      "Canada/Pacific",
                      "Canada/Saskatchewan",
                      "Canada/Yukon",
                      "Chile/Continental",
                      "Chile/EasterIsland",
                      "Cuba",
                      "EET",
                      "EST5EDT",
                      "Egypt",
                      "Eire",
                      "Etc/GMT",
                      "Etc/GMT+0",
                      "Etc/GMT+1",
                      "Etc/GMT+10",
                      "Etc/GMT+11",
                      "Etc/GMT+12",
                      "Etc/GMT+2",
                      "Etc/GMT+3",
                      "Etc/GMT+4",
                      "Etc/GMT+5",
                      "Etc/GMT+6",
                      "Etc/GMT+7",
                      "Etc/GMT+8",
                      "Etc/GMT+9",
                      "Etc/GMT-0",
                      "Etc/GMT-1",
                      "Etc/GMT-10",
                      "Etc/GMT-11",
                      "Etc/GMT-12",
                      "Etc/GMT-13",
                      "Etc/GMT-14",
                      "Etc/GMT-2",
                      "Etc/GMT-3",
                      "Etc/GMT-4",
                      "Etc/GMT-5",
                      "Etc/GMT-6",
                      "Etc/GMT-7",
                      "Etc/GMT-8",
                      "Etc/GMT-9",
                      "Etc/GMT0",
                      "Etc/Greenwich",
                      "Etc/UCT",
                      "Etc/UTC",
                      "Etc/Universal",
                      "Etc/Zulu",
                      "Europe/Amsterdam",
                      "Europe/Andorra",
                      "Europe/Astrakhan",
                      "Europe/Athens",
                      "Europe/Belfast",
                      "Europe/Belgrade",
                      "Europe/Berlin",
                      "Europe/Bratislava",
                      "Europe/Brussels",
                      "Europe/Bucharest",
                      "Europe/Budapest",
                      "Europe/Busingen",
                      "Europe/Chisinau",
                      "Europe/Copenhagen",
                      "Europe/Dublin",
                      "Europe/Gibraltar",
                      "Europe/Guernsey",
                      "Europe/Helsinki",
                      "Europe/Isle_of_Man",
                      "Europe/Istanbul",
                      "Europe/Jersey",
                      "Europe/Kaliningrad",
                      "Europe/Kiev",
                      "Europe/Kirov",
                      "Europe/Kyiv",
                      "Europe/Lisbon",
                      "Europe/Ljubljana",
                      "Europe/London",
                      "Europe/Luxembourg",
                      "Europe/Madrid",
                      "Europe/Malta",
                      "Europe/Mariehamn",
                      "Europe/Minsk",
                      "Europe/Monaco",
                      "Europe/Moscow",
                      "Europe/Nicosia",
                      "Europe/Oslo",
                      "Europe/Paris",
                      "Europe/Podgorica",
                      "Europe/Prague",
                      "Europe/Riga",
                      "Europe/Rome",
                      "Europe/Samara",
                      "Europe/San_Marino",
                      "Europe/Sarajevo",
                      "Europe/Saratov",
                      "Europe/Simferopol",
                      "Europe/Skopje",
                      "Europe/Sofia",
                      "Europe/Stockholm",
                      "Europe/Tallinn",
                      "Europe/Tirane",
                      "Europe/Tiraspol",
                      "Europe/Ulyanovsk",
                      "Europe/Uzhgorod",
                      "Europe/Vaduz",
                      "Europe/Vatican",
                      "Europe/Vienna",
                      "Europe/Vilnius",
                      "Europe/Volgograd",
                      "Europe/Warsaw",
                      "Europe/Zagreb",
                      "Europe/Zaporozhye",
                      "Europe/Zurich",
                      "GB",
                      "GB-Eire",
                      "GMT",
                      "GMT0",
                      "Greenwich",
                      "Hongkong",
                      "Iceland",
                      "Indian/Antananarivo",
                      "Indian/Chagos",
                      "Indian/Christmas",
                      "Indian/Cocos",
                      "Indian/Comoro",
                      "Indian/Kerguelen",
                      "Indian/Mahe",
                      "Indian/Maldives",
                      "Indian/Mauritius",
                      "Indian/Mayotte",
                      "Indian/Reunion",
                      "Iran",
                      "Israel",
                      "Jamaica",
                      "Japan",
                      "Kwajalein",
                      "Libya",
                      "MET",
                      "MST7MDT",
                      "Mexico/BajaNorte",
                      "Mexico/BajaSur",
                      "Mexico/General",
                      "NZ",
                      "NZ-CHAT",
                      "Navajo",
                      "PRC",
                      "PST8PDT",
                      "Pacific/Apia",
                      "Pacific/Auckland",
                      "Pacific/Bougainville",
                      "Pacific/Chatham",
                      "Pacific/Chuuk",
                      "Pacific/Easter",
                      "Pacific/Efate",
                      "Pacific/Enderbury",
                      "Pacific/Fakaofo",
                      "Pacific/Fiji",
                      "Pacific/Funafuti",
                      "Pacific/Galapagos",
                      "Pacific/Gambier",
                      "Pacific/Guadalcanal",
                      "Pacific/Guam",
                      "Pacific/Honolulu",
                      "Pacific/Johnston",
                      "Pacific/Kanton",
                      "Pacific/Kiritimati",
                      "Pacific/Kosrae",
                      "Pacific/Kwajalein",
                      "Pacific/Majuro",
                      "Pacific/Marquesas",
                      "Pacific/Midway",
                      "Pacific/Nauru",
                      "Pacific/Niue",
                      "Pacific/Norfolk",
                      "Pacific/Noumea",
                      "Pacific/Pago_Pago",
                      "Pacific/Palau",
                      "Pacific/Pitcairn",
                      "Pacific/Pohnpei",
                      "Pacific/Ponape",
                      "Pacific/Port_Moresby",
                      "Pacific/Rarotonga",
                      "Pacific/Saipan",
                      "Pacific/Samoa",
                      "Pacific/Tahiti",
                      "Pacific/Tarawa",
                      "Pacific/Tongatapu",
                      "Pacific/Truk",
                      "Pacific/Wake",
                      "Pacific/Wallis",
                      "Pacific/Yap",
                      "Poland",
                      "Portugal",
                      "ROK",
                      "Singapore",
                      "SystemV/AST4",
                      "SystemV/AST4ADT",
                      "SystemV/CST6",
                      "SystemV/CST6CDT",
                      "SystemV/EST5",
                      "SystemV/EST5EDT",
                      "SystemV/HST10",
                      "SystemV/MST7",
                      "SystemV/MST7MDT",
                      "SystemV/PST8",
                      "SystemV/PST8PDT",
                      "SystemV/YST9",
                      "SystemV/YST9YDT",
                      "Turkey",
                      "UCT",
                      "US/Alaska",
                      "US/Aleutian",
                      "US/Arizona",
                      "US/Central",
                      "US/East-Indiana",
                      "US/Eastern",
                      "US/Hawaii",
                      "US/Indiana-Starke",
                      "US/Michigan",
                      "US/Mountain",
                      "US/Pacific",
                      "US/Samoa",
                      "UTC",
                      "Universal",
                      "W-SU",
                      "WET",
                      "Zulu",
                      "EST",
                      "HST",
                      "MST",
                      "ACT",
                      "AET",
                      "AGT",
                      "ART",
                      "AST",
                      "BET",
                      "BST",
                      "CAT",
                      "CNT",
                      "CST",
                      "CTT",
                      "EAT",
                      "ECT",
                      "IET",
                      "IST",
                      "JST",
                      "MIT",
                      "NET",
                      "NST",
                      "PLT",
                      "PNT",
                      "PRT",
                      "PST",
                      "SST",
                      "VST"
                    ]
                  },
                  "frequency": {
                    "description": "Frequency settings for the scheduled job.",
                    "$ref": "#/components/schemas/FrequencyInput"
                  },
                  "recipient_details": {
                    "description": "Recipients of the scheduled job notifications. Add the GUID or name of the ThoughtSpot users or groups as recipients in the `principals` array. If a recipient is not a ThoughtSpot user, specify email address.",
                    "$ref": "#/components/schemas/RecipientDetailsInput"
                  }
                },
                "required": [
                  "name",
                  "description",
                  "metadata_type",
                  "metadata_identifier",
                  "time_zone",
                  "recipient_details"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Schedule successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseSchedule"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/schedules/{schedule_identifier}/delete": {
      "post": {
        "operationId": "deleteSchedule",
        "description": "\nDeletes a scheduled job. <br/>  <span class=\"since-beta-tag\">Version: 9.4.0.cl or later</span>\n\nDeletes a scheduled Liveboard job.\n\nRequires at least edit access to Liveboard or `ADMINISTRATION` (**Can administer Org**) privilege.   \n\n\n\n\n#### Endpoint URL\n",
        "tags": [
          "Schedules",
          "9.4.0.cl"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "schedule_identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique ID or name of the scheduled job."
          }
        ],
        "responses": {
          "204": {
            "description": "Schedule successfully deleted."
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/schedules/search": {
      "post": {
        "operationId": "searchSchedules",
        "description": "\nSearch Schedules <br/>  <span class=\"since-beta-tag\">Version: 9.4.0.cl or later</span>\n\nGets a list of scheduled jobs configured for a Liveboard.\n\nTo get details of a specific scheduled job, specify the name or GUID of the scheduled job.\n\nRequires at least view access to Liveboards.\n\n\n\n\n#### Endpoint URL\n",
        "tags": [
          "Schedules",
          "9.4.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata": {
                    "description": "Metadata objects associated with the scheduled jobs.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/MetadataInput"
                    }
                  },
                  "record_offset": {
                    "description": "The starting record number from where the records should be included.",
                    "type": "integer",
                    "format": "int32"
                  },
                  "record_size": {
                    "description": "The number of records that should be included.",
                    "type": "integer",
                    "format": "int32"
                  },
                  "sort_options": {
                    "description": "Sort options.",
                    "$ref": "#/components/schemas/SortingOptions"
                  },
                  "history_runs_options": {
                    "description": "Options while fetching history runs for the schedule.",
                    "$ref": "#/components/schemas/ScheduleHistoryRunsOptionsInput"
                  },
                  "schedule_identifiers": {
                    "description": "unique ID or name of the Schedule",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Schedule search result.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResponseSchedule"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/schedules/{schedule_identifier}/update": {
      "post": {
        "operationId": "updateSchedule",
        "description": "\nUpdate schedule. <br/>  <span class=\"since-beta-tag\">Version: 9.4.0.cl or later</span>\n\nUpdates a scheduled Liveboard job.\n\nRequires at least edit access to Liveboards. To update a schedule on behalf of another user, you need `ADMINISTRATION` (**Can administer Org**) or `JOBSCHEDULING` (**Can schedule for others**) privilege and edit access to the Liveboard.\n\nThe API endpoint allows you to pause a scheduled job, change the status of a paused job. You can also edit the recipients list, frequency of the job, format of the file to send to the recipients in email notifications, PDF options, and time zone setting.\n\n\n\n\n#### Endpoint URL\n",
        "tags": [
          "Schedules",
          "9.4.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of the scheduled job.",
                    "type": "string"
                  },
                  "description": {
                    "description": "Description of the scheduled job.",
                    "type": "string"
                  },
                  "metadata_type": {
                    "description": "Type of metadata object.",
                    "type": "string",
                    "enum": [
                      "LIVEBOARD"
                    ]
                  },
                  "metadata_identifier": {
                    "description": "Unique ID or name of the metadata object.",
                    "type": "string"
                  },
                  "file_format": {
                    "description": "Export file format.",
                    "type": "string",
                    "enum": [
                      "CSV",
                      "PDF"
                    ]
                  },
                  "liveboard_options": {
                    "description": "Options to specify the details of a Liveboard.",
                    "$ref": "#/components/schemas/LiveboardOptionsInput"
                  },
                  "pdf_options": {
                    "description": "Options for PDF export.",
                    "$ref": "#/components/schemas/SchedulesPdfOptionsInput"
                  },
                  "time_zone": {
                    "description": "Time zone",
                    "type": "string",
                    "enum": [
                      "Africa/Abidjan",
                      "Africa/Accra",
                      "Africa/Addis_Ababa",
                      "Africa/Algiers",
                      "Africa/Asmara",
                      "Africa/Asmera",
                      "Africa/Bamako",
                      "Africa/Bangui",
                      "Africa/Banjul",
                      "Africa/Bissau",
                      "Africa/Blantyre",
                      "Africa/Brazzaville",
                      "Africa/Bujumbura",
                      "Africa/Cairo",
                      "Africa/Casablanca",
                      "Africa/Ceuta",
                      "Africa/Conakry",
                      "Africa/Dakar",
                      "Africa/Dar_es_Salaam",
                      "Africa/Djibouti",
                      "Africa/Douala",
                      "Africa/El_Aaiun",
                      "Africa/Freetown",
                      "Africa/Gaborone",
                      "Africa/Harare",
                      "Africa/Johannesburg",
                      "Africa/Juba",
                      "Africa/Kampala",
                      "Africa/Khartoum",
                      "Africa/Kigali",
                      "Africa/Kinshasa",
                      "Africa/Lagos",
                      "Africa/Libreville",
                      "Africa/Lome",
                      "Africa/Luanda",
                      "Africa/Lubumbashi",
                      "Africa/Lusaka",
                      "Africa/Malabo",
                      "Africa/Maputo",
                      "Africa/Maseru",
                      "Africa/Mbabane",
                      "Africa/Mogadishu",
                      "Africa/Monrovia",
                      "Africa/Nairobi",
                      "Africa/Ndjamena",
                      "Africa/Niamey",
                      "Africa/Nouakchott",
                      "Africa/Ouagadougou",
                      "Africa/Porto-Novo",
                      "Africa/Sao_Tome",
                      "Africa/Timbuktu",
                      "Africa/Tripoli",
                      "Africa/Tunis",
                      "Africa/Windhoek",
                      "America/Adak",
                      "America/Anchorage",
                      "America/Anguilla",
                      "America/Antigua",
                      "America/Araguaina",
                      "America/Argentina/Buenos_Aires",
                      "America/Argentina/Catamarca",
                      "America/Argentina/ComodRivadavia",
                      "America/Argentina/Cordoba",
                      "America/Argentina/Jujuy",
                      "America/Argentina/La_Rioja",
                      "America/Argentina/Mendoza",
                      "America/Argentina/Rio_Gallegos",
                      "America/Argentina/Salta",
                      "America/Argentina/San_Juan",
                      "America/Argentina/San_Luis",
                      "America/Argentina/Tucuman",
                      "America/Argentina/Ushuaia",
                      "America/Aruba",
                      "America/Asuncion",
                      "America/Atikokan",
                      "America/Atka",
                      "America/Bahia",
                      "America/Bahia_Banderas",
                      "America/Barbados",
                      "America/Belem",
                      "America/Belize",
                      "America/Blanc-Sablon",
                      "America/Boa_Vista",
                      "America/Bogota",
                      "America/Boise",
                      "America/Buenos_Aires",
                      "America/Cambridge_Bay",
                      "America/Campo_Grande",
                      "America/Cancun",
                      "America/Caracas",
                      "America/Catamarca",
                      "America/Cayenne",
                      "America/Cayman",
                      "America/Chicago",
                      "America/Chihuahua",
                      "America/Coral_Harbour",
                      "America/Cordoba",
                      "America/Costa_Rica",
                      "America/Creston",
                      "America/Cuiaba",
                      "America/Curacao",
                      "America/Danmarkshavn",
                      "America/Dawson",
                      "America/Dawson_Creek",
                      "America/Denver",
                      "America/Detroit",
                      "America/Dominica",
                      "America/Edmonton",
                      "America/Eirunepe",
                      "America/El_Salvador",
                      "America/Ensenada",
                      "America/Fort_Nelson",
                      "America/Fort_Wayne",
                      "America/Fortaleza",
                      "America/Glace_Bay",
                      "America/Godthab",
                      "America/Goose_Bay",
                      "America/Grand_Turk",
                      "America/Grenada",
                      "America/Guadeloupe",
                      "America/Guatemala",
                      "America/Guayaquil",
                      "America/Guyana",
                      "America/Halifax",
                      "America/Havana",
                      "America/Hermosillo",
                      "America/Indiana/Indianapolis",
                      "America/Indiana/Knox",
                      "America/Indiana/Marengo",
                      "America/Indiana/Petersburg",
                      "America/Indiana/Tell_City",
                      "America/Indiana/Vevay",
                      "America/Indiana/Vincennes",
                      "America/Indiana/Winamac",
                      "America/Indianapolis",
                      "America/Inuvik",
                      "America/Iqaluit",
                      "America/Jamaica",
                      "America/Jujuy",
                      "America/Juneau",
                      "America/Kentucky/Louisville",
                      "America/Kentucky/Monticello",
                      "America/Knox_IN",
                      "America/Kralendijk",
                      "America/La_Paz",
                      "America/Lima",
                      "America/Los_Angeles",
                      "America/Louisville",
                      "America/Lower_Princes",
                      "America/Maceio",
                      "America/Managua",
                      "America/Manaus",
                      "America/Marigot",
                      "America/Martinique",
                      "America/Matamoros",
                      "America/Mazatlan",
                      "America/Mendoza",
                      "America/Menominee",
                      "America/Merida",
                      "America/Metlakatla",
                      "America/Mexico_City",
                      "America/Miquelon",
                      "America/Moncton",
                      "America/Monterrey",
                      "America/Montevideo",
                      "America/Montreal",
                      "America/Montserrat",
                      "America/Nassau",
                      "America/New_York",
                      "America/Nipigon",
                      "America/Nome",
                      "America/Noronha",
                      "America/North_Dakota/Beulah",
                      "America/North_Dakota/Center",
                      "America/North_Dakota/New_Salem",
                      "America/Nuuk",
                      "America/Ojinaga",
                      "America/Panama",
                      "America/Pangnirtung",
                      "America/Paramaribo",
                      "America/Phoenix",
                      "America/Port-au-Prince",
                      "America/Port_of_Spain",
                      "America/Porto_Acre",
                      "America/Porto_Velho",
                      "America/Puerto_Rico",
                      "America/Punta_Arenas",
                      "America/Rainy_River",
                      "America/Rankin_Inlet",
                      "America/Recife",
                      "America/Regina",
                      "America/Resolute",
                      "America/Rio_Branco",
                      "America/Rosario",
                      "America/Santa_Isabel",
                      "America/Santarem",
                      "America/Santiago",
                      "America/Santo_Domingo",
                      "America/Sao_Paulo",
                      "America/Scoresbysund",
                      "America/Shiprock",
                      "America/Sitka",
                      "America/St_Barthelemy",
                      "America/St_Johns",
                      "America/St_Kitts",
                      "America/St_Lucia",
                      "America/St_Thomas",
                      "America/St_Vincent",
                      "America/Swift_Current",
                      "America/Tegucigalpa",
                      "America/Thule",
                      "America/Thunder_Bay",
                      "America/Tijuana",
                      "America/Toronto",
                      "America/Tortola",
                      "America/Vancouver",
                      "America/Virgin",
                      "America/Whitehorse",
                      "America/Winnipeg",
                      "America/Yakutat",
                      "America/Yellowknife",
                      "Antarctica/Casey",
                      "Antarctica/Davis",
                      "Antarctica/DumontDUrville",
                      "Antarctica/Macquarie",
                      "Antarctica/Mawson",
                      "Antarctica/McMurdo",
                      "Antarctica/Palmer",
                      "Antarctica/Rothera",
                      "Antarctica/South_Pole",
                      "Antarctica/Syowa",
                      "Antarctica/Troll",
                      "Antarctica/Vostok",
                      "Arctic/Longyearbyen",
                      "Asia/Aden",
                      "Asia/Almaty",
                      "Asia/Amman",
                      "Asia/Anadyr",
                      "Asia/Aqtau",
                      "Asia/Aqtobe",
                      "Asia/Ashgabat",
                      "Asia/Ashkhabad",
                      "Asia/Atyrau",
                      "Asia/Baghdad",
                      "Asia/Bahrain",
                      "Asia/Baku",
                      "Asia/Bangkok",
                      "Asia/Barnaul",
                      "Asia/Beirut",
                      "Asia/Bishkek",
                      "Asia/Brunei",
                      "Asia/Calcutta",
                      "Asia/Chita",
                      "Asia/Choibalsan",
                      "Asia/Chongqing",
                      "Asia/Chungking",
                      "Asia/Colombo",
                      "Asia/Dacca",
                      "Asia/Damascus",
                      "Asia/Dhaka",
                      "Asia/Dili",
                      "Asia/Dubai",
                      "Asia/Dushanbe",
                      "Asia/Famagusta",
                      "Asia/Gaza",
                      "Asia/Harbin",
                      "Asia/Hebron",
                      "Asia/Ho_Chi_Minh",
                      "Asia/Hong_Kong",
                      "Asia/Hovd",
                      "Asia/Irkutsk",
                      "Asia/Istanbul",
                      "Asia/Jakarta",
                      "Asia/Jayapura",
                      "Asia/Jerusalem",
                      "Asia/Kabul",
                      "Asia/Kamchatka",
                      "Asia/Karachi",
                      "Asia/Kashgar",
                      "Asia/Kathmandu",
                      "Asia/Katmandu",
                      "Asia/Khandyga",
                      "Asia/Kolkata",
                      "Asia/Krasnoyarsk",
                      "Asia/Kuala_Lumpur",
                      "Asia/Kuching",
                      "Asia/Kuwait",
                      "Asia/Macao",
                      "Asia/Macau",
                      "Asia/Magadan",
                      "Asia/Makassar",
                      "Asia/Manila",
                      "Asia/Muscat",
                      "Asia/Nicosia",
                      "Asia/Novokuznetsk",
                      "Asia/Novosibirsk",
                      "Asia/Omsk",
                      "Asia/Oral",
                      "Asia/Phnom_Penh",
                      "Asia/Pontianak",
                      "Asia/Pyongyang",
                      "Asia/Qatar",
                      "Asia/Qostanay",
                      "Asia/Qyzylorda",
                      "Asia/Rangoon",
                      "Asia/Riyadh",
                      "Asia/Saigon",
                      "Asia/Sakhalin",
                      "Asia/Samarkand",
                      "Asia/Seoul",
                      "Asia/Shanghai",
                      "Asia/Singapore",
                      "Asia/Srednekolymsk",
                      "Asia/Taipei",
                      "Asia/Tashkent",
                      "Asia/Tbilisi",
                      "Asia/Tehran",
                      "Asia/Tel_Aviv",
                      "Asia/Thimbu",
                      "Asia/Thimphu",
                      "Asia/Tokyo",
                      "Asia/Tomsk",
                      "Asia/Ujung_Pandang",
                      "Asia/Ulaanbaatar",
                      "Asia/Ulan_Bator",
                      "Asia/Urumqi",
                      "Asia/Ust-Nera",
                      "Asia/Vientiane",
                      "Asia/Vladivostok",
                      "Asia/Yakutsk",
                      "Asia/Yangon",
                      "Asia/Yekaterinburg",
                      "Asia/Yerevan",
                      "Atlantic/Azores",
                      "Atlantic/Bermuda",
                      "Atlantic/Canary",
                      "Atlantic/Cape_Verde",
                      "Atlantic/Faeroe",
                      "Atlantic/Faroe",
                      "Atlantic/Jan_Mayen",
                      "Atlantic/Madeira",
                      "Atlantic/Reykjavik",
                      "Atlantic/South_Georgia",
                      "Atlantic/St_Helena",
                      "Atlantic/Stanley",
                      "Australia/ACT",
                      "Australia/Adelaide",
                      "Australia/Brisbane",
                      "Australia/Broken_Hill",
                      "Australia/Canberra",
                      "Australia/Currie",
                      "Australia/Darwin",
                      "Australia/Eucla",
                      "Australia/Hobart",
                      "Australia/LHI",
                      "Australia/Lindeman",
                      "Australia/Lord_Howe",
                      "Australia/Melbourne",
                      "Australia/NSW",
                      "Australia/North",
                      "Australia/Perth",
                      "Australia/Queensland",
                      "Australia/South",
                      "Australia/Sydney",
                      "Australia/Tasmania",
                      "Australia/Victoria",
                      "Australia/West",
                      "Australia/Yancowinna",
                      "Brazil/Acre",
                      "Brazil/DeNoronha",
                      "Brazil/East",
                      "Brazil/West",
                      "CET",
                      "CST6CDT",
                      "Canada/Atlantic",
                      "Canada/Central",
                      "Canada/Eastern",
                      "Canada/Mountain",
                      "Canada/Newfoundland",
                      "Canada/Pacific",
                      "Canada/Saskatchewan",
                      "Canada/Yukon",
                      "Chile/Continental",
                      "Chile/EasterIsland",
                      "Cuba",
                      "EET",
                      "EST5EDT",
                      "Egypt",
                      "Eire",
                      "Etc/GMT",
                      "Etc/GMT+0",
                      "Etc/GMT+1",
                      "Etc/GMT+10",
                      "Etc/GMT+11",
                      "Etc/GMT+12",
                      "Etc/GMT+2",
                      "Etc/GMT+3",
                      "Etc/GMT+4",
                      "Etc/GMT+5",
                      "Etc/GMT+6",
                      "Etc/GMT+7",
                      "Etc/GMT+8",
                      "Etc/GMT+9",
                      "Etc/GMT-0",
                      "Etc/GMT-1",
                      "Etc/GMT-10",
                      "Etc/GMT-11",
                      "Etc/GMT-12",
                      "Etc/GMT-13",
                      "Etc/GMT-14",
                      "Etc/GMT-2",
                      "Etc/GMT-3",
                      "Etc/GMT-4",
                      "Etc/GMT-5",
                      "Etc/GMT-6",
                      "Etc/GMT-7",
                      "Etc/GMT-8",
                      "Etc/GMT-9",
                      "Etc/GMT0",
                      "Etc/Greenwich",
                      "Etc/UCT",
                      "Etc/UTC",
                      "Etc/Universal",
                      "Etc/Zulu",
                      "Europe/Amsterdam",
                      "Europe/Andorra",
                      "Europe/Astrakhan",
                      "Europe/Athens",
                      "Europe/Belfast",
                      "Europe/Belgrade",
                      "Europe/Berlin",
                      "Europe/Bratislava",
                      "Europe/Brussels",
                      "Europe/Bucharest",
                      "Europe/Budapest",
                      "Europe/Busingen",
                      "Europe/Chisinau",
                      "Europe/Copenhagen",
                      "Europe/Dublin",
                      "Europe/Gibraltar",
                      "Europe/Guernsey",
                      "Europe/Helsinki",
                      "Europe/Isle_of_Man",
                      "Europe/Istanbul",
                      "Europe/Jersey",
                      "Europe/Kaliningrad",
                      "Europe/Kiev",
                      "Europe/Kirov",
                      "Europe/Kyiv",
                      "Europe/Lisbon",
                      "Europe/Ljubljana",
                      "Europe/London",
                      "Europe/Luxembourg",
                      "Europe/Madrid",
                      "Europe/Malta",
                      "Europe/Mariehamn",
                      "Europe/Minsk",
                      "Europe/Monaco",
                      "Europe/Moscow",
                      "Europe/Nicosia",
                      "Europe/Oslo",
                      "Europe/Paris",
                      "Europe/Podgorica",
                      "Europe/Prague",
                      "Europe/Riga",
                      "Europe/Rome",
                      "Europe/Samara",
                      "Europe/San_Marino",
                      "Europe/Sarajevo",
                      "Europe/Saratov",
                      "Europe/Simferopol",
                      "Europe/Skopje",
                      "Europe/Sofia",
                      "Europe/Stockholm",
                      "Europe/Tallinn",
                      "Europe/Tirane",
                      "Europe/Tiraspol",
                      "Europe/Ulyanovsk",
                      "Europe/Uzhgorod",
                      "Europe/Vaduz",
                      "Europe/Vatican",
                      "Europe/Vienna",
                      "Europe/Vilnius",
                      "Europe/Volgograd",
                      "Europe/Warsaw",
                      "Europe/Zagreb",
                      "Europe/Zaporozhye",
                      "Europe/Zurich",
                      "GB",
                      "GB-Eire",
                      "GMT",
                      "GMT0",
                      "Greenwich",
                      "Hongkong",
                      "Iceland",
                      "Indian/Antananarivo",
                      "Indian/Chagos",
                      "Indian/Christmas",
                      "Indian/Cocos",
                      "Indian/Comoro",
                      "Indian/Kerguelen",
                      "Indian/Mahe",
                      "Indian/Maldives",
                      "Indian/Mauritius",
                      "Indian/Mayotte",
                      "Indian/Reunion",
                      "Iran",
                      "Israel",
                      "Jamaica",
                      "Japan",
                      "Kwajalein",
                      "Libya",
                      "MET",
                      "MST7MDT",
                      "Mexico/BajaNorte",
                      "Mexico/BajaSur",
                      "Mexico/General",
                      "NZ",
                      "NZ-CHAT",
                      "Navajo",
                      "PRC",
                      "PST8PDT",
                      "Pacific/Apia",
                      "Pacific/Auckland",
                      "Pacific/Bougainville",
                      "Pacific/Chatham",
                      "Pacific/Chuuk",
                      "Pacific/Easter",
                      "Pacific/Efate",
                      "Pacific/Enderbury",
                      "Pacific/Fakaofo",
                      "Pacific/Fiji",
                      "Pacific/Funafuti",
                      "Pacific/Galapagos",
                      "Pacific/Gambier",
                      "Pacific/Guadalcanal",
                      "Pacific/Guam",
                      "Pacific/Honolulu",
                      "Pacific/Johnston",
                      "Pacific/Kanton",
                      "Pacific/Kiritimati",
                      "Pacific/Kosrae",
                      "Pacific/Kwajalein",
                      "Pacific/Majuro",
                      "Pacific/Marquesas",
                      "Pacific/Midway",
                      "Pacific/Nauru",
                      "Pacific/Niue",
                      "Pacific/Norfolk",
                      "Pacific/Noumea",
                      "Pacific/Pago_Pago",
                      "Pacific/Palau",
                      "Pacific/Pitcairn",
                      "Pacific/Pohnpei",
                      "Pacific/Ponape",
                      "Pacific/Port_Moresby",
                      "Pacific/Rarotonga",
                      "Pacific/Saipan",
                      "Pacific/Samoa",
                      "Pacific/Tahiti",
                      "Pacific/Tarawa",
                      "Pacific/Tongatapu",
                      "Pacific/Truk",
                      "Pacific/Wake",
                      "Pacific/Wallis",
                      "Pacific/Yap",
                      "Poland",
                      "Portugal",
                      "ROK",
                      "Singapore",
                      "SystemV/AST4",
                      "SystemV/AST4ADT",
                      "SystemV/CST6",
                      "SystemV/CST6CDT",
                      "SystemV/EST5",
                      "SystemV/EST5EDT",
                      "SystemV/HST10",
                      "SystemV/MST7",
                      "SystemV/MST7MDT",
                      "SystemV/PST8",
                      "SystemV/PST8PDT",
                      "SystemV/YST9",
                      "SystemV/YST9YDT",
                      "Turkey",
                      "UCT",
                      "US/Alaska",
                      "US/Aleutian",
                      "US/Arizona",
                      "US/Central",
                      "US/East-Indiana",
                      "US/Eastern",
                      "US/Hawaii",
                      "US/Indiana-Starke",
                      "US/Michigan",
                      "US/Mountain",
                      "US/Pacific",
                      "US/Samoa",
                      "UTC",
                      "Universal",
                      "W-SU",
                      "WET",
                      "Zulu",
                      "EST",
                      "HST",
                      "MST",
                      "ACT",
                      "AET",
                      "AGT",
                      "ART",
                      "AST",
                      "BET",
                      "BST",
                      "CAT",
                      "CNT",
                      "CST",
                      "CTT",
                      "EAT",
                      "ECT",
                      "IET",
                      "IST",
                      "JST",
                      "MIT",
                      "NET",
                      "NST",
                      "PLT",
                      "PNT",
                      "PRT",
                      "PST",
                      "SST",
                      "VST"
                    ]
                  },
                  "frequency": {
                    "description": "Frequency of the scheduled job run.",
                    "$ref": "#/components/schemas/FrequencyInput"
                  },
                  "recipient_details": {
                    "description": "Recipients of the scheduled job notifications. You can add the ID or name of the ThoughtSpot users or groups as recipients in the `principals` array. If a recipient is not a ThoughtSpot user, specify email address.",
                    "$ref": "#/components/schemas/RecipientDetailsInput"
                  },
                  "status": {
                    "description": "Status of the schedule",
                    "type": "string",
                    "enum": [
                      "ACTIVE",
                      "PAUSE"
                    ]
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "schedule_identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique ID or name of the schedule."
          }
        ],
        "responses": {
          "204": {
            "description": "Schedule successfully updated."
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/customization/custom-actions": {
      "post": {
        "operationId": "createCustomAction",
        "description": "\n <span class=\"since-beta-tag\">Version: 9.6.0.cl or later</span>\n\nCreates a custom action that appears as a menu action on a saved Answer or Liveboard visualization.\n\nRequires `DEVELOPER` (**Has Developer privilege**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.\n\n#### Usage Guidelines\n\nThe API lets you create the following types of custom actions:\n\n* URL-based action     \n  Allows pushing data to an external URL.\n* Callback action        \n  Triggers a callback to the host application and initiates a response payload on an embedded ThoughtSpot instance.\n\nBy default, custom actions are visible to only administrator or developer users. To make a custom action available to other users, and specify the groups in `group_identifiers`.\n\nBy default, the custom action is set as a _global_ action on all visualizations and saved Answers. To assign a custom action to specific Liveboard visualization, saved Answer, or Worksheet, set `visibility` to `false` in `default_action_config` property and specify the GUID or name of the object in `associate_metadata`.\n\nFor more information, see [Custom actions](https://developers.thoughtspot.com/docs/?pageid=custom-action-intro).\n\n\n\n\n#### Endpoint URL\n",
        "tags": [
          "Custom Action",
          "9.6.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of the custom action. The custom action name must be unique.",
                    "type": "string"
                  },
                  "action_details": {
                    "description": "Action details includes `Type` and Configuration data for Custom Actions, either Callback or URL is required.",
                    "$ref": "#/components/schemas/Action_Details_Input_Create"
                  },
                  "associate_metadata": {
                    "description": "Metadata objects to which the custom action needs to be associated.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Associate_Metadata_Input_Create"
                    }
                  },
                  "default_action_config": {
                    "description": "Default Custom action configuration. This includes if the custom action is available on all visualizations. By default, a custom action is added to all visualizations and Answers.",
                    "$ref": "#/components/schemas/Default_Action_Config_Input_Create"
                  },
                  "group_identifiers": {
                    "description": "Unique ID or name of the groups that can view and access the custom action.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "name",
                  "action_details"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Custom action created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCustomAction"
                },
                "examples": {
                  "example_1": {
                    "value": {
                      "action_details": {
                        "CALLBACK": {
                          "reference": "customaction"
                        }
                      },
                      "default_action_config": {
                        "visibility": true
                      },
                      "id": "3d3cad0f-e57b-4faa-8e24-da596c727ee0",
                      "metadata_association": [],
                      "name": "customactionsample",
                      "user_groups": []
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/customization/custom-actions/{custom_action_identifier}/update": {
      "post": {
        "operationId": "updateCustomAction",
        "description": "\n <span class=\"since-beta-tag\">Version: 9.6.0.cl or later</span>\n\nUpdates a custom action.\n\nRequires `DEVELOPER` (**Has Developer privilege**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.\n\n#### Usage Guidelines\n\nThe API allows you to modify the following properties:\n\n* Name of the custom action\n* Action availability to groups\n* Association to metadata objects\n* Authentication settings for a URL-based action\n\nFor more information, see [Custom actions](https://developers.thoughtspot.com/docs/?pageid=custom-action-intro).\n\n\n\n\n#### Endpoint URL\n",
        "tags": [
          "Custom Action",
          "9.6.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "action_details": {
                    "description": "Action details includes `Type` and Configuration for Custom Actions, either Callback or URL is required.",
                    "$ref": "#/components/schemas/Action_Details_Input"
                  },
                  "associate_metadata": {
                    "description": "Metadata objects to which the custom action needs to be associated.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Associate_Metadata_Input"
                    }
                  },
                  "default_action_config": {
                    "description": "Default Custom action configuration. This includes if the custom action available on visualizations and Answers. By default, a custom action is added to all visualizations and Answers.",
                    "$ref": "#/components/schemas/Default_Action_Config_Input"
                  },
                  "group_identifiers": {
                    "description": "Unique ID or name of the groups that can view and access the custom action.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "name": {
                    "description": "Name of the custom action. The custom action name must be unique.",
                    "type": "string"
                  },
                  "operation": {
                    "description": "Type of update operation. Default operation type is ADD",
                    "default": "ADD",
                    "type": "string",
                    "enum": [
                      "ADD",
                      "REMOVE"
                    ]
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "custom_action_identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique ID or name of the custom action."
          }
        ],
        "responses": {
          "204": {
            "description": "Custom action updated successfully."
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/customization/custom-actions/{custom_action_identifier}/delete": {
      "post": {
        "operationId": "deleteCustomAction",
        "description": "\n <span class=\"since-beta-tag\">Version: 9.6.0.cl or later</span>\n\nRemoves the custom action specified in the API request.\n\nRequires `DEVELOPER` (**Has Developer privilege**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.\n\n\n\n\n#### Endpoint URL\n",
        "tags": [
          "Custom Action",
          "9.6.0.cl"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "custom_action_identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique ID or name of the custom action."
          }
        ],
        "responses": {
          "204": {
            "description": "Custom action is successfully deleted."
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/dbt/dbt-connection": {
      "post": {
        "operationId": "dbtConnection",
        "description": "\n <span class=\"since-beta-tag\">Version: 9.9.0.cl or later</span>\n\nCreates a DBT connection object in ThoughtSpot.\n\nRequires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege or `DATAMANAGEMENT` (**Can manage data ThoughtSpot**) privilege.\n\n#### About create DBT connection\nDBT connection in ThoughtSpot is used by the user to define DBT credentials for cloud . The API needs  embrace connection, embrace database name, DBT url, import type, DBT account identifier, DBT project identifier, DBT access token and environment details (or) embrace connection, embrace database name, import type, file_content to create a connection object. To know more about DBT, see ThoughtSpot Product Documentation.\n\n\n\n\n#### Endpoint URL\n",
        "tags": [
          "DBT",
          "9.9.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "connection_name": {
                    "description": "Name of the connection.",
                    "type": "string"
                  },
                  "database_name": {
                    "description": "Name of the Database.",
                    "type": "string"
                  },
                  "import_type": {
                    "description": "Mention type of Import",
                    "default": "DBT_CLOUD",
                    "type": "string",
                    "enum": [
                      "DBT_CLOUD",
                      "ZIP_FILE"
                    ]
                  },
                  "access_token": {
                    "description": "Access token is mandatory when Import_Type is DBT_CLOUD.",
                    "type": "string"
                  },
                  "dbt_url": {
                    "description": "DBT URL is mandatory when Import_Type is DBT_CLOUD.",
                    "type": "string"
                  },
                  "account_id": {
                    "description": "Account ID is mandatory when Import_Type is DBT_CLOUD",
                    "type": "string"
                  },
                  "project_id": {
                    "description": "Project ID is mandatory when Import_Type is DBT_CLOUD",
                    "type": "string"
                  },
                  "dbt_env_id": {
                    "description": "DBT Environment ID\"",
                    "type": "string"
                  },
                  "project_name": {
                    "description": "Name of the project",
                    "type": "string"
                  },
                  "file_content": {
                    "description": "Upload DBT Manifest and Catalog artifact files as a ZIP file. This field is Mandatory when Import Type is 'ZIP_FILE'",
                    "type": "string",
                    "format": "binary"
                  }
                },
                "required": [
                  "connection_name",
                  "database_name"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Succesfully created DBT Connection.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/dbt/generate-tml": {
      "post": {
        "operationId": "dbtGenerateTml",
        "description": " <span class=\"since-beta-tag\">Version: 9.9.0.cl or later</span>",
        "tags": [
          "DBT",
          "9.9.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "dbt_connection_identifier": {
                    "description": "Unique ID of the DBT connection.",
                    "type": "string"
                  },
                  "model_tables": {
                    "description": "List of Models and their respective Tables",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ModelTableList"
                    }
                  },
                  "import_worksheets": {
                    "description": "Mention the worksheet tmls to import",
                    "type": "string",
                    "enum": [
                      "ALL",
                      "NONE",
                      "SELECTED"
                    ]
                  },
                  "worksheets": {
                    "description": "List of worksheets is mandatory when import_Worksheets is type SELECTED",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "file_content": {
                    "description": "Upload DBT Manifest and Catalog artifact files as a ZIP file. This field is mandatory if the connection was created with import_type ‘ZIP_FILE’",
                    "type": "string",
                    "format": "binary"
                  }
                },
                "required": [
                  "dbt_connection_identifier",
                  "import_worksheets"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Required Table and Worksheet TML's are successfully generated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/dbt/generate-sync-tml": {
      "post": {
        "operationId": "dbtGenerateSyncTml",
        "description": " <span class=\"since-beta-tag\">Version: 9.9.0.cl or later</span>",
        "tags": [
          "DBT",
          "9.9.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "dbt_connection_identifier": {
                    "description": "Unique ID of the DBT connection.",
                    "type": "string"
                  },
                  "file_content": {
                    "description": "Upload DBT Manifest and Catalog artifact files as a ZIP file. This field is mandatory if the connection was created with import_type ‘ZIP_FILE’",
                    "type": "string",
                    "format": "binary"
                  }
                },
                "required": [
                  "dbt_connection_identifier"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Sync Table and Worksheet TML's are successfully generated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/dbt/search": {
      "post": {
        "operationId": "dbtSearch",
        "description": "\n <span class=\"since-beta-tag\">Version: 9.9.0.cl or later</span>\n\nGets a list of DBT connection objects by user and organization, available on the ThoughtSpot system.\n\nRequires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege or `DATAMANAGEMENT` (**Can manage data ThoughtSpot**) privilege\n\n#### About search DBT connection\nTo get details of a specific DBT connection identifier, database connection identifier, database connection name, database name, project name, project identifier, environment identifier , import type and author.\n\n\n\n\n#### Endpoint URL\n",
        "tags": [
          "DBT",
          "9.9.0.cl"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Retrieved list of DBT connections successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/dbt/{dbt_connection_identifier}/delete": {
      "post": {
        "operationId": "deleteDbtConnection",
        "description": "\n <span class=\"since-beta-tag\">Version: 9.9.0.cl or later</span>\n\nRemoves the specified DBT connection object from the ThoughtSpot system.\n\nRequires `ADMINISTRATION` (**Can administer ThoughtSpot**) or `DATAMANAGEMENT` (**Can manage data ThoughtSpot**) privilege.\n\n\n\n\n#### Endpoint URL\n",
        "tags": [
          "DBT",
          "9.9.0.cl"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "dbt_connection_identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique ID of the DBT Connection."
          }
        ],
        "responses": {
          "204": {
            "description": "DBT Connection successfully deleted."
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/dbt/update-dbt-connection": {
      "post": {
        "operationId": "updateDbtConnection",
        "description": "\n <span class=\"since-beta-tag\">Version: 9.9.0.cl or later</span>\n\nUpdates a DBT connection object.\n\nRequires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege or `DATAMANAGEMENT` (**Can manage data ThoughtSpot**) privilege, along with an existing DBT connection.\n\n#### About update DBT connection\nYou can modify DBT connection object properties such as embrace connection name, embrace database name, import type, account identifier, access token, project identifier and environment (or) embrace connection, embrace database name, import type, file_content settings.\n\n\n\n\n#### Endpoint URL\n",
        "tags": [
          "DBT",
          "9.9.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "dbt_connection_identifier": {
                    "description": "Unique ID of the DBT Connection.",
                    "type": "string"
                  },
                  "connection_name": {
                    "description": "Name of the connection.",
                    "type": "string"
                  },
                  "database_name": {
                    "description": "Name of the Database.",
                    "type": "string"
                  },
                  "import_type": {
                    "description": "Mention type of Import",
                    "default": "DBT_CLOUD",
                    "type": "string",
                    "enum": [
                      "DBT_CLOUD",
                      "ZIP_FILE"
                    ]
                  },
                  "access_token": {
                    "description": "Access token is mandatory when Import_Type is DBT_CLOUD.",
                    "type": "string"
                  },
                  "dbt_url": {
                    "description": "DBT URL is mandatory when Import_Type is DBT_CLOUD.",
                    "type": "string"
                  },
                  "account_id": {
                    "description": "Account ID is mandatory when Import_Type is DBT_CLOUD",
                    "type": "string"
                  },
                  "project_id": {
                    "description": "Project ID is mandatory when Import_Type is DBT_CLOUD",
                    "type": "string"
                  },
                  "dbt_env_id": {
                    "description": "DBT Environment ID\"",
                    "type": "string"
                  },
                  "project_name": {
                    "description": "Name of the project",
                    "type": "string"
                  },
                  "file_content": {
                    "description": "Upload DBT Manifest and Catalog artifact files as a ZIP file. This field is Mandatory when Import Type is 'ZIP_FILE'",
                    "type": "string",
                    "format": "binary"
                  }
                },
                "required": [
                  "dbt_connection_identifier"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "DBT Connection successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "object"
          }
        }
      },
      "GetTokenResponse": {
        "type": "object",
        "required": [
          "token",
          "creation_time_in_millis",
          "expiration_time_in_millis",
          "valid_for_user_id",
          "valid_for_username"
        ],
        "properties": {
          "token": {
            "type": "string",
            "description": "Bearer auth token."
          },
          "creation_time_in_millis": {
            "type": "number",
            "format": "float",
            "description": "Token creation time in milliseconds."
          },
          "expiration_time_in_millis": {
            "type": "number",
            "format": "float",
            "description": "Token expiration time in milliseconds."
          },
          "valid_for_user_id": {
            "type": "string",
            "description": "Username to whom the token is issued."
          },
          "valid_for_username": {
            "type": "string",
            "description": "Unique identifier of the user to whom the token is issued."
          }
        }
      },
      "RiseSetter": {
        "type": "object",
        "required": [
          "field",
          "path"
        ],
        "properties": {
          "field": {
            "type": "string"
          },
          "path": {
            "type": "string"
          }
        }
      },
      "User": {
        "type": "object",
        "required": [
          "id",
          "name",
          "display_name",
          "visibility"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the user."
          },
          "name": {
            "type": "string",
            "description": "Name of the user."
          },
          "display_name": {
            "type": "string",
            "description": "Display name of the user."
          },
          "visibility": {
            "type": "string",
            "enum": [
              "SHARABLE",
              "NON_SHARABLE"
            ],
            "description": "Visibility of the users. The `SHARABLE` property makes a user visible to other users and group, who can share objects with the user."
          },
          "author_id": {
            "type": "string",
            "description": "Unique identifier of author of the user."
          },
          "can_change_password": {
            "type": "boolean",
            "description": "Defines whether the user can change their password."
          },
          "complete_detail": {
            "type": "boolean",
            "description": "Defines whether the response has complete detail of the user."
          },
          "creation_time_in_millis": {
            "type": "number",
            "format": "float",
            "description": "Creation time of the user in milliseconds."
          },
          "current_org": {
            "$ref": "#/components/schemas/Org",
            "description": "Current logged-in Org of the user."
          },
          "deleted": {
            "type": "boolean",
            "description": "Indicates whether the user is deleted."
          },
          "deprecated": {
            "type": "boolean",
            "description": "Indicates whether the user is deprecated."
          },
          "account_type": {
            "type": "string",
            "enum": [
              "LOCAL_USER",
              "LDAP_USER",
              "SAML_USER",
              "OIDC_USER",
              "REMOTE_USER"
            ],
            "description": "Type of the user account."
          },
          "account_status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "INACTIVE",
              "EXPIRED",
              "LOCKED",
              "PENDING"
            ],
            "description": "Status of the user account."
          },
          "email": {
            "type": "string",
            "description": "Email of the user."
          },
          "expiration_time_in_millis": {
            "type": "number",
            "format": "float",
            "description": "Expiration time of the user in milliseconds."
          },
          "external": {
            "type": "boolean",
            "description": "Indicates whether the user is external."
          },
          "favorite_metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FavoriteMetadataItem"
            },
            "description": "Metadata objects to add to the users' favorites list."
          },
          "first_login_time_in_millis": {
            "type": "number",
            "format": "float",
            "description": "Timestamp of the first login session of the user in milliseconds."
          },
          "group_mask": {
            "type": "integer",
            "format": "int32",
            "description": "Group mask of the user."
          },
          "hidden": {
            "type": "boolean",
            "description": "Indicates whether the user is hidden."
          },
          "home_liveboard": {
            "$ref": "#/components/schemas/Object_ID_And_Name",
            "description": "Unique ID or name of the default Liveboard assigned to the user."
          },
          "incomplete_details": {
            "type": "object",
            "description": "Incomplete details of user if any present."
          },
          "is_first_login": {
            "type": "boolean",
            "description": "Indicates whether it is first login of the user."
          },
          "modification_time_in_millis": {
            "type": "number",
            "format": "float",
            "description": "Last modified time of the user in milliseconds."
          },
          "modifier_id": {
            "type": "string",
            "description": "Unique identifier of modifier of the user."
          },
          "notify_on_share": {
            "type": "boolean",
            "description": "User preference for receiving email notifications on shared Answers or Liveboard."
          },
          "onboarding_experience_completed": {
            "type": "boolean",
            "description": "The user preference for turning off the onboarding experience."
          },
          "orgs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Org"
            },
            "description": "Orgs to which the user belongs."
          },
          "owner_id": {
            "type": "string",
            "description": "Unique identifier of owner of the user."
          },
          "parent_type": {
            "type": "string",
            "enum": [
              "USER",
              "GROUP"
            ],
            "description": "Parent type of the user."
          },
          "privileges": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Privileges which are assigned to the user."
          },
          "show_onboarding_experience": {
            "type": "boolean",
            "description": "User's preference to revisit the new user onboarding experience."
          },
          "super_user": {
            "type": "boolean",
            "description": "Indicates whether the user is a super user."
          },
          "system_user": {
            "type": "boolean",
            "description": "Indicates whether the user is a system user."
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Object_ID_And_Name"
            },
            "description": "Tags associated with the user."
          },
          "tenant_id": {
            "type": "string",
            "description": "Unique identifier of tenant of the user."
          },
          "user_groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Object_ID_And_Name"
            },
            "description": "Groups to which the user is assigned."
          },
          "user_inherited_groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Object_ID_And_Name"
            },
            "description": "Inherited User Groups which the user is part of."
          },
          "welcome_email_sent": {
            "type": "boolean",
            "description": "Indicates whether welcome email is sent for the user."
          },
          "org_privileges": {
            "type": "object",
            "description": "Privileges which are assigned to the user with org."
          },
          "preferred_locale": {
            "type": "string",
            "description": "Locale for the user."
          },
          "extended_properties": {
            "type": "object",
            "description": "Properties for the user"
          },
          "extended_preferences": {
            "type": "object",
            "description": "Preferences for the user"
          }
        }
      },
      "Org": {
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of the object."
          },
          "name": {
            "type": "string",
            "description": "Name of the object."
          }
        },
        "description": "The current Org context of the user."
      },
      "FavoriteMetadataItem": {
        "type": "object",
        "required": [
          "id",
          "name",
          "type"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID of the metadata object."
          },
          "name": {
            "type": "string",
            "description": "name of the metadata object."
          },
          "type": {
            "type": "string",
            "enum": [
              "LIVEBOARD",
              "ANSWER",
              "LOGICAL_TABLE",
              "LOGICAL_COLUMN",
              "CONNECTION",
              "TAG",
              "USER",
              "USER_GROUP",
              "LOGICAL_RELATIONSHIP"
            ],
            "description": "Type of metadata object."
          }
        }
      },
      "Object_ID_And_Name": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the object."
          },
          "name": {
            "type": "string",
            "description": "Name of the object."
          }
        },
        "description": "The object representation with ID and Name."
      },
      "FavoriteMetadataInput": {
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string",
            "description": "Unique ID or name of the metadata object."
          },
          "type": {
            "type": "string",
            "enum": [
              "LIVEBOARD",
              "ANSWER"
            ],
            "description": "Type of metadata object."
          }
        }
      },
      "SortOptions": {
        "type": "object",
        "properties": {
          "field_name": {
            "type": "string",
            "enum": [
              "NAME",
              "DISPLAY_NAME",
              "AUTHOR",
              "CREATED",
              "MODIFIED"
            ],
            "description": "Name of the field to apply the sort on."
          },
          "order": {
            "type": "string",
            "enum": [
              "ASC",
              "DESC"
            ],
            "description": "Sort order : ASC(Ascending) or DESC(Descending)."
          }
        },
        "description": "Sort options."
      },
      "SystemInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the object"
          },
          "name": {
            "type": "string",
            "description": "Name of the cluster."
          },
          "release_version": {
            "type": "string",
            "description": "The release version of the cluster."
          },
          "time_zone": {
            "type": "string",
            "description": "The timezone of the cluster."
          },
          "locale": {
            "type": "string",
            "description": "The default locale of the cluster."
          },
          "date_format": {
            "type": "string",
            "description": "The default date format representation of the cluster."
          },
          "api_version": {
            "type": "string",
            "description": "The API version of the cluster."
          },
          "type": {
            "type": "string",
            "description": "The deployment type of the cluster."
          },
          "environment": {
            "type": "string",
            "description": "The deployed environment of the cluster."
          },
          "license": {
            "type": "string",
            "description": "The license applied to the cluster."
          },
          "date_time_format": {
            "type": "string",
            "description": "The default date time format representation of the cluster."
          },
          "time_format": {
            "type": "string",
            "description": "The default time format representation of the cluster."
          },
          "system_user_id": {
            "type": "string",
            "description": "The unique identifier of system user."
          },
          "super_user_id": {
            "type": "string",
            "description": "The unique identifier of super user."
          },
          "hidden_object_id": {
            "type": "string",
            "description": "The unique identifier of hidden object."
          },
          "system_group_id": {
            "type": "string",
            "description": "The unique identifier of system group."
          },
          "tsadmin_user_id": {
            "type": "string",
            "description": "The unique identifier of tsadmin user."
          },
          "admin_group_id": {
            "type": "string",
            "description": "The unique identifier of admin group."
          },
          "all_tables_connection_id": {
            "type": "string",
            "description": "The unique identifier of all tables connection."
          },
          "all_user_group_id": {
            "type": "string",
            "description": "The unique identifier of ALL group."
          },
          "accept_language": {
            "type": "string",
            "description": "The supported accept language by the cluster."
          },
          "all_user_group_member_user_count": {
            "type": "integer",
            "format": "int32",
            "description": "The count of users of ALL group."
          },
          "logical_model_version": {
            "type": "integer",
            "format": "int32",
            "description": "The version number of logical model of the cluster."
          }
        }
      },
      "SystemConfig": {
        "type": "object",
        "properties": {
          "onboarding_content_url": {
            "type": "string"
          }
        }
      },
      "OrgResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "Unique identifier of the Org."
          },
          "name": {
            "type": "string",
            "description": "Name of the Org."
          },
          "status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "IN_ACTIVE"
            ],
            "description": "Status of the Org."
          },
          "description": {
            "type": "string",
            "description": "Description of the Org."
          },
          "visibility": {
            "type": "string",
            "enum": [
              "SHOW",
              "HIDDEN"
            ],
            "description": "Visibility of the Org."
          }
        }
      },
      "Tag": {
        "type": "object",
        "required": [
          "name",
          "id"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "color": {
            "type": "string"
          },
          "deleted": {
            "type": "boolean"
          },
          "hidden": {
            "type": "boolean"
          },
          "external": {
            "type": "boolean"
          },
          "deprecated": {
            "type": "boolean"
          },
          "creation_time_in_millis": {
            "type": "number",
            "format": "float"
          },
          "modification_time_in_millis": {
            "type": "number",
            "format": "float"
          },
          "author_id": {
            "type": "string"
          },
          "modifier_id": {
            "type": "string"
          },
          "owner_id": {
            "type": "string"
          }
        }
      },
      "UserGroupResponse": {
        "type": "object",
        "required": [
          "display_name",
          "id",
          "name",
          "visibility"
        ],
        "properties": {
          "author_id": {
            "type": "string",
            "description": "The unique identifier of the object"
          },
          "complete_detail": {
            "type": "boolean",
            "description": "Indicates whether the response has complete detail of the group."
          },
          "content": {
            "type": "object",
            "description": "Content details of the group"
          },
          "creation_time_in_millis": {
            "type": "number",
            "format": "float",
            "description": "Creation time of the group in milliseconds"
          },
          "default_liveboards": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserGroup"
            },
            "description": "Liveboards that are assigned as default Liveboards to the group."
          },
          "deleted": {
            "type": "boolean",
            "description": "Indicates whether the group is deleted"
          },
          "deprecated": {
            "type": "boolean",
            "description": "Indicates whether the group is deprecated"
          },
          "description": {
            "type": "string",
            "description": "Description of the group"
          },
          "display_name": {
            "type": "string",
            "description": "Display name of the group."
          },
          "external": {
            "type": "boolean",
            "description": "Indicates whether the group is external"
          },
          "generation_number": {
            "type": "integer",
            "format": "int32",
            "description": "Generation number of the group"
          },
          "hidden": {
            "type": "boolean",
            "description": "Indicates whether the group is hidden"
          },
          "id": {
            "type": "string",
            "description": "The unique identifier of the object"
          },
          "index": {
            "type": "integer",
            "format": "int32",
            "description": "Index number of the group"
          },
          "index_version": {
            "type": "integer",
            "format": "int32",
            "description": "Index version number of the group"
          },
          "metadata_version": {
            "type": "integer",
            "format": "int32",
            "description": "Metadata version number of the group"
          },
          "modification_time_in_millis": {
            "type": "number",
            "format": "float",
            "description": "Last modified time of the group in milliseconds."
          },
          "modifier_id": {
            "type": "string",
            "description": "The unique identifier of the object"
          },
          "name": {
            "type": "string",
            "description": "Name of the group."
          },
          "orgs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserGroup"
            },
            "description": "Orgs in which group exists."
          },
          "owner_id": {
            "type": "string",
            "description": "The unique identifier of the object"
          },
          "parent_type": {
            "type": "string",
            "enum": [
              "USER",
              "GROUP"
            ],
            "description": "Parent type of the group."
          },
          "privileges": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Privileges which are assigned to the group"
          },
          "sub_groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserGroup"
            },
            "description": "Groups who are part of the group"
          },
          "system_group": {
            "type": "boolean",
            "description": "Indicates whether the group is a system group."
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserGroup"
            },
            "description": "Tags associated with the group."
          },
          "type": {
            "type": "string",
            "enum": [
              "LOCAL_GROUP",
              "LDAP_GROUP"
            ],
            "description": "Type of the group."
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserGroup"
            },
            "description": "Users who are part of the group."
          },
          "visibility": {
            "type": "string",
            "enum": [
              "SHARABLE",
              "NON_SHARABLE"
            ],
            "description": "Visibility of the group. The SHARABLE makes a group visible to other users and groups, and thus allows them to share objects."
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Role"
            },
            "description": "List of roles assgined to the user"
          }
        }
      },
      "Role": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "id of the role"
          },
          "name": {
            "type": "string",
            "description": "name of the role"
          }
        }
      },
      "MetadataListItemInput": {
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string",
            "description": "Unique ID or name of the metadata."
          },
          "name_pattern": {
            "type": "string",
            "description": "A pattern to match the case-insensitive name of the metadata object. User % for a wildcard match."
          },
          "type": {
            "type": "string",
            "enum": [
              "LIVEBOARD",
              "ANSWER",
              "LOGICAL_TABLE",
              "LOGICAL_COLUMN",
              "CONNECTION",
              "TAG",
              "USER",
              "USER_GROUP",
              "LOGICAL_RELATIONSHIP"
            ],
            "description": "Type of metadata.\n1. Liveboard\n2. Answers\n3. LOGICAL_TABLE for any data object such as table, worksheet or view.\n4. LOGICAL_COLUMN for a column of any data object such as table, worksheet or view.\n5. CONNECTION for creating or modify data connections.\n6. TAG for tag objects.\n7. USER for user objects.\n8. USER_GROUP for group objects.\n9. LOGICAL_RELATIONSHIP for table or worksheet joins. A join combines from one or several data object by using matching values"
          }
        }
      },
      "PermissionInput": {
        "type": "object",
        "required": [
          "principal",
          "share_mode"
        ],
        "properties": {
          "principal": {
            "$ref": "#/components/schemas/PrincipalsInput",
            "description": "Details of users or groups."
          },
          "share_mode": {
            "type": "string",
            "enum": [
              "READ_ONLY",
              "MODIFY",
              "NO_ACCESS"
            ],
            "description": "Object share mode."
          }
        },
        "description": "Details of users or groups."
      },
      "ExcludeMetadataListItemInput": {
        "type": "object",
        "required": [
          "identifier",
          "type"
        ],
        "properties": {
          "identifier": {
            "type": "string",
            "description": "Unique ID or name of the metadata."
          },
          "type": {
            "type": "string",
            "enum": [
              "LIVEBOARD",
              "ANSWER",
              "LOGICAL_TABLE",
              "LOGICAL_COLUMN",
              "CONNECTION",
              "TAG",
              "USER",
              "USER_GROUP",
              "LOGICAL_RELATIONSHIP"
            ],
            "description": "Type of metadata.\n1. Liveboard\n2. Answers\n3. LOGICAL_TABLE for any data object such as table, worksheet or view\n4. LOGICAL_COLUMN for a column of any data object such as table, worksheet or view\n5. CONNECTION for connection objects\n6. TAG for tag objects\n7. USER for user objects\n8. USER_GROUP for group objects\n9. LOGICAL_RELATIONSHIP for table or worksheet joins. A join combines from one or several data object by using matching values."
          }
        }
      },
      "FavoriteObjectOptionsInput": {
        "type": "object",
        "properties": {
          "include": {
            "type": "boolean",
            "default": false,
            "description": "Includes objects marked as favorite for the specified users."
          },
          "user_identifiers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Unique ID or name of the users. If not specified, the favorite objects of current logged in user are returned."
          }
        },
        "description": "Favorite object options."
      },
      "MetadataSearchSortOptions": {
        "type": "object",
        "properties": {
          "field_name": {
            "type": "string",
            "enum": [
              "NAME",
              "DISPLAY_NAME",
              "AUTHOR",
              "CREATED",
              "MODIFIED",
              "VIEWS",
              "FAVORITES",
              "LAST_ACCESSED"
            ],
            "description": "Name of the field to apply the sort on."
          },
          "order": {
            "type": "string",
            "enum": [
              "ASC",
              "DESC"
            ],
            "description": "Sort order : ASC(Ascending) or DESC(Descending)."
          }
        },
        "description": "Sort options."
      },
      "MetadataSearchResponse": {
        "type": "object",
        "required": [
          "metadata_type"
        ],
        "properties": {
          "metadata_id": {
            "type": "string",
            "description": "Unique identifier of the metadata."
          },
          "metadata_name": {
            "type": "string",
            "description": "Name of the metadata."
          },
          "metadata_type": {
            "type": "string",
            "enum": [
              "LIVEBOARD",
              "ANSWER",
              "LOGICAL_TABLE",
              "LOGICAL_COLUMN",
              "CONNECTION",
              "TAG",
              "USER",
              "USER_GROUP",
              "LOGICAL_RELATIONSHIP"
            ],
            "description": "Type of the metadata."
          },
          "dependent_objects": {
            "type": "object",
            "description": "Details of dependent objects of the metadata objects."
          },
          "incomplete_objects": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "Details of incomplete information of the metadata objects if any."
          },
          "metadata_detail": {
            "type": "object",
            "description": "Complete details of the metadata objects."
          },
          "metadata_header": {
            "type": "object",
            "description": "Header information of the metadata objects."
          },
          "visualization_headers": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "Visualization header information of the metadata objects."
          },
          "stats": {
            "type": "object",
            "description": "Stats of the metadata object. Includes views, favorites, last_accessed."
          }
        },
        "description": "Metadata Search Response Object."
      },
      "SqlQueryResponse": {
        "type": "object",
        "required": [
          "metadata_id",
          "metadata_name",
          "metadata_type",
          "sql_queries"
        ],
        "properties": {
          "metadata_id": {
            "type": "string",
            "description": "Unique identifier of the metadata."
          },
          "metadata_name": {
            "type": "string",
            "description": "Name of the metadata."
          },
          "metadata_type": {
            "type": "string",
            "enum": [
              "LIVEBOARD",
              "ANSWER",
              "LOGICAL_TABLE",
              "LOGICAL_COLUMN",
              "CONNECTION",
              "TAG",
              "USER",
              "USER_GROUP",
              "LOGICAL_RELATIONSHIP"
            ],
            "description": "Type of the metadata."
          },
          "sql_queries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SqlQuery"
            },
            "description": "SQL query details of metadata objects."
          }
        }
      },
      "SqlQuery": {
        "type": "object",
        "required": [
          "metadata_id",
          "metadata_name",
          "sql_query"
        ],
        "properties": {
          "metadata_id": {
            "type": "string",
            "description": "Unique identifier of the metadata."
          },
          "metadata_name": {
            "type": "string",
            "description": "Name of the metadata."
          },
          "sql_query": {
            "type": "string",
            "description": "SQL query of a metadata object."
          }
        },
        "description": "Response format associated with fetch SQL query api"
      },
      "PdfOptionsInput": {
        "type": "object",
        "properties": {
          "include_cover_page": {
            "type": "boolean",
            "default": true,
            "description": "Indicates whether to include the cover page with the Liveboard title."
          },
          "include_custom_logo": {
            "type": "boolean",
            "default": true,
            "description": "Indicates whether to include customized wide logo in the footer if available."
          },
          "include_filter_page": {
            "type": "boolean",
            "default": true,
            "description": "Indicates whether to include a page with all applied filters."
          },
          "include_page_number": {
            "type": "boolean",
            "default": true,
            "description": "Indicates whether to include page number in the footer of each page."
          },
          "page_orientation": {
            "type": "string",
            "enum": [
              "PORTRAIT",
              "LANDSCAPE"
            ],
            "default": "PORTRAIT",
            "description": "Page orientation of the PDF."
          },
          "truncate_table": {
            "type": "boolean",
            "default": false,
            "description": "Indicates whether to include only the first page of the tables."
          },
          "page_footer_text": {
            "type": "string",
            "description": "Text to include in the footer of each page."
          }
        }
      },
      "PngOptionsInput": {
        "type": "object",
        "properties": {
          "include_cover_page": {
            "type": "boolean",
            "default": false,
            "description": "Indicates whether to include the cover page with the Liveboard title."
          },
          "include_filter_page": {
            "type": "boolean",
            "default": false,
            "description": "Indicates whether to include a page with all applied filters."
          }
        }
      },
      "PrincipalsInput": {
        "type": "object",
        "required": [
          "identifier"
        ],
        "properties": {
          "identifier": {
            "type": "string",
            "description": "Unique ID or name of the principal object such as a user or group."
          },
          "type": {
            "type": "string",
            "enum": [
              "USER",
              "USER_GROUP"
            ],
            "description": "Principal type."
          }
        }
      },
      "PermissionsMetadataTypeInput": {
        "type": "object",
        "required": [
          "identifier"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "LIVEBOARD",
              "ANSWER",
              "LOGICAL_TABLE",
              "LOGICAL_COLUMN",
              "CONNECTION"
            ],
            "description": "Type of metadata object."
          },
          "identifier": {
            "type": "string",
            "description": "Unique ID or name of the metadata object."
          }
        },
        "description": "MetadataType InputType used in Permission API's"
      },
      "SearchDataResponse": {
        "type": "object",
        "required": [
          "contents"
        ],
        "properties": {
          "contents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AnswerContent"
            },
            "description": "Data content of metadata objects"
          }
        },
        "description": "Response format associated with the search data API."
      },
      "AnswerContent": {
        "type": "object",
        "required": [
          "available_data_row_count",
          "column_names",
          "data_rows",
          "record_offset",
          "record_size",
          "returned_data_row_count",
          "sampling_ratio"
        ],
        "properties": {
          "available_data_row_count": {
            "type": "integer",
            "format": "int32",
            "description": "Total available data row count."
          },
          "column_names": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Name of the columns."
          },
          "data_rows": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "Rows of data set."
          },
          "record_offset": {
            "type": "integer",
            "format": "int32",
            "description": "The starting record number from where the records should be included."
          },
          "record_size": {
            "type": "integer",
            "format": "int32",
            "description": "The number of records that should be included."
          },
          "returned_data_row_count": {
            "type": "integer",
            "format": "int32",
            "description": "Total returned data row count."
          },
          "sampling_ratio": {
            "type": "number",
            "format": "float",
            "description": "Sampling ratio (0 to 1). If the query was sampled, it is the ratio of keys returned in the data set to the total number of keys expected in the query. If the value is 1.0, this means that the complete result is returned."
          }
        }
      },
      "LiveboardDataResponse": {
        "type": "object",
        "required": [
          "metadata_id",
          "metadata_name",
          "contents"
        ],
        "properties": {
          "metadata_id": {
            "type": "string",
            "description": "The unique identifier of the object"
          },
          "metadata_name": {
            "type": "string",
            "description": "Name of the metadata object"
          },
          "contents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LiveboardContent"
            },
            "description": "Data content of metadata objects"
          }
        }
      },
      "LiveboardContent": {
        "type": "object",
        "required": [
          "available_data_row_count",
          "column_names",
          "data_rows",
          "record_offset",
          "record_size",
          "returned_data_row_count",
          "sampling_ratio"
        ],
        "properties": {
          "available_data_row_count": {
            "type": "integer",
            "format": "int32",
            "description": "Total available data row count."
          },
          "column_names": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Name of the columns."
          },
          "data_rows": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "Rows of data set."
          },
          "record_offset": {
            "type": "integer",
            "format": "int32",
            "description": "The starting record number from where the records should be included."
          },
          "record_size": {
            "type": "integer",
            "format": "int32",
            "description": "The number of records that should be included."
          },
          "returned_data_row_count": {
            "type": "integer",
            "format": "int32",
            "description": "Total returned data row count."
          },
          "sampling_ratio": {
            "type": "number",
            "format": "float",
            "description": "Sampling ratio (0 to 1). If the query was sampled, it is the ratio of keys returned in the data set to the total number of keys expected in the query. If the value is 1.0, this means that the complete result is returned."
          },
          "visualization_id": {
            "type": "string",
            "description": "Unique ID of the visualization."
          },
          "visualization_name": {
            "type": "string",
            "description": "Name of the visualization."
          }
        }
      },
      "AnswerDataResponse": {
        "type": "object",
        "required": [
          "metadata_id",
          "metadata_name",
          "contents"
        ],
        "properties": {
          "metadata_id": {
            "type": "string",
            "description": "The unique identifier of the object"
          },
          "metadata_name": {
            "type": "string",
            "description": "Name of the metadata object"
          },
          "contents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AnswerContent"
            },
            "description": "Data content of metadata objects"
          }
        },
        "description": "Response format associated with fetch data api"
      },
      "LogResponse": {
        "type": "object",
        "required": [
          "date",
          "log"
        ],
        "properties": {
          "date": {
            "type": "string",
            "description": "Date timestamp of the log entry"
          },
          "log": {
            "type": "string",
            "description": "Log data"
          }
        }
      },
      "RepoConfigObject": {
        "type": "object",
        "properties": {
          "repository_url": {
            "type": "string",
            "description": "Remote repository URL configured"
          },
          "username": {
            "type": "string",
            "description": "Username to authenticate connection to the version control system"
          },
          "commit_branch_name": {
            "type": "string",
            "description": "Name of the remote branch where objects from this Thoughtspot instance will be versioned."
          },
          "branches": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Branches that have been pulled in local repository"
          },
          "enable_guid_mapping": {
            "type": "boolean",
            "description": "Maintain mapping of guid for the deployment to an instance"
          },
          "configuration_branch_name": {
            "type": "string",
            "description": "Name of the branch where the configuration files related to operations between Thoughtspot and version control repo should be maintained."
          },
          "org": {
            "$ref": "#/components/schemas/Org",
            "description": "Details of the Org"
          }
        }
      },
      "CommitHistoryResponse": {
        "type": "object",
        "required": [
          "committer",
          "author",
          "comment",
          "commit_time",
          "commit_id",
          "branch"
        ],
        "properties": {
          "committer": {
            "$ref": "#/components/schemas/CommiterType",
            "description": "Repository user using which changes were committed"
          },
          "author": {
            "$ref": "#/components/schemas/AuthorType",
            "description": "Thoughtspot user who commits the changes"
          },
          "comment": {
            "type": "string",
            "description": "Comments associated with the commit"
          },
          "commit_time": {
            "type": "string",
            "description": "Time at which the changes were committed."
          },
          "commit_id": {
            "type": "string",
            "description": "SHA id associated with the commit"
          },
          "branch": {
            "type": "string",
            "description": "Branch where changes were committed"
          }
        }
      },
      "CommiterType": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Email id of the committer"
          },
          "username": {
            "type": "string",
            "description": "Username of the committer"
          }
        }
      },
      "AuthorType": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Email id of the committer"
          },
          "username": {
            "type": "string",
            "description": "Username of the committer"
          }
        }
      },
      "ConnectionInput": {
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string",
            "description": "Unique ID or name of the connection."
          },
          "name_pattern": {
            "type": "string",
            "description": "A pattern to match case-insensitive name of the connection object. User `%` for a wildcard match."
          },
          "data_warehouse_objects": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataWarehouseObjectInput"
            },
            "description": "Filter options for databases, schemas, tables and columns."
          }
        }
      },
      "DataWarehouseObjectInput": {
        "type": "object",
        "properties": {
          "database": {
            "type": "string",
            "description": "Name of the database."
          },
          "schema": {
            "type": "string",
            "description": "Name of the schema within the database."
          },
          "table": {
            "type": "string",
            "description": "Name of the table within the schema."
          },
          "column": {
            "type": "string",
            "description": "Name of the column within the table."
          }
        }
      },
      "SortOptionInput": {
        "type": "object",
        "properties": {
          "field_name": {
            "type": "string",
            "enum": [
              "NAME",
              "DISPLAY_NAME",
              "AUTHOR",
              "CREATED",
              "MODIFIED",
              "LAST_ACCESSED",
              "SYNCED",
              "VIEWS",
              "USER_STATE",
              "ROW_COUNT"
            ],
            "description": "Name of the field to apply the sort on."
          },
          "order": {
            "type": "string",
            "enum": [
              "ASC",
              "DESC"
            ],
            "description": "Sort order : ASC(Ascending) or DESC(Descending)."
          }
        }
      },
      "SearchConnectionResponse": {
        "type": "object",
        "required": [
          "id",
          "name",
          "data_warehouse_type"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID of the connection."
          },
          "name": {
            "type": "string",
            "description": "Name of the connection."
          },
          "description": {
            "type": "string",
            "description": "Description of the connection."
          },
          "data_warehouse_type": {
            "type": "string",
            "enum": [
              "SNOWFLAKE",
              "AMAZON_REDSHIFT",
              "GOOGLE_BIGQUERY",
              "AZURE_SYNAPSE",
              "TERADATA",
              "SAP_HANA",
              "STARBURST",
              "ORACLE_ADW",
              "DATABRICKS",
              "DENODO",
              "DREMIO",
              "TRINO",
              "PRESTO",
              "POSTGRES",
              "SQLSERVER",
              "MYSQL",
              "GENERIC_JDBC",
              "AMAZON_RDS_POSTGRESQL",
              "AMAZON_AURORA_POSTGRESQL",
              "AMAZON_RDS_MYSQL",
              "AMAZON_AURORA_MYSQL",
              "LOOKER",
              "AMAZON_ATHENA",
              "SINGLESTORE",
              "GCP_SQLSERVER",
              "GCP_ALLOYDB_POSTGRESQL",
              "GCP_POSTGRESQL",
              "GCP_MYSQL"
            ],
            "description": "Type of data warehouse."
          },
          "data_warehouse_objects": {
            "$ref": "#/components/schemas/DataWarehouseObjects",
            "description": "List of Data warehouse objects"
          },
          "details": {
            "type": "object",
            "description": "Details of the connection."
          }
        }
      },
      "DataWarehouseObjects": {
        "type": "object",
        "required": [
          "databases"
        ],
        "properties": {
          "databases": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Database"
            },
            "description": "Databases of the connection."
          }
        }
      },
      "Database": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the database."
          },
          "schemas": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SchemaObject"
            },
            "description": "Schemas of the database."
          },
          "auto_created": {
            "type": "boolean",
            "description": "Determines if the object is auto created."
          }
        }
      },
      "SchemaObject": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the schema."
          },
          "tables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Table"
            },
            "description": "Tables in the schema."
          }
        }
      },
      "Table": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the table."
          },
          "columns": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Column"
            },
            "description": "Columns of the table."
          },
          "type": {
            "type": "string",
            "description": "Type of table. Either view or table"
          },
          "description": {
            "type": "string",
            "description": "Description of the table"
          },
          "selected": {
            "type": "boolean",
            "description": "Determines if the table is selected"
          },
          "linked": {
            "type": "boolean",
            "description": "Determines if the table is linked"
          },
          "relationships": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "List of relationships for the table"
          }
        }
      },
      "Column": {
        "type": "object",
        "required": [
          "name",
          "data_type"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the column"
          },
          "data_type": {
            "type": "string",
            "description": "Data type of the column"
          },
          "is_aggregate": {
            "type": "string",
            "description": "Determines if the column schema is an aggregate"
          },
          "can_import": {
            "type": "boolean",
            "description": "Determines if the column schema can be imported"
          },
          "selected": {
            "type": "boolean",
            "description": "Determines if the table is selected"
          },
          "is_linked_active": {
            "type": "boolean",
            "description": "Determines if the table is linked"
          }
        }
      },
      "SearchRoleResponse": {
        "type": "object",
        "required": [
          "id",
          "name",
          "description",
          "privileges"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique Id of the role."
          },
          "name": {
            "type": "string",
            "description": "Name of the role"
          },
          "description": {
            "type": "string",
            "description": "Description of the role"
          },
          "groups_assigned_count": {
            "type": "integer",
            "format": "int32",
            "description": "number of groups assigned with this role"
          },
          "orgs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GenericInfo"
            },
            "description": "Orgs in which role exists."
          },
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GenericInfo"
            },
            "description": "Details of groups assigned with this role"
          },
          "privileges": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "UNKNOWN",
                "ADMINISTRATION",
                "AUTHORING",
                "USERDATAUPLOADING",
                "DATADOWNLOADING",
                "USERMANAGEMENT",
                "SECURITYMANAGEMENT",
                "LOGICALMODELING",
                "DATAMANAGEMENT",
                "TAGMANAGEMENT",
                "SHAREWITHALL",
                "SYSTEMMANAGEMENT",
                "JOBSCHEDULING",
                "A3ANALYSIS",
                "EXPERIMENTALFEATUREPRIVILEGE",
                "BYPASSRLS",
                "RANALYSIS",
                "DISABLE_PINBOARD_CREATION",
                "DEVELOPER",
                "APPLICATION_ADMINISTRATION",
                "USER_ADMINISTRATION",
                "GROUP_ADMINISTRATION",
                "BACKUP_ADMINISTRATION",
                "SYSTEM_INFO_ADMINISTRATION",
                "ENABLESPOTAPPCREATION",
                "SYNCMANAGEMENT",
                "ORG_ADMINISTRATION",
                "ROLE_ADMINISTRATION",
                "AUTHENTICATION_ADMINISTRATION",
                "BILLING_INFO_ADMINISTRATION",
                "PREVIEW_THOUGHTSPOT_SAGE",
                "CAN_MANAGE_CUSTOM_CALENDAR",
                "CAN_CREATE_OR_EDIT_CONNECTIONS",
                "CAN_CONFIGURE_CONNECTIONS",
                "CAN_MANAGE_WORKSHEET_VIEWS_TABLES"
              ]
            },
            "description": "Privileges granted to the role."
          },
          "permission": {
            "type": "string",
            "enum": [
              "READ_ONLY",
              "MODIFY",
              "NO_ACCESS"
            ],
            "description": "Permission details of the Role"
          },
          "author_id": {
            "type": "string",
            "description": "Unique identifier of author of the role."
          },
          "modifier_id": {
            "type": "string",
            "description": "Unique identifier of modifier of the role."
          },
          "creation_time_in_millis": {
            "type": "object",
            "description": "Creation time of the role in milliseconds."
          },
          "modification_time_in_millis": {
            "type": "object",
            "description": "Last modified time of the role in milliseconds."
          },
          "deleted": {
            "type": "boolean",
            "description": "Indicates whether the role is deleted."
          },
          "deprecated": {
            "type": "boolean",
            "description": "Indicates whether the role is deprecated."
          },
          "external": {
            "type": "boolean",
            "description": "Indicates whether the role is external."
          },
          "hidden": {
            "type": "boolean",
            "description": "Indicates whether the role is hidden."
          },
          "shared_via_connection": {
            "type": "boolean",
            "description": "Indicates whether the role is shared via connection"
          }
        },
        "description": "Response for search role api should handle hidden privileges as well."
      },
      "Default_Action_Config_Search_Input": {
        "type": "object",
        "properties": {
          "visibility": {
            "type": "boolean",
            "description": "Custom action is available on all visualizations. Earlier naming convention: LOCAL/GLOBAL. TRUE signifies GLOBAL for backward compatibility."
          }
        },
        "description": "Default Custom action configuration. This includes the custom action's visibility across all visualizations and Answers. By default, a custom action is added to all visualizations and Answers."
      },
      "ResponseCustomAction": {
        "type": "object",
        "required": [
          "action_details",
          "default_action_config",
          "id",
          "name"
        ],
        "properties": {
          "action_details": {
            "$ref": "#/components/schemas/Action_details",
            "description": "`Type` and configuration data for custom actions"
          },
          "default_action_config": {
            "$ref": "#/components/schemas/Default_action_config",
            "description": "Default custom action configuration. This includes the custom action's visibility across all visualizations and Answers. By default, a custom action is added to all visualizations and Answers."
          },
          "id": {
            "type": "string",
            "description": "Unique Id of the custom action."
          },
          "metadata_association": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Metadata_Association_Item"
            },
            "description": "Metadata objects to assign the the custom action to."
          },
          "name": {
            "type": "string",
            "description": "Unique name of the custom action."
          },
          "user_groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Object_ID_And_Name"
            },
            "description": "Unique ID or name of the User groups which are associated with the custom action."
          }
        },
        "description": "Custom action details"
      },
      "Action_details": {
        "type": "object",
        "properties": {
          "CALLBACK": {
            "$ref": "#/components/schemas/CALLBACK",
            "description": "CALLBACK Custom Action Type"
          },
          "URL": {
            "$ref": "#/components/schemas/URL",
            "description": "URL Custom Action Type"
          }
        },
        "description": "Type and Configuration for Custom Actions"
      },
      "CALLBACK": {
        "type": "object",
        "properties": {
          "reference": {
            "type": "string",
            "description": "Reference name of the SDK. By default, the value will be set to action name."
          }
        },
        "description": "CALLBACK Custom Action Type"
      },
      "URL": {
        "type": "object",
        "required": [
          "url"
        ],
        "properties": {
          "authentication": {
            "$ref": "#/components/schemas/Authentication",
            "description": "Authorization type for the custom action."
          },
          "parameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ParametersListItem"
            },
            "description": "Query parameters for url."
          },
          "url": {
            "type": "string",
            "description": "Request Url for the Custom action."
          },
          "reference": {
            "type": "string",
            "description": "Reference name of the SDK. By default, the value will be set to action name."
          }
        },
        "description": "URL Custom Action Type"
      },
      "Authentication": {
        "type": "object",
        "properties": {
          "API_Key": {
            "$ref": "#/components/schemas/API_Key",
            "description": "With API key auth, you send a key-value pair to the API either in the request headers or query parameters."
          },
          "Basic_Auth": {
            "$ref": "#/components/schemas/Basic_Auth",
            "description": "Basic Auth: Basic authentication involves sending a verified username and password with your request."
          },
          "Bearer_Token": {
            "type": "string",
            "description": "Bearer tokens enable requests to authenticate using an access key."
          },
          "No_Auth": {
            "type": "string",
            "description": "No authorization. If your request doesn't require authorization."
          }
        },
        "description": "Authorization type for the custom action."
      },
      "API_Key": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Enter your key name"
          },
          "value": {
            "type": "string",
            "description": "Enter you key value"
          }
        },
        "description": "With API key auth, you send a key-value pair to the API either in the request headers or query parameters."
      },
      "Basic_Auth": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string",
            "description": "Password for the basic authentication"
          },
          "username": {
            "type": "string",
            "description": "Username for the basic authentication"
          }
        },
        "description": "Basic Auth: Basic authentication involves sending a verified username and password with your request."
      },
      "ParametersListItem": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Key for the url query parameter"
          },
          "value": {
            "type": "string",
            "description": "Value for the url query parameter"
          }
        }
      },
      "Default_action_config": {
        "type": "object",
        "properties": {
          "visibility": {
            "type": "boolean",
            "description": "Custom action is available on all visualizations. Earlier , the naming convention: LOCAL/GLOBAL. TRUE signifies GLOBAL for backward compatibility."
          }
        },
        "description": "Default Custom action configuration. This includes the custom action's visibility across all visualizations and Answers. By default, a custom action is added to all visualizations and Answers."
      },
      "Metadata_Association_Item": {
        "type": "object",
        "required": [
          "action_config",
          "identifier",
          "type"
        ],
        "properties": {
          "action_config": {
            "$ref": "#/components/schemas/Action_config",
            "description": "Specify that the association is enabled for the metadata object"
          },
          "identifier": {
            "type": "string",
            "description": "Unique ID or name of the metadata."
          },
          "type": {
            "type": "string",
            "description": "Type of metadata."
          }
        }
      },
      "Action_config": {
        "type": "object",
        "properties": {
          "position": {
            "type": "string",
            "description": "Position of the Custom action on the Metadata object. Earlier naming convention: context."
          },
          "visibility": {
            "type": "boolean",
            "description": "Visibility of the metadata association with custom action. Earlier naming convention: enabled"
          }
        },
        "description": "Specify that the association is enabled for the metadata object"
      },
      "CustomActionMetadataTypeInput": {
        "type": "object",
        "required": [
          "identifier"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "VISUALIZATION",
              "ANSWER",
              "WORKSHEET"
            ],
            "description": "Type of metadata object."
          },
          "identifier": {
            "type": "string",
            "description": "Unique ID or name of the metadata object."
          }
        },
        "description": "MetadataType InputType used in Custom Action API's"
      },
      "GenericInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "UserGroup": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "JWT_User_Options": {
        "type": "object",
        "properties": {
          "parameters": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Runtime_Filter"
                },
                {
                  "$ref": "#/components/schemas/Runtime_Sort"
                },
                {
                  "$ref": "#/components/schemas/Runtime_Param_Override"
                }
              ]
            }
          },
          "metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JWT_Metadata_Object"
            }
          }
        },
        "description": "JWT user options to create a JWT token given the payload."
      },
      "JWT_Parameter": {
        "type": "object",
        "properties": {
          "runtime_filter": {
            "type": "object",
            "description": "Runtime filter parameter type in JWT."
          },
          "runtime_sort": {
            "type": "object",
            "description": "Runtime sort parameter type in JWT."
          },
          "runtime_param_override": {
            "type": "object",
            "description": "Runtime param override type in JWT."
          }
        },
        "description": "List of runtime parameters need to set during the session."
      },
      "JWT_Metadata_Object": {
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "LIVEBOARD",
              "ANSWER"
            ]
          }
        },
        "description": "Metadata objects."
      },
      "Token": {
        "type": "object",
        "required": [
          "token",
          "creation_time_in_millis",
          "expiration_time_in_millis",
          "scope",
          "valid_for_user_id",
          "valid_for_username"
        ],
        "properties": {
          "token": {
            "type": "string",
            "description": "Bearer auth token."
          },
          "creation_time_in_millis": {
            "type": "number",
            "format": "float",
            "description": "Token creation time in milliseconds."
          },
          "expiration_time_in_millis": {
            "type": "number",
            "format": "float",
            "description": "Token expiration time in milliseconds."
          },
          "scope": {
            "$ref": "#/components/schemas/Scope",
            "description": "Token access scope details"
          },
          "valid_for_user_id": {
            "type": "string",
            "description": "Username to whom the token is issued."
          },
          "valid_for_username": {
            "type": "string",
            "description": "Unique identifier of the user to whom the token is issued."
          }
        }
      },
      "Scope": {
        "type": "object",
        "required": [
          "access_type"
        ],
        "properties": {
          "access_type": {
            "type": "string",
            "description": "Object access scope type."
          },
          "org_id": {
            "type": "integer",
            "format": "int32",
            "description": "Unique identifier of the metadata."
          },
          "metadata_id": {
            "type": "string",
            "description": "Unique identifier of the Org."
          }
        }
      },
      "ResponseActivationURL": {
        "type": "object",
        "properties": {
          "activation_link": {
            "type": "string",
            "description": "Activation link to activate the user."
          }
        },
        "description": "The object representation with activation link."
      },
      "ImportUser": {
        "type": "object",
        "required": [
          "user_identifier",
          "display_name"
        ],
        "properties": {
          "user_identifier": {
            "type": "string",
            "description": "Unique ID or name of the user."
          },
          "display_name": {
            "type": "string",
            "description": "Display name of the user."
          },
          "password": {
            "type": "string",
            "description": "Password of the user."
          },
          "account_type": {
            "type": "string",
            "enum": [
              "LOCAL_USER",
              "LDAP_USER",
              "SAML_USER",
              "OIDC_USER",
              "REMOTE_USER"
            ],
            "default": "LOCAL_USER",
            "description": "Type of the user account."
          },
          "account_status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "INACTIVE",
              "EXPIRED",
              "LOCKED",
              "PENDING"
            ],
            "default": "ACTIVE",
            "description": "Status of the user account."
          },
          "email": {
            "type": "string",
            "description": "Email address of the user."
          },
          "org_identifiers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "ID or name of the Orgs to which the user belongs."
          },
          "group_identifiers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "ID or name of the groups to which the user belongs."
          },
          "visibility": {
            "type": "string",
            "enum": [
              "SHARABLE",
              "NON_SHARABLE"
            ],
            "description": "Visibility of the users. The SHARABLE property makes a user visible to other users and group, who can share objects with the user."
          },
          "notify_on_share": {
            "type": "boolean",
            "default": true,
            "description": "Notify user when other users or groups share metadata objects"
          },
          "show_onboarding_experience": {
            "type": "boolean",
            "description": "Show or hide the new user onboarding walkthroughs"
          },
          "onboarding_experience_completed": {
            "type": "boolean",
            "description": "Revisit the new user onboarding walkthroughs"
          },
          "home_liveboard_identifier": {
            "type": "string",
            "description": "Unique ID or name of the default Liveboard assigned to the user."
          },
          "favorite_metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FavoriteMetadataInput"
            },
            "description": "Metadata objects to add to the user's favorites list."
          }
        }
      },
      "ImportUsersResponse": {
        "type": "object",
        "properties": {
          "users_added": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImportUserType"
            }
          },
          "users_updated": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImportUserType"
            }
          },
          "users_deleted": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImportUserType"
            }
          }
        }
      },
      "ImportUserType": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the user."
          },
          "name": {
            "type": "string",
            "description": "Name of the user."
          }
        }
      },
      "TagMetadataTypeInput": {
        "type": "object",
        "required": [
          "identifier"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "LIVEBOARD",
              "ANSWER",
              "LOGICAL_TABLE",
              "LOGICAL_COLUMN",
              "CONNECTION"
            ],
            "description": "Type of metadata (Optional when given identifier is ID).\n1. LIVEBOARD\n2. ANSWERS\n3. LOGICAL_TABLE for any data object such as table, worksheet or view.\n4. LOGICAL_COLUMN for a column of any data object such as tables, worksheets or views."
          },
          "identifier": {
            "type": "string",
            "description": "Unique ID or name of the metadata."
          }
        }
      },
      "GroupsImportListInput": {
        "type": "object",
        "required": [
          "display_name",
          "group_identifier"
        ],
        "properties": {
          "display_name": {
            "type": "string",
            "description": "Unique display name of the group."
          },
          "group_identifier": {
            "type": "string",
            "description": "Unique ID or name of the group."
          },
          "default_liveboard_identifiers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Unique ID of Liveboards that will be assigned as default Liveboards to the users in the group."
          },
          "description": {
            "type": "string",
            "description": "Description of the group."
          },
          "privileges": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "ADMINISTRATION",
                "AUTHORING",
                "USERDATAUPLOADING",
                "DATADOWNLOADING",
                "USERMANAGEMENT",
                "DATAMANAGEMENT",
                "SHAREWITHALL",
                "JOBSCHEDULING",
                "A3ANALYSIS",
                "EXPERIMENTALFEATUREPRIVILEGE",
                "BYPASSRLS",
                "RANALYSIS",
                "DEVELOPER",
                "USER_ADMINISTRATION",
                "GROUP_ADMINISTRATION",
                "SYNCMANAGEMENT",
                "CAN_CREATE_CATALOG",
                "DISABLE_PINBOARD_CREATION",
                "ENABLESPOTAPPCREATION",
                "LIVEBOARD_VERIFIER",
                "PREVIEW_THOUGHTSPOT_SAGE"
              ]
            },
            "description": "Privileges that will be assigned to the group."
          },
          "sub_group_identifiers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Unique ID or name of the sub-groups to add to the group."
          },
          "type": {
            "type": "string",
            "enum": [
              "LOCAL_GROUP",
              "LDAP_GROUP"
            ],
            "description": "Type of the group."
          },
          "user_identifiers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Unique ID or name of the users to assign to the group."
          },
          "visibility": {
            "type": "string",
            "enum": [
              "SHARABLE",
              "NON_SHARABLE"
            ],
            "description": "Visibility of the group. The SHARABLE makes a group visible to other users and groups, and thus allows them to share objects."
          }
        }
      },
      "ImportUserGroupsResponse": {
        "type": "object",
        "required": [
          "groups_added",
          "groups_deleted",
          "groups_updated"
        ],
        "properties": {
          "groups_added": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserGroup"
            },
            "description": "The groups which are added into the system."
          },
          "groups_deleted": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserGroup"
            },
            "description": "The groups which are deleted from the system."
          },
          "groups_updated": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserGroup"
            },
            "description": "The groups which are updated in the system."
          }
        }
      },
      "ExportMetadataTypeInput": {
        "type": "object",
        "required": [
          "identifier"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "LIVEBOARD",
              "ANSWER",
              "LOGICAL_TABLE",
              "CONNECTION",
              "CUSTOM_ACTION"
            ],
            "description": "Type of metadata (Optional when given identifier is ID)."
          },
          "identifier": {
            "type": "string",
            "description": "Unique ID or name of the metadata object."
          }
        },
        "description": "MetadataType InputType used in Export MetadataType API"
      },
      "DeleteMetadataTypeInput": {
        "type": "object",
        "required": [
          "identifier"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "LIVEBOARD",
              "ANSWER",
              "LOGICAL_TABLE",
              "LOGICAL_COLUMN",
              "LOGICAL_RELATIONSHIP"
            ],
            "description": "Type of metadata (Optional when given identifier is ID)."
          },
          "identifier": {
            "type": "string",
            "description": "Unique ID or name of the metadata object."
          }
        },
        "description": "MetadataType InputType used in Delete MetadataType API"
      },
      "AuthorMetadataTypeInput": {
        "type": "object",
        "required": [
          "identifier"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "LIVEBOARD",
              "ANSWER",
              "LOGICAL_TABLE"
            ],
            "description": "Type of metadata."
          },
          "identifier": {
            "type": "string",
            "description": "Unique ID or name of the metadata object."
          }
        },
        "description": "MetadataType InputType used in Author API's"
      },
      "SharePermissionsInput": {
        "type": "object",
        "required": [
          "principal",
          "share_mode"
        ],
        "properties": {
          "principal": {
            "$ref": "#/components/schemas/PrincipalsInput",
            "description": "Details of users or groups."
          },
          "share_mode": {
            "type": "string",
            "enum": [
              "READ_ONLY",
              "MODIFY",
              "NO_ACCESS"
            ],
            "description": "Type of access to the shared object"
          }
        }
      },
      "MetadataObject": {
        "type": "object",
        "required": [
          "identifier"
        ],
        "properties": {
          "identifier": {
            "type": "string",
            "description": "Unique ID or name of the metadata"
          },
          "type": {
            "type": "string",
            "enum": [
              "LIVEBOARD",
              "ANSWER",
              "LOGICAL_TABLE"
            ],
            "description": "Type of metadata."
          }
        }
      },
      "CommitResponse": {
        "type": "object",
        "properties": {
          "committer": {
            "$ref": "#/components/schemas/CommiterType",
            "description": "Repository user using which changes were committed"
          },
          "author": {
            "$ref": "#/components/schemas/AuthorType",
            "description": "Thoughtspot user who commits the changes"
          },
          "comment": {
            "type": "string",
            "description": "Comments associated with the commit"
          },
          "commit_time": {
            "type": "string",
            "description": "Time at which the changes were committed."
          },
          "commit_id": {
            "type": "string",
            "description": "SHA id associated with the commit"
          },
          "branch": {
            "type": "string",
            "description": "Branch where changes were committed"
          },
          "committed_files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommitFileType"
            },
            "description": "Files that were pushed as part of this commit"
          }
        }
      },
      "CommitFileType": {
        "type": "object",
        "required": [
          "file_name",
          "status_code"
        ],
        "properties": {
          "file_name": {
            "type": "string",
            "description": "Name of the file deployed"
          },
          "status_code": {
            "type": "string",
            "description": "Indicates the status of deployment for the file"
          },
          "status_message": {
            "type": "string",
            "description": "Any error or warning with the deployment"
          }
        }
      },
      "RevertResponse": {
        "type": "object",
        "properties": {
          "committer": {
            "$ref": "#/components/schemas/CommiterType",
            "description": "Repository user using which changes were committed"
          },
          "author": {
            "$ref": "#/components/schemas/AuthorType",
            "description": "Thoughtspot user who commits the changes"
          },
          "comment": {
            "type": "string",
            "description": "Comments associated with the commit"
          },
          "commit_time": {
            "type": "string",
            "description": "Time at which the changes were committed."
          },
          "commit_id": {
            "type": "string",
            "description": "SHA id associated with the commit"
          },
          "branch": {
            "type": "string",
            "description": "Branch where changes were committed"
          },
          "committed_files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommitFileType"
            },
            "description": "Files that were pushed as part of this commit"
          },
          "reverted_metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RevertedMetadata"
            },
            "description": "Metadata of reverted file of this commit"
          }
        }
      },
      "RevertedMetadata": {
        "type": "object",
        "required": [
          "file_name",
          "metadata_name",
          "metadata_type",
          "status_code",
          "status_message"
        ],
        "properties": {
          "file_name": {
            "type": "string",
            "description": "Name of the file deployed"
          },
          "metadata_name": {
            "type": "string",
            "description": "Name of the metadata object"
          },
          "metadata_type": {
            "type": "string",
            "description": "Type of the metadata object"
          },
          "status_code": {
            "type": "string",
            "description": "Indicates the status of deployment for the file"
          },
          "status_message": {
            "type": "string",
            "description": "Any error or warning with the deployment"
          }
        }
      },
      "DeployResponse": {
        "type": "object",
        "properties": {
          "file_name": {
            "type": "string",
            "description": "Name of the file deployed"
          },
          "metadata_name": {
            "type": "string",
            "description": "Name of the metadata object"
          },
          "metadata_type": {
            "type": "string",
            "description": "Type of the metadata object"
          },
          "status_code": {
            "type": "string",
            "description": "Indicates the status of deployment for the file"
          },
          "status_message": {
            "type": "string",
            "description": "Any error or warning with the deployment"
          }
        }
      },
      "CreateConnectionResponse": {
        "type": "object",
        "required": [
          "id",
          "name",
          "data_warehouse_type"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the connection created."
          },
          "name": {
            "type": "string",
            "description": "Name of the connection."
          },
          "data_warehouse_type": {
            "type": "string",
            "enum": [
              "SNOWFLAKE",
              "AMAZON_REDSHIFT",
              "GOOGLE_BIGQUERY",
              "AZURE_SYNAPSE",
              "TERADATA",
              "SAP_HANA",
              "STARBURST",
              "ORACLE_ADW",
              "DATABRICKS",
              "DENODO",
              "DREMIO",
              "TRINO",
              "PRESTO",
              "POSTGRES",
              "SQLSERVER",
              "MYSQL",
              "GENERIC_JDBC",
              "AMAZON_RDS_POSTGRESQL",
              "AMAZON_AURORA_POSTGRESQL",
              "AMAZON_RDS_MYSQL",
              "AMAZON_AURORA_MYSQL",
              "LOOKER",
              "AMAZON_ATHENA",
              "SINGLESTORE",
              "GCP_SQLSERVER",
              "GCP_ALLOYDB_POSTGRESQL",
              "GCP_POSTGRESQL",
              "GCP_MYSQL"
            ],
            "description": "Type of data warehouse."
          },
          "details": {
            "type": "object",
            "description": "Details of the connection."
          }
        }
      },
      "FetchConnectionDiffStatusResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean",
            "description": "Status of the connection diff."
          }
        }
      },
      "RoleResponse": {
        "type": "object",
        "required": [
          "id",
          "name",
          "description",
          "privileges"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique Id of the role."
          },
          "name": {
            "type": "string",
            "description": "Name of the role"
          },
          "description": {
            "type": "string",
            "description": "Description of the role"
          },
          "groups_assigned_count": {
            "type": "integer",
            "format": "int32",
            "description": "number of groups assigned with this role"
          },
          "orgs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GenericInfo"
            },
            "description": "Orgs in which role exists."
          },
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GenericInfo"
            },
            "description": "Details of groups assigned with this role"
          },
          "privileges": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "USERDATAUPLOADING",
                "DATADOWNLOADING",
                "DATAMANAGEMENT",
                "SHAREWITHALL",
                "JOBSCHEDULING",
                "A3ANALYSIS",
                "EXPERIMENTALFEATUREPRIVILEGE",
                "BYPASSRLS",
                "DISABLE_PINBOARD_CREATION",
                "DEVELOPER",
                "APPLICATION_ADMINISTRATION",
                "USER_ADMINISTRATION",
                "GROUP_ADMINISTRATION",
                "SYSTEM_INFO_ADMINISTRATION",
                "SYNCMANAGEMENT",
                "ORG_ADMINISTRATION",
                "ROLE_ADMINISTRATION",
                "AUTHENTICATION_ADMINISTRATION",
                "BILLING_INFO_ADMINISTRATION",
                "CAN_MANAGE_CUSTOM_CALENDAR",
                "CAN_CREATE_OR_EDIT_CONNECTIONS",
                "CAN_CONFIGURE_CONNECTIONS",
                "CAN_MANAGE_WORKSHEET_VIEWS_TABLES"
              ]
            },
            "description": "Privileges granted to the role."
          },
          "permission": {
            "type": "string",
            "enum": [
              "READ_ONLY",
              "MODIFY",
              "NO_ACCESS"
            ],
            "description": "Permission details of the Role"
          },
          "author_id": {
            "type": "string",
            "description": "Unique identifier of author of the role."
          },
          "modifier_id": {
            "type": "string",
            "description": "Unique identifier of modifier of the role."
          },
          "creation_time_in_millis": {
            "type": "object",
            "description": "Creation time of the role in milliseconds."
          },
          "modification_time_in_millis": {
            "type": "object",
            "description": "Last modified time of the role in milliseconds."
          },
          "deleted": {
            "type": "boolean",
            "description": "Indicates whether the role is deleted."
          },
          "deprecated": {
            "type": "boolean",
            "description": "Indicates whether the role is deprecated."
          },
          "external": {
            "type": "boolean",
            "description": "Indicates whether the role is external."
          },
          "hidden": {
            "type": "boolean",
            "description": "Indicates whether the role is hidden."
          },
          "shared_via_connection": {
            "type": "boolean",
            "description": "Indicates whether the role is shared via connection"
          }
        }
      },
      "LiveboardOptionsInput": {
        "type": "object",
        "required": [
          "visualization_identifiers"
        ],
        "properties": {
          "visualization_identifiers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Unique ID or name of visualizations."
          }
        },
        "description": "Options to specify details of Liveboard."
      },
      "SchedulesPdfOptionsInput": {
        "type": "object",
        "properties": {
          "complete_liveboard": {
            "type": "boolean",
            "description": "Indicates whether to include complete Liveboard."
          },
          "include_cover_page": {
            "type": "boolean",
            "description": "Indicates whether to include cover page with the Liveboard title."
          },
          "include_custom_logo": {
            "type": "boolean",
            "description": "Indicates whether to include customized wide logo in the footer if available."
          },
          "include_filter_page": {
            "type": "boolean",
            "description": "Indicates whether to include a page with all applied filters."
          },
          "include_page_number": {
            "type": "boolean",
            "description": "Indicates whether to include page number in the footer of each page"
          },
          "page_footer_text": {
            "type": "string",
            "description": "Text to include in the footer of each page."
          },
          "page_orientation": {
            "type": "string",
            "description": "Page orientation of the PDF."
          },
          "page_size": {
            "type": "string",
            "enum": [
              "A4"
            ],
            "description": "Page size."
          },
          "truncate_table": {
            "type": "boolean",
            "description": "Indicates whether to include only first page of the tables."
          }
        },
        "description": "Options for PDF export."
      },
      "FrequencyInput": {
        "type": "object",
        "required": [
          "cron_expression"
        ],
        "properties": {
          "cron_expression": {
            "$ref": "#/components/schemas/CronExpressionInput",
            "description": "Schedule selected cron expression."
          }
        },
        "description": "Configuration of schedule with cron expression"
      },
      "CronExpressionInput": {
        "type": "object",
        "required": [
          "day_of_month",
          "day_of_week",
          "hour",
          "minute",
          "month",
          "second"
        ],
        "properties": {
          "day_of_month": {
            "type": "string",
            "description": "Day of month of the object."
          },
          "day_of_week": {
            "type": "string",
            "description": "Day of Week of the object."
          },
          "hour": {
            "type": "string",
            "description": "Hour of the object."
          },
          "minute": {
            "type": "string",
            "description": "Minute of the object."
          },
          "month": {
            "type": "string",
            "description": "Month of the object."
          },
          "second": {
            "type": "string",
            "description": "Second of the object."
          }
        },
        "description": "Schedule selected cron expression."
      },
      "RecipientDetailsInput": {
        "type": "object",
        "properties": {
          "emails": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Emails of the recipients."
          },
          "principals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PrincipalsListItemInput"
            },
            "description": "User or groups to be set as recipients of the schedule notifications."
          }
        },
        "description": "Recipients of the scheduled job notification."
      },
      "PrincipalsListItemInput": {
        "type": "object",
        "required": [
          "identifier",
          "type"
        ],
        "properties": {
          "identifier": {
            "type": "string",
            "description": "Unique ID or name of the user or group."
          },
          "type": {
            "type": "string",
            "description": "Principal type."
          }
        }
      },
      "ResponseSchedule": {
        "type": "object",
        "required": [
          "author",
          "creation_time_in_millis",
          "file_format",
          "frequency",
          "id",
          "metadata",
          "name",
          "recipient_details",
          "time_zone"
        ],
        "properties": {
          "author": {
            "$ref": "#/components/schemas/Author",
            "description": "Author of the schedule."
          },
          "creation_time_in_millis": {
            "type": "object",
            "description": "Schedule creation time in milliseconds."
          },
          "description": {
            "type": "string",
            "description": "Description of the job."
          },
          "file_format": {
            "type": "string",
            "description": "Export file format."
          },
          "frequency": {
            "$ref": "#/components/schemas/Frequency",
            "description": "Configuration of schedule with cron expression"
          },
          "id": {
            "type": "string",
            "description": "GUID of the scheduled job."
          },
          "liveboard_options": {
            "$ref": "#/components/schemas/LiveboardOptions",
            "description": "Options to specify details of Liveboard."
          },
          "metadata": {
            "$ref": "#/components/schemas/MetadataResponse",
            "description": "Unique ID or name of the metadata."
          },
          "name": {
            "type": "string",
            "description": "Name of the scheduled job."
          },
          "pdf_options": {
            "$ref": "#/components/schemas/PdfOptions",
            "description": "Options for PDF export."
          },
          "recipient_details": {
            "$ref": "#/components/schemas/RecipientDetails",
            "description": "Recipient of the scheduled job notifications."
          },
          "status": {
            "type": "string",
            "description": "Status of the job"
          },
          "time_zone": {
            "type": "string",
            "description": "Time zone"
          },
          "history_runs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseScheduleRun"
            },
            "description": "Schedule runs history records."
          }
        }
      },
      "Author": {
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the object."
          },
          "name": {
            "type": "string",
            "description": "Name of the object."
          }
        },
        "description": "Author of the schedule."
      },
      "Frequency": {
        "type": "object",
        "required": [
          "cron_expression"
        ],
        "properties": {
          "cron_expression": {
            "$ref": "#/components/schemas/CronExpression",
            "description": "Schedule selected cron expression."
          }
        },
        "description": "Configuration of schedule with cron expression"
      },
      "CronExpression": {
        "type": "object",
        "required": [
          "day_of_month",
          "day_of_week",
          "hour",
          "minute",
          "month",
          "second"
        ],
        "properties": {
          "day_of_month": {
            "type": "string",
            "description": "Day of month of the object."
          },
          "day_of_week": {
            "type": "string",
            "description": "Day of Week of the object."
          },
          "hour": {
            "type": "string",
            "description": "Hour of the object."
          },
          "minute": {
            "type": "string",
            "description": "Minute of the object."
          },
          "month": {
            "type": "string",
            "description": "Month of the object."
          },
          "second": {
            "type": "string",
            "description": "Second of the object."
          }
        },
        "description": "Schedule selected cron expression."
      },
      "LiveboardOptions": {
        "type": "object",
        "required": [
          "visualization_identifiers"
        ],
        "properties": {
          "visualization_identifiers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Unique ID or name of visualizations."
          }
        },
        "description": "Options to specify details of Liveboard."
      },
      "MetadataResponse": {
        "type": "object",
        "required": [
          "id",
          "type"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "LIVEBOARD"
            ]
          }
        }
      },
      "PdfOptions": {
        "type": "object",
        "properties": {
          "complete_liveboard": {
            "type": "boolean",
            "description": "Indicates whether to include complete Liveboard."
          },
          "include_cover_page": {
            "type": "boolean",
            "description": "Indicates whether to include cover page with the Liveboard title."
          },
          "include_custom_logo": {
            "type": "boolean",
            "description": "Indicates whether to include customized wide logo in the footer if available."
          },
          "include_filter_page": {
            "type": "boolean",
            "description": "Indicates whether to include a page with all applied filters."
          },
          "include_page_number": {
            "type": "boolean",
            "description": "Indicates whether to include page number in the footer of each page"
          },
          "page_footer_text": {
            "type": "string",
            "description": "Text to include in the footer of each page."
          },
          "page_orientation": {
            "type": "string",
            "description": "Page orientation of the PDF."
          },
          "page_size": {
            "type": "string",
            "enum": [
              "A4"
            ],
            "description": "Page size."
          },
          "truncate_table": {
            "type": "boolean",
            "description": "Indicates whether to include only first page of the tables."
          }
        },
        "description": "Options for PDF export."
      },
      "RecipientDetails": {
        "type": "object",
        "properties": {
          "emails": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Emails of the recipients. Specify email address if the recipient is not a ThoughtSpot user."
          },
          "principals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PrincipalsListItem"
            },
            "description": "List of user or groups to subscribe for the scheduled job notifications."
          }
        },
        "description": "Recipient configuration which includes email address, ID or name of the users and groups."
      },
      "PrincipalsListItem": {
        "type": "object",
        "required": [
          "identifier",
          "type"
        ],
        "properties": {
          "identifier": {
            "type": "string",
            "description": "Unique ID or name of the user or group."
          },
          "type": {
            "type": "string",
            "description": "Principal type. Valid values are"
          }
        }
      },
      "ResponseScheduleRun": {
        "type": "object",
        "required": [
          "id",
          "start_time_in_millis",
          "end_time_in_millis",
          "status"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "GUID of the scheduled job."
          },
          "start_time_in_millis": {
            "type": "integer",
            "format": "int32",
            "description": "Schedule run start time in milliseconds."
          },
          "end_time_in_millis": {
            "type": "integer",
            "format": "int32",
            "description": "Schedule run end time in milliseconds."
          },
          "status": {
            "type": "string",
            "description": "Status of the schedule run."
          },
          "detail": {
            "type": "string",
            "description": "Message details related to the schedule run."
          }
        },
        "description": "Schedule run response object"
      },
      "MetadataInput": {
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "LIVEBOARD"
            ]
          }
        }
      },
      "SortingOptions": {
        "type": "object",
        "properties": {
          "field_name": {
            "type": "string",
            "description": "Name of the field to apply the sort on."
          },
          "order": {
            "type": "string",
            "description": "Sort order : ASC(Ascending) or DESC(Descending)."
          }
        },
        "description": "Sort options."
      },
      "ScheduleHistoryRunsOptionsInput": {
        "type": "object",
        "properties": {
          "include_history_runs": {
            "type": "boolean",
            "default": false,
            "description": "Indicates whether to fetch history runs for the scheduled notification."
          },
          "record_size": {
            "type": "integer",
            "format": "int32",
            "default": 10,
            "description": "Indicates the max number of records that can be fetched as past runs of any scheduled job."
          },
          "record_offset": {
            "type": "integer",
            "format": "int32",
            "default": 0,
            "description": "Indicates the starting record number from where history runs records should be fetched."
          }
        }
      },
      "Action_Details_Input_Create": {
        "type": "object",
        "properties": {
          "CALLBACK": {
            "$ref": "#/components/schemas/CALLBACKInputMandatory",
            "description": "CALLBACK Custom Action Type"
          },
          "URL": {
            "$ref": "#/components/schemas/URLInputMandatory",
            "description": "URL Custom Action Type"
          }
        },
        "description": "Action details includes Type and Configuration for Custom Actions, either Callback or URL is required.\nWhen both callback and url are provided, callback would be considered"
      },
      "CALLBACKInputMandatory": {
        "type": "object",
        "properties": {
          "reference": {
            "type": "string",
            "description": "Reference name. By default, the value will be set to action name."
          }
        },
        "description": "CALLBACK Custom Action Type"
      },
      "URLInputMandatory": {
        "type": "object",
        "required": [
          "url"
        ],
        "properties": {
          "authentication": {
            "$ref": "#/components/schemas/AuthenticationInput",
            "description": "Authorization type for the custom action."
          },
          "parameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ParametersListItemInput"
            },
            "description": "Query parameters for url."
          },
          "url": {
            "type": "string",
            "description": "Request Url for the Custom action."
          },
          "reference": {
            "type": "string",
            "description": "Reference name. By default the value will be set to action name"
          }
        },
        "description": "URL Custom Action Type"
      },
      "AuthenticationInput": {
        "type": "object",
        "properties": {
          "API_Key": {
            "$ref": "#/components/schemas/API_KeyInput",
            "description": "With API key auth, you send a key-value pair to the API either in the request headers or query parameters."
          },
          "Basic_Auth": {
            "$ref": "#/components/schemas/Basic_AuthInput",
            "description": "Basic Auth: Basic authentication involves sending a verified username and password with your request."
          },
          "Bearer_Token": {
            "type": "string",
            "description": "Bearer tokens enable requests to authenticate using an access key."
          },
          "No_Auth": {
            "type": "string",
            "description": "No authorization. If your request doesn't require authorization."
          }
        },
        "description": "Authorization type for the custom action."
      },
      "API_KeyInput": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Enter your key name"
          },
          "value": {
            "type": "string",
            "description": "Enter you key value"
          }
        },
        "description": "With API key auth, you send a key-value pair to the API either in the request headers or query parameters."
      },
      "Basic_AuthInput": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string",
            "description": "Password for the basic authentication"
          },
          "username": {
            "type": "string",
            "description": "Username for the basic authentication"
          }
        },
        "description": "Basic Auth: Basic authentication involves sending a verified username and password with your request."
      },
      "ParametersListItemInput": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Key for the url query parameter"
          },
          "value": {
            "type": "string",
            "description": "Value for the url query parameter"
          }
        }
      },
      "Associate_Metadata_Input_Create": {
        "type": "object",
        "required": [
          "identifier"
        ],
        "properties": {
          "action_config": {
            "$ref": "#/components/schemas/ActionConfigInputCreate",
            "description": "Specify that the association is enabled for the metadata object"
          },
          "identifier": {
            "type": "string",
            "description": "Unique ID or name of the metadata."
          },
          "type": {
            "type": "string",
            "enum": [
              "VISUALIZATION",
              "ANSWER",
              "WORKSHEET"
            ],
            "description": "Type of metadata."
          }
        }
      },
      "ActionConfigInputCreate": {
        "type": "object",
        "properties": {
          "position": {
            "type": "string",
            "enum": [
              "MENU",
              "PRIMARY",
              "CONTEXT_MENU"
            ],
            "default": "MENU",
            "description": "Position of the Custom action on the Metadata object. Earlier naming convention: context."
          },
          "visibility": {
            "type": "boolean",
            "default": true,
            "description": "Visibility of the metadata association with custom action. Earlier naming convention: enabled"
          }
        },
        "description": "Specify that the association is enabled for the metadata object Default"
      },
      "Default_Action_Config_Input_Create": {
        "type": "object",
        "properties": {
          "visibility": {
            "type": "boolean",
            "default": true,
            "description": "Custom action is available on all visualizations. Earlier naming convention: LOCAL/GLOBAL. TRUE signifies GLOBAL for backward compatibility.\nDefault: true"
          }
        },
        "description": "Default Custom action configuration. This includes the custom action's visibility across all visualizations and Answers. By default, a custom action is added to all visualizations and Answers."
      },
      "Action_Details_Input": {
        "type": "object",
        "properties": {
          "CALLBACK": {
            "$ref": "#/components/schemas/CALLBACKInput",
            "description": "CALLBACK Custom Action Type"
          },
          "URL": {
            "$ref": "#/components/schemas/URLInput",
            "description": "URL Custom Action Type"
          }
        },
        "description": "Action details includes `Type` and configuration details of Custom Actions. Either Callback or URL is required."
      },
      "CALLBACKInput": {
        "type": "object",
        "properties": {
          "reference": {
            "type": "string",
            "description": "Reference name. By default, the value will be set to action name."
          }
        },
        "description": "CALLBACK Custom Action Type"
      },
      "URLInput": {
        "type": "object",
        "properties": {
          "authentication": {
            "$ref": "#/components/schemas/AuthenticationInput",
            "description": "Authorization type for the custom action."
          },
          "parameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ParametersListItemInput"
            },
            "description": "Query parameters for url."
          },
          "url": {
            "type": "string",
            "description": "Request Url for the Custom action."
          },
          "reference": {
            "type": "string",
            "description": "Reference name. By default the value will be set to action name"
          }
        },
        "description": "URL Custom Action Type"
      },
      "Associate_Metadata_Input": {
        "type": "object",
        "properties": {
          "action_config": {
            "$ref": "#/components/schemas/ActionConfigInput",
            "description": "Specify that the association is enabled for the metadata object"
          },
          "identifier": {
            "type": "string",
            "description": "Unique ID or name of the metadata."
          },
          "type": {
            "type": "string",
            "enum": [
              "VISUALIZATION",
              "ANSWER",
              "WORKSHEET"
            ],
            "description": "Type of metadata."
          }
        }
      },
      "ActionConfigInput": {
        "type": "object",
        "properties": {
          "position": {
            "type": "string",
            "enum": [
              "MENU",
              "PRIMARY",
              "CONTEXT_MENU"
            ],
            "description": "Position of the Custom action on the Metadata object. Earlier naming convention: context."
          },
          "visibility": {
            "type": "boolean",
            "description": "Visibility of the metadata association with custom action. Earlier naming convention: enabled"
          }
        },
        "description": "Specify that the association is enabled for the metadata object Default"
      },
      "Default_Action_Config_Input": {
        "type": "object",
        "properties": {
          "visibility": {
            "type": "boolean",
            "description": "Custom action is available on all visualizations. Earlier naming convention: LOCAL/GLOBAL. TRUE signifies GLOBAL for backward compatibility."
          }
        },
        "description": "Default Custom action configuration. This includes the custom action's visibility across all visualizations and Answers. By default, a custom action is added to all visualizations and Answers."
      },
      "ModelTableList": {
        "type": "object",
        "required": [
          "model_name",
          "tables"
        ],
        "properties": {
          "model_name": {
            "type": "string",
            "description": "Name of the Model."
          },
          "model_path": {
            "type": "string",
            "description": "Model directory path, this is optional param and required if there are duplicate models with the same name."
          },
          "tables": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of Tables."
          }
        }
      },
      "Runtime_Filter": {
        "type": "object",
        "properties": {
          "runtime_filter": {
            "type": "object",
            "description": "Runtime filter parameter type in JWT."
          }
        },
        "description": "List of runtime parameters need to set during the session."
      },
      "Runtime_Sort": {
        "type": "object",
        "properties": {
          "runtime_sort": {
            "type": "object",
            "description": "Runtime sort parameter type in JWT."
          }
        },
        "description": "List of runtime parameters need to set during the session."
      },
      "Runtime_Param_Override": {
        "type": "object",
        "properties": {
          "runtime_param_override": {
            "type": "object",
            "description": "Runtime param override type in JWT."
          }
        },
        "description": "List of runtime parameters need to set during the session."
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "servers": [
    {
      "url": "{base-url}",
      "variables": {
        "base-url": {
          "default": "https://localhost:443"
        }
      }
    }
  ]
}
