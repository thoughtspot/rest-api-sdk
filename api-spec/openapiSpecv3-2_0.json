{
  "openapi": "3.0.0",
  "info": {
    "title": "ThoughtSpot Public REST API",
    "version": "2.0"
  },
  "x-roles": [
    {
      "name": "9.0.0.cl",
      "id": "9.0.0.cl",
      "tags": [
        "9.0.0.cl"
      ],
      "description": "Roles for version 9.0.0.cl"
    },
    {
      "name": "9.2.0.cl",
      "id": "9.2.0.cl",
      "tags": [
        "9.2.0.cl"
      ],
      "description": "Roles for version 9.2.0.cl"
    },
    {
      "name": "9.5.0.cl",
      "id": "9.5.0.cl",
      "tags": [
        "9.5.0.cl"
      ],
      "description": "Roles for version 9.5.0.cl"
    },
    {
      "name": "9.4.0.cl",
      "id": "9.4.0.cl",
      "tags": [
        "9.4.0.cl"
      ],
      "description": "Roles for version 9.4.0.cl"
    }
  ],
  "tags": [],
  "paths": {
    "/api/rest/2.0/auth/session/user": {
      "get": {
        "operationId": "getCurrentUserInfo",
        "description": "Get session information for the currently logged-in user.\n\nAll users can view their session information. The API response varies according to user's access permissions and group privilege.\n\n <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Authentication",
          "9.0.0.cl"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Fetch current session user detail successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/auth/session/token": {
      "get": {
        "operationId": "getCurrentUserToken",
        "description": "Get token for the currently logged-in user. <br/>  <span class=\"since-beta-tag\">Version: 9.4.0.cl or later</span>",
        "tags": [
          "Authentication",
          "9.4.0.cl"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Fetching token for current user successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTokenResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/users/search": {
      "post": {
        "operationId": "searchUsers",
        "description": "Gets user details.To get details of a specific user, specify the user GUID or name. You can also filter the API response based on groups, Org ID, user visibility, account status, user type, user preference settings, user’s favorite objects, or home Liveboard setting.\n\nAvailable to all users. Users with `ADMINISTRATION` (Can administer ThoughtSpot) privileges can view all users properties.\n\n**Note**: If you are querying users by Org, user privileges may show null values in the API response.\n\n <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Users",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "user_identifier": {
                    "description": "GUID / name of the user to search",
                    "type": "string",
                    "deprecated": false
                  },
                  "display_name": {
                    "description": "A unique display name string for the user account, usually their first and last name",
                    "type": "string",
                    "deprecated": false
                  },
                  "visibility": {
                    "description": "Visibility of the user.",
                    "type": "string",
                    "enum": [
                      "SHARABLE",
                      "NON_SHARABLE"
                    ],
                    "deprecated": false
                  },
                  "email": {
                    "description": "Email of the user account",
                    "type": "string",
                    "deprecated": false
                  },
                  "group_identifiers": {
                    "description": "GUID or name of the group to which the user belongs.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "privileges": {
                    "description": "Privileges assigned to the user.",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "ADMINISTRATION",
                        "AUTHORING",
                        "USERDATAUPLOADING",
                        "DATADOWNLOADING",
                        "USERMANAGEMENT",
                        "DATAMANAGEMENT",
                        "SHAREWITHALL",
                        "JOBSCHEDULING",
                        "A3ANALYSIS",
                        "EXPERIMENTALFEATUREPRIVILEGE",
                        "BYPASSRLS",
                        "RANALYSIS",
                        "DEVELOPER",
                        "USER_ADMINISTRATION",
                        "GROUP_ADMINISTRATION",
                        "SYNCMANAGEMENT",
                        "CAN_CREATE_CATALOG",
                        "DISABLE_PINBOARD_CREATION",
                        "ENABLESPOTAPPCREATION",
                        "LIVEBOARD_VERIFIER",
                        "PREVIEW_THOUGHTSPOT_SAGE"
                      ]
                    },
                    "deprecated": false
                  },
                  "account_type": {
                    "description": "Type of the account.",
                    "type": "string",
                    "enum": [
                      "LOCAL_USER",
                      "LDAP_USER",
                      "SAML_USER",
                      "OIDC_USER",
                      "REMOTE_USER"
                    ],
                    "deprecated": false
                  },
                  "account_status": {
                    "description": "Current status of the user account.",
                    "type": "string",
                    "enum": [
                      "ACTIVE",
                      "INACTIVE",
                      "EXPIRED",
                      "LOCKED",
                      "PENDING"
                    ],
                    "deprecated": false
                  },
                  "notify_on_share": {
                    "description": "User preference for receiving email notifications when another ThoughtSpot user\nshares a metadata object such as Answer, Liveboard, or Worksheet.",
                    "type": "boolean",
                    "deprecated": false,
                    "nullable": true
                  },
                  "show_onboarding_experience": {
                    "description": "The user preference for revisiting the onboarding experience.",
                    "type": "boolean",
                    "deprecated": false,
                    "nullable": true
                  },
                  "onboarding_experience_completed": {
                    "description": "Indicates if the user has completed the onboarding walkthrough.",
                    "type": "boolean",
                    "deprecated": false,
                    "nullable": true
                  },
                  "org_identifiers": {
                    "description": "IDs or names of the Orgs to which the user belongs",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "home_liveboard_identifier": {
                    "description": "Unique ID or name of the users home liveboard.",
                    "type": "string",
                    "deprecated": false
                  },
                  "favorite_metadata": {
                    "description": "Metadata objects which are assigned as favorites of the user.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/FavoriteMetadataInput"
                    },
                    "deprecated": false
                  },
                  "record_offset": {
                    "description": "The starting record number from where the records should be included.",
                    "default": 0,
                    "type": "integer",
                    "format": "int32",
                    "deprecated": false
                  },
                  "record_size": {
                    "description": "The number of records that should be included.",
                    "default": 10,
                    "type": "integer",
                    "format": "int32",
                    "deprecated": false
                  },
                  "sort_options": {
                    "description": "Sort options.",
                    "$ref": "#/components/schemas/SortOptions",
                    "deprecated": false
                  },
                  "role_identifiers": {
                    "description": "Filter with list of role assigned to the user.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "include_favorite_metadata": {
                    "description": "Indicates if the user's favorite objects should be displayed.",
                    "default": false,
                    "type": "boolean",
                    "deprecated": false,
                    "nullable": true
                  }
                }
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "User search result.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/system": {
      "get": {
        "operationId": "getSystemInformation",
        "description": "Get system details <br/>  <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "System",
          "9.0.0.cl"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Cluster information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemInfo"
                },
                "examples": {
                  "example_1": {
                    "value": {
                      "id": "local",
                      "name": "local",
                      "release_version": "test",
                      "time_zone": "America/Los_Angeles",
                      "locale": "",
                      "date_format": "MM/dd/yyyy",
                      "api_version": "v1",
                      "type": "SW",
                      "environment": "DEV",
                      "license": "EAE",
                      "date_time_format": "MM/dd/yyyy h:mm a",
                      "time_format": "HH:mm:ss",
                      "system_user_id": "67e15c06-d153-4924-a4cd-ff615393b60f",
                      "super_user_id": "0f0dd0f7-7411-4195-a4aa-0dc6b58413c9",
                      "hidden_object_id": "31745bb4-defd-4e8b-8de9-8fd01db78827",
                      "system_group_id": "179d8867-cf36-4a8d-a019-63a226fd3196",
                      "tsadmin_user_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                      "admin_group_id": "d0326b56-ef23-4c8a-8327-a30e99bcc72b",
                      "all_tables_connection_id": "bfc6feb4-8dac-402c-8ae8-78b43d318777",
                      "all_user_group_id": "b25ee394-9d13-49e3-9385-cd97f5b253b4",
                      "accept_language": "undefined",
                      "all_user_group_member_user_count": 13,
                      "logical_model_version": 43
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/system/config": {
      "get": {
        "operationId": "getSystemConfig",
        "description": "Get system config information <br/>  <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "System",
          "9.0.0.cl"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Cluster config information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemConfig"
                },
                "examples": {
                  "example_1": {
                    "value": {
                      "onboarding_content_url": ""
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/system/config-overrides": {
      "get": {
        "operationId": "getSystemOverrideInfo",
        "description": "Get cluster override info. <br/>  <span class=\"since-beta-tag\">Version: 9.2.0.cl or later</span>",
        "tags": [
          "System",
          "9.2.0.cl"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Cluster configuration which can be overridden.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/orgs/search": {
      "post": {
        "operationId": "searchOrgs",
        "description": "Gets Orgs configured on a ThoughtSpot instance. Requires cluster administration privileges. <br/>  <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Orgs",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "org_identifier": {
                    "description": "ID or name of the Org.",
                    "type": "string",
                    "deprecated": false
                  },
                  "description": {
                    "description": "Description of the Org.",
                    "type": "string",
                    "deprecated": false
                  },
                  "visibility": {
                    "description": "Visibility of the Org.",
                    "type": "string",
                    "enum": [
                      "SHOW",
                      "HIDDEN"
                    ],
                    "deprecated": false
                  },
                  "status": {
                    "description": "Status of the Org.",
                    "type": "string",
                    "enum": [
                      "ACTIVE",
                      "IN_ACTIVE"
                    ],
                    "deprecated": false
                  },
                  "user_identifiers": {
                    "description": "GUIDs or names of the users for which you want to retrieve the Orgs data.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  }
                }
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Organization search result.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrgResponse"
                  }
                },
                "examples": {
                  "example_1": {
                    "value": [
                      {
                        "id": 0,
                        "name": "Primary",
                        "status": "ACTIVE",
                        "description": "Primary Org",
                        "visibility": "SHOW"
                      },
                      {
                        "id": 583464508,
                        "name": "test_org",
                        "status": "ACTIVE",
                        "description": "test_org",
                        "visibility": "SHOW"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/tags/search": {
      "post": {
        "operationId": "searchTags",
        "description": "Allows searching tags. <br/>  <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Tags",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "tag_identifier": {
                    "description": "Name or Id of the tag.",
                    "type": "string",
                    "deprecated": false
                  },
                  "color": {
                    "description": "Color of the tag.",
                    "type": "string",
                    "deprecated": false
                  }
                }
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Tags search result.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Tag"
                  }
                },
                "examples": {
                  "example_1": {
                    "value": [
                      {
                        "name": "test4",
                        "id": "0935bbb5-17e2-43ab-b657-da6bf347cbb4",
                        "color": "#342323",
                        "deleted": false,
                        "hidden": false,
                        "external": false,
                        "deprecated": false,
                        "creation_time_in_millis": 1684937524885,
                        "modification_time_in_millis": 1684937524885,
                        "author_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                        "modifier_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                        "owner_id": "0935bbb5-17e2-43ab-b657-da6bf347cbb4"
                      },
                      {
                        "name": "test6",
                        "id": "65a5c39a-daf5-4cae-975f-44283628494e",
                        "color": "#342323",
                        "deleted": false,
                        "hidden": false,
                        "external": false,
                        "deprecated": false,
                        "creation_time_in_millis": 1684988834183,
                        "modification_time_in_millis": 1684988887888,
                        "author_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                        "modifier_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                        "owner_id": "65a5c39a-daf5-4cae-975f-44283628494e"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/groups/search": {
      "post": {
        "operationId": "searchUserGroups",
        "description": "Allows searching groups. Requires administrator privileges. <br/>  <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Groups",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "default_liveboard_identifiers": {
                    "description": "GUID of Liveboards which will be assigned as default Liveboards for the users in the specified group.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "description": {
                    "description": "Description of the group.",
                    "type": "string",
                    "deprecated": false
                  },
                  "display_name": {
                    "description": "Display name of the group",
                    "type": "string",
                    "deprecated": false
                  },
                  "group_identifier": {
                    "description": "GUID or name of the group",
                    "type": "string",
                    "deprecated": false
                  },
                  "org_identifiers": {
                    "description": "ID or name of the Org to which the group belongs.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "privileges": {
                    "description": "Privileges assigned to the group.",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "ADMINISTRATION",
                        "AUTHORING",
                        "USERDATAUPLOADING",
                        "DATADOWNLOADING",
                        "USERMANAGEMENT",
                        "DATAMANAGEMENT",
                        "SHAREWITHALL",
                        "JOBSCHEDULING",
                        "A3ANALYSIS",
                        "EXPERIMENTALFEATUREPRIVILEGE",
                        "BYPASSRLS",
                        "RANALYSIS",
                        "DEVELOPER",
                        "USER_ADMINISTRATION",
                        "GROUP_ADMINISTRATION",
                        "SYNCMANAGEMENT",
                        "CAN_CREATE_CATALOG",
                        "DISABLE_PINBOARD_CREATION",
                        "ENABLESPOTAPPCREATION",
                        "LIVEBOARD_VERIFIER",
                        "PREVIEW_THOUGHTSPOT_SAGE"
                      ]
                    },
                    "deprecated": false
                  },
                  "sub_group_identifiers": {
                    "description": "GUID or name of the sub groups. A subgroup is a group assigned to a parent group.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "type": {
                    "description": "Group type.",
                    "type": "string",
                    "enum": [
                      "LOCAL_GROUP",
                      "LDAP_GROUP"
                    ],
                    "deprecated": false
                  },
                  "user_identifiers": {
                    "description": "GUID or name of the users assigned to the group.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "visibility": {
                    "description": "Visibility of the group. To make a group visible to other users and groups,\nset the visibility to SHAREABLE.",
                    "type": "string",
                    "enum": [
                      "SHARABLE",
                      "NON_SHARABLE"
                    ],
                    "deprecated": false
                  },
                  "role_identifiers": {
                    "description": "Filter groups with a list of roles assigned to a group",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "record_offset": {
                    "description": "The starting record number from where the records should be included.",
                    "default": 0,
                    "type": "integer",
                    "format": "int32",
                    "deprecated": false
                  },
                  "record_size": {
                    "description": "The number of records that should be included.",
                    "default": 10,
                    "type": "integer",
                    "format": "int32",
                    "deprecated": false
                  },
                  "sort_options": {
                    "description": "Sort options to filter group details.",
                    "$ref": "#/components/schemas/SortOptions",
                    "deprecated": false
                  }
                }
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "User group search result.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserGroupResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/metadata/search": {
      "post": {
        "operationId": "searchMetadata",
        "description": "Allows searching for metadata objects. You can search for metadata objects\nsuch as Liveboard, Answer. Requires at least view access to the metadata object. <br/>  <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Metadata",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata": {
                    "description": "Metadata objects such as Liveboards, Answers, and Worksheets.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/MetadataListItemInput"
                    },
                    "deprecated": false
                  },
                  "permissions": {
                    "description": "Object permission details to search by.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/PermissionInput"
                    },
                    "deprecated": false
                  },
                  "created_by_user_identifiers": {
                    "description": "GUID or name of user who created the metadata object.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "dependent_object_version": {
                    "description": "Version of the dependent table of the metadata like worksheets.",
                    "default": "V1",
                    "type": "string",
                    "enum": [
                      "V1",
                      "V2"
                    ],
                    "deprecated": false
                  },
                  "exclude_objects": {
                    "description": "List of metadata objects to exclude from search.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ExcludeMetadataListItemInput"
                    },
                    "deprecated": false
                  },
                  "favorite_object_options": {
                    "description": "Options to sort the API response by objects set as favorites\nfor the logged-in user or the users specified in the API request.",
                    "$ref": "#/components/schemas/FavoriteObjectOptionsInput",
                    "deprecated": false
                  },
                  "include_auto_created_objects": {
                    "description": "Includes system-generated metadata objects.",
                    "default": false,
                    "type": "boolean",
                    "deprecated": false,
                    "nullable": true
                  },
                  "include_dependent_objects": {
                    "description": "Includes dependents of the metadata object specified in the API request.\nFor example, a worksheet can consist of dependent objects such as Liveboards or Answers.",
                    "default": false,
                    "type": "boolean",
                    "deprecated": false,
                    "nullable": true
                  },
                  "include_details": {
                    "description": "Includes complete details of the metadata objects.",
                    "default": false,
                    "type": "boolean",
                    "deprecated": false,
                    "nullable": true
                  },
                  "include_headers": {
                    "description": "Includes headers of the metadata objects.",
                    "default": true,
                    "type": "boolean",
                    "deprecated": false,
                    "nullable": true
                  },
                  "include_hidden_objects": {
                    "description": "Includes details of the hidden objects, such as a column in a worksheet or a table.",
                    "default": false,
                    "type": "boolean",
                    "deprecated": false,
                    "nullable": true
                  },
                  "include_incomplete_objects": {
                    "description": "Includes objects with incomplete metadata.",
                    "default": false,
                    "type": "boolean",
                    "deprecated": false,
                    "nullable": true
                  },
                  "include_visualization_headers": {
                    "description": "Includes visualization headers of the specified Liveboard object.",
                    "default": false,
                    "type": "boolean",
                    "deprecated": false,
                    "nullable": true
                  },
                  "include_worksheet_search_assist_data": {
                    "description": "If search assistance lessons are configured on a worksheet,\nthe API returns the search assist data for Worksheet objects.",
                    "type": "boolean",
                    "deprecated": false,
                    "nullable": true
                  },
                  "modified_by_user_identifiers": {
                    "description": "Includes ID or names of the users who have modified the metadata object.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "record_offset": {
                    "description": "The starting record number from where the records should be included.",
                    "default": 0,
                    "type": "integer",
                    "format": "int32",
                    "deprecated": false
                  },
                  "record_size": {
                    "description": "The number of records that should be included.",
                    "default": 10,
                    "type": "integer",
                    "format": "int32",
                    "deprecated": false
                  },
                  "sort_options": {
                    "description": "Sort options to filter metadata details.",
                    "$ref": "#/components/schemas/MetadataSearchSortOptions",
                    "deprecated": false
                  },
                  "tag_identifiers": {
                    "description": "Tags to filter metadata objects by",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "include_stats": {
                    "description": "Indicates whether to include stats of the metadata objects.",
                    "default": false,
                    "type": "boolean",
                    "deprecated": false,
                    "nullable": true
                  }
                }
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Metadata objects search result.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MetadataSearchResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/metadata/liveboard/sql": {
      "post": {
        "operationId": "fetchLiveboardSqlQuery",
        "description": "Fetches SQL query data for Liveboard and its visualizations. <br/>  <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Metadata",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata_identifier": {
                    "description": "ID or name of an Liveboard.",
                    "type": "string",
                    "deprecated": false
                  },
                  "visualization_identifiers": {
                    "description": "Unique ID or name of visualizations.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  }
                },
                "required": [
                  "metadata_identifier"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Fetching SQL query of specified metadata object is successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SqlQueryResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/metadata/answer/sql": {
      "post": {
        "operationId": "fetchAnswerSqlQuery",
        "description": "Fetches SQL query data for an Answer. <br/>  <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Metadata",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata_identifier": {
                    "description": "ID or name of an Answer.",
                    "type": "string",
                    "deprecated": false
                  }
                },
                "required": [
                  "metadata_identifier"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Fetching SQL query of specified metadata object is successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SqlQueryResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/report/liveboard": {
      "post": {
        "operationId": "exportLiveboardReport",
        "description": "Exports Liveboard and visualization data in PDF, PNG, XLS, or CSV format.\nRequires at least view access to the Liveboard. <br/>  <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Reports",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata_identifier": {
                    "description": "GUID or name of the Liveboard object.",
                    "type": "string",
                    "deprecated": false
                  },
                  "visualization_identifiers": {
                    "description": "GUID or name of visualizations on the Liveboard. If this parameter is\nnot defined, the API returns a report with all visualizations saved on a Liveboard.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "transient_content": {
                    "description": "Transient content of the Liveboard.",
                    "type": "string",
                    "deprecated": false
                  },
                  "file_format": {
                    "description": "Export file format.",
                    "default": "CSV",
                    "type": "string",
                    "enum": [
                      "CSV",
                      "PDF",
                      "XLSX",
                      "PNG"
                    ],
                    "deprecated": false
                  },
                  "runtime_filter": {
                    "description": "JSON string representing runtime filter.\n{ col1:'region', op1: 'EQ', val1: 'northeast' }",
                    "type": "object",
                    "deprecated": false
                  },
                  "runtime_sort": {
                    "description": "JSON string representing runtime sort.\n{ sortCol1: 'region', asc1 : true, sortCol2 : 'date' }",
                    "type": "object",
                    "deprecated": false
                  },
                  "pdf_options": {
                    "description": "Options for PDF export.",
                    "$ref": "#/components/schemas/PdfOptionsInput",
                    "deprecated": false
                  },
                  "png_options": {
                    "description": "Options for PNG export.",
                    "$ref": "#/components/schemas/PngOptionsInput",
                    "deprecated": false
                  },
                  "runtime_param_override": {
                    "description": "JSON object for setting values of parameters in runtime.",
                    "type": "object",
                    "deprecated": false
                  }
                },
                "required": [
                  "metadata_identifier"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Export report file of specified metadata object is successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/report/answer": {
      "post": {
        "operationId": "exportAnswerReport",
        "description": "Export report file for Answer data. <br/>  <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Reports",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata_identifier": {
                    "description": "Unique ID or name of the metadata.",
                    "type": "string",
                    "deprecated": false
                  },
                  "file_format": {
                    "description": "Export file format.",
                    "default": "CSV",
                    "type": "string",
                    "enum": [
                      "CSV",
                      "PDF",
                      "XLSX",
                      "PNG"
                    ],
                    "deprecated": false
                  },
                  "runtime_filter": {
                    "description": "JSON string representing runtime filter.\n{ col1:region, op1: EQ, val1: northeast }",
                    "type": "object",
                    "deprecated": false
                  },
                  "runtime_sort": {
                    "description": "JSON string representing runtime sort.\n{ sortCol1: region, asc1 :true, sortCol2 : date }",
                    "type": "object",
                    "deprecated": false
                  },
                  "runtime_param_override": {
                    "description": "JSON object for setting values of parameters in runtime.",
                    "type": "object",
                    "deprecated": false
                  }
                },
                "required": [
                  "metadata_identifier"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Export report file of specified metadata object is successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/security/principals/fetch-permissions": {
      "post": {
        "operationId": "fetchPermissionsOfPrincipals",
        "description": "Fetch permission details for principal objects, such as users and groups. <br/>  <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Security",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "principals": {
                    "description": "GUID or name of the principal.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/PrincipalsInput"
                    },
                    "deprecated": false
                  },
                  "metadata": {
                    "description": "Metadata objects for which you want to fetch permission details.\nIf not specified, the API returns permission details for all\nmetadata objects that the specified users and groups can access.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/PermissionsMetadataTypeInput"
                    },
                    "deprecated": false
                  }
                },
                "required": [
                  "principals"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Fetching permissions of principals is successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "examples": {
                  "example_1": {
                    "value": {
                      "principal_permission_details": [
                        {
                          "principal_id": "7f5e7f87-09a1-487c-a1da-c4bb35e45270",
                          "principal_name": "test_user",
                          "principal_type": "USER",
                          "principal_sub_type": "LOCAL_USER",
                          "metadata_permission_info": [
                            {
                              "metadata_type": "LIVEBOARD",
                              "metadata_permissions": [
                                {
                                  "metadata_id": "2ff57a24-cf90-485f-8b4b-45fc17474c6f",
                                  "metadata_name": "Learn how to use ThoughtSpot",
                                  "metadata_owner": {
                                    "id": "2ff57a24-cf90-485f-8b4b-45fc17474c6f",
                                    "name": "Learn how to use ThoughtSpot"
                                  },
                                  "metadata_author": {
                                    "id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                                    "name": "tsadmin"
                                  },
                                  "permission": "READ_ONLY",
                                  "shared_permission": "NO_ACCESS",
                                  "group_permission": []
                                }
                              ]
                            }
                          ]
                        }
                      ],
                      "__args": {
                        "principals": [
                          {
                            "identifier": "test_user",
                            "type": "USER"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/security/metadata/fetch-permissions": {
      "post": {
        "operationId": "fetchPermissionsOnMetadata",
        "description": "Fetch permission details for metadata objects <br/>  <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Security",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata": {
                    "description": "GUID or name of the metadata object.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/PermissionsMetadataTypeInput"
                    },
                    "deprecated": false
                  },
                  "principals": {
                    "description": "Principal objects for which you want to fetch permissions.\nIf not specified, the API returns all users and groups that\ncan access the specified metadata objects.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/PrincipalsInput"
                    },
                    "deprecated": false
                  },
                  "include_dependent_objects": {
                    "description": "Indicates whether to fetch permissions of depedent metadata objects.",
                    "default": false,
                    "type": "boolean",
                    "deprecated": false,
                    "nullable": true
                  }
                },
                "required": [
                  "metadata"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Fetching permissions of metadata objects is successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "examples": {
                  "example_1": {
                    "value": {
                      "metadata_permission_details": [
                        {
                          "metadata_id": "a62a5bf3-9f16-45b2-a174-7d30b3b577a9",
                          "metadata_name": "testing",
                          "metadata_type": "LIVEBOARD",
                          "metadata_owner": {
                            "id": "a62a5bf3-9f16-45b2-a174-7d30b3b577a9",
                            "name": "testing"
                          },
                          "metadata_author": {
                            "id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                            "name": "tsadmin"
                          },
                          "principal_permission_info": [
                            {
                              "principal_type": "USER_GROUP",
                              "principal_sub_type": "LOCAL_GROUP",
                              "principal_permissions": [
                                {
                                  "principal_id": "d0326b56-ef23-4c8a-8327-a30e99bcc72b",
                                  "principal_name": "Administrator",
                                  "permission": "MODIFY",
                                  "shared_permission": "NO_ACCESS",
                                  "group_permission": []
                                }
                              ]
                            },
                            {
                              "principal_type": "USER",
                              "principal_sub_type": "LOCAL_USER",
                              "principal_permissions": [
                                {
                                  "principal_id": "0f0dd0f7-7411-4195-a4aa-0dc6b58413c9",
                                  "principal_name": "su",
                                  "permission": "MODIFY",
                                  "shared_permission": "NO_ACCESS",
                                  "group_permission": []
                                },
                                {
                                  "principal_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                                  "principal_name": "tsadmin",
                                  "permission": "MODIFY",
                                  "shared_permission": "NO_ACCESS",
                                  "group_permission": []
                                }
                              ]
                            }
                          ]
                        }
                      ],
                      "__args": {
                        "metadata": [
                          {
                            "type": "LIVEBOARD",
                            "identifier": "a62a5bf3-9f16-45b2-a174-7d30b3b577a9"
                          }
                        ],
                        "include_dependent_objects": false
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/searchdata": {
      "post": {
        "operationId": "searchData",
        "description": "Allows passing a search query string and retrieving data from ThoughtSpot. <br/>  <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Data",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query_string": {
                    "description": "Data search query string token.",
                    "type": "string",
                    "deprecated": false
                  },
                  "logical_table_identifier": {
                    "description": "GUID of the data source object, such as a worksheet, view, or table.",
                    "type": "string",
                    "deprecated": false
                  },
                  "data_format": {
                    "description": "JSON output format. By default, the API returns full data in the JSON.",
                    "default": "COMPACT",
                    "type": "string",
                    "enum": [
                      "COMPACT"
                    ],
                    "deprecated": false
                  },
                  "record_offset": {
                    "description": "The starting record number from where the records should be included.",
                    "default": 0,
                    "type": "integer",
                    "format": "int32",
                    "deprecated": false
                  },
                  "record_size": {
                    "description": "The number of records to include in a batch.",
                    "default": 10,
                    "type": "integer",
                    "format": "int32",
                    "deprecated": false
                  },
                  "runtime_filter": {
                    "description": "JSON object representing filter condition to filter the data.",
                    "type": "object",
                    "deprecated": false
                  },
                  "runtime_sort": {
                    "description": "JSON object representing columns to sort the data.",
                    "type": "object",
                    "deprecated": false
                  },
                  "runtime_param_override": {
                    "description": "JSON object for setting values of parameters in runtime.",
                    "type": "object",
                    "deprecated": false
                  }
                },
                "required": [
                  "query_string",
                  "logical_table_identifier"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Fetching data of specified metadata object is successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/metadata/liveboard/data": {
      "post": {
        "operationId": "fetchLiveboardData",
        "description": "Fetches Liveboard data. Requires at least view access to the Liveboard. <br/>  <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Data",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata_identifier": {
                    "description": "GUID or name of the Liveboard.",
                    "type": "string",
                    "deprecated": false
                  },
                  "visualization_identifiers": {
                    "description": "GUIDs or names of the visualizations on the Liveboard.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "transient_content": {
                    "description": "Transient content of the Liveboard.",
                    "type": "string",
                    "deprecated": false
                  },
                  "data_format": {
                    "description": "JSON output format. By default, the API returns full data in the JSON.",
                    "default": "COMPACT",
                    "type": "string",
                    "enum": [
                      "COMPACT"
                    ],
                    "deprecated": false
                  },
                  "record_offset": {
                    "description": "The starting record number from where the records should be included.",
                    "default": 0,
                    "type": "integer",
                    "format": "int32",
                    "deprecated": false
                  },
                  "record_size": {
                    "description": "The number of records to include in a batch.",
                    "default": 10,
                    "type": "integer",
                    "format": "int32",
                    "deprecated": false
                  },
                  "runtime_filter": {
                    "description": "JSON object representing filter condition to filter the data.",
                    "type": "object",
                    "deprecated": false
                  },
                  "runtime_sort": {
                    "description": "JSON object representing columns to sort the data.",
                    "type": "object",
                    "deprecated": false
                  },
                  "runtime_param_override": {
                    "description": "JSON object for setting values of parameters in runtime.",
                    "type": "object",
                    "deprecated": false
                  }
                },
                "required": [
                  "metadata_identifier"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Fetching data of specified metadata object is successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LiveboardDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/metadata/answer/data": {
      "post": {
        "operationId": "fetchAnswerData",
        "description": "Fetches data from a saved Answer. Requires at least view access to the Answer object. <br/>  <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Data",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata_identifier": {
                    "description": "GUID or name of the Answer.",
                    "type": "string",
                    "deprecated": false
                  },
                  "data_format": {
                    "description": "JSON output format. By default, the API returns full data in the JSON.",
                    "default": "COMPACT",
                    "type": "string",
                    "enum": [
                      "COMPACT"
                    ],
                    "deprecated": false
                  },
                  "record_offset": {
                    "description": "The starting record number from where the records should be included.",
                    "default": 0,
                    "type": "integer",
                    "format": "int32",
                    "deprecated": false
                  },
                  "record_size": {
                    "description": "The number of records to include in a batch.",
                    "default": 10,
                    "type": "integer",
                    "format": "int32",
                    "deprecated": false
                  },
                  "runtime_filter": {
                    "description": "JSON object representing filter condition to filter the data.",
                    "type": "object",
                    "deprecated": false
                  },
                  "runtime_sort": {
                    "description": "JSON object representing columns to sort the data.",
                    "type": "object",
                    "deprecated": false
                  },
                  "runtime_param_override": {
                    "description": "JSON object for setting values of parameters in runtime.",
                    "type": "object",
                    "deprecated": false
                  }
                },
                "required": [
                  "metadata_identifier"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Fetching data of specified metadata object is successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnswerDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/logs/fetch": {
      "post": {
        "operationId": "fetchLogs",
        "description": "Fetches security audit logs. Requires administrator privileges. <br/>  <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Log",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "log_type": {
                    "description": "Name of the log type.",
                    "type": "string",
                    "enum": [
                      "SECURITY_AUDIT"
                    ],
                    "deprecated": false
                  },
                  "start_epoch_time_in_millis": {
                    "description": "Start time in EPOCH format",
                    "type": "number",
                    "format": "float",
                    "deprecated": false
                  },
                  "end_epoch_time_in_millis": {
                    "description": "End time in EPOCH format",
                    "type": "number",
                    "format": "float",
                    "deprecated": false
                  }
                },
                "required": [
                  "log_type"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Log fetched successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LogResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/vcs/git/config/search": {
      "post": {
        "operationId": "searchConfig",
        "description": "Search existing Git configurations in the current cluster <br/> <span class=\"since-beta-tag\">Beta</span> <span class=\"since-beta-tag\">Version: 9.2.0.cl or later</span>",
        "tags": [
          "Version Control",
          "9.2.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "org_identifiers": {
                    "description": "   List of Unique identifier of the organization. Provide value -1 for cluster level. Example : [\"OrgID1-or-Name1\", \"OrgID2-or-Name2\"]\n   \n\nNote:  If no org identifier is specified,then the configurations will be returned for all orgs the user has access to <br/>  <span class=\"since-beta-tag\">Version: 9.5.0.cl or later</span>",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  }
                }
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Details of local repository configuration",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RepoConfigObject"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/vcs/git/commits/search": {
      "post": {
        "operationId": "searchCommits",
        "description": "List the commit history of a metadata object <br/> <span class=\"since-beta-tag\">Beta</span> <span class=\"since-beta-tag\">Version: 9.2.0.cl or later</span>",
        "tags": [
          "Version Control",
          "9.2.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata_identifier": {
                    "description": "Unique ID or name of the metadata.",
                    "type": "string",
                    "deprecated": false
                  },
                  "metadata_type": {
                    "description": "Type of metadata.",
                    "type": "string",
                    "enum": [
                      "LIVEBOARD",
                      "ANSWER",
                      "LOGICAL_TABLE"
                    ],
                    "deprecated": false
                  },
                  "branch_name": {
                    "description": "   Name of the branch from which commit history needs to be displayed.\n   \n\nNote: If no branch_name is specified, then commits will be returned for the default branch for this configuration.",
                    "type": "string",
                    "deprecated": false
                  },
                  "record_offset": {
                    "description": "    Record offset point in the commit history to display the response.\n    \n\nNote: If no record offset is specified, the beginning of the record will be considered.",
                    "type": "integer",
                    "format": "int32",
                    "deprecated": false
                  },
                  "record_size": {
                    "description": "    Number of history records from record offset point to be displayed in the response.\n    \n\nNote: If no record size is specified, then all the records will be considered.",
                    "type": "integer",
                    "format": "int32",
                    "deprecated": false
                  }
                },
                "required": [
                  "metadata_identifier"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Commit history of the metadata object",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommitHistoryResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/connection/search": {
      "post": {
        "operationId": "searchConnection",
        "description": "Search connection objects. Requires DATAMANAGEMENT privilege. <br/>  <span class=\"since-beta-tag\">Version: 9.2.0.cl or later</span>",
        "tags": [
          "Connections",
          "9.2.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "connections": {
                    "description": "List of connections and name pattern",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ConnectionInput"
                    },
                    "deprecated": false
                  },
                  "data_warehouse_types": {
                    "description": "Array of types of data warehouse defined for the connection.",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "SNOWFLAKE",
                        "AMAZON_REDSHIFT",
                        "GOOGLE_BIGQUERY",
                        "AZURE_SYNAPSE",
                        "TERADATA",
                        "SAP_HANA",
                        "STARBURST",
                        "ORACLE_ADW",
                        "DATABRICKS",
                        "DENODO",
                        "DREMIO",
                        "TRINO",
                        "PRESTO"
                      ]
                    },
                    "deprecated": false
                  },
                  "record_offset": {
                    "description": "The starting record number from where the records should be included.",
                    "default": 0,
                    "type": "integer",
                    "format": "int32",
                    "deprecated": false
                  },
                  "record_size": {
                    "description": "The number of records that should be included.",
                    "default": 10,
                    "type": "integer",
                    "format": "int32",
                    "deprecated": false
                  },
                  "tag_identifiers": {
                    "description": "Unique ID or name of tags.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "data_warehouse_object_type": {
                    "description": "Data warehouse object type.",
                    "type": "string",
                    "enum": [
                      "DATABASE",
                      "SCHEMA",
                      "TABLE",
                      "COLUMN"
                    ],
                    "deprecated": false
                  },
                  "sort_options": {
                    "description": "Sort options.",
                    "$ref": "#/components/schemas/SortOptionInput",
                    "deprecated": false
                  },
                  "include_details": {
                    "description": "Indicates whether to include complete details of the connection objects.",
                    "type": "boolean",
                    "deprecated": false,
                    "nullable": true
                  },
                  "configuration": {
                    "description": "Configuration values. If empty we are fetching configuration from datasource based on given connection id. If required you can provide config details to fetch specific details. Example input: {}, {\"warehouse\":\"SMALL_WH\",\"database\":\"DEVELOPMENT\"}. This is only applicable when data_warehouse_object_type is selected.",
                    "type": "object",
                    "deprecated": false
                  },
                  "authentication_type": {
                    "description": "List of authentication types to fetch data_ware_house_objects from external Data warehouse. This is only applicable when data_warehouse_object_type is selected.",
                    "default": "SERVICE_ACCOUNT",
                    "type": "string",
                    "enum": [
                      "SERVICE_ACCOUNT",
                      "OAUTH",
                      "IAM",
                      "EXTOAUTH"
                    ],
                    "deprecated": false
                  }
                }
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of connections to the datasource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SearchConnectionResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/roles/search": {
      "post": {
        "operationId": "searchRoles",
        "description": "Gets Roles configured on a ThoughtSpot instance.\nRequires cluster Administration, Role Administration or\nGroup Administration privileges. <br/>  <span class=\"since-beta-tag\">Version: 9.5.0.cl or later</span>",
        "tags": [
          "Roles",
          "9.5.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "role_identifiers": {
                    "description": "unique ID or name of the Roles",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "org_identifiers": {
                    "description": "Unique Id or name of the Organisation",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "group_identifiers": {
                    "description": "Unique Id or name of the User Group",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "privileges": {
                    "description": "Privileges assigned to the Role.",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "UNKNOWN",
                        "ADMINISTRATION",
                        "AUTHORING",
                        "USERDATAUPLOADING",
                        "DATADOWNLOADING",
                        "USERMANAGEMENT",
                        "SECURITYMANAGEMENT",
                        "LOGICALMODELING",
                        "DATAMANAGEMENT",
                        "TAGMANAGEMENT",
                        "SHAREWITHALL",
                        "SYSTEMMANAGEMENT",
                        "JOBSCHEDULING",
                        "A3ANALYSIS",
                        "EXPERIMENTALFEATUREPRIVILEGE",
                        "BYPASSRLS",
                        "RANALYSIS",
                        "DISABLE_PINBOARD_CREATION",
                        "DEVELOPER",
                        "APPLICATION_ADMINISTRATION",
                        "USER_ADMINISTRATION",
                        "GROUP_ADMINISTRATION",
                        "BACKUP_ADMINISTRATION",
                        "SYSTEM_INFO_ADMINISTRATION",
                        "ENABLESPOTAPPCREATION",
                        "SYNCMANAGEMENT",
                        "ORG_ADMINISTRATION",
                        "ROLE_ADMINISTRATION",
                        "AUTHENTICATION_ADMINISTRATION",
                        "BILLING_INFO_ADMINISTRATION",
                        "PREVIEW_THOUGHTSPOT_SAGE"
                      ]
                    },
                    "deprecated": false
                  },
                  "deprecated": {
                    "description": "Indicates whether the role is deprecated.",
                    "type": "boolean",
                    "deprecated": false,
                    "nullable": true
                  },
                  "external": {
                    "description": "Indicates whether the Role is external",
                    "type": "boolean",
                    "deprecated": false,
                    "nullable": true
                  },
                  "shared_via_connection": {
                    "description": "Indicates whether the role is shared via connection",
                    "type": "boolean",
                    "deprecated": false,
                    "nullable": true
                  },
                  "permissions": {
                    "description": "Permission details of the Role",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "READ_ONLY",
                        "MODIFY",
                        "NO_ACCESS"
                      ]
                    },
                    "deprecated": false
                  }
                }
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Roles search result.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SearchRoleResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/auth/session/login": {
      "post": {
        "operationId": "login",
        "description": "Creates a login session for a ThoughtSpot user with basic authentication. In the basic authentication method, REST clients log in to ThoughtSpot using `username` and `password` attributes.\n\nA successful login returns a session cookie that can be used in your subsequent API calls.\n\n <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Authentication",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "description": "Username of the user account",
                    "type": "string",
                    "deprecated": false
                  },
                  "password": {
                    "description": "The password of the user account",
                    "type": "string",
                    "deprecated": false
                  },
                  "org_identifier": {
                    "description": "Id of the Org to be associated with the user login. If no input is provided then last logged in Org will be considered",
                    "type": "string",
                    "deprecated": false
                  },
                  "remember_me": {
                    "description": "A flag to remember the user session. When set to true, sets a session cookie that persists in subsequent API calls.",
                    "default": false,
                    "type": "boolean",
                    "deprecated": false,
                    "nullable": true
                  }
                }
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "204": {
            "description": "User login successful."
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/auth/token/object": {
      "post": {
        "operationId": "getObjectAccessToken",
        "description": "Gets authentication token that provides access to a specific metadata object. By default, the token obtained from ThoughtSpot is valid for 5 mins.\n\nYou can generate the token for a user by providing `username` and `password` (Basic authentication), or by using the cluster’s secret key (Trusted authentication). To generate a `secret_key` on your cluster, administrator must enable **Trusted authentication** in the **Develop** > **Customizations** > **Security Settings** page. For more information, see [Trusted authentication](https://developers.thoughtspot.com/docs/?pageid=trusted-auth).\n\nWhen both `password` and `secret_key` are included in the API request, `password` takes precedence.\n\n#### Just-in-time provisioning\n\nFor just-in-time user creation and provisioning, use the following attributes.\n\n- `auto_create`\n- `username`\n\nTo assign privileges to the new user, specify the group name or GUID in `group_identifiers`.\n\nTo add the user to an Org, send the `Org ID` in the API request.\n\n**Note**: This feature is only available for clusters with trusted authentication enabled.\n\nTo provision a new user, you need `ADMINISTRATION` (Can administer ThoughtSpot) privilege.\n\n <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Authentication",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "description": "Username of the user account",
                    "type": "string",
                    "deprecated": false
                  },
                  "object_id": {
                    "description": "GUID of the ThoughtSpot object. If set, the bearer will only have access to the specified Liveboard or another object.",
                    "type": "string",
                    "deprecated": false
                  },
                  "password": {
                    "description": "The password of the user account",
                    "default": "",
                    "type": "string",
                    "deprecated": false
                  },
                  "secret_key": {
                    "description": "The secret key string provided by the ThoughtSpot application server. ThoughtSpot generates this secret key when you enable trusted authentication.",
                    "default": "",
                    "type": "string",
                    "deprecated": false
                  },
                  "validity_time_in_sec": {
                    "description": "Duration in seconds after which the token expires",
                    "default": 300,
                    "type": "integer",
                    "format": "int32",
                    "deprecated": false
                  },
                  "org_id": {
                    "description": "Id of the Org to be associated with the user login. If no input is provided then last logged in Org will be considered",
                    "default": 0,
                    "type": "integer",
                    "format": "int32",
                    "deprecated": false
                  },
                  "email": {
                    "description": "Indicates email id of the user. Use this parameter to provision a user just-in-time (JIT).",
                    "type": "string",
                    "deprecated": false
                  },
                  "display_name": {
                    "description": "Indicates display name of the user. Use this parameter to provision a user just-in-time (JIT).",
                    "type": "string",
                    "deprecated": false
                  },
                  "auto_create": {
                    "description": "“Creates a new user if the specified username does not already exist in ThoughtSpot. Use this parameter to provision a user just-in-time (JIT) \n\n\nNote: This is only available for clusters with trusted authentication enabled. ",
                    "default": false,
                    "type": "boolean",
                    "deprecated": false,
                    "nullable": true
                  },
                  "group_identifiers": {
                    "description": "Unique ID or name of the User Groups to which newly created user to be added. Use this parameter to provision a user just-in-time (JIT).",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  }
                },
                "required": [
                  "username",
                  "object_id"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Bearer auth token creation successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Token"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/api/rest/2.0/auth/token/full": {
      "post": {
        "operationId": "getFullAccessToken",
        "description": "Gets authentication token that provides full access to ThoughtSpot application. By default, the token obtained remains valid for 5 mins.\n\nYou can generate the token for a user by providing `username` and `password` (Basic authentication), or by using the cluster’s secret key (Trusted authentication). To generate a `secret_key` on your cluster, administrator must enable **Trusted authentication** in the **Develop** > **Customizations** > **Security Settings** page. For more information, see [Trusted authentication](https://developers.thoughtspot.com/docs/?pageid=trusted-auth).\n\nWhen both `password` and `secret_key` are included in the API request, `password` takes precedence.\n\n#### Just-in-time provisioning\n\nFor just-in-time user creation and provisioning, use the following attributes.\n\n- `auto_create`\n- `username`\n\nTo assign privileges to the new user, specify the group name or GUID in `group_identifiers`.\n\nTo add the user to an Org, specify the Org ID in the `org_id` attribute.\n\n**Note**: This feature is only available for clusters with trusted authentication enabled.\n\nTo provision a new user, you need `ADMINISTRATION` (Can administer ThoughtSpot) privilege.\n\n <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Authentication",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "description": "Username of the user account",
                    "type": "string",
                    "deprecated": false
                  },
                  "password": {
                    "description": "The password of the user account",
                    "default": "",
                    "type": "string",
                    "deprecated": false
                  },
                  "secret_key": {
                    "description": "The secret key string provided by the ThoughtSpot application server. ThoughtSpot generates this secret key when you enable trusted authentication.",
                    "default": "",
                    "type": "string",
                    "deprecated": false
                  },
                  "validity_time_in_sec": {
                    "description": "Duration in seconds after which the token expires",
                    "default": 300,
                    "type": "integer",
                    "format": "int32",
                    "deprecated": false
                  },
                  "org_id": {
                    "description": "Id of the Org to be associated with the user login. If no input is provided then last logged in Org will be considered",
                    "default": 0,
                    "type": "integer",
                    "format": "int32",
                    "deprecated": false
                  },
                  "email": {
                    "description": "Indicates email id of the user. Use this parameter to provision a user just-in-time (JIT).",
                    "type": "string",
                    "deprecated": false
                  },
                  "display_name": {
                    "description": "Indicates display name of the user. Use this parameter to provision a user just-in-time (JIT).",
                    "type": "string",
                    "deprecated": false
                  },
                  "auto_create": {
                    "description": "   Creates a new user if the specified username does not already exist in ThoughtSpot. Use this parameter to provision a user just-in-time (JIT). \n\nNote: This is only available for clusters with trusted authentication enabled.",
                    "default": false,
                    "type": "boolean",
                    "deprecated": false,
                    "nullable": true
                  },
                  "group_identifiers": {
                    "description": "ID or name of the groups to which the newly created user belongs. Use this parameter to provision a user just-in-time (JIT).",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  }
                },
                "required": [
                  "username"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Bearer auth token creation successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Token"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/api/rest/2.0/auth/session/logout": {
      "post": {
        "operationId": "logout",
        "description": "Logs a user out of their current session.\n\n <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Authentication",
          "9.0.0.cl"
        ],
        "parameters": [],
        "responses": {
          "204": {
            "description": "User logout successful."
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/auth/token/revoke": {
      "post": {
        "operationId": "revokeToken",
        "description": "Revokes the authentication token issued for current user session.\n\nThe token of your current session expires when you make a call to the `/api/rest/2.0/auth/token/revoke` endpoint.\nthe users will not be able to access ThoughtSpot objects until a new token is obtained.\n\nTo start the session, request for a new token from ThoughtSpot. See [Get Object Access Token](/http/api-endpoints/authentication/get-object-access-token)\nand [Get Full Access Token](http/api-endpoints/authentication/get-full-access-token).\n\n <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Authentication",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "user_identifier": {
                    "type": "string",
                    "deprecated": false
                  },
                  "token": {
                    "type": "string",
                    "deprecated": false
                  }
                }
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "204": {
            "description": "Token successfully revoked."
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/users/create": {
      "post": {
        "operationId": "createUser",
        "description": "Creates a user in ThoughtSpot. The API endpoint also allows you to add user properties such as email address, account status, share notification preferences, and sharing visibility. You can also assign the user to groups and Orgs, and set favorite objects.\n\nRequires ADMINISTRATION (Can administer Thoughtspot) privilege.\n\n <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Users",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of the user. The username string must be unique.",
                    "type": "string",
                    "deprecated": false
                  },
                  "display_name": {
                    "description": "A unique display name string for the user account, usually their first and last name",
                    "type": "string",
                    "deprecated": false
                  },
                  "password": {
                    "description": "Password for the user account.",
                    "type": "string",
                    "deprecated": false
                  },
                  "email": {
                    "description": "Email of the user account",
                    "type": "string",
                    "deprecated": false
                  },
                  "account_type": {
                    "description": "Type of the account.",
                    "default": "LOCAL_USER",
                    "type": "string",
                    "enum": [
                      "LOCAL_USER",
                      "LDAP_USER",
                      "SAML_USER",
                      "OIDC_USER",
                      "REMOTE_USER"
                    ],
                    "deprecated": false
                  },
                  "account_status": {
                    "description": "Current status of the user account.",
                    "default": "ACTIVE",
                    "type": "string",
                    "enum": [
                      "ACTIVE",
                      "INACTIVE",
                      "EXPIRED",
                      "LOCKED",
                      "PENDING"
                    ],
                    "deprecated": false
                  },
                  "org_identifiers": {
                    "description": "List of Org IDs to which the user belongs.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "group_identifiers": {
                    "description": "GUIDs or names of the groups to which the newly created user belongs.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "visibility": {
                    "description": "Visibility of the users. When set to SHARABLE, the user is visible to other users and groups when they try to share an object.",
                    "default": "SHARABLE",
                    "type": "string",
                    "enum": [
                      "SHARABLE",
                      "NON_SHARABLE"
                    ],
                    "deprecated": false
                  },
                  "notify_on_share": {
                    "description": "User preference for receiving email notifications when another ThoughtSpot\nuser shares a metadata object such as Answer, Liveboard, or Worksheet.",
                    "default": true,
                    "type": "boolean",
                    "deprecated": false,
                    "nullable": true
                  },
                  "show_onboarding_experience": {
                    "description": "The user preference for revisiting the onboarding experience.",
                    "default": true,
                    "type": "boolean",
                    "deprecated": false,
                    "nullable": true
                  },
                  "onboarding_experience_completed": {
                    "description": "flag to get the on-boarding experience is completed or not.",
                    "default": false,
                    "type": "boolean",
                    "deprecated": false,
                    "nullable": true
                  },
                  "home_liveboard_identifier": {
                    "description": "GUID of the Liveboard to set a default Liveboard for the user.\nThoughtSpot displays this Liveboard on the Home page when the user logs in.",
                    "type": "string",
                    "deprecated": false
                  },
                  "favorite_metadata": {
                    "description": "Metadata objects to add to the user's favorites list.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/FavoriteMetadataInput"
                    },
                    "deprecated": false
                  }
                },
                "required": [
                  "name",
                  "display_name",
                  "password",
                  "email"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "User successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/users/{user_identifier}/update": {
      "post": {
        "operationId": "updateUser",
        "description": "Updates properties of a user object. You can modify username, reset password, assign groups or remove the user from a group, and modify user preferences.\n\nRequires ADMINISTRATION (Can administer Thoughtspot) privilege.\n\n <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Users",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of the user. The username string must be unique.",
                    "type": "string",
                    "deprecated": false
                  },
                  "display_name": {
                    "description": "A unique display name string for the user account, usually their first and last name",
                    "type": "string",
                    "deprecated": false
                  },
                  "visibility": {
                    "description": "Visibility of the users. When set to SHARABLE, the user is visible to other users and groups when they try to share an object.",
                    "type": "string",
                    "enum": [
                      "SHARABLE",
                      "NON_SHARABLE"
                    ],
                    "deprecated": false
                  },
                  "email": {
                    "description": "Email of the user account",
                    "type": "string",
                    "deprecated": false
                  },
                  "account_status": {
                    "description": "Current status of the user account.",
                    "type": "string",
                    "enum": [
                      "ACTIVE",
                      "INACTIVE",
                      "EXPIRED",
                      "LOCKED",
                      "PENDING"
                    ],
                    "deprecated": false
                  },
                  "notify_on_share": {
                    "description": "User preference for receiving email notifications when another ThoughtSpot user\nshares a metadata object such as Answer, Liveboard, or Worksheet.",
                    "type": "boolean",
                    "deprecated": false,
                    "nullable": true
                  },
                  "show_onboarding_experience": {
                    "description": "The user preference for revisiting the onboarding experience.",
                    "type": "boolean",
                    "deprecated": false,
                    "nullable": true
                  },
                  "onboarding_experience_completed": {
                    "description": "Indicates if the user has completed the onboarding and allows turning off the onboarding walkthrough.",
                    "type": "boolean",
                    "deprecated": false,
                    "nullable": true
                  },
                  "account_type": {
                    "description": "Type of the account.",
                    "type": "string",
                    "enum": [
                      "LOCAL_USER",
                      "LDAP_USER",
                      "SAML_USER",
                      "OIDC_USER",
                      "REMOTE_USER"
                    ],
                    "deprecated": false
                  },
                  "group_identifiers": {
                    "description": "GUIDs or names of the groups.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "home_liveboard_identifier": {
                    "description": "GUID of the Liveboard to set a default Liveboard for the user. ThoughtSpot displays\nthis Liveboard on the Home page when the user logs in.",
                    "type": "string",
                    "deprecated": false
                  },
                  "favorite_metadata": {
                    "description": "Metadata objects to add to the user's favorites list.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/FavoriteMetadataInput"
                    },
                    "deprecated": false
                  },
                  "org_identifiers": {
                    "description": "IDs of the Orgs.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "operation": {
                    "description": "Type of update operation. Default operation type is REPLACE",
                    "default": "REPLACE",
                    "type": "string",
                    "enum": [
                      "ADD",
                      "REMOVE",
                      "REPLACE"
                    ],
                    "deprecated": false
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "user_identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "GUID / name of the user",
            "deprecated": false
          }
        ],
        "responses": {
          "204": {
            "description": "User successfully updated."
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/users/{user_identifier}/delete": {
      "post": {
        "operationId": "deleteUser",
        "description": "Deletes a user from the ThoughtSpot system.\n\nIf you want to remove a user from a specific Org, update the group and Org mapping properties of the user object via a POST API call to the [/api/rest/2.0/users/{user_identifier}/update](#/http/api-endpoints/users/update-user) endpoint.\n\nRequires ADMINISTRATION (Can administer Thoughtspot) privilege.\n\n <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Users",
          "9.0.0.cl"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "user_identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "GUID / name of the user",
            "deprecated": false
          }
        ],
        "responses": {
          "204": {
            "description": "User successfully deleted."
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/users/import": {
      "post": {
        "operationId": "importUsers",
        "description": "Imports user data from external databases to ThoughtSpot. <br/>  <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Users",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "users": {
                    "description": "List of users needs to be imported.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ImportUser"
                    },
                    "deprecated": false
                  },
                  "default_password": {
                    "description": "The default password to assign to users if they do not have a password assigned in ThoughtSpot.",
                    "type": "string",
                    "deprecated": false
                  },
                  "dry_run": {
                    "description": "If true, the API performs a test operation and returns user IDs whose data will be edited after the import.",
                    "default": true,
                    "type": "boolean",
                    "deprecated": false,
                    "nullable": true
                  },
                  "delete_unspecified_users": {
                    "description": "If set to true, removes the users that are not specified in the API request.",
                    "default": false,
                    "type": "boolean",
                    "deprecated": false,
                    "nullable": true
                  }
                },
                "required": [
                  "users"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Import users operation successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportUsersResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/users/change-password": {
      "post": {
        "operationId": "changeUserPassword",
        "description": "Updates the current password of a ThoughtSpot user.\n\nRequires ADMINISTRATION (Can administer Thoughtspot) privilege.\n\n <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Users",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "current_password": {
                    "description": "Current password of the user.",
                    "type": "string",
                    "deprecated": false
                  },
                  "new_password": {
                    "description": "New password for the user.",
                    "type": "string",
                    "deprecated": false
                  },
                  "user_identifier": {
                    "description": "GUID or name of the user.",
                    "type": "string",
                    "deprecated": false
                  }
                },
                "required": [
                  "current_password",
                  "new_password",
                  "user_identifier"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "204": {
            "description": "User password change operation successful."
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/users/reset-password": {
      "post": {
        "operationId": "resetUserPassword",
        "description": "Resets the password of a user account. Administrators can reset password on behalf of a user.\n\nRequires ADMINISTRATION (Can administer Thoughtspot) privilege.\n\n <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Users",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "new_password": {
                    "description": "New password for the user.",
                    "type": "string",
                    "deprecated": false
                  },
                  "user_identifier": {
                    "description": "GUID or name of the user.",
                    "type": "string",
                    "deprecated": false
                  }
                },
                "required": [
                  "new_password",
                  "user_identifier"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "204": {
            "description": "User password reset operation successful."
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/users/force-logout": {
      "post": {
        "operationId": "forceLogoutUsers",
        "description": "Forces logout on user sessions. Note the following points. This API operation makes a user session invalid and forces the user to re-login.\n\n- Use this API with caution as it may invalidate active user sessions and force users to re-login.\n\n- Make sure you specify the usernames or GUIDs. If you pass null values in the API call, all user sessions on your cluster become invalid, and the users are forced to re-login.\n\nRequires ADMINISTRATION (Can administer Thoughtspot) privilege.\n\n <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Users",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "user_identifiers": {
                    "description": "GUID or name of the users for force logging out their sessions.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  }
                }
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "204": {
            "description": "Force logging out of users operation successful."
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/system/config-update": {
      "post": {
        "operationId": "updateSystemConfig",
        "description": "Update cluster configuration <br/>  <span class=\"since-beta-tag\">Version: 9.2.0.cl or later</span>",
        "tags": [
          "System",
          "9.2.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "configuration": {
                    "description": "Configuration JSON with the key-value pair of configuration attributes to be updated.",
                    "type": "object",
                    "deprecated": false
                  }
                },
                "required": [
                  "configuration"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "204": {
            "description": "Configuration successfully updated."
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/orgs/create": {
      "post": {
        "operationId": "createOrg",
        "description": "Creates an Org. Requires cluster administration privileges. <br/>  <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Orgs",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of the Org.",
                    "type": "string",
                    "deprecated": false
                  },
                  "description": {
                    "description": "Description of the Org.",
                    "type": "string",
                    "deprecated": false
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Organization successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrgResponse"
                },
                "examples": {
                  "example_1": {
                    "value": {
                      "id": 1980035173,
                      "name": "test_org",
                      "status": "ACTIVE",
                      "description": "test_org",
                      "visibility": "SHOW"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/orgs/{org_identifier}/update": {
      "post": {
        "operationId": "updateOrg",
        "description": "Updates an Org. Requires cluster administration privileges. <br/>  <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Orgs",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of the Org.",
                    "type": "string",
                    "deprecated": false
                  },
                  "description": {
                    "description": "Description of the Org.",
                    "type": "string",
                    "deprecated": false
                  },
                  "user_identifiers": {
                    "description": "Add Users to an Org.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "operation": {
                    "description": "Type of update operation. Default operation type is ADD",
                    "default": "ADD",
                    "type": "string",
                    "enum": [
                      "ADD",
                      "REMOVE",
                      "REPLACE"
                    ],
                    "deprecated": false
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "org_identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID or name of the Org.",
            "deprecated": false
          }
        ],
        "responses": {
          "204": {
            "description": "Organization successfully updated."
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/orgs/{org_identifier}/delete": {
      "post": {
        "operationId": "deleteOrg",
        "description": "Deletes an Org. Requires cluster administration privileges. <br/>  <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Orgs",
          "9.0.0.cl"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org_identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID or name of the Org.",
            "deprecated": false
          }
        ],
        "responses": {
          "204": {
            "description": "Organization successfully deleted."
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/tags/create": {
      "post": {
        "operationId": "createTag",
        "description": "Creates a Tag. Requires administrator privileges. <br/>  <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Tags",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of the tag.",
                    "type": "string",
                    "deprecated": false
                  },
                  "color": {
                    "description": "Hex color code to be assigned to the tag. For example, #ff78a9.",
                    "type": "string",
                    "deprecated": false
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Tag successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                },
                "examples": {
                  "example_1": {
                    "value": {
                      "name": "test5",
                      "id": "6abf5aec-3485-4f83-b25f-8c55b92e2b20",
                      "color": "#342323",
                      "deleted": false,
                      "hidden": false,
                      "external": false,
                      "deprecated": false,
                      "creation_time_in_millis": 1685441468684,
                      "modification_time_in_millis": 1685441468684,
                      "author_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                      "modifier_id": "59481331-ee53-42be-a548-bd87be6ddd4a",
                      "owner_id": "6abf5aec-3485-4f83-b25f-8c55b92e2b20"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/tags/{tag_identifier}/update": {
      "post": {
        "operationId": "updateTag",
        "description": "Updates a Tag. Requires administrator privileges. <br/>  <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Tags",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of the tag.",
                    "type": "string",
                    "deprecated": false
                  },
                  "color": {
                    "description": "Hex color code to be assigned to the tag. For example, #ff78a9.",
                    "type": "string",
                    "deprecated": false
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "tag_identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Name or Id of the tag.",
            "deprecated": false
          }
        ],
        "responses": {
          "204": {
            "description": "Tag successfully updated."
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/tags/{tag_identifier}/delete": {
      "post": {
        "operationId": "deleteTag",
        "description": "Deletes a tag. Requires administrator privileges. <br/>  <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Tags",
          "9.0.0.cl"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "tag_identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Tag identifier Tag name or Tag id.",
            "deprecated": false
          }
        ],
        "responses": {
          "204": {
            "description": "Tag successfully deleted."
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/tags/assign": {
      "post": {
        "operationId": "assignTag",
        "description": "Assigns a tag to a metadata object. <br/>  <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Tags",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata": {
                    "description": "Metadata objects.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/TagMetadataTypeInput"
                    },
                    "deprecated": false
                  },
                  "tag_identifiers": {
                    "description": "GUID or name of the tag.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  }
                },
                "required": [
                  "metadata",
                  "tag_identifiers"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "204": {
            "description": "Tags successfully assigned."
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/tags/unassign": {
      "post": {
        "operationId": "unassignTag",
        "description": "Unassign a tag to a metadata object. <br/>  <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Tags",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata": {
                    "description": "Metadata objects.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/TagMetadataTypeInput"
                    },
                    "deprecated": false
                  },
                  "tag_identifiers": {
                    "description": "GUID or name of the tag.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  }
                },
                "required": [
                  "metadata",
                  "tag_identifiers"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "204": {
            "description": "Tags successfully unassigned."
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/groups/create": {
      "post": {
        "operationId": "createUserGroup",
        "description": "Create a group. Requires administrator privilege. <br/>  <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Groups",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of the group. The group name must be unique.",
                    "type": "string",
                    "deprecated": false
                  },
                  "display_name": {
                    "description": "Unique display name for the group.",
                    "type": "string",
                    "deprecated": false
                  },
                  "default_liveboard_identifiers": {
                    "description": "Unique ID of Liveboards to assign as default liveboards to the users in the group.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "description": {
                    "description": "Description of the group.",
                    "type": "string",
                    "deprecated": false
                  },
                  "privileges": {
                    "description": "Privileges to assign to the group.",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "ADMINISTRATION",
                        "AUTHORING",
                        "USERDATAUPLOADING",
                        "DATADOWNLOADING",
                        "USERMANAGEMENT",
                        "DATAMANAGEMENT",
                        "SHAREWITHALL",
                        "JOBSCHEDULING",
                        "A3ANALYSIS",
                        "EXPERIMENTALFEATUREPRIVILEGE",
                        "BYPASSRLS",
                        "RANALYSIS",
                        "DEVELOPER",
                        "USER_ADMINISTRATION",
                        "GROUP_ADMINISTRATION",
                        "SYNCMANAGEMENT",
                        "CAN_CREATE_CATALOG",
                        "DISABLE_PINBOARD_CREATION",
                        "ENABLESPOTAPPCREATION",
                        "LIVEBOARD_VERIFIER",
                        "PREVIEW_THOUGHTSPOT_SAGE"
                      ]
                    },
                    "deprecated": false
                  },
                  "sub_group_identifiers": {
                    "description": "GUID or name of the sub groups. A subgroup is a group assigned to a parent group.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "type": {
                    "description": "Group type.",
                    "default": "LOCAL_GROUP",
                    "type": "string",
                    "enum": [
                      "LOCAL_GROUP",
                      "LDAP_GROUP"
                    ],
                    "deprecated": false
                  },
                  "user_identifiers": {
                    "description": "GUID or name of the users to assign to the group.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "visibility": {
                    "description": "Visibility of the group. To make a group visible to other users and groups,\nset the visibility to SHAREABLE.",
                    "default": "SHARABLE",
                    "type": "string",
                    "enum": [
                      "SHARABLE",
                      "NON_SHARABLE"
                    ],
                    "deprecated": false
                  },
                  "role_identifiers": {
                    "description": "Role identifiers of the roles that should be assigned to the group.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  }
                },
                "required": [
                  "name",
                  "display_name"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "User group successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroupResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/groups/{group_identifier}/update": {
      "post": {
        "operationId": "updateUserGroup",
        "description": "Update group properties. <br/>  <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Groups",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of the group to modify.",
                    "type": "string",
                    "deprecated": false
                  },
                  "default_liveboard_identifiers": {
                    "description": "Unique ID of Liveboards to assign as default liveboards to the users in the group.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "description": {
                    "description": "Description for the group.",
                    "type": "string",
                    "deprecated": false
                  },
                  "display_name": {
                    "description": "Display name of the group.",
                    "type": "string",
                    "deprecated": false
                  },
                  "privileges": {
                    "description": "Privileges to assign to the group.",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "ADMINISTRATION",
                        "AUTHORING",
                        "USERDATAUPLOADING",
                        "DATADOWNLOADING",
                        "USERMANAGEMENT",
                        "DATAMANAGEMENT",
                        "SHAREWITHALL",
                        "JOBSCHEDULING",
                        "A3ANALYSIS",
                        "EXPERIMENTALFEATUREPRIVILEGE",
                        "BYPASSRLS",
                        "RANALYSIS",
                        "DEVELOPER",
                        "USER_ADMINISTRATION",
                        "GROUP_ADMINISTRATION",
                        "SYNCMANAGEMENT",
                        "CAN_CREATE_CATALOG",
                        "DISABLE_PINBOARD_CREATION",
                        "ENABLESPOTAPPCREATION",
                        "LIVEBOARD_VERIFIER",
                        "PREVIEW_THOUGHTSPOT_SAGE"
                      ]
                    },
                    "deprecated": false
                  },
                  "sub_group_identifiers": {
                    "description": "GUID or name of the sub groups. A subgroup is a group assigned to a parent group.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "type": {
                    "description": "Type of the user group.",
                    "type": "string",
                    "enum": [
                      "LOCAL_GROUP",
                      "LDAP_GROUP"
                    ],
                    "deprecated": false
                  },
                  "user_identifiers": {
                    "description": "GUID or name of the users to assign to the group.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "visibility": {
                    "description": "Visibility of the group. To make a group visible to other users and\ngroups, set the visibility to SHAREABLE.",
                    "type": "string",
                    "enum": [
                      "SHARABLE",
                      "NON_SHARABLE"
                    ],
                    "deprecated": false
                  },
                  "role_identifiers": {
                    "description": "Role identifiers of the roles that should be assigned to the group.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "operation": {
                    "description": "Type of update operation. Default operation type is REPLACE",
                    "default": "REPLACE",
                    "type": "string",
                    "enum": [
                      "ADD",
                      "REMOVE",
                      "REPLACE"
                    ],
                    "deprecated": false
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "group_identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "GUID or name of the group.",
            "deprecated": false
          }
        ],
        "responses": {
          "204": {
            "description": "User group successfully updated."
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/groups/{group_identifier}/delete": {
      "post": {
        "operationId": "deleteUserGroup",
        "description": "Deletes a group. <br/>  <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Groups",
          "9.0.0.cl"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "group_identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "GUID or name of the group.",
            "deprecated": false
          }
        ],
        "responses": {
          "204": {
            "description": "User group successfully deleted."
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/groups/import": {
      "post": {
        "operationId": "importUserGroups",
        "description": "Imports user data from external databases into ThoughtSpot. During the user import operation:\n\n- If the specified users are not available in ThoughtSpot, the users are created and assigned a default password. The default_password definition in the API request is optional.\n- If the `delete_unspecified_users` property is set to `true`, users not specified in the API request, excluding `tsadmin`, `guest`, `system` and `su` users, are deleted.\n- If the specified user objects are already available in ThoughtSpot, the object properties of these users are modified and synchronized as per the input data in the API request.\n\nA successful API call returns the object that represents the changes made in the ThoughtSpot system.\n\nRequires ADMINISTRATION (Can administer Thoughtspot) privilege.\n\n <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Groups",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "groups": {
                    "description": "Details of user groups which are to be imported",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/GroupsImportListInput"
                    },
                    "deprecated": false
                  },
                  "delete_unspecified_groups": {
                    "description": "If set to true, removes groups that are not specified in the API request.",
                    "default": false,
                    "type": "boolean",
                    "deprecated": false,
                    "nullable": true
                  },
                  "dry_run": {
                    "description": "If true, the API performs a test operation and returns user IDs whose\ndata will be edited after the import.",
                    "default": true,
                    "type": "boolean",
                    "deprecated": false,
                    "nullable": true
                  }
                }
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Import user groups operation successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportUserGroupsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/metadata/tml/import": {
      "post": {
        "operationId": "importMetadataTML",
        "description": "Imports TML representation of metadata objects. Requires data management privileges. <br/>  <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Metadata",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata_tmls": {
                    "description": "Details of TML objects.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "import_policy": {
                    "description": "Specifies the import policy for the TML import.",
                    "default": "PARTIAL",
                    "type": "string",
                    "enum": [
                      "PARTIAL",
                      "ALL_OR_NONE",
                      "VALIDATE_ONLY"
                    ],
                    "deprecated": false
                  },
                  "create_new": {
                    "description": "If selected, creates TML objects with new GUIDs.",
                    "default": false,
                    "type": "boolean",
                    "deprecated": false,
                    "nullable": true
                  }
                },
                "required": [
                  "metadata_tmls"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Import metadata objects using specified TMLs is successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/metadata/tml/export": {
      "post": {
        "operationId": "exportMetadataTML",
        "description": "Exports TML representation of metadata objects <br/>  <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Metadata",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata": {
                    "description": "Metadata objects.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ExportMetadataTypeInput"
                    },
                    "deprecated": false
                  },
                  "export_associated": {
                    "description": "Indicates whether to export associated metadata objects of specified metadata objects.",
                    "default": false,
                    "type": "boolean",
                    "deprecated": false,
                    "nullable": true
                  },
                  "export_fqn": {
                    "description": "Adds FQNs of the referenced objects. For example, if you are exporting a Liveboard and its associated objects,\nthe API returns the Liveboard TML data with the FQNs of the referenced worksheet.\nIf the exported TML data includes FQNs, you don't need to manually add FQNs of the referenced objects during TML import.",
                    "default": false,
                    "type": "boolean",
                    "deprecated": false,
                    "nullable": true
                  },
                  "edoc_format": {
                    "description": "TML EDOC content format.",
                    "default": "YAML",
                    "type": "string",
                    "enum": [
                      "JSON",
                      "YAML"
                    ],
                    "deprecated": false
                  }
                },
                "required": [
                  "metadata"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Export TMLs of specified metadata objects is successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/metadata/delete": {
      "post": {
        "operationId": "deleteMetadata",
        "description": "Deletes metadata objects. Requires edit access to objects. <br/>  <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Metadata",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata": {
                    "description": "Metadata objects.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/DeleteMetadataTypeInput"
                    },
                    "deprecated": false
                  },
                  "delete_disabled_objects": {
                    "description": "Indicates whether to delete disabled metadata objects.",
                    "default": false,
                    "type": "boolean",
                    "deprecated": false,
                    "nullable": true
                  }
                },
                "required": [
                  "metadata"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "204": {
            "description": "Metadata objects successfully deleted."
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/security/metadata/assign": {
      "post": {
        "operationId": "assignChangeAuthor",
        "description": "Assigns a new author or transfers the ownership of the specified metadata objects. <br/>  <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Security",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata": {
                    "description": "GUID or name of the metadata object.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AuthorMetadataTypeInput"
                    },
                    "deprecated": false
                  },
                  "user_identifier": {
                    "description": "GUID or name of the user who you want to assign as the author.",
                    "type": "string",
                    "deprecated": false
                  },
                  "current_owner_identifier": {
                    "description": "GUID or name of the current author.  When defined, the metadata objects\nauthored by the specified owner are filtered for the API operation.",
                    "type": "string",
                    "deprecated": false
                  }
                },
                "required": [
                  "metadata",
                  "user_identifier"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "204": {
            "description": "Author assignment for given metadata objects is successful."
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/security/metadata/share": {
      "post": {
        "operationId": "shareMetadata",
        "description": "Share one or several metadata objects with users or groups.\nRequires edit access to metadata objects. <br/>  <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Security",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata_type": {
                    "description": "Type of metadata.\n1. Liveboard\n2. Answers\n3. LOGICAL_TABLE for any data object such as table, worksheet or view.",
                    "type": "string",
                    "enum": [
                      "LIVEBOARD",
                      "ANSWER",
                      "LOGICAL_TABLE"
                    ],
                    "deprecated": false
                  },
                  "metadata_identifiers": {
                    "description": "Unique ID or name of metadata objects.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "permissions": {
                    "description": "Permission details for sharing the objects.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SharePermissionsInput"
                    },
                    "deprecated": false
                  },
                  "visualization_identifiers": {
                    "description": "Options to specify details of Liveboard.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "emails": {
                    "description": "Email IDs to which notifications will be sent.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "message": {
                    "description": "Message to be included in notification.",
                    "type": "string",
                    "deprecated": false
                  },
                  "enable_custom_url": {
                    "description": "Sends object URLs in the customized format in email notifications.",
                    "default": false,
                    "type": "boolean",
                    "deprecated": false,
                    "nullable": true
                  }
                },
                "required": [
                  "metadata_type",
                  "metadata_identifiers",
                  "permissions",
                  "emails",
                  "message"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "204": {
            "description": "Sharing metadata objects is successful."
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/vcs/git/config/create": {
      "post": {
        "operationId": "createConfig",
        "description": "Configure local repository to connect to remote repository <br/> <span class=\"since-beta-tag\">Beta</span> <span class=\"since-beta-tag\">Version: 9.2.0.cl or later</span>",
        "tags": [
          "Version Control",
          "9.2.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "repository_url": {
                    "description": "URL for connecting to remote repository",
                    "type": "string",
                    "deprecated": false
                  },
                  "username": {
                    "description": "Username to authenticate connection to remote repository",
                    "type": "string",
                    "deprecated": false
                  },
                  "access_token": {
                    "description": "Access token corresponding to the user to authenticate connection to remote repository",
                    "type": "string",
                    "deprecated": false
                  },
                  "org_identifier": {
                    "description": "   Unique identifier of the organization. If no value is provided then user will be created in the organization associated with the login session. Provide value -1 for cluster level. Example : OrgID1-or-Name1\n   \n\nNote: If no org identifier is specified, then current org identifier of the user will be considered <br/>  <span class=\"since-beta-tag\">Version: 9.5.0.cl or later</span>",
                    "type": "string",
                    "deprecated": false
                  },
                  "branch_names": {
                    "description": "List the remote branches to configure. Example:[development, production]",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "default_branch": {
                    "description": "   Name of the default remote branch\n   \n\n*Deprecated since 9.3.0.cl : Replaced by default_branch_name * <br/> <span class=\"since-beta-tag\">Beta</span> <span class=\"since-beta-tag\">Version: 9.2.0.cl or later</span>",
                    "type": "string",
                    "deprecated": true
                  },
                  "default_branch_name": {
                    "description": "Name of the default remote branch <br/> <span class=\"since-beta-tag\">Beta</span> <span class=\"since-beta-tag\">Version: 9.3.0.cl or later</span>",
                    "type": "string",
                    "deprecated": false
                  },
                  "enable_guid_mapping": {
                    "description": "Maintain mapping of guid for the deployment to an instance <br/> <span class=\"since-beta-tag\">Beta</span> <span class=\"since-beta-tag\">Version: 9.4.0.cl or later</span>",
                    "default": false,
                    "type": "boolean",
                    "deprecated": false,
                    "nullable": true
                  },
                  "guid_mapping_branch_name": {
                    "description": "   Name of the branch where file containing guid mapping should be maintained. This will be set only when enable_guid_mapping is true.\n   \n\nNote: If no guid mapping branch is specified, then the default branch for this configuration will be considered.  <br/> <span class=\"since-beta-tag\">Beta</span> <span class=\"since-beta-tag\">Version: 9.4.0.cl or later</span>",
                    "type": "string",
                    "deprecated": false
                  }
                },
                "required": [
                  "repository_url",
                  "username",
                  "access_token"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully configured local repository",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepoConfigObject"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/vcs/git/config/update": {
      "post": {
        "operationId": "updateConfig",
        "description": "Update local repository configuration. <br/> <span class=\"since-beta-tag\">Beta</span> <span class=\"since-beta-tag\">Version: 9.2.0.cl or later</span>",
        "tags": [
          "Version Control",
          "9.2.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "description": "Username to authenticate connection to vcs",
                    "type": "string",
                    "deprecated": false
                  },
                  "access_token": {
                    "description": "Access token corresponding to the user to authenticate connection to vcs",
                    "type": "string",
                    "deprecated": false
                  },
                  "org_identifier": {
                    "description": "   Unique identifier of the organization. If no value is provided then user will be created in the organization associated with the login session. Provide value -1 for cluster level. Example : OrgID1-or-Name1\n   \n\nNote: If no org identifier is specified, then current org identifier of the user will be considered  <br/>  <span class=\"since-beta-tag\">Version: 9.5.0.cl or later</span>",
                    "type": "string",
                    "deprecated": false
                  },
                  "branch_names": {
                    "description": "List the remote branches to configure. Example:[development, production] <br/> <span class=\"since-beta-tag\">Beta</span> <span class=\"since-beta-tag\">Version: 9.3.0.cl or later</span>",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  },
                  "default_branch": {
                    "description": "   Name of the default remote branch\n   \n\n*Deprecated since 9.3.0.cl : Replaced by default_branch_name * <br/> <span class=\"since-beta-tag\">Beta</span> <span class=\"since-beta-tag\">Version: 9.2.0.cl or later</span>",
                    "type": "string",
                    "deprecated": true
                  },
                  "default_branch_name": {
                    "description": "Name of the default remote branch <br/> <span class=\"since-beta-tag\">Beta</span> <span class=\"since-beta-tag\">Version: 9.3.0.cl or later</span>",
                    "type": "string",
                    "deprecated": false
                  },
                  "enable_guid_mapping": {
                    "description": "Maintain mapping of guid for the deployment to an instance <br/> <span class=\"since-beta-tag\">Beta</span> <span class=\"since-beta-tag\">Version: 9.4.0.cl or later</span>",
                    "type": "boolean",
                    "deprecated": false,
                    "nullable": true
                  },
                  "guid_mapping_branch_name": {
                    "description": "   Name of the branch where file containing guid mapping should be maintained This will be set only when enable_guid_mapping is true.\n   \n\nNote: If no guid mapping branch is specified, then the default branch for this configuration will be considered.  <br/> <span class=\"since-beta-tag\">Beta</span> <span class=\"since-beta-tag\">Version: 9.4.0.cl or later</span>",
                    "type": "string",
                    "deprecated": false
                  }
                }
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully updated local repository configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepoConfigObject"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/vcs/git/config/delete": {
      "post": {
        "operationId": "deleteConfig",
        "description": "Delete local repository configuration <br/> <span class=\"since-beta-tag\">Beta</span> <span class=\"since-beta-tag\">Version: 9.2.0.cl or later</span>",
        "tags": [
          "Version Control",
          "9.2.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "cluster_level": {
                    "description": "Consider cluster level or org level config. Set it to false to delete configuration from current org. If set to true, then the configuration at cluster level and orgs that inherited the configuration from cluster level will be deleted. <br/>  <span class=\"since-beta-tag\">Version: 9.5.0.cl or later</span>",
                    "type": "boolean",
                    "deprecated": false,
                    "nullable": true
                  }
                }
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "204": {
            "description": "Successfully deleted local repository configuration"
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/vcs/git/branches/{branch_name}/pull": {
      "post": {
        "operationId": "pullBranch",
        "description": " Pull a branch from remote repository to local repository.\n \n\n*Deprecated since 9.3.0.cl : Replaced by /vcs/git/config/create * <br/> <span class=\"since-beta-tag\">Beta</span> <span class=\"since-beta-tag\">Version: 9.2.0.cl or later</span>",
        "tags": [
          "Version Control",
          "9.2.0.cl"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "branch_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Name of the branch to pull",
            "deprecated": false
          }
        ],
        "responses": {
          "204": {
            "description": "Remote branch pulled to local successfully"
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/vcs/git/branches/commit": {
      "post": {
        "operationId": "commitBranch",
        "description": "Commit the object from metadata to remote repository <br/> <span class=\"since-beta-tag\">Beta</span> <span class=\"since-beta-tag\">Version: 9.2.0.cl or later</span>",
        "tags": [
          "Version Control",
          "9.2.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata": {
                    "description": "Metadata objects.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/MetadataObject"
                    },
                    "deprecated": false
                  },
                  "branch_name": {
                    "description": "   Name of the remote branch where object should be pushed\n   \n\nNote: If no branch_name is specified, then the default branch will be considered.",
                    "type": "string",
                    "deprecated": false
                  },
                  "comment": {
                    "description": "Comment to be added to the commit",
                    "type": "string",
                    "deprecated": false
                  }
                },
                "required": [
                  "metadata",
                  "comment"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully committed the metadata objects",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommitResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/vcs/git/commits/{commit_id}/revert": {
      "post": {
        "operationId": "revertCommit",
        "description": "Revert an object to a specific commit id <br/> <span class=\"since-beta-tag\">Beta</span> <span class=\"since-beta-tag\">Version: 9.2.0.cl or later</span>",
        "tags": [
          "Version Control",
          "9.2.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata": {
                    "description": "Metadata objects.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/MetadataObject"
                    },
                    "deprecated": false
                  },
                  "branch_name": {
                    "description": "   Name of the branch where the reverted version should be comitted\n   \n\nNote: If no branch_name is specified, then the default branch will be considered.",
                    "type": "string",
                    "deprecated": false
                  },
                  "revert_policy": {
                    "description": "Policy to be followed while importing. Valid values: [ALL_OR_NONE, PARTIAL] <br/> <span class=\"since-beta-tag\">Beta</span> <span class=\"since-beta-tag\">Version: 9.3.0.cl or later</span>",
                    "default": "ALL_OR_NONE",
                    "type": "string",
                    "enum": [
                      "ALL_OR_NONE",
                      "PARTIAL"
                    ],
                    "deprecated": false
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "commit_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Commit id to which the object should be reverted",
            "deprecated": false
          }
        ],
        "responses": {
          "200": {
            "description": "Reverted the object to the commit point specified",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RevertResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/vcs/git/branches/validate": {
      "post": {
        "operationId": "validateMerge",
        "description": "The Validate Merge endpoint can be run from your target ThoughtSpot organization / cluster to ensure that the changes implemented in the source branch would function in the target ThoughtSpot environment prior to merging a source branch into a target branch. <br/> <span class=\"since-beta-tag\">Beta</span> <span class=\"since-beta-tag\">Version: 9.2.0.cl or later</span>",
        "tags": [
          "Version Control",
          "9.2.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "source_branch_name": {
                    "description": "Name of the branch from which changes need to be picked for validation",
                    "type": "string",
                    "deprecated": false
                  },
                  "target_branch_name": {
                    "description": "Name of the branch where files will be merged",
                    "type": "string",
                    "deprecated": false
                  }
                },
                "required": [
                  "source_branch_name",
                  "target_branch_name"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "validation done successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeployResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/vcs/git/commits/deploy": {
      "post": {
        "operationId": "deployCommit",
        "description": "Deploy changes to a Thoughtspot environment from the latest version of a branch or a specific commit point. <br/> <span class=\"since-beta-tag\">Beta</span> <span class=\"since-beta-tag\">Version: 9.2.0.cl or later</span>",
        "tags": [
          "Version Control",
          "9.2.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "commit_id": {
                    "description": "   Commit_id against which the files should be picked to deploy.\n   \n\nNote: If no commit_id is specified, then the head of the branch is considered.",
                    "type": "string",
                    "deprecated": false
                  },
                  "branch_name": {
                    "description": "   Name of the remote branch where changes should be picked\n   \n\nNote: If no branch_name is specified, then the default branch will be considered. <br/> <span class=\"since-beta-tag\">Beta</span> <span class=\"since-beta-tag\">Version: 9.3.0.cl or later</span>",
                    "type": "string",
                    "deprecated": false
                  },
                  "import_type": {
                    "description": "   Indicates if all files or only modified file at specified commit point should be considered\n   \n\n*Deprecated since 9.3.0.cl : Replaced by deploy_type * <br/> <span class=\"since-beta-tag\">Beta</span> <span class=\"since-beta-tag\">Version: 9.2.0.cl or later</span>",
                    "default": "DELTA",
                    "type": "string",
                    "enum": [
                      "FULL",
                      "DELTA"
                    ],
                    "deprecated": true
                  },
                  "deploy_type": {
                    "description": "Indicates if all files or only modified file at specified commit point should be considered <br/> <span class=\"since-beta-tag\">Beta</span> <span class=\"since-beta-tag\">Version: 9.3.0.cl or later</span>",
                    "default": "DELTA",
                    "type": "string",
                    "enum": [
                      "FULL",
                      "DELTA"
                    ],
                    "deprecated": false
                  },
                  "deploy_policy": {
                    "description": "Define the policy to follow while importing TML in the ThoughtSpot environment. Use “ALL_OR_NONE” to cancel the deployment of all ThoughtSpot objects if at least one of them fails to import. Use “Partial” to import ThoughtSpot objects that validate successfully even if other objects in the same deploy operations fail to import. <br/> <span class=\"since-beta-tag\">Beta</span> <span class=\"since-beta-tag\">Version: 9.3.0.cl or later</span>",
                    "default": "ALL_OR_NONE",
                    "type": "string",
                    "enum": [
                      "ALL_OR_NONE",
                      "PARTIAL"
                    ],
                    "deprecated": false
                  }
                }
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully deployed the changes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeployResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/connection/create": {
      "post": {
        "operationId": "createConnection",
        "description": "Creates a connection to a Data WareHouse. Requires ADMINSITRATION or DATAMANAGEMENT privilege. <br/>  <span class=\"since-beta-tag\">Version: 9.2.0.cl or later</span>",
        "tags": [
          "Connections",
          "9.2.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Unique name for the connection.",
                    "type": "string",
                    "deprecated": false
                  },
                  "description": {
                    "description": "Description of the connection.",
                    "type": "string",
                    "deprecated": false
                  },
                  "data_warehouse_type": {
                    "description": "Type of the data warehouse.",
                    "type": "string",
                    "enum": [
                      "SNOWFLAKE",
                      "AMAZON_REDSHIFT",
                      "GOOGLE_BIGQUERY",
                      "AZURE_SYNAPSE",
                      "TERADATA",
                      "SAP_HANA",
                      "STARBURST",
                      "ORACLE_ADW",
                      "DATABRICKS",
                      "DENODO",
                      "DREMIO",
                      "TRINO",
                      "PRESTO"
                    ],
                    "deprecated": false
                  },
                  "data_warehouse_config": {
                    "description": "Configuration of the data warehouse in JSON.",
                    "type": "object",
                    "deprecated": false
                  },
                  "validate": {
                    "description": "Indicates whether to validate the connection details.",
                    "default": true,
                    "type": "boolean",
                    "deprecated": false,
                    "nullable": true
                  }
                },
                "required": [
                  "name",
                  "data_warehouse_type",
                  "data_warehouse_config"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Connection to the datasource successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateConnectionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/connection/delete": {
      "post": {
        "operationId": "deleteConnection",
        "description": "Deletes a connection to a Data WareHouse. Requires ADMINSITRATION or DATAMANAGEMENT privilege. <br/>  <span class=\"since-beta-tag\">Version: 9.2.0.cl or later</span>",
        "tags": [
          "Connections",
          "9.2.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "connection_identifier": {
                    "description": "Unique ID or name of the connection.",
                    "type": "string",
                    "deprecated": false
                  }
                },
                "required": [
                  "connection_identifier"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "204": {
            "description": "Connection successfully deleted."
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/connection/update": {
      "post": {
        "operationId": "updateConnection",
        "description": "Updates a connection to a Data WareHouse. Requires ADMINSITRATION or DATAMANAGEMENT privilege. <br/>  <span class=\"since-beta-tag\">Version: 9.2.0.cl or later</span>",
        "tags": [
          "Connections",
          "9.2.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "connection_identifier": {
                    "description": "Unique ID or name of the connection.",
                    "type": "string",
                    "deprecated": false
                  },
                  "name": {
                    "description": "Updated name of the connection.",
                    "type": "string",
                    "deprecated": false
                  },
                  "description": {
                    "description": "Updated description of the connection.",
                    "type": "string",
                    "deprecated": false
                  },
                  "data_warehouse_config": {
                    "description": "Configuration of the data warehouse in JSON.",
                    "type": "object",
                    "deprecated": false
                  },
                  "validate": {
                    "description": "Indicates whether to validate the connection details.",
                    "default": true,
                    "type": "boolean",
                    "deprecated": false,
                    "nullable": true
                  }
                },
                "required": [
                  "connection_identifier"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "204": {
            "description": "Connection successfully updated."
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/roles/create": {
      "post": {
        "operationId": "createRole",
        "description": "Creates a Role.\nRequires cluster Administration or Role Administration privileges. <br/>  <span class=\"since-beta-tag\">Version: 9.5.0.cl or later</span>",
        "tags": [
          "Roles",
          "9.5.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Unique name of the role.",
                    "type": "string",
                    "deprecated": false
                  },
                  "description": {
                    "description": "Description of the role.",
                    "type": "string",
                    "deprecated": false
                  },
                  "privileges": {
                    "description": "Privileges granted to the role.",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "USERDATAUPLOADING",
                        "DATADOWNLOADING",
                        "DATAMANAGEMENT",
                        "SHAREWITHALL",
                        "JOBSCHEDULING",
                        "A3ANALYSIS",
                        "EXPERIMENTALFEATUREPRIVILEGE",
                        "BYPASSRLS",
                        "DISABLE_PINBOARD_CREATION",
                        "DEVELOPER",
                        "APPLICATION_ADMINISTRATION",
                        "USER_ADMINISTRATION",
                        "GROUP_ADMINISTRATION",
                        "SYSTEM_INFO_ADMINISTRATION",
                        "SYNCMANAGEMENT",
                        "ORG_ADMINISTRATION",
                        "ROLE_ADMINISTRATION",
                        "AUTHENTICATION_ADMINISTRATION",
                        "BILLING_INFO_ADMINISTRATION"
                      ]
                    },
                    "deprecated": false
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Role successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/roles/{role_identifier}/update": {
      "post": {
        "operationId": "updateRole",
        "description": "Updates a Role.\nRequires cluster Administration or Role Administration privileges. <br/>  <span class=\"since-beta-tag\">Version: 9.5.0.cl or later</span>",
        "tags": [
          "Roles",
          "9.5.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of the Role.",
                    "type": "string",
                    "deprecated": false
                  },
                  "description": {
                    "description": "Description of the Role",
                    "type": "string",
                    "deprecated": false
                  },
                  "privileges": {
                    "description": "Privileges granted to the role.",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "USERDATAUPLOADING",
                        "DATADOWNLOADING",
                        "DATAMANAGEMENT",
                        "SHAREWITHALL",
                        "JOBSCHEDULING",
                        "A3ANALYSIS",
                        "EXPERIMENTALFEATUREPRIVILEGE",
                        "BYPASSRLS",
                        "DISABLE_PINBOARD_CREATION",
                        "DEVELOPER",
                        "APPLICATION_ADMINISTRATION",
                        "USER_ADMINISTRATION",
                        "GROUP_ADMINISTRATION",
                        "SYSTEM_INFO_ADMINISTRATION",
                        "SYNCMANAGEMENT",
                        "ORG_ADMINISTRATION",
                        "ROLE_ADMINISTRATION",
                        "AUTHENTICATION_ADMINISTRATION",
                        "BILLING_INFO_ADMINISTRATION"
                      ]
                    },
                    "deprecated": false
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [
          {
            "in": "path",
            "name": "role_identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique ID or name of the role.",
            "deprecated": false
          }
        ],
        "responses": {
          "200": {
            "description": "Role successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/roles/{role_identifier}/delete": {
      "post": {
        "operationId": "deleteRole",
        "description": "Deletes a Role.\nRequires cluster Administration or Role Administration privileges. <br/>  <span class=\"since-beta-tag\">Version: 9.5.0.cl or later</span>",
        "tags": [
          "Roles",
          "9.5.0.cl"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "role_identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique ID or name of the role.",
            "deprecated": false
          }
        ],
        "responses": {
          "204": {
            "description": "Role successfully deleted."
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/schedules": {
      "post": {
        "operationId": "createSchedule",
        "description": "Create schedule. <br/>  <span class=\"since-beta-tag\">Version: 9.4.0.cl or later</span>",
        "tags": [
          "Schedules",
          "9.4.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of the scheduled job.",
                    "type": "string",
                    "deprecated": false
                  },
                  "description": {
                    "description": "Description of the job.",
                    "type": "string",
                    "deprecated": false
                  },
                  "metadata_type": {
                    "description": "Type of metadata.",
                    "type": "string",
                    "enum": [
                      "LIVEBOARD"
                    ],
                    "deprecated": false
                  },
                  "metadata_identifier": {
                    "description": "Unique ID or name of the metadata.",
                    "type": "string",
                    "deprecated": false
                  },
                  "file_format": {
                    "description": "Export file format.",
                    "default": "PDF",
                    "type": "string",
                    "enum": [
                      "CSV",
                      "PDF"
                    ],
                    "deprecated": false
                  },
                  "liveboard_options": {
                    "description": "Options to specify details of liveboard.",
                    "$ref": "#/components/schemas/LiveboardOptionsInput",
                    "deprecated": false
                  },
                  "pdf_options": {
                    "description": "Options for PDF export.",
                    "$ref": "#/components/schemas/SchedulesPdfOptionsInput",
                    "deprecated": false
                  },
                  "time_zone": {
                    "description": "Time zone",
                    "default": "America/Los_Angeles",
                    "type": "string",
                    "deprecated": false
                  },
                  "frequency": {
                    "description": "Configuration of schedule with cron expression",
                    "$ref": "#/components/schemas/FrequencyInput",
                    "deprecated": false
                  },
                  "recipient_details": {
                    "description": "Recipient configuration which includes emails and recipients of the schedule",
                    "$ref": "#/components/schemas/RecipientDetailsInput",
                    "deprecated": false
                  }
                },
                "required": [
                  "name",
                  "description",
                  "metadata_type",
                  "metadata_identifier",
                  "time_zone",
                  "recipient_details"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Schedule successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseSchedule"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/schedules/{schedule_identifier}/delete": {
      "post": {
        "operationId": "deleteSchedule",
        "description": "Deletes a schedule <br/>  <span class=\"since-beta-tag\">Version: 9.4.0.cl or later</span>",
        "tags": [
          "Schedules",
          "9.4.0.cl"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "schedule_identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique ID or name of the schedule.",
            "deprecated": false
          }
        ],
        "responses": {
          "204": {
            "description": "Schedule successfully deleted."
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/schedules/search": {
      "post": {
        "operationId": "searchSchedules",
        "description": "Search Schedules <br/>  <span class=\"since-beta-tag\">Version: 9.4.0.cl or later</span>",
        "tags": [
          "Schedules",
          "9.4.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata": {
                    "description": "Metadata objects associated with schedules.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/MetadataInput"
                    },
                    "deprecated": false
                  },
                  "record_offset": {
                    "description": "The starting record number from where the records should be included.",
                    "type": "integer",
                    "format": "int32",
                    "deprecated": false
                  },
                  "record_size": {
                    "description": "The number of records that should be included.",
                    "type": "integer",
                    "format": "int32",
                    "deprecated": false
                  },
                  "sort_options": {
                    "description": "Sort options.",
                    "$ref": "#/components/schemas/SortingOptions",
                    "deprecated": false
                  },
                  "history_runs_options": {
                    "description": "Options while fetching history runs wrt to the schedule.",
                    "$ref": "#/components/schemas/ScheduleHistoryRunsOptionsInput",
                    "deprecated": false
                  },
                  "schedule_identifiers": {
                    "description": "unique ID or name of the Schedule",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "deprecated": false
                  }
                }
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Schedule search result.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResponseSchedule"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/schedules/{schedule_identifier}/update": {
      "post": {
        "operationId": "updateSchedule",
        "description": "Update schedule. <br/>  <span class=\"since-beta-tag\">Version: 9.4.0.cl or later</span>",
        "tags": [
          "Schedules",
          "9.4.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of the scheduled job.",
                    "type": "string",
                    "deprecated": false
                  },
                  "description": {
                    "description": "Description of the job.",
                    "type": "string",
                    "deprecated": false
                  },
                  "metadata_type": {
                    "description": "Type of metadata.",
                    "type": "string",
                    "enum": [
                      "LIVEBOARD"
                    ],
                    "deprecated": false
                  },
                  "metadata_identifier": {
                    "description": "Unique ID or name of the metadata.",
                    "type": "string",
                    "deprecated": false
                  },
                  "file_format": {
                    "description": "Export file format.",
                    "type": "string",
                    "enum": [
                      "CSV",
                      "PDF"
                    ],
                    "deprecated": false
                  },
                  "liveboard_options": {
                    "description": "Options to specify details of liveboard.",
                    "$ref": "#/components/schemas/LiveboardOptionsInput",
                    "deprecated": false
                  },
                  "pdf_options": {
                    "description": "Options for PDF export.",
                    "$ref": "#/components/schemas/SchedulesPdfOptionsInput",
                    "deprecated": false
                  },
                  "time_zone": {
                    "description": "Time zone",
                    "type": "string",
                    "deprecated": false
                  },
                  "frequency": {
                    "description": "Configuration of schedule with cron expression",
                    "$ref": "#/components/schemas/FrequencyInput",
                    "deprecated": false
                  },
                  "recipient_details": {
                    "description": "Recipient configuration which includes emails and recipients of the schedule",
                    "$ref": "#/components/schemas/RecipientDetailsInput",
                    "deprecated": false
                  },
                  "status": {
                    "description": "Status of the schedule",
                    "type": "string",
                    "enum": [
                      "ACTIVE",
                      "PAUSE"
                    ],
                    "deprecated": false
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "schedule_identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique ID or name of the schedule.",
            "deprecated": false
          }
        ],
        "responses": {
          "204": {
            "description": "Schedule successfully updated."
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "object"
          }
        }
      },
      "User": {
        "type": "object",
        "required": [
          "id",
          "name",
          "display_name",
          "visibility"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the user."
          },
          "name": {
            "type": "string",
            "description": "Name of the user."
          },
          "display_name": {
            "type": "string",
            "description": "Display name of the user."
          },
          "visibility": {
            "type": "string",
            "enum": [
              "SHARABLE",
              "NON_SHARABLE"
            ],
            "description": "Visibility of the users. The SHARABLE makes a users visible to other users and user groups, and thus allows them to share objects."
          },
          "author_id": {
            "type": "string",
            "description": "Unique identifier of author of the user."
          },
          "can_change_password": {
            "type": "boolean",
            "description": "Indicates whether the user can change their password."
          },
          "complete_detail": {
            "type": "boolean",
            "description": "Indicates whether the response has complete detail of the user."
          },
          "creation_time_in_millis": {
            "type": "number",
            "format": "float",
            "description": "Creation time of the user in milliseconds."
          },
          "current_org": {
            "$ref": "#/components/schemas/Org",
            "description": "Current logged in Organizations of the user."
          },
          "deleted": {
            "type": "boolean",
            "description": "Indicates whether the user is deleted."
          },
          "deprecated": {
            "type": "boolean",
            "description": "Indicates whether the user is deprecated."
          },
          "account_type": {
            "type": "string",
            "enum": [
              "LOCAL_USER",
              "LDAP_USER",
              "SAML_USER",
              "OIDC_USER",
              "REMOTE_USER"
            ],
            "description": "Type of the user account."
          },
          "account_status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "INACTIVE",
              "EXPIRED",
              "LOCKED",
              "PENDING"
            ],
            "description": "Status of the user account."
          },
          "email": {
            "type": "string",
            "description": "Email of the user."
          },
          "expiration_time_in_millis": {
            "type": "number",
            "format": "float",
            "description": "Expiration time of the user in milliseconds."
          },
          "external": {
            "type": "boolean",
            "description": "Indicates whether the user is external."
          },
          "favorite_metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FavoriteMetadataItem"
            },
            "description": "Metadata objects to be assigned as favorites for the imported user."
          },
          "first_login_time_in_millis": {
            "type": "number",
            "format": "float",
            "description": "First login time of the user in milliseconds."
          },
          "group_mask": {
            "type": "integer",
            "format": "int32",
            "description": "Group mask of the user."
          },
          "hidden": {
            "type": "boolean",
            "description": "Indicates whether the user is hidden."
          },
          "home_liveboard": {
            "$ref": "#/components/schemas/Object_ID_And_Name",
            "description": "Unique ID or name of the users home liveboard."
          },
          "incomplete_details": {
            "type": "object",
            "description": "Incomplete details of user if any present."
          },
          "is_first_login": {
            "type": "boolean",
            "description": "Indicates whether it is first login of the user."
          },
          "modification_time_in_millis": {
            "type": "number",
            "format": "float",
            "description": "Last modified time of the user in milliseconds."
          },
          "modifier_id": {
            "type": "string",
            "description": "Unique identifier of modifier of the user."
          },
          "notify_on_share": {
            "type": "boolean",
            "description": "User preference for receiving email notifications on shared answers or liveboard."
          },
          "onboarding_experience_completed": {
            "type": "boolean",
            "description": "The user preference for turning off the onboarding experience."
          },
          "orgs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Org"
            },
            "description": "Organizations in which user exists."
          },
          "owner_id": {
            "type": "string",
            "description": "Unique identifier of owner of the user."
          },
          "parent_type": {
            "type": "string",
            "enum": [
              "USER",
              "GROUP"
            ],
            "description": "Parent type of the user."
          },
          "privileges": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Privileges which are assigned to the user."
          },
          "show_onboarding_experience": {
            "type": "boolean",
            "description": "The user preference for revisiting the onboarding experience."
          },
          "super_user": {
            "type": "boolean",
            "description": "Indicates whether the user is a super user."
          },
          "system_user": {
            "type": "boolean",
            "description": "Indicates whether the user is a system user."
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Object_ID_And_Name"
            },
            "description": "Tags associated with the user."
          },
          "tenant_id": {
            "type": "string",
            "description": "Unique identifier of tenant of the user."
          },
          "user_groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Object_ID_And_Name"
            },
            "description": "User Groups which the user is part of."
          },
          "user_inherited_groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Object_ID_And_Name"
            },
            "description": "Inherited User Groups which the user is part of."
          },
          "welcome_email_sent": {
            "type": "boolean",
            "description": "Indicates whether welcome email is sent for the user."
          },
          "org_privileges": {
            "type": "object",
            "description": "Privileges which are assigned to the user with org."
          }
        }
      },
      "FavoriteMetadataInput": {
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string",
            "description": "Unique ID or name of the metadata."
          },
          "type": {
            "type": "string",
            "enum": [
              "LIVEBOARD",
              "ANSWER",
              "LOGICAL_TABLE",
              "CONNECTION"
            ],
            "description": "Type of metadata."
          }
        }
      },
      "ImportUser": {
        "type": "object",
        "required": [
          "user_identifier",
          "display_name"
        ],
        "properties": {
          "user_identifier": {
            "type": "string",
            "description": "Unique ID or name of the user."
          },
          "display_name": {
            "type": "string",
            "description": "Unique display name of the user."
          },
          "password": {
            "type": "string",
            "description": "Password of the user."
          },
          "account_type": {
            "type": "string",
            "enum": [
              "LOCAL_USER",
              "LDAP_USER",
              "SAML_USER",
              "OIDC_USER",
              "REMOTE_USER"
            ],
            "description": "Type of the user account."
          },
          "account_status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "INACTIVE",
              "EXPIRED",
              "LOCKED",
              "PENDING"
            ],
            "description": "Status of the user account."
          },
          "email": {
            "type": "string",
            "description": "Email of the user."
          },
          "org_identifiers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Unique ID or name of the Orgs for the users."
          },
          "group_identifiers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Unique ID or name of the User Groups of the users."
          },
          "visibility": {
            "type": "string",
            "enum": [
              "SHARABLE",
              "NON_SHARABLE"
            ],
            "description": "Visibility of the users. The SHARABLE makes a users visible to other users and user groups,\nand thus allows them to share objects."
          },
          "notify_on_share": {
            "type": "boolean",
            "description": "User preference for receiving email notifications on shared answers or liveboard."
          },
          "show_onboarding_experience": {
            "type": "boolean",
            "description": "The user preference for revisiting the onboarding experience."
          },
          "onboarding_experience_completed": {
            "type": "boolean",
            "description": "The user preference for turning off the onboarding experience."
          },
          "home_liveboard_identifier": {
            "type": "string",
            "description": "Unique ID or name of the users home liveboard."
          },
          "favorite_metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FavoriteMetadataInput"
            },
            "description": "Metadata objects to be assigned as favorites for the imported user."
          }
        }
      },
      "ImportUsersResponse": {
        "type": "object",
        "properties": {
          "users_added": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImportUserType"
            }
          },
          "users_updated": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImportUserType"
            }
          },
          "users_deleted": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImportUserType"
            }
          }
        }
      },
      "SortOptions": {
        "type": "object",
        "properties": {
          "field_name": {
            "type": "string",
            "enum": [
              "NAME",
              "DISPLAY_NAME",
              "AUTHOR",
              "CREATED",
              "MODIFIED"
            ],
            "description": "Name of the field to apply the sort on."
          },
          "order": {
            "type": "string",
            "enum": [
              "ASC",
              "DESC"
            ],
            "description": "Sort order : ASC(Ascending) or DESC(Descending)."
          }
        },
        "description": "Sort options."
      },
      "UserGroup": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "VisualizationIdentifiersInput": {
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string",
            "description": "Unique ID or name of the visualization."
          }
        }
      },
      "MetadataTypeInput": {
        "type": "object",
        "required": [
          "identifier"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "LIVEBOARD",
              "ANSWER",
              "LOGICAL_TABLE",
              "LOGICAL_COLUMN",
              "CONNECTION",
              "TAG",
              "USER",
              "USER_GROUP",
              "LOGICAL_RELATIONSHIP"
            ],
            "description": "Type of metadata (Optional when given identifier is ID)."
          },
          "identifier": {
            "type": "string",
            "description": "Unique ID or name of the metadata."
          }
        },
        "description": "MetadataType InputType associated in the Product"
      },
      "ExportMetadataTypeInput": {
        "type": "object",
        "required": [
          "identifier"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "LIVEBOARD",
              "ANSWER",
              "LOGICAL_TABLE",
              "CONNECTION"
            ],
            "description": "Type of metadata (Optional when given identifier is ID)."
          },
          "identifier": {
            "type": "string",
            "description": "Unique ID or name of the metadata."
          }
        },
        "description": "MetadataType InputType used in Export MetadataType API's"
      },
      "DeleteMetadataTypeInput": {
        "type": "object",
        "required": [
          "identifier"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "LIVEBOARD",
              "ANSWER",
              "LOGICAL_TABLE",
              "LOGICAL_COLUMN",
              "LOGICAL_RELATIONSHIP"
            ],
            "description": "Type of metadata (Optional when given identifier is ID)."
          },
          "identifier": {
            "type": "string",
            "description": "Unique ID or name of the metadata."
          }
        },
        "description": "MetadataType InputType used in Delete MetadataType API's"
      },
      "PrincipalsInput": {
        "type": "object",
        "required": [
          "identifier",
          "type"
        ],
        "properties": {
          "identifier": {
            "type": "string",
            "description": "Unique ID or name of the principal."
          },
          "type": {
            "type": "string",
            "enum": [
              "USER",
              "USER_GROUP"
            ],
            "description": "Principal type."
          }
        }
      },
      "AuthorMetadataTypeInput": {
        "type": "object",
        "required": [
          "type",
          "identifier"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "LIVEBOARD",
              "ANSWER",
              "LOGICAL_TABLE"
            ],
            "description": "Type of metadata."
          },
          "identifier": {
            "type": "string",
            "description": "Unique ID or name of the metadata."
          }
        },
        "description": "MetadataType InputType used in Author API's"
      },
      "PermissionsMetadataTypeInput": {
        "type": "object",
        "required": [
          "type",
          "identifier"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "LIVEBOARD",
              "ANSWER",
              "LOGICAL_TABLE",
              "LOGICAL_COLUMN",
              "CONNECTION"
            ],
            "description": "Type of metadata."
          },
          "identifier": {
            "type": "string",
            "description": "Unique ID or name of the metadata."
          }
        },
        "description": "MetadataType InputType used in Permission API's"
      },
      "SharePermissionsInput": {
        "type": "object",
        "required": [
          "principal",
          "share_mode"
        ],
        "properties": {
          "principal": {
            "$ref": "#/components/schemas/PrincipalsInput",
            "description": "Details of users or user groups."
          },
          "share_mode": {
            "type": "string",
            "enum": [
              "READ_ONLY",
              "MODIFY",
              "NO_ACCESS"
            ],
            "description": "Object share mode."
          }
        }
      },
      "SearchDataResponse": {
        "type": "object",
        "required": [
          "contents"
        ],
        "properties": {
          "contents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AnswerContent"
            },
            "description": "Data content of metadata objects."
          }
        },
        "description": "Response format associated with the search data API."
      },
      "AnswerDataResponse": {
        "type": "object",
        "required": [
          "metadata_id",
          "metadata_name",
          "contents"
        ],
        "properties": {
          "metadata_id": {
            "type": "string",
            "description": "The unique identifier of the object"
          },
          "metadata_name": {
            "type": "string",
            "description": "Name of the metadata."
          },
          "contents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AnswerContent"
            },
            "description": "Data content of metadata objects."
          }
        },
        "description": "Response format associated with fetch data api"
      },
      "LiveboardDataResponse": {
        "type": "object",
        "required": [
          "metadata_id",
          "metadata_name",
          "contents"
        ],
        "properties": {
          "metadata_id": {
            "type": "string",
            "description": "The unique identifier of the object"
          },
          "metadata_name": {
            "type": "string",
            "description": "Name of the metadata."
          },
          "contents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LiveboardContent"
            },
            "description": "Data content of metadata objects."
          }
        }
      },
      "Org": {
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of the object."
          },
          "name": {
            "type": "string",
            "description": "Name of the object."
          }
        },
        "description": "Current logged in Organizations of the user."
      },
      "GenericInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "RiseSetter": {
        "type": "object",
        "required": [
          "field",
          "path"
        ],
        "properties": {
          "field": {
            "type": "string"
          },
          "path": {
            "type": "string"
          }
        }
      },
      "GetTokenResponse": {
        "type": "object",
        "required": [
          "token",
          "creation_time_in_millis",
          "expiration_time_in_millis",
          "valid_for_user_id",
          "valid_for_username"
        ],
        "properties": {
          "token": {
            "type": "string",
            "description": "Bearer auth token."
          },
          "creation_time_in_millis": {
            "type": "number",
            "format": "float",
            "description": "Token creation time in milliseconds."
          },
          "expiration_time_in_millis": {
            "type": "number",
            "format": "float",
            "description": "Token expiration time in milliseconds."
          },
          "valid_for_user_id": {
            "type": "string",
            "description": "Username to whom the token is issued."
          },
          "valid_for_username": {
            "type": "string",
            "description": "Unique identifier of the user to whom the token is issued."
          }
        }
      },
      "SystemInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the object"
          },
          "name": {
            "type": "string",
            "description": "Name of the cluster."
          },
          "release_version": {
            "type": "string",
            "description": "The release version of the cluster."
          },
          "time_zone": {
            "type": "string",
            "description": "The timezone of the cluster."
          },
          "locale": {
            "type": "string",
            "description": "The default locale of the cluster."
          },
          "date_format": {
            "type": "string",
            "description": "The default date format representation of the cluster."
          },
          "api_version": {
            "type": "string",
            "description": "The API version of the cluster."
          },
          "type": {
            "type": "string",
            "description": "The deployment type of the cluster."
          },
          "environment": {
            "type": "string",
            "description": "The deployed environment of the cluster."
          },
          "license": {
            "type": "string",
            "description": "The license applied to the cluster."
          },
          "date_time_format": {
            "type": "string",
            "description": "The default date time format representation of the cluster."
          },
          "time_format": {
            "type": "string",
            "description": "The default time format representation of the cluster."
          },
          "system_user_id": {
            "type": "string",
            "description": "The unique identifier of system user."
          },
          "super_user_id": {
            "type": "string",
            "description": "The unique identifier of super user."
          },
          "hidden_object_id": {
            "type": "string",
            "description": "The unique identifier of hidden object."
          },
          "system_group_id": {
            "type": "string",
            "description": "The unique identifier of system group."
          },
          "tsadmin_user_id": {
            "type": "string",
            "description": "The unique identifier of tsadmin user."
          },
          "admin_group_id": {
            "type": "string",
            "description": "The unique identifier of admin group."
          },
          "all_tables_connection_id": {
            "type": "string",
            "description": "The unique identifier of all tables connection."
          },
          "all_user_group_id": {
            "type": "string",
            "description": "The unique identifier of ALL user group."
          },
          "accept_language": {
            "type": "string",
            "description": "The supported accept language by the cluster."
          },
          "all_user_group_member_user_count": {
            "type": "integer",
            "format": "int32",
            "description": "The count of users of ALL user group."
          },
          "logical_model_version": {
            "type": "integer",
            "format": "int32",
            "description": "The version number of logical model of the cluster."
          }
        }
      },
      "SystemConfig": {
        "type": "object",
        "properties": {
          "onboarding_content_url": {
            "type": "string"
          }
        }
      },
      "OrgResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "Unique identifier of the organization."
          },
          "name": {
            "type": "string",
            "description": "Name of the organization."
          },
          "status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "IN_ACTIVE"
            ],
            "description": "Status of the organization."
          },
          "description": {
            "type": "string",
            "description": "Description of the organization."
          },
          "visibility": {
            "type": "string",
            "enum": [
              "SHOW",
              "HIDDEN"
            ],
            "description": "Visibility of the organization."
          }
        }
      },
      "Tag": {
        "type": "object",
        "required": [
          "name",
          "id"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "color": {
            "type": "string"
          },
          "deleted": {
            "type": "boolean"
          },
          "hidden": {
            "type": "boolean"
          },
          "external": {
            "type": "boolean"
          },
          "deprecated": {
            "type": "boolean"
          },
          "creation_time_in_millis": {
            "type": "number",
            "format": "float"
          },
          "modification_time_in_millis": {
            "type": "number",
            "format": "float"
          },
          "author_id": {
            "type": "string"
          },
          "modifier_id": {
            "type": "string"
          },
          "owner_id": {
            "type": "string"
          }
        }
      },
      "UserGroupResponse": {
        "type": "object",
        "required": [
          "display_name",
          "id",
          "name",
          "visibility"
        ],
        "properties": {
          "author_id": {
            "type": "string",
            "description": "The unique identifier of the object"
          },
          "complete_detail": {
            "type": "boolean",
            "description": "Indicates whether the response has complete detail of the user group."
          },
          "content": {
            "type": "object",
            "description": "Content details of the user group."
          },
          "creation_time_in_millis": {
            "type": "number",
            "format": "float",
            "description": "Creation time of the user group in milliseconds."
          },
          "default_liveboards": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserGroup"
            },
            "description": "Liveboards which are assigned as default liveboards to the user group."
          },
          "deleted": {
            "type": "boolean",
            "description": "Indicates whether the user group is deleted."
          },
          "deprecated": {
            "type": "boolean",
            "description": "Indicates whether the user group is deprecated."
          },
          "description": {
            "type": "string",
            "description": "Description of the user group."
          },
          "display_name": {
            "type": "string",
            "description": "Display name of the user group."
          },
          "external": {
            "type": "boolean",
            "description": "Indicates whether the user group is external."
          },
          "generation_number": {
            "type": "integer",
            "format": "int32",
            "description": "Generation number of the user group."
          },
          "hidden": {
            "type": "boolean",
            "description": "Indicates whether the user group is hidden."
          },
          "id": {
            "type": "string",
            "description": "The unique identifier of the object"
          },
          "index": {
            "type": "integer",
            "format": "int32",
            "description": "Index number of the user group."
          },
          "index_version": {
            "type": "integer",
            "format": "int32",
            "description": "Index version number of the user group."
          },
          "metadata_version": {
            "type": "integer",
            "format": "int32",
            "description": "Metadata version number of the user group."
          },
          "modification_time_in_millis": {
            "type": "number",
            "format": "float",
            "description": "Last modified time of the user group in milliseconds."
          },
          "modifier_id": {
            "type": "string",
            "description": "The unique identifier of the object"
          },
          "name": {
            "type": "string",
            "description": "Name of the user group."
          },
          "orgs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserGroup"
            },
            "description": "Orgs in which user group exists."
          },
          "owner_id": {
            "type": "string",
            "description": "The unique identifier of the object"
          },
          "parent_type": {
            "type": "string",
            "enum": [
              "USER",
              "GROUP"
            ],
            "description": "Parent type of the user group."
          },
          "privileges": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Privileges which are assigned to the user group."
          },
          "sub_groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserGroup"
            },
            "description": "User Groups who are part of the user group."
          },
          "system_group": {
            "type": "boolean",
            "description": "Indicates whether the user group is a system group."
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserGroup"
            },
            "description": "Tags associated with the user group."
          },
          "type": {
            "type": "string",
            "enum": [
              "LOCAL_GROUP",
              "LDAP_GROUP"
            ],
            "description": "Type of the user group."
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserGroup"
            },
            "description": "Users who are part of the user group."
          },
          "visibility": {
            "type": "string",
            "enum": [
              "SHARABLE",
              "NON_SHARABLE"
            ],
            "description": "Visibility of the user group. The SHARABLE makes a user group visible to other users and user groups, and thus allows them to share objects."
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Role"
            },
            "description": "List of roles assgined to the user"
          }
        }
      },
      "MetadataSearchResponse": {
        "type": "object",
        "required": [
          "metadata_type"
        ],
        "properties": {
          "metadata_id": {
            "type": "string",
            "description": "Unique identifier of the metadata."
          },
          "metadata_name": {
            "type": "string",
            "description": "Name of the metadata."
          },
          "metadata_type": {
            "type": "string",
            "enum": [
              "LIVEBOARD",
              "ANSWER",
              "LOGICAL_TABLE",
              "LOGICAL_COLUMN",
              "CONNECTION",
              "TAG",
              "USER",
              "USER_GROUP",
              "LOGICAL_RELATIONSHIP"
            ],
            "description": "Type of the metadata."
          },
          "dependent_objects": {
            "type": "object",
            "description": "Details of dependent objects of the metadata objects."
          },
          "incomplete_objects": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "Details of incomplete information of the metadata objects if any."
          },
          "metadata_detail": {
            "type": "object",
            "description": "Complete details of the metadata objects."
          },
          "metadata_header": {
            "type": "object",
            "description": "Header information of the metadata objects."
          },
          "visualization_headers": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "Visualization header information of the metadata objects."
          },
          "stats": {
            "type": "object",
            "description": "Stats of the metadata object. Includes views, favorites, last_accessed."
          }
        },
        "description": "Metadata Search Response Object."
      },
      "MetadataListItemInput": {
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string",
            "description": "Unique ID or name of the metadata."
          },
          "name_pattern": {
            "type": "string",
            "description": "A pattern to match case-insensitive name of the metadata object. User % for a wildcard match."
          },
          "type": {
            "type": "string",
            "enum": [
              "LIVEBOARD",
              "ANSWER",
              "LOGICAL_TABLE",
              "LOGICAL_COLUMN",
              "CONNECTION",
              "TAG",
              "USER",
              "USER_GROUP",
              "LOGICAL_RELATIONSHIP"
            ],
            "description": "Type of metadata.\n1. Liveboard\n2. Answers\n3. LOGICAL_TABLE for any data object such as table, worksheet or view.\n4. LOGICAL_COLUMN for a column of any data object such as table, worksheet or view.\n5. CONNECTION for creating or modify data connections.\n6. TAG for tag objects.\n7. USER for user objects.\n8. USER_GROUP for user group objects.\n9. LOGICAL_RELATIONSHIP for table or worksheet joins. A join combines from one or several data object by using matching values"
          }
        }
      },
      "PermissionInput": {
        "type": "object",
        "required": [
          "principal",
          "share_mode"
        ],
        "properties": {
          "principal": {
            "$ref": "#/components/schemas/PrincipalsInput",
            "description": "Details of users or user groups."
          },
          "share_mode": {
            "type": "string",
            "enum": [
              "READ_ONLY",
              "MODIFY",
              "NO_ACCESS"
            ],
            "description": "Object share mode."
          }
        },
        "description": "Details of users or user groups."
      },
      "ExcludeMetadataListItemInput": {
        "type": "object",
        "required": [
          "identifier",
          "type"
        ],
        "properties": {
          "identifier": {
            "type": "string",
            "description": "Unique ID or name of the metadata."
          },
          "type": {
            "type": "string",
            "enum": [
              "LIVEBOARD",
              "ANSWER",
              "LOGICAL_TABLE",
              "LOGICAL_COLUMN",
              "CONNECTION",
              "TAG",
              "USER",
              "USER_GROUP",
              "LOGICAL_RELATIONSHIP"
            ],
            "description": "Type of metadata.\n1. Liveboard\n2. Answers\n3. LOGICAL_TABLE for any data object such as table, worksheet or view.\n4. LOGICAL_COLUMN for a column of any data object such as table, worksheet or view.\n5. CONNECTION for creating or modify data connections.\n6. TAG for tag objects.\n7. USER for user objects.\n8. USER_GROUP for user group objects.\n9. LOGICAL_RELATIONSHIP for table or worksheet joins. A join combines from one or several data object by using matching values"
          }
        }
      },
      "FavoriteObjectOptionsInput": {
        "type": "object",
        "properties": {
          "include": {
            "type": "boolean",
            "description": "Includes objects marked as favorite for the specified user GUIDs."
          },
          "user_identifiers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Unique ID or name of the users. If not specified then favorite of current logged in user is considered."
          }
        },
        "description": "Favorite object options."
      },
      "MetadataSearchSortOptions": {
        "type": "object",
        "properties": {
          "field_name": {
            "type": "string",
            "enum": [
              "NAME",
              "DISPLAY_NAME",
              "AUTHOR",
              "CREATED",
              "MODIFIED",
              "VIEWS",
              "FAVORITES",
              "LAST_ACCESSED"
            ],
            "description": "Name of the field to apply the sort on."
          },
          "order": {
            "type": "string",
            "enum": [
              "ASC",
              "DESC"
            ],
            "description": "Sort order : ASC(Ascending) or DESC(Descending)."
          }
        },
        "description": "Sort options."
      },
      "SqlQueryResponse": {
        "type": "object",
        "required": [
          "metadata_id",
          "metadata_name",
          "metadata_type",
          "sql_queries"
        ],
        "properties": {
          "metadata_id": {
            "type": "string",
            "description": "Unique identifier of the metadata."
          },
          "metadata_name": {
            "type": "string",
            "description": "Name of the metadata."
          },
          "metadata_type": {
            "type": "string",
            "enum": [
              "LIVEBOARD",
              "ANSWER",
              "LOGICAL_TABLE",
              "LOGICAL_COLUMN",
              "CONNECTION",
              "TAG",
              "USER",
              "USER_GROUP",
              "LOGICAL_RELATIONSHIP"
            ],
            "description": "Type of the metadata."
          },
          "sql_queries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SqlQuery"
            },
            "description": "SQL query details of metadata objects."
          }
        }
      },
      "PdfOptionsInput": {
        "type": "object",
        "properties": {
          "include_cover_page": {
            "type": "boolean",
            "description": "Indicates whether to include cover page with the Liveboard title."
          },
          "include_custom_logo": {
            "type": "boolean",
            "description": "Indicates whether to include customized wide logo in the footer if available."
          },
          "include_filter_page": {
            "type": "boolean",
            "description": "Indicates whether to include a page with all applied filters."
          },
          "include_page_number": {
            "type": "boolean",
            "description": "Indicates whether to include page number in the footer of each page."
          },
          "page_orientation": {
            "type": "string",
            "enum": [
              "PORTRAIT",
              "LANDSCAPE"
            ],
            "description": "Page orientation of the PDF."
          },
          "truncate_table": {
            "type": "boolean",
            "description": "Indicates whether to include only first page of the tables."
          },
          "page_footer_text": {
            "type": "string",
            "description": "Text to include in the footer of each page."
          }
        }
      },
      "PngOptionsInput": {
        "type": "object",
        "properties": {
          "include_cover_page": {
            "type": "boolean",
            "description": "Indicates whether to include cover page with the Liveboard title."
          },
          "include_filter_page": {
            "type": "boolean",
            "description": "Indicates whether to include a page with all applied filters."
          }
        }
      },
      "LogResponse": {
        "type": "object",
        "required": [
          "date",
          "log"
        ],
        "properties": {
          "date": {
            "type": "string",
            "description": "Date timestamp of the log entry"
          },
          "log": {
            "type": "string",
            "description": "Log data"
          }
        }
      },
      "RepoConfigObject": {
        "type": "object",
        "properties": {
          "repository_url": {
            "type": "string",
            "description": "Remote repository URL configured"
          },
          "username": {
            "type": "string",
            "description": "Username to authenticate connection to vcs"
          },
          "default_branch": {
            "type": "string",
            "description": "Name of the default remote branch"
          },
          "branches": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Branches that have been pulled in local repository"
          },
          "enable_guid_mapping": {
            "type": "boolean",
            "description": "Maintain mapping of guid for the deployment to an instance"
          },
          "guid_mapping_branch_name": {
            "type": "string",
            "description": "Name of the branch where file containing guid mapping should be maintained"
          },
          "org": {
            "$ref": "#/components/schemas/Org",
            "description": "Details of the organization"
          }
        }
      },
      "CommitHistoryResponse": {
        "type": "object",
        "required": [
          "committer",
          "author",
          "comment",
          "commit_time",
          "commit_id",
          "branch"
        ],
        "properties": {
          "committer": {
            "$ref": "#/components/schemas/CommiterType",
            "description": "Repository user using which changes were committed"
          },
          "author": {
            "$ref": "#/components/schemas/AuthorType",
            "description": "Thoughtspot user who commits the changes"
          },
          "comment": {
            "type": "string",
            "description": "Comments associated with the commit"
          },
          "commit_time": {
            "type": "string",
            "description": "Time at which the changes were committed."
          },
          "commit_id": {
            "type": "string",
            "description": "SHA id associated with the commit"
          },
          "branch": {
            "type": "string",
            "description": "Branch where changes were committed"
          }
        }
      },
      "SearchConnectionResponse": {
        "type": "object",
        "required": [
          "id",
          "name",
          "data_warehouse_type"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID of the connection."
          },
          "name": {
            "type": "string",
            "description": "Name of the connection."
          },
          "description": {
            "type": "string",
            "description": "Description of the connection."
          },
          "data_warehouse_type": {
            "type": "string",
            "enum": [
              "SNOWFLAKE",
              "AMAZON_REDSHIFT",
              "GOOGLE_BIGQUERY",
              "AZURE_SYNAPSE",
              "TERADATA",
              "SAP_HANA",
              "STARBURST",
              "ORACLE_ADW",
              "DATABRICKS",
              "DENODO",
              "DREMIO",
              "TRINO",
              "PRESTO"
            ],
            "description": "Type of data warehouse."
          },
          "data_warehouse_objects": {
            "$ref": "#/components/schemas/DataWarehouseObjects",
            "description": "List of Data warehouse objects"
          },
          "details": {
            "type": "object",
            "description": "Details of the connection."
          }
        }
      },
      "ConnectionInput": {
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string",
            "description": "Unique ID or name of the connection."
          },
          "name_pattern": {
            "type": "string",
            "description": "A pattern to match case-insensitive name of the connection object. User % for a wildcard match."
          },
          "data_warehouse_objects": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataWarehouseObjectInput"
            },
            "description": "Filter options for databases, schemas, tables and columns."
          }
        }
      },
      "SortOptionInput": {
        "type": "object",
        "properties": {
          "field_name": {
            "type": "string",
            "enum": [
              "NAME",
              "DISPLAY_NAME",
              "AUTHOR",
              "CREATED",
              "MODIFIED",
              "LAST_ACCESSED",
              "SYNCED",
              "VIEWS",
              "USER_STATE",
              "ROW_COUNT"
            ],
            "description": "Name of the field to apply the sort on."
          },
          "order": {
            "type": "string",
            "enum": [
              "ASC",
              "DESC"
            ],
            "description": "Sort order : ASC(Ascending) or DESC(Descending)."
          }
        }
      },
      "SearchRoleResponse": {
        "type": "object",
        "required": [
          "id",
          "name",
          "description",
          "privileges"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique Id of the role."
          },
          "name": {
            "type": "string",
            "description": "Name of the role"
          },
          "description": {
            "type": "string",
            "description": "Description of the role"
          },
          "groups_assigned_count": {
            "type": "integer",
            "format": "int32",
            "description": "number of groups assigned with this role"
          },
          "orgs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GenericInfo"
            },
            "description": "Organizations in which role exists."
          },
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GenericInfo"
            },
            "description": "Details of groups assigned with this role"
          },
          "privileges": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "UNKNOWN",
                "ADMINISTRATION",
                "AUTHORING",
                "USERDATAUPLOADING",
                "DATADOWNLOADING",
                "USERMANAGEMENT",
                "SECURITYMANAGEMENT",
                "LOGICALMODELING",
                "DATAMANAGEMENT",
                "TAGMANAGEMENT",
                "SHAREWITHALL",
                "SYSTEMMANAGEMENT",
                "JOBSCHEDULING",
                "A3ANALYSIS",
                "EXPERIMENTALFEATUREPRIVILEGE",
                "BYPASSRLS",
                "RANALYSIS",
                "DISABLE_PINBOARD_CREATION",
                "DEVELOPER",
                "APPLICATION_ADMINISTRATION",
                "USER_ADMINISTRATION",
                "GROUP_ADMINISTRATION",
                "BACKUP_ADMINISTRATION",
                "SYSTEM_INFO_ADMINISTRATION",
                "ENABLESPOTAPPCREATION",
                "SYNCMANAGEMENT",
                "ORG_ADMINISTRATION",
                "ROLE_ADMINISTRATION",
                "AUTHENTICATION_ADMINISTRATION",
                "BILLING_INFO_ADMINISTRATION",
                "PREVIEW_THOUGHTSPOT_SAGE"
              ]
            },
            "description": "Privileges granted to the role."
          },
          "permission": {
            "type": "string",
            "enum": [
              "READ_ONLY",
              "MODIFY",
              "NO_ACCESS"
            ],
            "description": "Permission details of the Role"
          },
          "author_id": {
            "type": "string",
            "description": "Unique identifier of author of the role."
          },
          "modifier_id": {
            "type": "string",
            "description": "Unique identifier of modifier of the role."
          },
          "creation_time_in_millis": {
            "type": "object",
            "description": "Creation time of the role in milliseconds."
          },
          "modification_time_in_millis": {
            "type": "object",
            "description": "Last modified time of the role in milliseconds."
          },
          "deleted": {
            "type": "boolean",
            "description": "Indicates whether the role is deleted."
          },
          "deprecated": {
            "type": "boolean",
            "description": "Indicates whether the role is deprecated."
          },
          "external": {
            "type": "boolean",
            "description": "Indicates whether the role is external."
          },
          "hidden": {
            "type": "boolean",
            "description": "Indicates whether the role is hidden."
          },
          "shared_via_connection": {
            "type": "boolean",
            "description": "Indicates whether the role is shared via connection"
          }
        },
        "description": "Response for search role api should handle hidden privileges as well."
      },
      "Token": {
        "type": "object",
        "required": [
          "token",
          "creation_time_in_millis",
          "expiration_time_in_millis",
          "scope",
          "valid_for_user_id",
          "valid_for_username"
        ],
        "properties": {
          "token": {
            "type": "string",
            "description": "Bearer auth token."
          },
          "creation_time_in_millis": {
            "type": "number",
            "format": "float",
            "description": "Token creation time in milliseconds."
          },
          "expiration_time_in_millis": {
            "type": "number",
            "format": "float",
            "description": "Token expiration time in milliseconds."
          },
          "scope": {
            "$ref": "#/components/schemas/Scope",
            "description": "Token access scope details"
          },
          "valid_for_user_id": {
            "type": "string",
            "description": "Username to whom the token is issued."
          },
          "valid_for_username": {
            "type": "string",
            "description": "Unique identifier of the user to whom the token is issued."
          }
        }
      },
      "TagMetadataTypeInput": {
        "type": "object",
        "required": [
          "identifier"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "LIVEBOARD",
              "ANSWER",
              "LOGICAL_TABLE",
              "LOGICAL_COLUMN"
            ],
            "description": "Type of metadata (Optional when given identifier is ID).\n1. LIVEBOARD\n2. ANSWERS\n3. LOGICAL_TABLE for any data object such as table, worksheet or view.\n4. LOGICAL_COLUMN for a column of any data object such as tables, worksheets or views."
          },
          "identifier": {
            "type": "string",
            "description": "Unique ID or name of the metadata."
          }
        }
      },
      "ImportUserGroupsResponse": {
        "type": "object",
        "required": [
          "groups_added",
          "groups_deleted",
          "groups_updated"
        ],
        "properties": {
          "groups_added": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserGroup"
            },
            "description": "The user groups which are added into the system."
          },
          "groups_deleted": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserGroup"
            },
            "description": "The user groups which are deleted from the system."
          },
          "groups_updated": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserGroup"
            },
            "description": "The user groups which are updated in the system."
          }
        }
      },
      "GroupsImportListInput": {
        "type": "object",
        "required": [
          "display_name",
          "group_identifier"
        ],
        "properties": {
          "display_name": {
            "type": "string",
            "description": "Unique display name of the user group."
          },
          "group_identifier": {
            "type": "string",
            "description": "Unique ID or name of the User Group."
          },
          "default_liveboard_identifiers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Unique ID of liveboards which will be assigned as default liveboards to the user group."
          },
          "description": {
            "type": "string",
            "description": "Description of the user group."
          },
          "privileges": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "ADMINISTRATION",
                "AUTHORING",
                "USERDATAUPLOADING",
                "DATADOWNLOADING",
                "USERMANAGEMENT",
                "DATAMANAGEMENT",
                "SHAREWITHALL",
                "JOBSCHEDULING",
                "A3ANALYSIS",
                "EXPERIMENTALFEATUREPRIVILEGE",
                "BYPASSRLS",
                "RANALYSIS",
                "DEVELOPER",
                "USER_ADMINISTRATION",
                "GROUP_ADMINISTRATION",
                "SYNCMANAGEMENT",
                "CAN_CREATE_CATALOG",
                "DISABLE_PINBOARD_CREATION",
                "ENABLESPOTAPPCREATION",
                "LIVEBOARD_VERIFIER",
                "PREVIEW_THOUGHTSPOT_SAGE"
              ]
            },
            "description": "Privileges which will be assigned to the user group."
          },
          "sub_group_identifiers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Unique ID or name of the User Groups who will be part of the user group."
          },
          "type": {
            "type": "string",
            "enum": [
              "LOCAL_GROUP",
              "LDAP_GROUP"
            ],
            "description": "Type of the user group."
          },
          "user_identifiers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Unique ID or name of the Users who will be part of the user group."
          },
          "visibility": {
            "type": "string",
            "enum": [
              "SHARABLE",
              "NON_SHARABLE"
            ],
            "description": "Visibility of the user group. The SHARABLE makes a user group visible to other users and user groups, and thus allows them to share objects."
          }
        }
      },
      "CommitResponse": {
        "type": "object",
        "properties": {
          "committer": {
            "$ref": "#/components/schemas/CommiterType",
            "description": "Repository user using which changes were committed"
          },
          "author": {
            "$ref": "#/components/schemas/AuthorType",
            "description": "Thoughtspot user who commits the changes"
          },
          "comment": {
            "type": "string",
            "description": "Comments associated with the commit"
          },
          "commit_time": {
            "type": "string",
            "description": "Time at which the changes were committed."
          },
          "commit_id": {
            "type": "string",
            "description": "SHA id associated with the commit"
          },
          "branch": {
            "type": "string",
            "description": "Branch where changes were committed"
          },
          "committed_files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommitFileType"
            },
            "description": "Files that were pushed as part of this commit"
          }
        }
      },
      "MetadataObject": {
        "type": "object",
        "required": [
          "identifier"
        ],
        "properties": {
          "identifier": {
            "type": "string",
            "description": "Unique ID or name of the metadata"
          },
          "type": {
            "type": "string",
            "enum": [
              "LIVEBOARD",
              "ANSWER",
              "LOGICAL_TABLE"
            ],
            "description": "Type of metadata."
          }
        }
      },
      "RevertResponse": {
        "type": "object",
        "properties": {
          "committer": {
            "$ref": "#/components/schemas/CommiterType",
            "description": "Repository user using which changes were committed"
          },
          "author": {
            "$ref": "#/components/schemas/AuthorType",
            "description": "Thoughtspot user who commits the changes"
          },
          "comment": {
            "type": "string",
            "description": "Comments associated with the commit"
          },
          "commit_time": {
            "type": "string",
            "description": "Time at which the changes were committed."
          },
          "commit_id": {
            "type": "string",
            "description": "SHA id associated with the commit"
          },
          "branch": {
            "type": "string",
            "description": "Branch where changes were committed"
          },
          "committed_files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommitFileType"
            },
            "description": "Files that were pushed as part of this commit"
          },
          "reverted_metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RevertedMetadata"
            },
            "description": "Metadata of reverted file of this commit"
          }
        }
      },
      "DeployResponse": {
        "type": "object",
        "properties": {
          "file_name": {
            "type": "string",
            "description": "Name of the file deployed"
          },
          "metadata_name": {
            "type": "string",
            "description": "Name of the metadata object"
          },
          "metadata_type": {
            "type": "string",
            "description": "Type of the metadata object"
          },
          "status_code": {
            "type": "string",
            "description": "Indicates the status of deployment for the file"
          },
          "status_message": {
            "type": "string",
            "description": "Any error or warning with the deployment"
          }
        }
      },
      "CreateConnectionResponse": {
        "type": "object",
        "required": [
          "id",
          "name",
          "data_warehouse_type"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the connection created."
          },
          "name": {
            "type": "string",
            "description": "Name of the connection."
          },
          "data_warehouse_type": {
            "type": "string",
            "enum": [
              "SNOWFLAKE",
              "AMAZON_REDSHIFT",
              "GOOGLE_BIGQUERY",
              "AZURE_SYNAPSE",
              "TERADATA",
              "SAP_HANA",
              "STARBURST",
              "ORACLE_ADW",
              "DATABRICKS",
              "DENODO",
              "DREMIO",
              "TRINO",
              "PRESTO"
            ],
            "description": "Type of data warehouse."
          },
          "details": {
            "type": "object",
            "description": "Details of the connection."
          }
        }
      },
      "RoleResponse": {
        "type": "object",
        "required": [
          "id",
          "name",
          "description",
          "privileges"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique Id of the role."
          },
          "name": {
            "type": "string",
            "description": "Name of the role"
          },
          "description": {
            "type": "string",
            "description": "Description of the role"
          },
          "groups_assigned_count": {
            "type": "integer",
            "format": "int32",
            "description": "number of groups assigned with this role"
          },
          "orgs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GenericInfo"
            },
            "description": "Organizations in which role exists."
          },
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GenericInfo"
            },
            "description": "Details of groups assigned with this role"
          },
          "privileges": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "USERDATAUPLOADING",
                "DATADOWNLOADING",
                "DATAMANAGEMENT",
                "SHAREWITHALL",
                "JOBSCHEDULING",
                "A3ANALYSIS",
                "EXPERIMENTALFEATUREPRIVILEGE",
                "BYPASSRLS",
                "DISABLE_PINBOARD_CREATION",
                "DEVELOPER",
                "APPLICATION_ADMINISTRATION",
                "USER_ADMINISTRATION",
                "GROUP_ADMINISTRATION",
                "SYSTEM_INFO_ADMINISTRATION",
                "SYNCMANAGEMENT",
                "ORG_ADMINISTRATION",
                "ROLE_ADMINISTRATION",
                "AUTHENTICATION_ADMINISTRATION",
                "BILLING_INFO_ADMINISTRATION"
              ]
            },
            "description": "Privileges granted to the role."
          },
          "permission": {
            "type": "string",
            "enum": [
              "READ_ONLY",
              "MODIFY",
              "NO_ACCESS"
            ],
            "description": "Permission details of the Role"
          },
          "author_id": {
            "type": "string",
            "description": "Unique identifier of author of the role."
          },
          "modifier_id": {
            "type": "string",
            "description": "Unique identifier of modifier of the role."
          },
          "creation_time_in_millis": {
            "type": "object",
            "description": "Creation time of the role in milliseconds."
          },
          "modification_time_in_millis": {
            "type": "object",
            "description": "Last modified time of the role in milliseconds."
          },
          "deleted": {
            "type": "boolean",
            "description": "Indicates whether the role is deleted."
          },
          "deprecated": {
            "type": "boolean",
            "description": "Indicates whether the role is deprecated."
          },
          "external": {
            "type": "boolean",
            "description": "Indicates whether the role is external."
          },
          "hidden": {
            "type": "boolean",
            "description": "Indicates whether the role is hidden."
          },
          "shared_via_connection": {
            "type": "boolean",
            "description": "Indicates whether the role is shared via connection"
          }
        }
      },
      "ResponseSchedule": {
        "type": "object",
        "required": [
          "author",
          "creation_time_in_millis",
          "file_format",
          "frequency",
          "id",
          "metadata",
          "name",
          "time_zone"
        ],
        "properties": {
          "author": {
            "$ref": "#/components/schemas/Author",
            "description": "Author of the schedule."
          },
          "creation_time_in_millis": {
            "type": "object",
            "description": "Schedule creation time in milliseconds."
          },
          "description": {
            "type": "string",
            "description": "Description of the job."
          },
          "file_format": {
            "type": "string",
            "description": "Export file format."
          },
          "frequency": {
            "$ref": "#/components/schemas/Frequency",
            "description": "Configuration of schedule with cron expression"
          },
          "id": {
            "type": "string",
            "description": "GUID of the scheduled job."
          },
          "liveboard_options": {
            "$ref": "#/components/schemas/LiveboardOptions",
            "description": "Options to specify details of liveboard."
          },
          "metadata": {
            "$ref": "#/components/schemas/MetadataResponse",
            "description": "Unique ID or name of the metadata."
          },
          "name": {
            "type": "string",
            "description": "Name of the scheduled job."
          },
          "pdf_options": {
            "$ref": "#/components/schemas/PdfOptions",
            "description": "Options for PDF export."
          },
          "recipient_details": {
            "$ref": "#/components/schemas/RecipientDetails",
            "description": "Recipient configuration which includes emails and recipients of the schedule"
          },
          "status": {
            "type": "string",
            "description": "Status of the job"
          },
          "time_zone": {
            "type": "string",
            "description": "Time zone"
          },
          "history_runs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseScheduleRun"
            },
            "description": "Schedule runs history records."
          }
        }
      },
      "LiveboardOptionsInput": {
        "type": "object",
        "required": [
          "visualization_identifiers"
        ],
        "properties": {
          "visualization_identifiers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Unique ID or name of visualizations."
          }
        },
        "description": "Options to specify details of liveboard."
      },
      "SchedulesPdfOptionsInput": {
        "type": "object",
        "properties": {
          "complete_liveboard": {
            "type": "boolean",
            "description": "Indicates whether to include complete liveboard."
          },
          "include_cover_page": {
            "type": "boolean",
            "description": "Indicates whether to include cover page with the liveboard title."
          },
          "include_custom_logo": {
            "type": "boolean",
            "description": "Indicates whether to include customized wide logo in the footer if available."
          },
          "include_filter_page": {
            "type": "boolean",
            "description": "Indicates whether to include a page with all applied filters."
          },
          "include_page_number": {
            "type": "boolean",
            "description": "Indicates whether to include page number in the footer of each page"
          },
          "page_footer_text": {
            "type": "string",
            "description": "Text to include in the footer of each page."
          },
          "page_orientation": {
            "type": "string",
            "description": "Page orientation of the PDF."
          },
          "page_size": {
            "type": "string",
            "enum": [
              "A4"
            ],
            "description": "Page size."
          },
          "truncate_table": {
            "type": "boolean",
            "description": "Indicates whether to include only first page of the tables."
          }
        },
        "description": "Options for PDF export."
      },
      "FrequencyInput": {
        "type": "object",
        "required": [
          "cron_expression"
        ],
        "properties": {
          "cron_expression": {
            "$ref": "#/components/schemas/CronExpressionInput",
            "description": "Schedule selected cron expression."
          }
        },
        "description": "Configuration of schedule with cron expression"
      },
      "RecipientDetailsInput": {
        "type": "object",
        "properties": {
          "emails": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Emails of the recipients."
          },
          "principals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PrincipalsListItemInput"
            },
            "description": "List of user or user groups to be associated for schedule."
          }
        },
        "description": "Recipient configuration which includes emails and recipients of the schedule"
      },
      "MetadataInput": {
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "LIVEBOARD"
            ]
          }
        }
      },
      "SortingOptions": {
        "type": "object",
        "properties": {
          "field_name": {
            "type": "string",
            "description": "Name of the field to apply the sort on."
          },
          "order": {
            "type": "string",
            "description": "Sort order : ASC(Ascending) or DESC(Descending)."
          }
        },
        "description": "Sort options."
      },
      "ScheduleHistoryRunsOptionsInput": {
        "type": "object",
        "properties": {
          "include_history_runs": {
            "type": "boolean",
            "description": "Indicates whether to fetch history runs wrt to the schedule or not."
          },
          "record_size": {
            "type": "integer",
            "format": "int32",
            "description": "Indicates the max number of records that can be fetched as history runs wrt any scheduled job."
          },
          "record_offset": {
            "type": "integer",
            "format": "int32",
            "description": "Indicates the starting record number from where history runs records should be fetched."
          }
        }
      },
      "FavoriteMetadataItem": {
        "type": "object",
        "required": [
          "id",
          "name",
          "type"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID of the metadata."
          },
          "name": {
            "type": "string",
            "description": "name of the metadata."
          },
          "type": {
            "type": "string",
            "enum": [
              "LIVEBOARD",
              "ANSWER",
              "LOGICAL_TABLE",
              "LOGICAL_COLUMN",
              "CONNECTION",
              "TAG",
              "USER",
              "USER_GROUP",
              "LOGICAL_RELATIONSHIP"
            ],
            "description": "Type of metadata."
          }
        }
      },
      "Object_ID_And_Name": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the object."
          },
          "name": {
            "type": "string",
            "description": "Name of the object."
          }
        },
        "description": "The object representation with ID and Name."
      },
      "ImportUserType": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the user."
          },
          "name": {
            "type": "string",
            "description": "Name of the user."
          }
        }
      },
      "AnswerContent": {
        "type": "object",
        "required": [
          "available_data_row_count",
          "column_names",
          "data_rows",
          "record_offset",
          "record_size",
          "returned_data_row_count",
          "sampling_ratio"
        ],
        "properties": {
          "available_data_row_count": {
            "type": "integer",
            "format": "int32",
            "description": "Total available data row count."
          },
          "column_names": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Name of the columns."
          },
          "data_rows": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "Rows of data set."
          },
          "record_offset": {
            "type": "integer",
            "format": "int32",
            "description": "The starting record number from where the records should be included."
          },
          "record_size": {
            "type": "integer",
            "format": "int32",
            "description": "The number of records that should be included."
          },
          "returned_data_row_count": {
            "type": "integer",
            "format": "int32",
            "description": "Total returned data row count."
          },
          "sampling_ratio": {
            "type": "number",
            "format": "float",
            "description": "Sampling ratio (0 to 1). If the query was sampled, it is the ratio of keys returned in the data set to the total number of keys expected in the query. If the value is 1.0, this means that the complete result is returned."
          }
        }
      },
      "LiveboardContent": {
        "type": "object",
        "required": [
          "available_data_row_count",
          "column_names",
          "data_rows",
          "record_offset",
          "record_size",
          "returned_data_row_count",
          "sampling_ratio"
        ],
        "properties": {
          "available_data_row_count": {
            "type": "integer",
            "format": "int32",
            "description": "Total available data row count."
          },
          "column_names": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Name of the columns."
          },
          "data_rows": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "Rows of data set."
          },
          "record_offset": {
            "type": "integer",
            "format": "int32",
            "description": "The starting record number from where the records should be included."
          },
          "record_size": {
            "type": "integer",
            "format": "int32",
            "description": "The number of records that should be included."
          },
          "returned_data_row_count": {
            "type": "integer",
            "format": "int32",
            "description": "Total returned data row count."
          },
          "sampling_ratio": {
            "type": "number",
            "format": "float",
            "description": "Sampling ratio (0 to 1). If the query was sampled, it is the ratio of keys returned in the data set to the total number of keys expected in the query. If the value is 1.0, this means that the complete result is returned."
          },
          "visualization_id": {
            "type": "string",
            "description": "Unique ID of the visualization."
          },
          "visualization_name": {
            "type": "string",
            "description": "Name of the visualization."
          }
        }
      },
      "Role": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "id of the Role"
          },
          "name": {
            "type": "string",
            "description": "name of the Role"
          }
        }
      },
      "SqlQuery": {
        "type": "object",
        "required": [
          "metadata_id",
          "metadata_name",
          "sql_query"
        ],
        "properties": {
          "metadata_id": {
            "type": "string",
            "description": "Unique identifier of the metadata."
          },
          "metadata_name": {
            "type": "string",
            "description": "Name of the metadata."
          },
          "sql_query": {
            "type": "string",
            "description": "SQL query of a metadata object."
          }
        },
        "description": "Response format associated with fetch SQL query api"
      },
      "CommiterType": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Email id of the committer"
          },
          "username": {
            "type": "string",
            "description": "Username of the committer"
          }
        }
      },
      "AuthorType": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Email id of the committer"
          },
          "username": {
            "type": "string",
            "description": "Username of the committer"
          }
        }
      },
      "DataWarehouseObjects": {
        "type": "object",
        "required": [
          "databases"
        ],
        "properties": {
          "databases": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Database"
            },
            "description": "Databases of the connection."
          }
        }
      },
      "DataWarehouseObjectInput": {
        "type": "object",
        "properties": {
          "database": {
            "type": "string",
            "description": "Name of the database."
          },
          "schema": {
            "type": "string",
            "description": "Name of the schema within the database."
          },
          "table": {
            "type": "string",
            "description": "Name of the table within the schema."
          },
          "column": {
            "type": "string",
            "description": "Name of the column within the table."
          }
        }
      },
      "Scope": {
        "type": "object",
        "required": [
          "access_type"
        ],
        "properties": {
          "access_type": {
            "type": "string",
            "description": "Object access scope type."
          },
          "org_id": {
            "type": "integer",
            "format": "int32",
            "description": "Unique identifier of the metadata."
          },
          "metadata_id": {
            "type": "string",
            "description": "Unique identifier of the organization."
          }
        }
      },
      "CommitFileType": {
        "type": "object",
        "required": [
          "file_name",
          "status_code"
        ],
        "properties": {
          "file_name": {
            "type": "string",
            "description": "Name of the file deployed"
          },
          "status_code": {
            "type": "string",
            "description": "Indicates the status of deployment for the file"
          },
          "status_message": {
            "type": "string",
            "description": "Any error or warning with the deployment"
          }
        }
      },
      "RevertedMetadata": {
        "type": "object",
        "required": [
          "file_name",
          "metadata_name",
          "metadata_type",
          "status_code",
          "status_message"
        ],
        "properties": {
          "file_name": {
            "type": "string",
            "description": "Name of the file deployed"
          },
          "metadata_name": {
            "type": "string",
            "description": "Name of the metadata object"
          },
          "metadata_type": {
            "type": "string",
            "description": "Type of the metadata object"
          },
          "status_code": {
            "type": "string",
            "description": "Indicates the status of deployment for the file"
          },
          "status_message": {
            "type": "string",
            "description": "Any error or warning with the deployment"
          }
        }
      },
      "Author": {
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the object."
          },
          "name": {
            "type": "string",
            "description": "Name of the object."
          }
        },
        "description": "Author of the schedule."
      },
      "Frequency": {
        "type": "object",
        "required": [
          "cron_expression"
        ],
        "properties": {
          "cron_expression": {
            "$ref": "#/components/schemas/CronExpression",
            "description": "Schedule selected cron expression."
          }
        },
        "description": "Configuration of schedule with cron expression"
      },
      "LiveboardOptions": {
        "type": "object",
        "required": [
          "visualization_identifiers"
        ],
        "properties": {
          "visualization_identifiers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Unique ID or name of visualizations."
          }
        },
        "description": "Options to specify details of liveboard."
      },
      "MetadataResponse": {
        "type": "object",
        "required": [
          "id",
          "type"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "LIVEBOARD"
            ]
          }
        }
      },
      "PdfOptions": {
        "type": "object",
        "properties": {
          "complete_liveboard": {
            "type": "boolean",
            "description": "Indicates whether to include complete liveboard."
          },
          "include_cover_page": {
            "type": "boolean",
            "description": "Indicates whether to include cover page with the liveboard title."
          },
          "include_custom_logo": {
            "type": "boolean",
            "description": "Indicates whether to include customized wide logo in the footer if available."
          },
          "include_filter_page": {
            "type": "boolean",
            "description": "Indicates whether to include a page with all applied filters."
          },
          "include_page_number": {
            "type": "boolean",
            "description": "Indicates whether to include page number in the footer of each page"
          },
          "page_footer_text": {
            "type": "string",
            "description": "Text to include in the footer of each page."
          },
          "page_orientation": {
            "type": "string",
            "description": "Page orientation of the PDF."
          },
          "page_size": {
            "type": "string",
            "enum": [
              "A4"
            ],
            "description": "Page size."
          },
          "truncate_table": {
            "type": "boolean",
            "description": "Indicates whether to include only first page of the tables."
          }
        },
        "description": "Options for PDF export."
      },
      "RecipientDetails": {
        "type": "object",
        "properties": {
          "emails": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Emails of the recipients."
          },
          "principals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PrincipalsListItem"
            },
            "description": "List of user or user groups to be associated for schedule."
          }
        },
        "description": "Recipient configuration which includes emails and recipients of the schedule"
      },
      "ResponseScheduleRun": {
        "type": "object",
        "required": [
          "id",
          "start_time_in_millis",
          "end_time_in_millis",
          "status"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "GUID of the scheduled job."
          },
          "start_time_in_millis": {
            "type": "integer",
            "format": "int32",
            "description": "Schedule run start time in milliseconds."
          },
          "end_time_in_millis": {
            "type": "integer",
            "format": "int32",
            "description": "Schedule run end time in milliseconds."
          },
          "status": {
            "type": "string",
            "description": "Status of the schedule run."
          },
          "detail": {
            "type": "string",
            "description": "Message details related to the schedule run."
          }
        },
        "description": "Schedule run response object"
      },
      "CronExpressionInput": {
        "type": "object",
        "required": [
          "day_of_month",
          "day_of_week",
          "hour",
          "minute",
          "month",
          "second"
        ],
        "properties": {
          "day_of_month": {
            "type": "string",
            "description": "Day of month of the object."
          },
          "day_of_week": {
            "type": "string",
            "description": "Day of Week of the object."
          },
          "hour": {
            "type": "string",
            "description": "Hour of the object."
          },
          "minute": {
            "type": "string",
            "description": "Minute of the object."
          },
          "month": {
            "type": "string",
            "description": "Month of the object."
          },
          "second": {
            "type": "string",
            "description": "Second of the object."
          }
        },
        "description": "Schedule selected cron expression."
      },
      "PrincipalsListItemInput": {
        "type": "object",
        "required": [
          "identifier",
          "type"
        ],
        "properties": {
          "identifier": {
            "type": "string",
            "description": "Unique ID or name of the principal."
          },
          "type": {
            "type": "string",
            "description": "Principal type."
          }
        }
      },
      "Database": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the database."
          },
          "schemas": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SchemaObject"
            },
            "description": "Schemas of the database."
          },
          "auto_created": {
            "type": "boolean",
            "description": "Determines if the object is auto created."
          }
        }
      },
      "CronExpression": {
        "type": "object",
        "required": [
          "day_of_month",
          "day_of_week",
          "hour",
          "minute",
          "month",
          "second"
        ],
        "properties": {
          "day_of_month": {
            "type": "string",
            "description": "Day of month of the object."
          },
          "day_of_week": {
            "type": "string",
            "description": "Day of Week of the object."
          },
          "hour": {
            "type": "string",
            "description": "Hour of the object."
          },
          "minute": {
            "type": "string",
            "description": "Minute of the object."
          },
          "month": {
            "type": "string",
            "description": "Month of the object."
          },
          "second": {
            "type": "string",
            "description": "Second of the object."
          }
        },
        "description": "Schedule selected cron expression."
      },
      "PrincipalsListItem": {
        "type": "object",
        "required": [
          "identifier",
          "type"
        ],
        "properties": {
          "identifier": {
            "type": "string",
            "description": "Unique ID or name of the principal."
          },
          "type": {
            "type": "string",
            "description": "Principal type."
          }
        }
      },
      "SchemaObject": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the schema."
          },
          "tables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Table"
            },
            "description": "Tables of the schema."
          }
        }
      },
      "Table": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the table."
          },
          "columns": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Column"
            },
            "description": "Columns of the table."
          },
          "type": {
            "type": "string",
            "description": "Type of table. Either view or table"
          },
          "description": {
            "type": "string",
            "description": "Description of the table"
          },
          "selected": {
            "type": "boolean",
            "description": "Determines if the table is selected"
          },
          "linked": {
            "type": "boolean",
            "description": "Determines if the table is linked"
          },
          "relationships": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "List of relationships for the table"
          }
        }
      },
      "Column": {
        "type": "object",
        "required": [
          "name",
          "data_type"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the column."
          },
          "data_type": {
            "type": "string",
            "description": "Data type of the column."
          },
          "is_aggregate": {
            "type": "string",
            "description": "Determines if the column schema is an aggregate"
          },
          "can_import": {
            "type": "boolean",
            "description": "Determines if the column schema can be imported"
          },
          "selected": {
            "type": "boolean",
            "description": "Determines if the table is selected"
          },
          "is_linked_active": {
            "type": "boolean",
            "description": "Determines if the table is linked"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "servers": [
    {
      "url": "{base-url}",
      "variables": {
        "base-url": {
          "default": "https://localhost:443"
        }
      }
    }
  ]
}
