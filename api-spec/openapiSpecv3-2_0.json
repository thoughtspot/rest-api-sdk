{
  "openapi": "3.0.0",
  "info": {
    "title": "ThoughtSpot Public REST API",
    "version": "2.0"
  },
  "x-roles": [
    {
      "name": "9.0.0.cl",
      "id": "9.0.0.cl",
      "tags": [
        "9.0.0.cl"
      ],
      "description": "Roles for version 9.0.0.cl"
    },
    {
      "name": "9.2.0.cl",
      "id": "9.2.0.cl",
      "tags": [
        "9.2.0.cl"
      ],
      "description": "Roles for version 9.2.0.cl"
    },
    {
      "name": "9.5.0.cl",
      "id": "9.5.0.cl",
      "tags": [
        "9.5.0.cl"
      ],
      "description": "Roles for version 9.5.0.cl"
    },
    {
      "name": "9.4.0.cl",
      "id": "9.4.0.cl",
      "tags": [
        "9.4.0.cl"
      ],
      "description": "Roles for version 9.4.0.cl"
    },
    {
      "name": "9.6.0.cl",
      "id": "9.6.0.cl",
      "tags": [
        "9.6.0.cl"
      ],
      "description": "Roles for version 9.6.0.cl"
    }
  ],
  "tags": [],
  "paths": {
    "/api/rest/2.0/auth/session/user": {
      "get": {
        "operationId": "getCurrentUserInfo",
        "description": " <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Authentication",
          "9.0.0.cl"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Common successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "201": {
            "description": "Common error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/auth/session/token": {
      "get": {
        "operationId": "getCurrentUserToken",
        "description": "Get token for the currently logged-in user. <br/>  <span class=\"since-beta-tag\">Version: 9.4.0.cl or later</span>",
        "tags": [
          "Authentication",
          "9.4.0.cl"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Common successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTokenResponse"
                }
              }
            }
          },
          "201": {
            "description": "Common error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTokenResponse"
                }
              }
            }
          },
          "400": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/users/search": {
      "post": {
        "operationId": "searchUsers",
        "description": " <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Users",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "user_identifier": {
                    "description": "GUID / name of the user to search",
                    "type": "string"
                  },
                  "display_name": {
                    "description": "A unique display name string for the user account, usually their first and last name",
                    "type": "string"
                  },
                  "visibility": {
                    "description": "Visibility of the user",
                    "type": "string",
                    "enum": [
                      "SHARABLE",
                      "NON_SHARABLE"
                    ]
                  },
                  "email": {
                    "description": "Email of the user account",
                    "type": "string"
                  },
                  "group_identifiers": {
                    "description": "GUID or name of the group to which the user belongs",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "privileges": {
                    "description": "Privileges assigned to the user",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "ADMINISTRATION",
                        "AUTHORING",
                        "USERDATAUPLOADING",
                        "DATADOWNLOADING",
                        "USERMANAGEMENT",
                        "DATAMANAGEMENT",
                        "SHAREWITHALL",
                        "JOBSCHEDULING",
                        "A3ANALYSIS",
                        "EXPERIMENTALFEATUREPRIVILEGE",
                        "BYPASSRLS",
                        "RANALYSIS",
                        "DEVELOPER",
                        "USER_ADMINISTRATION",
                        "GROUP_ADMINISTRATION",
                        "SYNCMANAGEMENT",
                        "CAN_CREATE_CATALOG",
                        "DISABLE_PINBOARD_CREATION",
                        "ENABLESPOTAPPCREATION",
                        "LIVEBOARD_VERIFIER",
                        "PREVIEW_THOUGHTSPOT_SAGE"
                      ]
                    }
                  },
                  "account_type": {
                    "description": "Type of the account",
                    "type": "string",
                    "enum": [
                      "LOCAL_USER",
                      "LDAP_USER",
                      "SAML_USER",
                      "OIDC_USER",
                      "REMOTE_USER"
                    ]
                  },
                  "account_status": {
                    "description": "Current status of the user account.",
                    "type": "string",
                    "enum": [
                      "ACTIVE",
                      "INACTIVE",
                      "EXPIRED",
                      "LOCKED",
                      "PENDING"
                    ]
                  },
                  "notify_on_share": {
                    "description": "User preference for receiving email notifications when another ThoughtSpot user\nshares a metadata object such as Answer, Liveboard, or Worksheet.",
                    "type": "boolean",
                    "nullable": true
                  },
                  "show_onboarding_experience": {
                    "description": "The user preference for revisiting the onboarding experience",
                    "type": "boolean",
                    "nullable": true
                  },
                  "onboarding_experience_completed": {
                    "description": "Indicates if the user has completed the onboarding walkthrough",
                    "type": "boolean",
                    "nullable": true
                  },
                  "org_identifiers": {
                    "description": "IDs or names of the Orgs to which the user belongs",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "home_liveboard_identifier": {
                    "description": "Unique ID or name of the user's home Liveboard.",
                    "type": "string"
                  },
                  "favorite_metadata": {
                    "description": "Metadata objects which are assigned as favorites of the user.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/FavoriteMetadataInput"
                    }
                  },
                  "record_offset": {
                    "description": "The starting record number from where the records should be included.",
                    "default": 0,
                    "type": "integer",
                    "format": "int32"
                  },
                  "record_size": {
                    "description": "The number of records that should be included.",
                    "default": 10,
                    "type": "integer",
                    "format": "int32"
                  },
                  "sort_options": {
                    "description": "Sort options.",
                    "$ref": "#/components/schemas/SortOptions"
                  },
                  "role_identifiers": {
                    "description": "Filters by the role assigned to the user.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "include_favorite_metadata": {
                    "description": "Indicates if the user's favorite objects should be displayed.",
                    "default": false,
                    "type": "boolean",
                    "nullable": true
                  }
                }
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Common successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "201": {
            "description": "Common error response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/system": {
      "get": {
        "operationId": "getSystemInformation",
        "description": " <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "System",
          "9.0.0.cl"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Common successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemInfo"
                }
              }
            }
          },
          "201": {
            "description": "Common error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemInfo"
                }
              }
            }
          },
          "400": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/system/config": {
      "get": {
        "operationId": "getSystemConfig",
        "description": " <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "System",
          "9.0.0.cl"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Common successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemConfig"
                }
              }
            }
          },
          "201": {
            "description": "Common error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemConfig"
                }
              }
            }
          },
          "400": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/system/config-overrides": {
      "get": {
        "operationId": "getSystemOverrideInfo",
        "description": " <span class=\"since-beta-tag\">Version: 9.2.0.cl or later</span>",
        "tags": [
          "System",
          "9.2.0.cl"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Common successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "201": {
            "description": "Common error response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/orgs/search": {
      "post": {
        "operationId": "searchOrgs",
        "description": " <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Orgs",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "org_identifier": {
                    "description": "ID or name of the Org",
                    "type": "string"
                  },
                  "description": {
                    "description": "Description of the Org",
                    "type": "string"
                  },
                  "visibility": {
                    "description": "Visibility of the Org",
                    "type": "string",
                    "enum": [
                      "SHOW",
                      "HIDDEN"
                    ]
                  },
                  "status": {
                    "description": "Status of the Org",
                    "type": "string",
                    "enum": [
                      "ACTIVE",
                      "IN_ACTIVE"
                    ]
                  },
                  "user_identifiers": {
                    "description": "GUIDs or names of the users for which you want to retrieve the Orgs data",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Common successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrgResponse"
                  }
                }
              }
            }
          },
          "201": {
            "description": "Common error response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrgResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/tags/search": {
      "post": {
        "operationId": "searchTags",
        "description": " <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Tags",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "tag_identifier": {
                    "description": "Name or Id of the tag.",
                    "type": "string"
                  },
                  "color": {
                    "description": "Color of the tag.",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Common successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Tag"
                  }
                }
              }
            }
          },
          "201": {
            "description": "Common error response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Tag"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/groups/search": {
      "post": {
        "operationId": "searchUserGroups",
        "description": " <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Groups",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "default_liveboard_identifiers": {
                    "description": "GUID of Liveboards that are assigned as default Liveboards to the users in the group.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "description": {
                    "description": "Description of the group",
                    "type": "string"
                  },
                  "display_name": {
                    "description": "Display name of the group",
                    "type": "string"
                  },
                  "group_identifier": {
                    "description": "GUID or name of the group",
                    "type": "string"
                  },
                  "org_identifiers": {
                    "description": "ID or name of the Org to which the group belongs",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "privileges": {
                    "description": "Privileges assigned to the group.",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "ADMINISTRATION",
                        "AUTHORING",
                        "USERDATAUPLOADING",
                        "DATADOWNLOADING",
                        "USERMANAGEMENT",
                        "DATAMANAGEMENT",
                        "SHAREWITHALL",
                        "JOBSCHEDULING",
                        "A3ANALYSIS",
                        "EXPERIMENTALFEATUREPRIVILEGE",
                        "BYPASSRLS",
                        "RANALYSIS",
                        "DEVELOPER",
                        "USER_ADMINISTRATION",
                        "GROUP_ADMINISTRATION",
                        "SYNCMANAGEMENT",
                        "CAN_CREATE_CATALOG",
                        "DISABLE_PINBOARD_CREATION",
                        "ENABLESPOTAPPCREATION",
                        "LIVEBOARD_VERIFIER",
                        "PREVIEW_THOUGHTSPOT_SAGE"
                      ]
                    }
                  },
                  "sub_group_identifiers": {
                    "description": "GUID or name of the sub groups. A subgroup is a group assigned to a parent group.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "type": {
                    "description": "Group type.",
                    "type": "string",
                    "enum": [
                      "LOCAL_GROUP",
                      "LDAP_GROUP"
                    ]
                  },
                  "user_identifiers": {
                    "description": "GUID or name of the users assigned to the group.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "visibility": {
                    "description": "Visibility of the group. To make a group visible to other users and groups,\nset the visibility to SHAREABLE.",
                    "type": "string",
                    "enum": [
                      "SHARABLE",
                      "NON_SHARABLE"
                    ]
                  },
                  "role_identifiers": {
                    "description": "Filter groups with a list of roles assigned to a group",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "record_offset": {
                    "description": "The starting record number from where the records should be included.",
                    "default": 0,
                    "type": "integer",
                    "format": "int32"
                  },
                  "record_size": {
                    "description": "The number of records that should be included.",
                    "default": 10,
                    "type": "integer",
                    "format": "int32"
                  },
                  "sort_options": {
                    "description": "Sort options to filter group details.",
                    "$ref": "#/components/schemas/SortOptions"
                  }
                }
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Common successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserGroupResponse"
                  }
                }
              }
            }
          },
          "201": {
            "description": "Common error response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserGroupResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/metadata/search": {
      "post": {
        "operationId": "searchMetadata",
        "description": " <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Metadata",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata": {
                    "description": "Metadata objects such as Liveboards, Answers, and Worksheets.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/MetadataListItemInput"
                    }
                  },
                  "permissions": {
                    "description": "Object permission details to search by.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/PermissionInput"
                    }
                  },
                  "created_by_user_identifiers": {
                    "description": "GUID or name of user who created the metadata object.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "dependent_object_version": {
                    "description": "Version of the dependent table of the metadata objects like Worksheets.",
                    "default": "V1",
                    "type": "string",
                    "enum": [
                      "V1",
                      "V2"
                    ]
                  },
                  "exclude_objects": {
                    "description": "List of metadata objects to exclude from search.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ExcludeMetadataListItemInput"
                    }
                  },
                  "favorite_object_options": {
                    "description": "Options to sort the API response by objects set as favorites\nfor the logged-in user or the users specified in the API request.",
                    "$ref": "#/components/schemas/FavoriteObjectOptionsInput"
                  },
                  "include_auto_created_objects": {
                    "description": "Includes system-generated metadata objects.",
                    "default": false,
                    "type": "boolean",
                    "nullable": true
                  },
                  "include_dependent_objects": {
                    "description": "Includes dependents of the metadata object specified in the API request.\nFor example, a worksheet can consist of dependent objects such as Liveboards or Answers.",
                    "default": false,
                    "type": "boolean",
                    "nullable": true
                  },
                  "include_details": {
                    "description": "Includes complete details of the metadata objects.",
                    "default": false,
                    "type": "boolean",
                    "nullable": true
                  },
                  "include_headers": {
                    "description": "Includes headers of the metadata objects.",
                    "default": true,
                    "type": "boolean",
                    "nullable": true
                  },
                  "include_hidden_objects": {
                    "description": "Includes details of the hidden objects, such as a column in a worksheet or a table.",
                    "default": false,
                    "type": "boolean",
                    "nullable": true
                  },
                  "include_incomplete_objects": {
                    "description": "Includes objects with incomplete metadata.",
                    "default": false,
                    "type": "boolean",
                    "nullable": true
                  },
                  "include_visualization_headers": {
                    "description": "Includes visualization headers of the specified Liveboard object.",
                    "default": false,
                    "type": "boolean",
                    "nullable": true
                  },
                  "include_worksheet_search_assist_data": {
                    "description": "If search assistance lessons are configured on a worksheet,\nthe API returns the search assist data for Worksheet objects.",
                    "type": "boolean",
                    "nullable": true
                  },
                  "modified_by_user_identifiers": {
                    "description": "Includes ID or names of the users who modified the metadata object.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "record_offset": {
                    "description": "The starting record number from where the records should be included.",
                    "default": 0,
                    "type": "integer",
                    "format": "int32"
                  },
                  "record_size": {
                    "description": "The number of records that should be included.",
                    "default": 10,
                    "type": "integer",
                    "format": "int32"
                  },
                  "sort_options": {
                    "description": "Sort options to filter metadata details.",
                    "$ref": "#/components/schemas/MetadataSearchSortOptions"
                  },
                  "tag_identifiers": {
                    "description": "Tags to filter metadata objects by",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "include_stats": {
                    "description": "Indicates whether to include stats of the metadata objects.",
                    "default": false,
                    "type": "boolean",
                    "nullable": true
                  }
                }
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Common successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MetadataSearchResponse"
                  }
                }
              }
            }
          },
          "201": {
            "description": "Common error response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MetadataSearchResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/metadata/liveboard/sql": {
      "post": {
        "operationId": "fetchLiveboardSqlQuery",
        "description": " <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Metadata",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata_identifier": {
                    "description": "ID or name of an Liveboard.",
                    "type": "string"
                  },
                  "visualization_identifiers": {
                    "description": "Unique ID or name of visualizations.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "metadata_identifier"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Common successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SqlQueryResponse"
                }
              }
            }
          },
          "201": {
            "description": "Common error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SqlQueryResponse"
                }
              }
            }
          },
          "400": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/metadata/answer/sql": {
      "post": {
        "operationId": "fetchAnswerSqlQuery",
        "description": " <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Metadata",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata_identifier": {
                    "description": "ID or name of an Answer.",
                    "type": "string"
                  }
                },
                "required": [
                  "metadata_identifier"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Common successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SqlQueryResponse"
                }
              }
            }
          },
          "201": {
            "description": "Common error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SqlQueryResponse"
                }
              }
            }
          },
          "400": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/report/liveboard": {
      "post": {
        "operationId": "exportLiveboardReport",
        "description": " <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Reports",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata_identifier": {
                    "description": "GUID or name of the Liveboard object.",
                    "type": "string"
                  },
                  "visualization_identifiers": {
                    "description": "GUID or name of visualizations on the Liveboard. If this parameter is\nnot defined, the API returns a report with all visualizations saved on a Liveboard.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "transient_content": {
                    "description": "Transient content of the Liveboard.",
                    "type": "string"
                  },
                  "file_format": {
                    "description": "Export file format.",
                    "default": "CSV",
                    "type": "string",
                    "enum": [
                      "CSV",
                      "PDF",
                      "XLSX",
                      "PNG"
                    ]
                  },
                  "runtime_filter": {
                    "description": "JSON string representing runtime filter.\n{ col1:'region', op1: 'EQ', val1: 'northeast' }",
                    "type": "object"
                  },
                  "runtime_sort": {
                    "description": "JSON string representing runtime sort.\n{ sortCol1: 'region', asc1 : true, sortCol2 : 'date' }",
                    "type": "object"
                  },
                  "pdf_options": {
                    "description": "Options for PDF export.",
                    "$ref": "#/components/schemas/PdfOptionsInput"
                  },
                  "png_options": {
                    "description": "Options for PNG export.",
                    "$ref": "#/components/schemas/PngOptionsInput"
                  },
                  "runtime_param_override": {
                    "description": "JSON object for setting values of parameters in runtime.",
                    "type": "object"
                  }
                },
                "required": [
                  "metadata_identifier"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Common successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "201": {
            "description": "Common error response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/report/answer": {
      "post": {
        "operationId": "exportAnswerReport",
        "description": " <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Reports",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata_identifier": {
                    "description": "Unique ID or name of the metadata object.",
                    "type": "string"
                  },
                  "file_format": {
                    "description": "Export file format.",
                    "default": "CSV",
                    "type": "string",
                    "enum": [
                      "CSV",
                      "PDF",
                      "XLSX",
                      "PNG"
                    ]
                  },
                  "runtime_filter": {
                    "description": "JSON string representing runtime filter.\n{ col1:region, op1: EQ, val1: northeast }",
                    "type": "object"
                  },
                  "runtime_sort": {
                    "description": "JSON string representing runtime sort.\n{ sortCol1: region, asc1 :true, sortCol2 : date }",
                    "type": "object"
                  },
                  "runtime_param_override": {
                    "description": "JSON object for setting values of parameters in runtime.",
                    "type": "object"
                  }
                },
                "required": [
                  "metadata_identifier"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Common successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "201": {
            "description": "Common error response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/security/principals/fetch-permissions": {
      "post": {
        "operationId": "fetchPermissionsOfPrincipals",
        "description": " <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Security",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "principals": {
                    "description": "GUID or name of the user or group.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/PrincipalsInput"
                    }
                  },
                  "metadata": {
                    "description": "Metadata objects for which you want to fetch permission details.\nIf not specified, the API returns permission details for all\nmetadata objects that the specified users and groups can access.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/PermissionsMetadataTypeInput"
                    }
                  }
                },
                "required": [
                  "principals"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Common successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "201": {
            "description": "Common error response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/security/metadata/fetch-permissions": {
      "post": {
        "operationId": "fetchPermissionsOnMetadata",
        "description": " <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Security",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata": {
                    "description": "GUID or name of the metadata object.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/PermissionsMetadataTypeInput"
                    }
                  },
                  "principals": {
                    "description": "User or group objects for which you want to fetch permissions.\nIf not specified, the API returns all users and groups that\ncan access the specified metadata objects.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/PrincipalsInput"
                    }
                  },
                  "include_dependent_objects": {
                    "description": "Indicates whether to fetch permissions of dependent metadata objects.",
                    "default": false,
                    "type": "boolean",
                    "nullable": true
                  }
                },
                "required": [
                  "metadata"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Common successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "201": {
            "description": "Common error response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/searchdata": {
      "post": {
        "operationId": "searchData",
        "description": " <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Data",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query_string": {
                    "description": "Data search query string token.",
                    "type": "string"
                  },
                  "logical_table_identifier": {
                    "description": "GUID of the data source object, such as a Worksheet, View, or Table.",
                    "type": "string"
                  },
                  "data_format": {
                    "description": "JSON output format. By default, the API returns full data in the JSON.",
                    "default": "COMPACT",
                    "type": "string",
                    "enum": [
                      "COMPACT"
                    ]
                  },
                  "record_offset": {
                    "description": "The starting record number from where the records should be included.",
                    "default": 0,
                    "type": "integer",
                    "format": "int32"
                  },
                  "record_size": {
                    "description": "The number of records to include in a batch.",
                    "default": 10,
                    "type": "integer",
                    "format": "int32"
                  },
                  "runtime_filter": {
                    "description": "JSON object representing filter condition to filter the data.",
                    "type": "object"
                  },
                  "runtime_sort": {
                    "description": "JSON object representing columns to sort the data.",
                    "type": "object"
                  },
                  "runtime_param_override": {
                    "description": "JSON object for setting values of parameters in runtime.",
                    "type": "object"
                  }
                },
                "required": [
                  "query_string",
                  "logical_table_identifier"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Common successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchDataResponse"
                }
              }
            }
          },
          "201": {
            "description": "Common error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/metadata/liveboard/data": {
      "post": {
        "operationId": "fetchLiveboardData",
        "description": " <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Data",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata_identifier": {
                    "description": "GUID or name of the Liveboard.",
                    "type": "string"
                  },
                  "visualization_identifiers": {
                    "description": "GUIDs or names of the visualizations on the Liveboard.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "transient_content": {
                    "description": "Transient content of the Liveboard.",
                    "type": "string"
                  },
                  "data_format": {
                    "description": "JSON output format. By default, the API returns full data in the JSON.",
                    "default": "COMPACT",
                    "type": "string",
                    "enum": [
                      "COMPACT"
                    ]
                  },
                  "record_offset": {
                    "description": "The starting record number from where the records should be included.",
                    "default": 0,
                    "type": "integer",
                    "format": "int32"
                  },
                  "record_size": {
                    "description": "The number of records to include in a batch.",
                    "default": 10,
                    "type": "integer",
                    "format": "int32"
                  },
                  "runtime_filter": {
                    "description": "JSON object representing filter condition to filter the data.",
                    "type": "object"
                  },
                  "runtime_sort": {
                    "description": "JSON object representing columns to sort the data.",
                    "type": "object"
                  },
                  "runtime_param_override": {
                    "description": "JSON object for setting values of parameters in runtime.",
                    "type": "object"
                  }
                },
                "required": [
                  "metadata_identifier"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Common successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LiveboardDataResponse"
                }
              }
            }
          },
          "201": {
            "description": "Common error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LiveboardDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/metadata/answer/data": {
      "post": {
        "operationId": "fetchAnswerData",
        "description": " <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Data",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata_identifier": {
                    "description": "GUID or name of the Answer.",
                    "type": "string"
                  },
                  "data_format": {
                    "description": "JSON output format. By default, the API returns full data in the JSON.",
                    "default": "COMPACT",
                    "type": "string",
                    "enum": [
                      "COMPACT"
                    ]
                  },
                  "record_offset": {
                    "description": "The starting record number from where the records should be included.",
                    "default": 0,
                    "type": "integer",
                    "format": "int32"
                  },
                  "record_size": {
                    "description": "The number of records to include in a batch.",
                    "default": 10,
                    "type": "integer",
                    "format": "int32"
                  },
                  "runtime_filter": {
                    "description": "JSON object representing filter condition to filter the data.",
                    "type": "object"
                  },
                  "runtime_sort": {
                    "description": "JSON object representing columns to sort the data.",
                    "type": "object"
                  },
                  "runtime_param_override": {
                    "description": "JSON object for setting values of parameters in runtime.",
                    "type": "object"
                  }
                },
                "required": [
                  "metadata_identifier"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Common successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnswerDataResponse"
                }
              }
            }
          },
          "201": {
            "description": "Common error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnswerDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/logs/fetch": {
      "post": {
        "operationId": "fetchLogs",
        "description": " <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Log",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "log_type": {
                    "description": "Name of the log type.",
                    "type": "string",
                    "enum": [
                      "SECURITY_AUDIT"
                    ]
                  },
                  "start_epoch_time_in_millis": {
                    "description": "Start time in EPOCH format",
                    "type": "number",
                    "format": "float"
                  },
                  "end_epoch_time_in_millis": {
                    "description": "End time in EPOCH format",
                    "type": "number",
                    "format": "float"
                  }
                },
                "required": [
                  "log_type"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Common successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LogResponse"
                  }
                }
              }
            }
          },
          "201": {
            "description": "Common error response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LogResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/vcs/git/config/search": {
      "post": {
        "operationId": "searchConfig",
        "description": " <span class=\"since-beta-tag\">Version: 9.2.0.cl or later</span>",
        "tags": [
          "Version Control",
          "9.2.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "org_identifiers": {
                    "description": "   List of Org IDs. Provide value -1 for cluster level. Example : [\"OrgID1-or-Name1\", \"OrgID2-or-Name2\"]\n   \n\nNote:  If no org identifier is specified,then the configurations will be returned for all orgs the user has access to <br/>  <span class=\"since-beta-tag\">Version: 9.5.0.cl or later</span>",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Common successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RepoConfigObject"
                  }
                }
              }
            }
          },
          "201": {
            "description": "Common error response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RepoConfigObject"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/vcs/git/commits/search": {
      "post": {
        "operationId": "searchCommits",
        "description": " <span class=\"since-beta-tag\">Version: 9.2.0.cl or later</span>",
        "tags": [
          "Version Control",
          "9.2.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata_identifier": {
                    "description": "Unique ID or name of the metadata.",
                    "type": "string"
                  },
                  "metadata_type": {
                    "description": "Type of metadata.",
                    "type": "string",
                    "enum": [
                      "LIVEBOARD",
                      "ANSWER",
                      "LOGICAL_TABLE"
                    ]
                  },
                  "branch_name": {
                    "description": "   Name of the branch from which commit history needs to be displayed.\n   \n\nNote: If no branch_name is specified, then commits will be returned for the default branch for this configuration.",
                    "type": "string"
                  },
                  "record_offset": {
                    "description": "    Record offset point in the commit history to display the response.\n    \n\nNote: If no record offset is specified, the beginning of the record will be considered.",
                    "type": "integer",
                    "format": "int32"
                  },
                  "record_size": {
                    "description": "    Number of history records from record offset point to be displayed in the response.\n    \n\nNote: If no record size is specified, then all the records will be considered.",
                    "type": "integer",
                    "format": "int32"
                  }
                },
                "required": [
                  "metadata_identifier"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Common successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommitHistoryResponse"
                  }
                }
              }
            }
          },
          "201": {
            "description": "Common error response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommitHistoryResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/connection/search": {
      "post": {
        "operationId": "searchConnection",
        "description": " <span class=\"since-beta-tag\">Version: 9.2.0.cl or later</span>",
        "tags": [
          "Connections",
          "9.2.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "connections": {
                    "description": "List of connections and name pattern",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ConnectionInput"
                    }
                  },
                  "data_warehouse_types": {
                    "description": "Array of types of data warehouse defined for the connection.",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "SNOWFLAKE",
                        "AMAZON_REDSHIFT",
                        "GOOGLE_BIGQUERY",
                        "AZURE_SYNAPSE",
                        "TERADATA",
                        "SAP_HANA",
                        "STARBURST",
                        "ORACLE_ADW",
                        "DATABRICKS",
                        "DENODO",
                        "DREMIO",
                        "TRINO",
                        "PRESTO",
                        "POSTGRES",
                        "SQL_SERVER",
                        "MYSQL",
                        "GENERIC_JDBC",
                        "AMAZON_RDS_POSTGRESQL",
                        "AMAZON_AURORA_POSTGRESQL",
                        "AMAZON_RDS_MYSQL",
                        "AMAZON_AURORA_MYSQL",
                        "LOOKER",
                        "AMAZON_ATHENA"
                      ]
                    }
                  },
                  "record_offset": {
                    "description": "The starting record number from where the records should be included.",
                    "default": 0,
                    "type": "integer",
                    "format": "int32"
                  },
                  "record_size": {
                    "description": "The number of records that should be included.",
                    "default": 10,
                    "type": "integer",
                    "format": "int32"
                  },
                  "tag_identifiers": {
                    "description": "Unique ID or name of tags.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "data_warehouse_object_type": {
                    "description": "Data warehouse object type.",
                    "type": "string",
                    "enum": [
                      "DATABASE",
                      "SCHEMA",
                      "TABLE",
                      "COLUMN"
                    ]
                  },
                  "sort_options": {
                    "description": "Sort options.",
                    "$ref": "#/components/schemas/SortOptionInput"
                  },
                  "include_details": {
                    "description": "Indicates whether to include complete details of the connection objects.",
                    "type": "boolean",
                    "nullable": true
                  },
                  "configuration": {
                    "description": "Configuration values. If empty we are fetching configuration from datasource based on given connection id. If required you can provide config details to fetch specific details. Example input: {}, {\"warehouse\":\"SMALL_WH\",\"database\":\"DEVELOPMENT\"}. This is only applicable when data_warehouse_object_type is selected.",
                    "type": "object"
                  },
                  "authentication_type": {
                    "description": "List of authentication types to fetch data_ware_house_objects from external Data warehouse. This is only applicable when data_warehouse_object_type is selected.",
                    "default": "SERVICE_ACCOUNT",
                    "type": "string",
                    "enum": [
                      "SERVICE_ACCOUNT",
                      "OAUTH",
                      "IAM",
                      "EXTOAUTH"
                    ]
                  }
                }
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Common successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SearchConnectionResponse"
                  }
                }
              }
            }
          },
          "201": {
            "description": "Common error response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SearchConnectionResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/roles/search": {
      "post": {
        "operationId": "searchRoles",
        "description": "Gets Roles configured on a ThoughtSpot instance.\nRequires cluster Administration, Role Administration or\nGroup Administration privileges. <br/>  <span class=\"since-beta-tag\">Version: 9.5.0.cl or later</span>",
        "tags": [
          "Roles",
          "9.5.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "role_identifiers": {
                    "description": "unique ID or name of the roles",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "org_identifiers": {
                    "description": "Unique Id or name of the Organisation",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "group_identifiers": {
                    "description": "Unique Id or name of the User Group",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "privileges": {
                    "description": "Privileges assigned to the Role.",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "UNKNOWN",
                        "ADMINISTRATION",
                        "AUTHORING",
                        "USERDATAUPLOADING",
                        "DATADOWNLOADING",
                        "USERMANAGEMENT",
                        "SECURITYMANAGEMENT",
                        "LOGICALMODELING",
                        "DATAMANAGEMENT",
                        "TAGMANAGEMENT",
                        "SHAREWITHALL",
                        "SYSTEMMANAGEMENT",
                        "JOBSCHEDULING",
                        "A3ANALYSIS",
                        "EXPERIMENTALFEATUREPRIVILEGE",
                        "BYPASSRLS",
                        "RANALYSIS",
                        "DISABLE_PINBOARD_CREATION",
                        "DEVELOPER",
                        "APPLICATION_ADMINISTRATION",
                        "USER_ADMINISTRATION",
                        "GROUP_ADMINISTRATION",
                        "BACKUP_ADMINISTRATION",
                        "SYSTEM_INFO_ADMINISTRATION",
                        "ENABLESPOTAPPCREATION",
                        "SYNCMANAGEMENT",
                        "ORG_ADMINISTRATION",
                        "ROLE_ADMINISTRATION",
                        "AUTHENTICATION_ADMINISTRATION",
                        "BILLING_INFO_ADMINISTRATION",
                        "PREVIEW_THOUGHTSPOT_SAGE"
                      ]
                    }
                  },
                  "deprecated": {
                    "description": "Indicates whether the role is deprecated.",
                    "type": "boolean",
                    "nullable": true
                  },
                  "external": {
                    "description": "Indicates whether the Role is external",
                    "type": "boolean",
                    "nullable": true
                  },
                  "shared_via_connection": {
                    "description": "Indicates whether the role is shared via connection",
                    "type": "boolean",
                    "nullable": true
                  },
                  "permissions": {
                    "description": "Permission details of the Role",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "READ_ONLY",
                        "MODIFY",
                        "NO_ACCESS"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Common successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SearchRoleResponse"
                  }
                }
              }
            }
          },
          "201": {
            "description": "Common error response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SearchRoleResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/customization/custom-actions/search": {
      "post": {
        "operationId": "searchCustomActions",
        "description": " <span class=\"since-beta-tag\">Version: 9.6.0.cl or later</span>",
        "tags": [
          "Custom Action",
          "9.6.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "custom_action_identifier": {
                    "description": "Name or ID of the custom action.",
                    "type": "string"
                  },
                  "default_action_config": {
                    "description": "Default Custom action configuration. This includes if the custom action is available on all visualizations. By default, a custom action is added to all visualizations and Answers.",
                    "$ref": "#/components/schemas/Default_Action_Config_Search_Input"
                  },
                  "include_group_associations": {
                    "description": "When set to true, returns the associated groups for a custom action.",
                    "default": false,
                    "type": "boolean",
                    "nullable": true
                  },
                  "include_metadata_associations": {
                    "description": "When set to true, returns the associated metadata for a custom action.",
                    "default": false,
                    "type": "boolean",
                    "nullable": true
                  },
                  "metadata": {
                    "description": "Search with a given metadata identifier.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/CustomActionMetadataTypeInput"
                    }
                  },
                  "type": {
                    "description": "Filter the action objects based on type",
                    "type": "string",
                    "enum": [
                      "CALLBACK",
                      "URL"
                    ]
                  }
                }
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Common successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResponseCustomAction"
                  }
                }
              }
            }
          },
          "201": {
            "description": "Common error response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResponseCustomAction"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/auth/session/login": {
      "post": {
        "operationId": "login",
        "description": " <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Authentication",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "description": "Username of the ThoughtSpot user",
                    "type": "string"
                  },
                  "password": {
                    "description": "Password of the user account",
                    "type": "string"
                  },
                  "org_identifier": {
                    "description": "ID of the Org context to log in to. If Org ID is not specified, the user will be logged in to the Org context of their previous login session.",
                    "type": "string"
                  },
                  "remember_me": {
                    "description": "A flag to remember the user session. When set to true, a session cookie is created and used in subsequent API requests.",
                    "default": false,
                    "type": "boolean",
                    "nullable": true
                  }
                }
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Common successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "201": {
            "description": "Common error response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/auth/token/object": {
      "post": {
        "operationId": "getObjectAccessToken",
        "description": " <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Authentication",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "description": "Username of the ThoughtSpot user",
                    "type": "string"
                  },
                  "object_id": {
                    "description": "GUID of the ThoughtSpot metadata object that the user can access. The bearer will only have access to the object specified in the API request.",
                    "type": "string"
                  },
                  "password": {
                    "description": "Password of the user account",
                    "default": "",
                    "type": "string"
                  },
                  "secret_key": {
                    "description": "The secret key string provided by the ThoughtSpot application server. ThoughtSpot generates a secret key when Trusted authentication is enabled.",
                    "default": "",
                    "type": "string"
                  },
                  "validity_time_in_sec": {
                    "description": "Token validity duration in seconds",
                    "default": 300,
                    "type": "integer",
                    "format": "int32"
                  },
                  "org_id": {
                    "description": "ID of the Org context to log in to. If Org ID is not specified, the user will be logged in to the Org context of their previous login session.",
                    "default": 0,
                    "type": "integer",
                    "format": "int32"
                  },
                  "email": {
                    "description": "Email address of the user. Specify this attribute when creating a new user (just-in-time (JIT) provisioning).",
                    "type": "string"
                  },
                  "display_name": {
                    "description": "Display name of the user. Specify this attribute when creating a new user (just-in-time (JIT) provisioning).",
                    "type": "string"
                  },
                  "auto_create": {
                    "description": "   Creates a new user if the specified username does not exist in ThoughtSpot. To provision a user just-in-time (JIT), set this attribute to true.\n   \n\nNote: For JIT provisioning of a user, the secret_key is required. ",
                    "default": false,
                    "type": "boolean",
                    "nullable": true
                  },
                  "group_identifiers": {
                    "description": "Unique ID or name of the groups to which you want to assign the new user. You can specify this attribute to dynamically assign privileges during just-in-time (JIT) provisioning.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "username",
                  "object_id"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Common successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Token"
                }
              }
            }
          },
          "201": {
            "description": "Common error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Token"
                }
              }
            }
          },
          "400": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/api/rest/2.0/auth/token/full": {
      "post": {
        "operationId": "getFullAccessToken",
        "description": " <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Authentication",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "description": "Username of the ThoughtSpot user",
                    "type": "string"
                  },
                  "password": {
                    "description": "Password of the user account",
                    "default": "",
                    "type": "string"
                  },
                  "secret_key": {
                    "description": "The secret key string provided by the ThoughtSpot application server. ThoughtSpot generates a secret key when Trusted authentication is enabled.",
                    "default": "",
                    "type": "string"
                  },
                  "validity_time_in_sec": {
                    "description": "Token validity duration in seconds",
                    "default": 300,
                    "type": "integer",
                    "format": "int32"
                  },
                  "org_id": {
                    "description": "ID of the Org context to log in to. If the Org ID is not specified, the user will be logged in to the Org context of their previous login session.",
                    "default": 0,
                    "type": "integer",
                    "format": "int32"
                  },
                  "email": {
                    "description": "Email address of the user. Specify this attribute when creating a new user (just-in-time (JIT) provisioning).",
                    "type": "string"
                  },
                  "display_name": {
                    "description": "Indicates display name of the user. Use this parameter to provision a user just-in-time (JIT).",
                    "type": "string"
                  },
                  "auto_create": {
                    "description": "   Creates a new user if the specified username does not already exist in ThoughtSpot. To provision a user just-in-time (JIT), set this attribute to true.\n   \n\nNote: For JIT provisioning of a user, the secret_key is required. ",
                    "default": false,
                    "type": "boolean",
                    "nullable": true
                  },
                  "group_identifiers": {
                    "description": "ID or name of the groups to which the newly created user belongs. Use this parameter to provision a user just-in-time (JIT).",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "username"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Common successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Token"
                }
              }
            }
          },
          "201": {
            "description": "Common error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Token"
                }
              }
            }
          },
          "400": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/api/rest/2.0/auth/session/logout": {
      "post": {
        "operationId": "logout",
        "description": " <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Authentication",
          "9.0.0.cl"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Common successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "201": {
            "description": "Common error response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/auth/token/revoke": {
      "post": {
        "operationId": "revokeToken",
        "description": " <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Authentication",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "user_identifier": {
                    "type": "string"
                  },
                  "token": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Common successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "201": {
            "description": "Common error response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/users/create": {
      "post": {
        "operationId": "createUser",
        "description": " <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Users",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of the user. The username string must be unique.",
                    "type": "string"
                  },
                  "display_name": {
                    "description": "A unique display name string for the user account, usually their first and last name",
                    "type": "string"
                  },
                  "password": {
                    "description": "Password for the user account.",
                    "type": "string"
                  },
                  "email": {
                    "description": "Email of the user account",
                    "type": "string"
                  },
                  "account_type": {
                    "description": "Type of the account.",
                    "default": "LOCAL_USER",
                    "type": "string",
                    "enum": [
                      "LOCAL_USER",
                      "LDAP_USER",
                      "SAML_USER",
                      "OIDC_USER",
                      "REMOTE_USER"
                    ]
                  },
                  "account_status": {
                    "description": "Current status of the user account.",
                    "default": "ACTIVE",
                    "type": "string",
                    "enum": [
                      "ACTIVE",
                      "INACTIVE",
                      "EXPIRED",
                      "LOCKED",
                      "PENDING"
                    ]
                  },
                  "org_identifiers": {
                    "description": "List of Org IDs to which the user belongs.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "group_identifiers": {
                    "description": "GUIDs or names of the groups to which the newly created user belongs.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "visibility": {
                    "description": "Visibility of the users. When set to SHARABLE, the user is visible to other users and groups when they try to share an object.",
                    "default": "SHARABLE",
                    "type": "string",
                    "enum": [
                      "SHARABLE",
                      "NON_SHARABLE"
                    ]
                  },
                  "notify_on_share": {
                    "description": "User preference for receiving email notifications when another ThoughtSpot\nuser shares a metadata object such as Answer, Liveboard, or Worksheet.",
                    "default": true,
                    "type": "boolean",
                    "nullable": true
                  },
                  "show_onboarding_experience": {
                    "description": "The user preference for revisiting the onboarding experience.",
                    "default": true,
                    "type": "boolean",
                    "nullable": true
                  },
                  "onboarding_experience_completed": {
                    "description": "flag to get the on-boarding experience is completed or not.",
                    "default": false,
                    "type": "boolean",
                    "nullable": true
                  },
                  "home_liveboard_identifier": {
                    "description": "GUID of the Liveboard to set a default Liveboard for the user.\nThoughtSpot displays this Liveboard on the Home page when the user logs in.",
                    "type": "string"
                  },
                  "favorite_metadata": {
                    "description": "Metadata objects to add to the user's favorites list.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/FavoriteMetadataInput"
                    }
                  },
                  "preferred_locale": {
                    "description": "Locale for the user.",
                    "type": "string",
                    "enum": [
                      "en-CA",
                      "en-GB",
                      "en-US",
                      "de-DE",
                      "ja-JP",
                      "zh-CN",
                      "pt-BR",
                      "fr-FR",
                      "fr-CA",
                      "es-US",
                      "da-DK",
                      "es-ES",
                      "fi-FI",
                      "sv-SE",
                      "nb-NO",
                      "pt-PT",
                      "nl-NL",
                      "it-IT",
                      "ru-RU",
                      "en-IN"
                    ]
                  },
                  "extended_properties": {
                    "description": "Properties for the user",
                    "type": "object"
                  },
                  "extended_preferences": {
                    "description": "Preferences for the user",
                    "type": "object"
                  },
                  "trigger_welcome_email": {
                    "description": "Flag to indicate whether welcome email should be sent to user",
                    "type": "boolean",
                    "nullable": true
                  }
                },
                "required": [
                  "name",
                  "display_name",
                  "password",
                  "email"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Common successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "201": {
            "description": "Common error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/users/{user_identifier}/update": {
      "post": {
        "operationId": "updateUser",
        "description": " <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Users",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of the user. The username string must be unique.",
                    "type": "string"
                  },
                  "display_name": {
                    "description": "A unique display name string for the user account, usually their first and last name",
                    "type": "string"
                  },
                  "visibility": {
                    "description": "Visibility of the users. When set to SHARABLE, the user is visible to other users and groups when they try to share an object.",
                    "type": "string",
                    "enum": [
                      "SHARABLE",
                      "NON_SHARABLE"
                    ]
                  },
                  "email": {
                    "description": "Email of the user account",
                    "type": "string"
                  },
                  "account_status": {
                    "description": "Current status of the user account.",
                    "type": "string",
                    "enum": [
                      "ACTIVE",
                      "INACTIVE",
                      "EXPIRED",
                      "LOCKED",
                      "PENDING"
                    ]
                  },
                  "notify_on_share": {
                    "description": "User preference for receiving email notifications when another ThoughtSpot user\nshares a metadata object such as Answer, Liveboard, or Worksheet.",
                    "type": "boolean",
                    "nullable": true
                  },
                  "show_onboarding_experience": {
                    "description": "The user preference for revisiting the onboarding experience.",
                    "type": "boolean",
                    "nullable": true
                  },
                  "onboarding_experience_completed": {
                    "description": "Indicates if the user has completed the onboarding and allows turning off the onboarding walkthrough.",
                    "type": "boolean",
                    "nullable": true
                  },
                  "account_type": {
                    "description": "Type of the account.",
                    "type": "string",
                    "enum": [
                      "LOCAL_USER",
                      "LDAP_USER",
                      "SAML_USER",
                      "OIDC_USER",
                      "REMOTE_USER"
                    ]
                  },
                  "group_identifiers": {
                    "description": "GUIDs or names of the groups.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "home_liveboard_identifier": {
                    "description": "GUID of the Liveboard to set a default Liveboard for the user. ThoughtSpot displays\nthis Liveboard on the Home page when the user logs in.",
                    "type": "string"
                  },
                  "favorite_metadata": {
                    "description": "Metadata objects to add to the user's favorites list.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/FavoriteMetadataInput"
                    }
                  },
                  "org_identifiers": {
                    "description": "IDs of the Orgs.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "operation": {
                    "description": "Type of update operation. Default operation type is REPLACE",
                    "default": "REPLACE",
                    "type": "string",
                    "enum": [
                      "ADD",
                      "REMOVE",
                      "REPLACE"
                    ]
                  },
                  "preferred_locale": {
                    "description": "Locale for the user.",
                    "type": "string",
                    "enum": [
                      "en-CA",
                      "en-GB",
                      "en-US",
                      "de-DE",
                      "ja-JP",
                      "zh-CN",
                      "pt-BR",
                      "fr-FR",
                      "fr-CA",
                      "es-US",
                      "da-DK",
                      "es-ES",
                      "fi-FI",
                      "sv-SE",
                      "nb-NO",
                      "pt-PT",
                      "nl-NL",
                      "it-IT",
                      "ru-RU",
                      "en-IN"
                    ]
                  },
                  "extended_properties": {
                    "description": "Properties for the user",
                    "type": "object"
                  },
                  "extended_preferences": {
                    "description": "Preferences for the user",
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "user_identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "GUID / name of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "Common successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "201": {
            "description": "Common error response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/users/{user_identifier}/delete": {
      "post": {
        "operationId": "deleteUser",
        "description": " <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Users",
          "9.0.0.cl"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "user_identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "GUID / name of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "Common successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "201": {
            "description": "Common error response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/users/import": {
      "post": {
        "operationId": "importUsers",
        "description": " <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Users",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "users": {
                    "description": "List of users needs to be imported.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ImportUser"
                    }
                  },
                  "default_password": {
                    "description": "The default password to assign to users if they do not have a password assigned in ThoughtSpot.",
                    "type": "string"
                  },
                  "dry_run": {
                    "description": "If true, the API performs a test operation and returns user IDs whose data will be edited after the import.",
                    "default": true,
                    "type": "boolean",
                    "nullable": true
                  },
                  "delete_unspecified_users": {
                    "description": "If set to true, removes the users that are not specified in the API request.",
                    "default": false,
                    "type": "boolean",
                    "nullable": true
                  }
                },
                "required": [
                  "users"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Common successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportUsersResponse"
                }
              }
            }
          },
          "201": {
            "description": "Common error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportUsersResponse"
                }
              }
            }
          },
          "400": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/users/change-password": {
      "post": {
        "operationId": "changeUserPassword",
        "description": " <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Users",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "current_password": {
                    "description": "Current password of the user.",
                    "type": "string"
                  },
                  "new_password": {
                    "description": "New password for the user.",
                    "type": "string"
                  },
                  "user_identifier": {
                    "description": "GUID or name of the user.",
                    "type": "string"
                  }
                },
                "required": [
                  "current_password",
                  "new_password",
                  "user_identifier"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Common successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "201": {
            "description": "Common error response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/users/reset-password": {
      "post": {
        "operationId": "resetUserPassword",
        "description": " <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Users",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "new_password": {
                    "description": "New password for the user.",
                    "type": "string"
                  },
                  "user_identifier": {
                    "description": "GUID or name of the user.",
                    "type": "string"
                  }
                },
                "required": [
                  "new_password",
                  "user_identifier"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Common successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "201": {
            "description": "Common error response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/users/force-logout": {
      "post": {
        "operationId": "forceLogoutUsers",
        "description": " <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Users",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "user_identifiers": {
                    "description": "GUID or name of the users for force logging out their sessions.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Common successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "201": {
            "description": "Common error response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/system/config-update": {
      "post": {
        "operationId": "updateSystemConfig",
        "description": " <span class=\"since-beta-tag\">Version: 9.2.0.cl or later</span>",
        "tags": [
          "System",
          "9.2.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "configuration": {
                    "description": "Configuration JSON with the key-value pair of configuration attributes to be updated.",
                    "type": "object"
                  }
                },
                "required": [
                  "configuration"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Common successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "201": {
            "description": "Common error response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/orgs/create": {
      "post": {
        "operationId": "createOrg",
        "description": " <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Orgs",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of the Org.",
                    "type": "string"
                  },
                  "description": {
                    "description": "Description of the Org.",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Common successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrgResponse"
                }
              }
            }
          },
          "201": {
            "description": "Common error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrgResponse"
                }
              }
            }
          },
          "400": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/orgs/{org_identifier}/update": {
      "post": {
        "operationId": "updateOrg",
        "description": " <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Orgs",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of the Org",
                    "type": "string"
                  },
                  "description": {
                    "description": "Description of the Org",
                    "type": "string"
                  },
                  "user_identifiers": {
                    "description": "Add Users to an Org",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "operation": {
                    "description": "Type of update operation. Default operation type is ADD",
                    "default": "ADD",
                    "type": "string",
                    "enum": [
                      "ADD",
                      "REMOVE",
                      "REPLACE"
                    ]
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "org_identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID or name of the Org"
          }
        ],
        "responses": {
          "200": {
            "description": "Common successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "201": {
            "description": "Common error response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/orgs/{org_identifier}/delete": {
      "post": {
        "operationId": "deleteOrg",
        "description": " <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Orgs",
          "9.0.0.cl"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "org_identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID or name of the Org"
          }
        ],
        "responses": {
          "200": {
            "description": "Common successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "201": {
            "description": "Common error response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/tags/create": {
      "post": {
        "operationId": "createTag",
        "description": " <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Tags",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of the tag.",
                    "type": "string"
                  },
                  "color": {
                    "description": "Hex color code to be assigned to the tag. For example, #ff78a9.",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Common successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            }
          },
          "201": {
            "description": "Common error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            }
          },
          "400": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/tags/{tag_identifier}/update": {
      "post": {
        "operationId": "updateTag",
        "description": " <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Tags",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of the tag.",
                    "type": "string"
                  },
                  "color": {
                    "description": "Hex color code to be assigned to the tag. For example, #ff78a9.",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "tag_identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Name or Id of the tag."
          }
        ],
        "responses": {
          "200": {
            "description": "Common successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "201": {
            "description": "Common error response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/tags/{tag_identifier}/delete": {
      "post": {
        "operationId": "deleteTag",
        "description": " <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Tags",
          "9.0.0.cl"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "tag_identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Tag identifier Tag name or Tag id."
          }
        ],
        "responses": {
          "200": {
            "description": "Common successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "201": {
            "description": "Common error response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/tags/assign": {
      "post": {
        "operationId": "assignTag",
        "description": " <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Tags",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata": {
                    "description": "Metadata objects.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/TagMetadataTypeInput"
                    }
                  },
                  "tag_identifiers": {
                    "description": "GUID or name of the tag.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "metadata",
                  "tag_identifiers"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Common successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "201": {
            "description": "Common error response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/tags/unassign": {
      "post": {
        "operationId": "unassignTag",
        "description": " <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Tags",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata": {
                    "description": "Metadata objects.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/TagMetadataTypeInput"
                    }
                  },
                  "tag_identifiers": {
                    "description": "GUID or name of the tag.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "metadata",
                  "tag_identifiers"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Common successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "201": {
            "description": "Common error response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/groups/create": {
      "post": {
        "operationId": "createUserGroup",
        "description": " <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Groups",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of the group. The group name must be unique.",
                    "type": "string"
                  },
                  "display_name": {
                    "description": "Display name for the group.",
                    "type": "string"
                  },
                  "default_liveboard_identifiers": {
                    "description": "GUID of the Liveboards to assign as default Liveboards to the users in the group.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "description": {
                    "description": "Description of the group",
                    "type": "string"
                  },
                  "privileges": {
                    "description": "Privileges to assign to the group",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "ADMINISTRATION",
                        "AUTHORING",
                        "USERDATAUPLOADING",
                        "DATADOWNLOADING",
                        "USERMANAGEMENT",
                        "DATAMANAGEMENT",
                        "SHAREWITHALL",
                        "JOBSCHEDULING",
                        "A3ANALYSIS",
                        "EXPERIMENTALFEATUREPRIVILEGE",
                        "BYPASSRLS",
                        "RANALYSIS",
                        "DEVELOPER",
                        "USER_ADMINISTRATION",
                        "GROUP_ADMINISTRATION",
                        "SYNCMANAGEMENT",
                        "CAN_CREATE_CATALOG",
                        "DISABLE_PINBOARD_CREATION",
                        "ENABLESPOTAPPCREATION",
                        "LIVEBOARD_VERIFIER",
                        "PREVIEW_THOUGHTSPOT_SAGE"
                      ]
                    }
                  },
                  "sub_group_identifiers": {
                    "description": "GUID or name of the sub groups. A subgroup is a group assigned to a parent group.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "type": {
                    "description": "Group type.",
                    "default": "LOCAL_GROUP",
                    "type": "string",
                    "enum": [
                      "LOCAL_GROUP",
                      "LDAP_GROUP"
                    ]
                  },
                  "user_identifiers": {
                    "description": "GUID or name of the users to assign to the group.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "visibility": {
                    "description": "Visibility of the group. To make a group visible to other users and groups,\nset the visibility to SHAREABLE.",
                    "default": "SHARABLE",
                    "type": "string",
                    "enum": [
                      "SHARABLE",
                      "NON_SHARABLE"
                    ]
                  },
                  "role_identifiers": {
                    "description": "Role identifiers of the roles that should be assigned to the group.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "name",
                  "display_name"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Common successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroupResponse"
                }
              }
            }
          },
          "201": {
            "description": "Common error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroupResponse"
                }
              }
            }
          },
          "400": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/groups/{group_identifier}/update": {
      "post": {
        "operationId": "updateUserGroup",
        "description": " <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Groups",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of the group to modify.",
                    "type": "string"
                  },
                  "default_liveboard_identifiers": {
                    "description": "ID of the Liveboards to be assigned as default Liveboards to the users in the group.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "description": {
                    "description": "Description for the group.",
                    "type": "string"
                  },
                  "display_name": {
                    "description": "Display name of the group.",
                    "type": "string"
                  },
                  "privileges": {
                    "description": "Privileges to assign to the group.",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "ADMINISTRATION",
                        "AUTHORING",
                        "USERDATAUPLOADING",
                        "DATADOWNLOADING",
                        "USERMANAGEMENT",
                        "DATAMANAGEMENT",
                        "SHAREWITHALL",
                        "JOBSCHEDULING",
                        "A3ANALYSIS",
                        "EXPERIMENTALFEATUREPRIVILEGE",
                        "BYPASSRLS",
                        "RANALYSIS",
                        "DEVELOPER",
                        "USER_ADMINISTRATION",
                        "GROUP_ADMINISTRATION",
                        "SYNCMANAGEMENT",
                        "CAN_CREATE_CATALOG",
                        "DISABLE_PINBOARD_CREATION",
                        "ENABLESPOTAPPCREATION",
                        "LIVEBOARD_VERIFIER",
                        "PREVIEW_THOUGHTSPOT_SAGE"
                      ]
                    }
                  },
                  "sub_group_identifiers": {
                    "description": "GUID or name of the sub groups. A subgroup is a group assigned to a parent group.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "type": {
                    "description": "Type of the group",
                    "type": "string",
                    "enum": [
                      "LOCAL_GROUP",
                      "LDAP_GROUP"
                    ]
                  },
                  "user_identifiers": {
                    "description": "GUID or name of the users to assign to the group.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "visibility": {
                    "description": "Visibility of the group. To make a group visible to other users and\ngroups, set the visibility to SHAREABLE.",
                    "type": "string",
                    "enum": [
                      "SHARABLE",
                      "NON_SHARABLE"
                    ]
                  },
                  "role_identifiers": {
                    "description": "Role identifiers of the roles that should be assigned to the group.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "operation": {
                    "description": "Type of update operation. Default operation type is REPLACE",
                    "default": "REPLACE",
                    "type": "string",
                    "enum": [
                      "ADD",
                      "REMOVE",
                      "REPLACE"
                    ]
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "group_identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "GUID or name of the group."
          }
        ],
        "responses": {
          "200": {
            "description": "Common successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "201": {
            "description": "Common error response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/groups/{group_identifier}/delete": {
      "post": {
        "operationId": "deleteUserGroup",
        "description": " <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Groups",
          "9.0.0.cl"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "group_identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "GUID or name of the group."
          }
        ],
        "responses": {
          "200": {
            "description": "Common successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "201": {
            "description": "Common error response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/groups/import": {
      "post": {
        "operationId": "importUserGroups",
        "description": " <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Groups",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "groups": {
                    "description": "Details of groups which are to be imported",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/GroupsImportListInput"
                    }
                  },
                  "delete_unspecified_groups": {
                    "description": "If set to true, removes groups that are not specified in the API request.",
                    "default": false,
                    "type": "boolean",
                    "nullable": true
                  },
                  "dry_run": {
                    "description": "If true, the API performs a test operation and returns user IDs whose\ndata will be edited after the import.",
                    "default": true,
                    "type": "boolean",
                    "nullable": true
                  }
                }
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Common successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportUserGroupsResponse"
                }
              }
            }
          },
          "201": {
            "description": "Common error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportUserGroupsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/metadata/tml/import": {
      "post": {
        "operationId": "importMetadataTML",
        "description": " <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Metadata",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata_tmls": {
                    "description": "Details of TML objects.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "import_policy": {
                    "description": "Specifies the import policy for the TML import.",
                    "default": "PARTIAL",
                    "type": "string",
                    "enum": [
                      "PARTIAL",
                      "ALL_OR_NONE",
                      "VALIDATE_ONLY"
                    ]
                  },
                  "create_new": {
                    "description": "If selected, creates TML objects with new GUIDs.",
                    "default": false,
                    "type": "boolean",
                    "nullable": true
                  }
                },
                "required": [
                  "metadata_tmls"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Common successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "201": {
            "description": "Common error response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/metadata/tml/export": {
      "post": {
        "operationId": "exportMetadataTML",
        "description": " <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Metadata",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata": {
                    "description": "Metadata objects.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ExportMetadataTypeInput"
                    }
                  },
                  "export_associated": {
                    "description": "Indicates whether to export associated metadata objects of specified metadata objects.",
                    "default": false,
                    "type": "boolean",
                    "nullable": true
                  },
                  "export_fqn": {
                    "description": "Adds FQNs of the referenced objects. For example, if you are exporting a Liveboard and its associated objects,\nthe API returns the Liveboard TML data with the FQNs of the referenced worksheet.\nIf the exported TML data includes FQNs, you don't need to manually add FQNs of the referenced objects during TML import.",
                    "default": false,
                    "type": "boolean",
                    "nullable": true
                  },
                  "edoc_format": {
                    "description": "TML EDOC content format.",
                    "default": "JSON",
                    "type": "string",
                    "enum": [
                      "JSON",
                      "YAML"
                    ]
                  }
                },
                "required": [
                  "metadata"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Common successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "201": {
            "description": "Common error response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/metadata/delete": {
      "post": {
        "operationId": "deleteMetadata",
        "description": " <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Metadata",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata": {
                    "description": "Metadata objects.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/DeleteMetadataTypeInput"
                    }
                  },
                  "delete_disabled_objects": {
                    "description": "Indicates whether to delete disabled metadata objects.",
                    "default": false,
                    "type": "boolean",
                    "nullable": true
                  }
                },
                "required": [
                  "metadata"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Common successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "201": {
            "description": "Common error response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/security/metadata/assign": {
      "post": {
        "operationId": "assignChangeAuthor",
        "description": " <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Security",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata": {
                    "description": "GUID or name of the metadata object.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AuthorMetadataTypeInput"
                    }
                  },
                  "user_identifier": {
                    "description": "GUID or name of the user who you want to assign as the author.",
                    "type": "string"
                  },
                  "current_owner_identifier": {
                    "description": "GUID or name of the current author.  When defined, the metadata objects\nauthored by the specified owner are filtered for the API operation.",
                    "type": "string"
                  }
                },
                "required": [
                  "metadata",
                  "user_identifier"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Common successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "201": {
            "description": "Common error response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/security/metadata/share": {
      "post": {
        "operationId": "shareMetadata",
        "description": " <span class=\"since-beta-tag\">Version: 9.0.0.cl or later</span>",
        "tags": [
          "Security",
          "9.0.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata_type": {
                    "description": "Type of metadata.\n1. Liveboard\n2. Answers\n3. LOGICAL_TABLE for any data object such as table, worksheet or view.",
                    "type": "string",
                    "enum": [
                      "LIVEBOARD",
                      "ANSWER",
                      "LOGICAL_TABLE"
                    ]
                  },
                  "metadata_identifiers": {
                    "description": "Unique ID or name of metadata objects.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "permissions": {
                    "description": "Permission details for sharing the objects.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SharePermissionsInput"
                    }
                  },
                  "visualization_identifiers": {
                    "description": "Options to specify details of Liveboard.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "emails": {
                    "description": "Email IDs to which notifications will be sent.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "message": {
                    "description": "Message to be included in notification.",
                    "type": "string"
                  },
                  "enable_custom_url": {
                    "description": "Sends object URLs in the customized format in email notifications.",
                    "default": false,
                    "type": "boolean",
                    "nullable": true
                  }
                },
                "required": [
                  "metadata_identifiers",
                  "permissions",
                  "emails",
                  "message"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Common successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "201": {
            "description": "Common error response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/vcs/git/config/create": {
      "post": {
        "operationId": "createConfig",
        "description": " <span class=\"since-beta-tag\">Version: 9.2.0.cl or later</span>",
        "tags": [
          "Version Control",
          "9.2.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "repository_url": {
                    "description": "URL for connecting to remote repository",
                    "type": "string"
                  },
                  "username": {
                    "description": "Username to authenticate connection to remote repository",
                    "type": "string"
                  },
                  "access_token": {
                    "description": "Access token corresponding to the user to authenticate connection to remote repository",
                    "type": "string"
                  },
                  "org_identifier": {
                    "description": "   Unique identifier of the Org. If no value is provided, the user will be created in the Org associated with the login session. Provide value -1 for cluster level. Example : OrgID1-or-Name1\n   \n\nNote: If no org identifier is specified, then current org identifier of the user will be considered <br/>  <span class=\"since-beta-tag\">Version: 9.5.0.cl or later</span>",
                    "type": "string"
                  },
                  "branch_names": {
                    "description": "List the remote branches to configure. Example:[development, production]",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "default_branch_name": {
                    "description": "Name of the default remote branch",
                    "type": "string"
                  },
                  "enable_guid_mapping": {
                    "description": "Maintain mapping of guid for the deployment to an instance <br/>  <span class=\"since-beta-tag\">Version: 9.4.0.cl or later</span>",
                    "default": false,
                    "type": "boolean",
                    "nullable": true
                  },
                  "guid_mapping_branch_name": {
                    "description": "   Name of the branch where the file containing guid mapping should be maintained. This will be set only when enable_guid_mapping is true.\n   \n\nNote: If no guid mapping branch is specified, then the default branch for this configuration will be considered.  <br/>  <span class=\"since-beta-tag\">Version: 9.4.0.cl or later</span>",
                    "type": "string"
                  }
                },
                "required": [
                  "repository_url",
                  "username",
                  "access_token"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Common successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepoConfigObject"
                }
              }
            }
          },
          "201": {
            "description": "Common error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepoConfigObject"
                }
              }
            }
          },
          "400": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/vcs/git/config/update": {
      "post": {
        "operationId": "updateConfig",
        "description": " <span class=\"since-beta-tag\">Version: 9.2.0.cl or later</span>",
        "tags": [
          "Version Control",
          "9.2.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "description": "Username to authenticate connection to version control system",
                    "type": "string"
                  },
                  "access_token": {
                    "description": "Access token corresponding to the user to authenticate connection to version control system",
                    "type": "string"
                  },
                  "org_identifier": {
                    "description": "   Unique identifier of the Org. If no value is provided, the user will be created in the Org associated with the login session. Provide value -1 for cluster level. Example : OrgID1-or-Name1\n   \n\nNote: If no org identifier is specified, then current org identifier of the user will be considered  <br/>  <span class=\"since-beta-tag\">Version: 9.5.0.cl or later</span>",
                    "type": "string"
                  },
                  "branch_names": {
                    "description": "List the remote branches to configure. Example:[development, production]",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "default_branch_name": {
                    "description": "Name of the default remote branch",
                    "type": "string"
                  },
                  "enable_guid_mapping": {
                    "description": "Maintain mapping of guid for the deployment to an instance <br/>  <span class=\"since-beta-tag\">Version: 9.4.0.cl or later</span>",
                    "type": "boolean",
                    "nullable": true
                  },
                  "guid_mapping_branch_name": {
                    "description": "   Name of the branch in which the file containing guid mapping should be maintained. This will be set only if enable_guid_mapping is true.\n   \n\nNote: If no guid mapping branch is specified, then the default branch for this configuration will be considered.  <br/>  <span class=\"since-beta-tag\">Version: 9.4.0.cl or later</span>",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Common successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepoConfigObject"
                }
              }
            }
          },
          "201": {
            "description": "Common error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepoConfigObject"
                }
              }
            }
          },
          "400": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/vcs/git/config/delete": {
      "post": {
        "operationId": "deleteConfig",
        "description": " <span class=\"since-beta-tag\">Version: 9.2.0.cl or later</span>",
        "tags": [
          "Version Control",
          "9.2.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "cluster_level": {
                    "description": "Consider cluster level or org level config. Set it to false to delete configuration from current org. If set to true, then the configuration at cluster level and orgs that inherited the configuration from cluster level will be deleted. <br/>  <span class=\"since-beta-tag\">Version: 9.5.0.cl or later</span>",
                    "type": "boolean",
                    "nullable": true
                  }
                }
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Common successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "201": {
            "description": "Common error response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/vcs/git/branches/commit": {
      "post": {
        "operationId": "commitBranch",
        "description": " <span class=\"since-beta-tag\">Version: 9.2.0.cl or later</span>",
        "tags": [
          "Version Control",
          "9.2.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata": {
                    "description": "Metadata objects.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/MetadataObject"
                    }
                  },
                  "branch_name": {
                    "description": "   Name of the remote branch where object should be pushed\n   \n\nNote: If no branch_name is specified, then the default branch will be considered.",
                    "type": "string"
                  },
                  "comment": {
                    "description": "Comment to be added to the commit",
                    "type": "string"
                  }
                },
                "required": [
                  "metadata",
                  "comment"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Common successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommitResponse"
                }
              }
            }
          },
          "201": {
            "description": "Common error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommitResponse"
                }
              }
            }
          },
          "400": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/vcs/git/commits/{commit_id}/revert": {
      "post": {
        "operationId": "revertCommit",
        "description": " <span class=\"since-beta-tag\">Version: 9.2.0.cl or later</span>",
        "tags": [
          "Version Control",
          "9.2.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata": {
                    "description": "Metadata objects.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/MetadataObject"
                    }
                  },
                  "branch_name": {
                    "description": "   Name of the branch where the reverted version should be committed\n   \n\nNote: If no branch_name is specified, then the default branch will be considered.",
                    "type": "string"
                  },
                  "revert_policy": {
                    "description": "Policy to be followed while importing. Valid values: [ALL_OR_NONE, PARTIAL]",
                    "default": "ALL_OR_NONE",
                    "type": "string",
                    "enum": [
                      "ALL_OR_NONE",
                      "PARTIAL"
                    ]
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "commit_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Commit id to which the object should be reverted"
          }
        ],
        "responses": {
          "200": {
            "description": "Common successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RevertResponse"
                }
              }
            }
          },
          "201": {
            "description": "Common error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RevertResponse"
                }
              }
            }
          },
          "400": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/vcs/git/branches/validate": {
      "post": {
        "operationId": "validateMerge",
        "description": " <span class=\"since-beta-tag\">Version: 9.2.0.cl or later</span>",
        "tags": [
          "Version Control",
          "9.2.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "source_branch_name": {
                    "description": "Name of the branch from which changes need to be picked for validation",
                    "type": "string"
                  },
                  "target_branch_name": {
                    "description": "Name of the branch where files will be merged",
                    "type": "string"
                  }
                },
                "required": [
                  "source_branch_name",
                  "target_branch_name"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Common successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeployResponse"
                  }
                }
              }
            }
          },
          "201": {
            "description": "Common error response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeployResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/vcs/git/commits/deploy": {
      "post": {
        "operationId": "deployCommit",
        "description": " <span class=\"since-beta-tag\">Version: 9.2.0.cl or later</span>",
        "tags": [
          "Version Control",
          "9.2.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "commit_id": {
                    "description": "   Commit_id against which the files should be picked to deploy.\n   \n\nNote: If no commit_id is specified, then the head of the branch is considered.",
                    "type": "string"
                  },
                  "branch_name": {
                    "description": "   Name of the remote branch where changes should be picked\n   \n\nNote: If no branch_name is specified, then the default branch will be considered.",
                    "type": "string"
                  },
                  "deploy_type": {
                    "description": "Indicates if all files or only modified file at specified commit point should be considered",
                    "default": "DELTA",
                    "type": "string",
                    "enum": [
                      "FULL",
                      "DELTA"
                    ]
                  },
                  "deploy_policy": {
                    "description": "Define the policy to follow while importing TML in the ThoughtSpot environment. Use “ALL_OR_NONE” to cancel the deployment of all ThoughtSpot objects if at least one of them fails to import. Use “Partial” to import ThoughtSpot objects that validate successfully even if other objects in the same deploy operations fail to import.",
                    "default": "ALL_OR_NONE",
                    "type": "string",
                    "enum": [
                      "ALL_OR_NONE",
                      "PARTIAL"
                    ]
                  }
                }
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Common successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeployResponse"
                  }
                }
              }
            }
          },
          "201": {
            "description": "Common error response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeployResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/connection/create": {
      "post": {
        "operationId": "createConnection",
        "description": " <span class=\"since-beta-tag\">Version: 9.2.0.cl or later</span>",
        "tags": [
          "Connections",
          "9.2.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Unique name for the connection.",
                    "type": "string"
                  },
                  "description": {
                    "description": "Description of the connection.",
                    "type": "string"
                  },
                  "data_warehouse_type": {
                    "description": "Type of the data warehouse.",
                    "type": "string",
                    "enum": [
                      "SNOWFLAKE",
                      "AMAZON_REDSHIFT",
                      "GOOGLE_BIGQUERY",
                      "AZURE_SYNAPSE",
                      "TERADATA",
                      "SAP_HANA",
                      "STARBURST",
                      "ORACLE_ADW",
                      "DATABRICKS",
                      "DENODO",
                      "DREMIO",
                      "TRINO",
                      "PRESTO",
                      "POSTGRES",
                      "SQL_SERVER",
                      "MYSQL",
                      "GENERIC_JDBC",
                      "AMAZON_RDS_POSTGRESQL",
                      "AMAZON_AURORA_POSTGRESQL",
                      "AMAZON_RDS_MYSQL",
                      "AMAZON_AURORA_MYSQL",
                      "LOOKER",
                      "AMAZON_ATHENA"
                    ]
                  },
                  "data_warehouse_config": {
                    "description": "Connection configuration attributes in JSON format. To create a connection with tables, include table attributes. See the documentation above for sample JSON.",
                    "type": "object"
                  },
                  "validate": {
                    "description": "Validates the connection metadata if tables are included. If you are creating a connection without tables, specify `false`.",
                    "default": true,
                    "type": "boolean",
                    "nullable": true
                  }
                },
                "required": [
                  "name",
                  "data_warehouse_type",
                  "data_warehouse_config"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Common successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateConnectionResponse"
                }
              }
            }
          },
          "201": {
            "description": "Common error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateConnectionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/connection/delete": {
      "post": {
        "operationId": "deleteConnection",
        "description": " <span class=\"since-beta-tag\">Version: 9.2.0.cl or later</span>",
        "tags": [
          "Connections",
          "9.2.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "connection_identifier": {
                    "description": "Unique ID or name of the connection.",
                    "type": "string"
                  }
                },
                "required": [
                  "connection_identifier"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Common successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "201": {
            "description": "Common error response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/connection/update": {
      "post": {
        "operationId": "updateConnection",
        "description": " <span class=\"since-beta-tag\">Version: 9.2.0.cl or later</span>",
        "tags": [
          "Connections",
          "9.2.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "connection_identifier": {
                    "description": "Unique ID or name of the connection.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Updated name of the connection.",
                    "type": "string"
                  },
                  "description": {
                    "description": "Updated description of the connection.",
                    "type": "string"
                  },
                  "data_warehouse_config": {
                    "description": "Configuration of the data warehouse in JSON.",
                    "type": "object"
                  },
                  "validate": {
                    "description": "Indicates whether to validate the connection details.",
                    "default": true,
                    "type": "boolean",
                    "nullable": true
                  }
                },
                "required": [
                  "connection_identifier"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Common successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "201": {
            "description": "Common error response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/roles/create": {
      "post": {
        "operationId": "createRole",
        "description": "Creates a Role.\nRequires cluster Administration or Role Administration privileges. <br/>  <span class=\"since-beta-tag\">Version: 9.5.0.cl or later</span>",
        "tags": [
          "Roles",
          "9.5.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Unique name of the role.",
                    "type": "string"
                  },
                  "description": {
                    "description": "Description of the role.",
                    "type": "string"
                  },
                  "privileges": {
                    "description": "Privileges granted to the role.",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "USERDATAUPLOADING",
                        "DATADOWNLOADING",
                        "DATAMANAGEMENT",
                        "SHAREWITHALL",
                        "JOBSCHEDULING",
                        "A3ANALYSIS",
                        "EXPERIMENTALFEATUREPRIVILEGE",
                        "BYPASSRLS",
                        "DISABLE_PINBOARD_CREATION",
                        "DEVELOPER",
                        "APPLICATION_ADMINISTRATION",
                        "USER_ADMINISTRATION",
                        "GROUP_ADMINISTRATION",
                        "SYSTEM_INFO_ADMINISTRATION",
                        "SYNCMANAGEMENT",
                        "ORG_ADMINISTRATION",
                        "ROLE_ADMINISTRATION",
                        "AUTHENTICATION_ADMINISTRATION",
                        "BILLING_INFO_ADMINISTRATION"
                      ]
                    }
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Common successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleResponse"
                }
              }
            }
          },
          "201": {
            "description": "Common error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleResponse"
                }
              }
            }
          },
          "400": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/roles/{role_identifier}/update": {
      "post": {
        "operationId": "updateRole",
        "description": "Updates a Role.\nRequires cluster Administration or Role Administration privileges. <br/>  <span class=\"since-beta-tag\">Version: 9.5.0.cl or later</span>",
        "tags": [
          "Roles",
          "9.5.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of the Role.",
                    "type": "string"
                  },
                  "description": {
                    "description": "Description of the Role",
                    "type": "string"
                  },
                  "privileges": {
                    "description": "Privileges granted to the role.",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "USERDATAUPLOADING",
                        "DATADOWNLOADING",
                        "DATAMANAGEMENT",
                        "SHAREWITHALL",
                        "JOBSCHEDULING",
                        "A3ANALYSIS",
                        "EXPERIMENTALFEATUREPRIVILEGE",
                        "BYPASSRLS",
                        "DISABLE_PINBOARD_CREATION",
                        "DEVELOPER",
                        "APPLICATION_ADMINISTRATION",
                        "USER_ADMINISTRATION",
                        "GROUP_ADMINISTRATION",
                        "SYSTEM_INFO_ADMINISTRATION",
                        "SYNCMANAGEMENT",
                        "ORG_ADMINISTRATION",
                        "ROLE_ADMINISTRATION",
                        "AUTHENTICATION_ADMINISTRATION",
                        "BILLING_INFO_ADMINISTRATION"
                      ]
                    }
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [
          {
            "in": "path",
            "name": "role_identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique ID or name of the role."
          }
        ],
        "responses": {
          "200": {
            "description": "Common successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleResponse"
                }
              }
            }
          },
          "201": {
            "description": "Common error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleResponse"
                }
              }
            }
          },
          "400": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/roles/{role_identifier}/delete": {
      "post": {
        "operationId": "deleteRole",
        "description": "Deletes a Role.\nRequires cluster Administration or Role Administration privileges. <br/>  <span class=\"since-beta-tag\">Version: 9.5.0.cl or later</span>",
        "tags": [
          "Roles",
          "9.5.0.cl"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "role_identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique ID or name of the role."
          }
        ],
        "responses": {
          "200": {
            "description": "Common successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "201": {
            "description": "Common error response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/schedules/create": {
      "post": {
        "operationId": "createSchedule",
        "description": "Create schedule. <br/>  <span class=\"since-beta-tag\">Version: 9.4.0.cl or later</span>",
        "tags": [
          "Schedules",
          "9.4.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of the scheduled job.",
                    "type": "string"
                  },
                  "description": {
                    "description": "Description of the job.",
                    "type": "string"
                  },
                  "metadata_type": {
                    "description": "Type of the metadata object.",
                    "type": "string",
                    "enum": [
                      "LIVEBOARD"
                    ]
                  },
                  "metadata_identifier": {
                    "description": "Unique ID or name of the metadata object.",
                    "type": "string"
                  },
                  "file_format": {
                    "description": "Export file format.",
                    "default": "PDF",
                    "type": "string",
                    "enum": [
                      "CSV",
                      "PDF"
                    ]
                  },
                  "liveboard_options": {
                    "description": "Options to specify details of Liveboard.",
                    "$ref": "#/components/schemas/LiveboardOptionsInput"
                  },
                  "pdf_options": {
                    "description": "PDF layout and orientation settings. Applicable only if the `file_format` is specified as `PDF`.",
                    "$ref": "#/components/schemas/SchedulesPdfOptionsInput"
                  },
                  "time_zone": {
                    "description": "Time zone",
                    "default": "America/Los_Angeles",
                    "type": "string",
                    "enum": [
                      "Africa/Abidjan",
                      "Africa/Accra",
                      "Africa/Addis_Ababa",
                      "Africa/Algiers",
                      "Africa/Asmara",
                      "Africa/Asmera",
                      "Africa/Bamako",
                      "Africa/Bangui",
                      "Africa/Banjul",
                      "Africa/Bissau",
                      "Africa/Blantyre",
                      "Africa/Brazzaville",
                      "Africa/Bujumbura",
                      "Africa/Cairo",
                      "Africa/Casablanca",
                      "Africa/Ceuta",
                      "Africa/Conakry",
                      "Africa/Dakar",
                      "Africa/Dar_es_Salaam",
                      "Africa/Djibouti",
                      "Africa/Douala",
                      "Africa/El_Aaiun",
                      "Africa/Freetown",
                      "Africa/Gaborone",
                      "Africa/Harare",
                      "Africa/Johannesburg",
                      "Africa/Juba",
                      "Africa/Kampala",
                      "Africa/Khartoum",
                      "Africa/Kigali",
                      "Africa/Kinshasa",
                      "Africa/Lagos",
                      "Africa/Libreville",
                      "Africa/Lome",
                      "Africa/Luanda",
                      "Africa/Lubumbashi",
                      "Africa/Lusaka",
                      "Africa/Malabo",
                      "Africa/Maputo",
                      "Africa/Maseru",
                      "Africa/Mbabane",
                      "Africa/Mogadishu",
                      "Africa/Monrovia",
                      "Africa/Nairobi",
                      "Africa/Ndjamena",
                      "Africa/Niamey",
                      "Africa/Nouakchott",
                      "Africa/Ouagadougou",
                      "Africa/Porto-Novo",
                      "Africa/Sao_Tome",
                      "Africa/Timbuktu",
                      "Africa/Tripoli",
                      "Africa/Tunis",
                      "Africa/Windhoek",
                      "America/Adak",
                      "America/Anchorage",
                      "America/Anguilla",
                      "America/Antigua",
                      "America/Araguaina",
                      "America/Argentina/Buenos_Aires",
                      "America/Argentina/Catamarca",
                      "America/Argentina/ComodRivadavia",
                      "America/Argentina/Cordoba",
                      "America/Argentina/Jujuy",
                      "America/Argentina/La_Rioja",
                      "America/Argentina/Mendoza",
                      "America/Argentina/Rio_Gallegos",
                      "America/Argentina/Salta",
                      "America/Argentina/San_Juan",
                      "America/Argentina/San_Luis",
                      "America/Argentina/Tucuman",
                      "America/Argentina/Ushuaia",
                      "America/Aruba",
                      "America/Asuncion",
                      "America/Atikokan",
                      "America/Atka",
                      "America/Bahia",
                      "America/Bahia_Banderas",
                      "America/Barbados",
                      "America/Belem",
                      "America/Belize",
                      "America/Blanc-Sablon",
                      "America/Boa_Vista",
                      "America/Bogota",
                      "America/Boise",
                      "America/Buenos_Aires",
                      "America/Cambridge_Bay",
                      "America/Campo_Grande",
                      "America/Cancun",
                      "America/Caracas",
                      "America/Catamarca",
                      "America/Cayenne",
                      "America/Cayman",
                      "America/Chicago",
                      "America/Chihuahua",
                      "America/Coral_Harbour",
                      "America/Cordoba",
                      "America/Costa_Rica",
                      "America/Creston",
                      "America/Cuiaba",
                      "America/Curacao",
                      "America/Danmarkshavn",
                      "America/Dawson",
                      "America/Dawson_Creek",
                      "America/Denver",
                      "America/Detroit",
                      "America/Dominica",
                      "America/Edmonton",
                      "America/Eirunepe",
                      "America/El_Salvador",
                      "America/Ensenada",
                      "America/Fort_Nelson",
                      "America/Fort_Wayne",
                      "America/Fortaleza",
                      "America/Glace_Bay",
                      "America/Godthab",
                      "America/Goose_Bay",
                      "America/Grand_Turk",
                      "America/Grenada",
                      "America/Guadeloupe",
                      "America/Guatemala",
                      "America/Guayaquil",
                      "America/Guyana",
                      "America/Halifax",
                      "America/Havana",
                      "America/Hermosillo",
                      "America/Indiana/Indianapolis",
                      "America/Indiana/Knox",
                      "America/Indiana/Marengo",
                      "America/Indiana/Petersburg",
                      "America/Indiana/Tell_City",
                      "America/Indiana/Vevay",
                      "America/Indiana/Vincennes",
                      "America/Indiana/Winamac",
                      "America/Indianapolis",
                      "America/Inuvik",
                      "America/Iqaluit",
                      "America/Jamaica",
                      "America/Jujuy",
                      "America/Juneau",
                      "America/Kentucky/Louisville",
                      "America/Kentucky/Monticello",
                      "America/Knox_IN",
                      "America/Kralendijk",
                      "America/La_Paz",
                      "America/Lima",
                      "America/Los_Angeles",
                      "America/Louisville",
                      "America/Lower_Princes",
                      "America/Maceio",
                      "America/Managua",
                      "America/Manaus",
                      "America/Marigot",
                      "America/Martinique",
                      "America/Matamoros",
                      "America/Mazatlan",
                      "America/Mendoza",
                      "America/Menominee",
                      "America/Merida",
                      "America/Metlakatla",
                      "America/Mexico_City",
                      "America/Miquelon",
                      "America/Moncton",
                      "America/Monterrey",
                      "America/Montevideo",
                      "America/Montreal",
                      "America/Montserrat",
                      "America/Nassau",
                      "America/New_York",
                      "America/Nipigon",
                      "America/Nome",
                      "America/Noronha",
                      "America/North_Dakota/Beulah",
                      "America/North_Dakota/Center",
                      "America/North_Dakota/New_Salem",
                      "America/Nuuk",
                      "America/Ojinaga",
                      "America/Panama",
                      "America/Pangnirtung",
                      "America/Paramaribo",
                      "America/Phoenix",
                      "America/Port-au-Prince",
                      "America/Port_of_Spain",
                      "America/Porto_Acre",
                      "America/Porto_Velho",
                      "America/Puerto_Rico",
                      "America/Punta_Arenas",
                      "America/Rainy_River",
                      "America/Rankin_Inlet",
                      "America/Recife",
                      "America/Regina",
                      "America/Resolute",
                      "America/Rio_Branco",
                      "America/Rosario",
                      "America/Santa_Isabel",
                      "America/Santarem",
                      "America/Santiago",
                      "America/Santo_Domingo",
                      "America/Sao_Paulo",
                      "America/Scoresbysund",
                      "America/Shiprock",
                      "America/Sitka",
                      "America/St_Barthelemy",
                      "America/St_Johns",
                      "America/St_Kitts",
                      "America/St_Lucia",
                      "America/St_Thomas",
                      "America/St_Vincent",
                      "America/Swift_Current",
                      "America/Tegucigalpa",
                      "America/Thule",
                      "America/Thunder_Bay",
                      "America/Tijuana",
                      "America/Toronto",
                      "America/Tortola",
                      "America/Vancouver",
                      "America/Virgin",
                      "America/Whitehorse",
                      "America/Winnipeg",
                      "America/Yakutat",
                      "America/Yellowknife",
                      "Antarctica/Casey",
                      "Antarctica/Davis",
                      "Antarctica/DumontDUrville",
                      "Antarctica/Macquarie",
                      "Antarctica/Mawson",
                      "Antarctica/McMurdo",
                      "Antarctica/Palmer",
                      "Antarctica/Rothera",
                      "Antarctica/South_Pole",
                      "Antarctica/Syowa",
                      "Antarctica/Troll",
                      "Antarctica/Vostok",
                      "Arctic/Longyearbyen",
                      "Asia/Aden",
                      "Asia/Almaty",
                      "Asia/Amman",
                      "Asia/Anadyr",
                      "Asia/Aqtau",
                      "Asia/Aqtobe",
                      "Asia/Ashgabat",
                      "Asia/Ashkhabad",
                      "Asia/Atyrau",
                      "Asia/Baghdad",
                      "Asia/Bahrain",
                      "Asia/Baku",
                      "Asia/Bangkok",
                      "Asia/Barnaul",
                      "Asia/Beirut",
                      "Asia/Bishkek",
                      "Asia/Brunei",
                      "Asia/Calcutta",
                      "Asia/Chita",
                      "Asia/Choibalsan",
                      "Asia/Chongqing",
                      "Asia/Chungking",
                      "Asia/Colombo",
                      "Asia/Dacca",
                      "Asia/Damascus",
                      "Asia/Dhaka",
                      "Asia/Dili",
                      "Asia/Dubai",
                      "Asia/Dushanbe",
                      "Asia/Famagusta",
                      "Asia/Gaza",
                      "Asia/Harbin",
                      "Asia/Hebron",
                      "Asia/Ho_Chi_Minh",
                      "Asia/Hong_Kong",
                      "Asia/Hovd",
                      "Asia/Irkutsk",
                      "Asia/Istanbul",
                      "Asia/Jakarta",
                      "Asia/Jayapura",
                      "Asia/Jerusalem",
                      "Asia/Kabul",
                      "Asia/Kamchatka",
                      "Asia/Karachi",
                      "Asia/Kashgar",
                      "Asia/Kathmandu",
                      "Asia/Katmandu",
                      "Asia/Khandyga",
                      "Asia/Kolkata",
                      "Asia/Krasnoyarsk",
                      "Asia/Kuala_Lumpur",
                      "Asia/Kuching",
                      "Asia/Kuwait",
                      "Asia/Macao",
                      "Asia/Macau",
                      "Asia/Magadan",
                      "Asia/Makassar",
                      "Asia/Manila",
                      "Asia/Muscat",
                      "Asia/Nicosia",
                      "Asia/Novokuznetsk",
                      "Asia/Novosibirsk",
                      "Asia/Omsk",
                      "Asia/Oral",
                      "Asia/Phnom_Penh",
                      "Asia/Pontianak",
                      "Asia/Pyongyang",
                      "Asia/Qatar",
                      "Asia/Qostanay",
                      "Asia/Qyzylorda",
                      "Asia/Rangoon",
                      "Asia/Riyadh",
                      "Asia/Saigon",
                      "Asia/Sakhalin",
                      "Asia/Samarkand",
                      "Asia/Seoul",
                      "Asia/Shanghai",
                      "Asia/Singapore",
                      "Asia/Srednekolymsk",
                      "Asia/Taipei",
                      "Asia/Tashkent",
                      "Asia/Tbilisi",
                      "Asia/Tehran",
                      "Asia/Tel_Aviv",
                      "Asia/Thimbu",
                      "Asia/Thimphu",
                      "Asia/Tokyo",
                      "Asia/Tomsk",
                      "Asia/Ujung_Pandang",
                      "Asia/Ulaanbaatar",
                      "Asia/Ulan_Bator",
                      "Asia/Urumqi",
                      "Asia/Ust-Nera",
                      "Asia/Vientiane",
                      "Asia/Vladivostok",
                      "Asia/Yakutsk",
                      "Asia/Yangon",
                      "Asia/Yekaterinburg",
                      "Asia/Yerevan",
                      "Atlantic/Azores",
                      "Atlantic/Bermuda",
                      "Atlantic/Canary",
                      "Atlantic/Cape_Verde",
                      "Atlantic/Faeroe",
                      "Atlantic/Faroe",
                      "Atlantic/Jan_Mayen",
                      "Atlantic/Madeira",
                      "Atlantic/Reykjavik",
                      "Atlantic/South_Georgia",
                      "Atlantic/St_Helena",
                      "Atlantic/Stanley",
                      "Australia/ACT",
                      "Australia/Adelaide",
                      "Australia/Brisbane",
                      "Australia/Broken_Hill",
                      "Australia/Canberra",
                      "Australia/Currie",
                      "Australia/Darwin",
                      "Australia/Eucla",
                      "Australia/Hobart",
                      "Australia/LHI",
                      "Australia/Lindeman",
                      "Australia/Lord_Howe",
                      "Australia/Melbourne",
                      "Australia/NSW",
                      "Australia/North",
                      "Australia/Perth",
                      "Australia/Queensland",
                      "Australia/South",
                      "Australia/Sydney",
                      "Australia/Tasmania",
                      "Australia/Victoria",
                      "Australia/West",
                      "Australia/Yancowinna",
                      "Brazil/Acre",
                      "Brazil/DeNoronha",
                      "Brazil/East",
                      "Brazil/West",
                      "CET",
                      "CST6CDT",
                      "Canada/Atlantic",
                      "Canada/Central",
                      "Canada/Eastern",
                      "Canada/Mountain",
                      "Canada/Newfoundland",
                      "Canada/Pacific",
                      "Canada/Saskatchewan",
                      "Canada/Yukon",
                      "Chile/Continental",
                      "Chile/EasterIsland",
                      "Cuba",
                      "EET",
                      "EST5EDT",
                      "Egypt",
                      "Eire",
                      "Etc/GMT",
                      "Etc/GMT+0",
                      "Etc/GMT+1",
                      "Etc/GMT+10",
                      "Etc/GMT+11",
                      "Etc/GMT+12",
                      "Etc/GMT+2",
                      "Etc/GMT+3",
                      "Etc/GMT+4",
                      "Etc/GMT+5",
                      "Etc/GMT+6",
                      "Etc/GMT+7",
                      "Etc/GMT+8",
                      "Etc/GMT+9",
                      "Etc/GMT-0",
                      "Etc/GMT-1",
                      "Etc/GMT-10",
                      "Etc/GMT-11",
                      "Etc/GMT-12",
                      "Etc/GMT-13",
                      "Etc/GMT-14",
                      "Etc/GMT-2",
                      "Etc/GMT-3",
                      "Etc/GMT-4",
                      "Etc/GMT-5",
                      "Etc/GMT-6",
                      "Etc/GMT-7",
                      "Etc/GMT-8",
                      "Etc/GMT-9",
                      "Etc/GMT0",
                      "Etc/Greenwich",
                      "Etc/UCT",
                      "Etc/UTC",
                      "Etc/Universal",
                      "Etc/Zulu",
                      "Europe/Amsterdam",
                      "Europe/Andorra",
                      "Europe/Astrakhan",
                      "Europe/Athens",
                      "Europe/Belfast",
                      "Europe/Belgrade",
                      "Europe/Berlin",
                      "Europe/Bratislava",
                      "Europe/Brussels",
                      "Europe/Bucharest",
                      "Europe/Budapest",
                      "Europe/Busingen",
                      "Europe/Chisinau",
                      "Europe/Copenhagen",
                      "Europe/Dublin",
                      "Europe/Gibraltar",
                      "Europe/Guernsey",
                      "Europe/Helsinki",
                      "Europe/Isle_of_Man",
                      "Europe/Istanbul",
                      "Europe/Jersey",
                      "Europe/Kaliningrad",
                      "Europe/Kiev",
                      "Europe/Kirov",
                      "Europe/Kyiv",
                      "Europe/Lisbon",
                      "Europe/Ljubljana",
                      "Europe/London",
                      "Europe/Luxembourg",
                      "Europe/Madrid",
                      "Europe/Malta",
                      "Europe/Mariehamn",
                      "Europe/Minsk",
                      "Europe/Monaco",
                      "Europe/Moscow",
                      "Europe/Nicosia",
                      "Europe/Oslo",
                      "Europe/Paris",
                      "Europe/Podgorica",
                      "Europe/Prague",
                      "Europe/Riga",
                      "Europe/Rome",
                      "Europe/Samara",
                      "Europe/San_Marino",
                      "Europe/Sarajevo",
                      "Europe/Saratov",
                      "Europe/Simferopol",
                      "Europe/Skopje",
                      "Europe/Sofia",
                      "Europe/Stockholm",
                      "Europe/Tallinn",
                      "Europe/Tirane",
                      "Europe/Tiraspol",
                      "Europe/Ulyanovsk",
                      "Europe/Uzhgorod",
                      "Europe/Vaduz",
                      "Europe/Vatican",
                      "Europe/Vienna",
                      "Europe/Vilnius",
                      "Europe/Volgograd",
                      "Europe/Warsaw",
                      "Europe/Zagreb",
                      "Europe/Zaporozhye",
                      "Europe/Zurich",
                      "GB",
                      "GB-Eire",
                      "GMT",
                      "GMT0",
                      "Greenwich",
                      "Hongkong",
                      "Iceland",
                      "Indian/Antananarivo",
                      "Indian/Chagos",
                      "Indian/Christmas",
                      "Indian/Cocos",
                      "Indian/Comoro",
                      "Indian/Kerguelen",
                      "Indian/Mahe",
                      "Indian/Maldives",
                      "Indian/Mauritius",
                      "Indian/Mayotte",
                      "Indian/Reunion",
                      "Iran",
                      "Israel",
                      "Jamaica",
                      "Japan",
                      "Kwajalein",
                      "Libya",
                      "MET",
                      "MST7MDT",
                      "Mexico/BajaNorte",
                      "Mexico/BajaSur",
                      "Mexico/General",
                      "NZ",
                      "NZ-CHAT",
                      "Navajo",
                      "PRC",
                      "PST8PDT",
                      "Pacific/Apia",
                      "Pacific/Auckland",
                      "Pacific/Bougainville",
                      "Pacific/Chatham",
                      "Pacific/Chuuk",
                      "Pacific/Easter",
                      "Pacific/Efate",
                      "Pacific/Enderbury",
                      "Pacific/Fakaofo",
                      "Pacific/Fiji",
                      "Pacific/Funafuti",
                      "Pacific/Galapagos",
                      "Pacific/Gambier",
                      "Pacific/Guadalcanal",
                      "Pacific/Guam",
                      "Pacific/Honolulu",
                      "Pacific/Johnston",
                      "Pacific/Kanton",
                      "Pacific/Kiritimati",
                      "Pacific/Kosrae",
                      "Pacific/Kwajalein",
                      "Pacific/Majuro",
                      "Pacific/Marquesas",
                      "Pacific/Midway",
                      "Pacific/Nauru",
                      "Pacific/Niue",
                      "Pacific/Norfolk",
                      "Pacific/Noumea",
                      "Pacific/Pago_Pago",
                      "Pacific/Palau",
                      "Pacific/Pitcairn",
                      "Pacific/Pohnpei",
                      "Pacific/Ponape",
                      "Pacific/Port_Moresby",
                      "Pacific/Rarotonga",
                      "Pacific/Saipan",
                      "Pacific/Samoa",
                      "Pacific/Tahiti",
                      "Pacific/Tarawa",
                      "Pacific/Tongatapu",
                      "Pacific/Truk",
                      "Pacific/Wake",
                      "Pacific/Wallis",
                      "Pacific/Yap",
                      "Poland",
                      "Portugal",
                      "ROK",
                      "Singapore",
                      "SystemV/AST4",
                      "SystemV/AST4ADT",
                      "SystemV/CST6",
                      "SystemV/CST6CDT",
                      "SystemV/EST5",
                      "SystemV/EST5EDT",
                      "SystemV/HST10",
                      "SystemV/MST7",
                      "SystemV/MST7MDT",
                      "SystemV/PST8",
                      "SystemV/PST8PDT",
                      "SystemV/YST9",
                      "SystemV/YST9YDT",
                      "Turkey",
                      "UCT",
                      "US/Alaska",
                      "US/Aleutian",
                      "US/Arizona",
                      "US/Central",
                      "US/East-Indiana",
                      "US/Eastern",
                      "US/Hawaii",
                      "US/Indiana-Starke",
                      "US/Michigan",
                      "US/Mountain",
                      "US/Pacific",
                      "US/Samoa",
                      "UTC",
                      "Universal",
                      "W-SU",
                      "WET",
                      "Zulu",
                      "EST",
                      "HST",
                      "MST",
                      "ACT",
                      "AET",
                      "AGT",
                      "ART",
                      "AST",
                      "BET",
                      "BST",
                      "CAT",
                      "CNT",
                      "CST",
                      "CTT",
                      "EAT",
                      "ECT",
                      "IET",
                      "IST",
                      "JST",
                      "MIT",
                      "NET",
                      "NST",
                      "PLT",
                      "PNT",
                      "PRT",
                      "PST",
                      "SST",
                      "VST"
                    ]
                  },
                  "frequency": {
                    "description": "Frequency settings for the scheduled job.",
                    "$ref": "#/components/schemas/FrequencyInput"
                  },
                  "recipient_details": {
                    "description": "Recipients of the scheduled job notifications. Add the GUID or name of the ThoughtSpot users or groups as recipients in the `principals` array. If a recipient is not a ThoughtSpot user, specify email address.",
                    "$ref": "#/components/schemas/RecipientDetailsInput"
                  }
                },
                "required": [
                  "name",
                  "description",
                  "metadata_type",
                  "metadata_identifier",
                  "time_zone",
                  "recipient_details"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Common successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseSchedule"
                }
              }
            }
          },
          "201": {
            "description": "Common error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseSchedule"
                }
              }
            }
          },
          "400": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/schedules/{schedule_identifier}/delete": {
      "post": {
        "operationId": "deleteSchedule",
        "description": "Deletes a scheduled job. <br/>  <span class=\"since-beta-tag\">Version: 9.4.0.cl or later</span>",
        "tags": [
          "Schedules",
          "9.4.0.cl"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "schedule_identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique ID or name of the scheduled job."
          }
        ],
        "responses": {
          "200": {
            "description": "Common successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "201": {
            "description": "Common error response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/schedules/search": {
      "post": {
        "operationId": "searchSchedules",
        "description": "Search Schedules <br/>  <span class=\"since-beta-tag\">Version: 9.4.0.cl or later</span>",
        "tags": [
          "Schedules",
          "9.4.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata": {
                    "description": "Metadata objects associated with the scheduled jobs.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/MetadataInput"
                    }
                  },
                  "record_offset": {
                    "description": "The starting record number from where the records should be included.",
                    "type": "integer",
                    "format": "int32"
                  },
                  "record_size": {
                    "description": "The number of records that should be included.",
                    "type": "integer",
                    "format": "int32"
                  },
                  "sort_options": {
                    "description": "Sort options.",
                    "$ref": "#/components/schemas/SortingOptions"
                  },
                  "history_runs_options": {
                    "description": "Options while fetching history runs for the schedule.",
                    "$ref": "#/components/schemas/ScheduleHistoryRunsOptionsInput"
                  },
                  "schedule_identifiers": {
                    "description": "unique ID or name of the Schedule",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Common successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResponseSchedule"
                  }
                }
              }
            }
          },
          "201": {
            "description": "Common error response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResponseSchedule"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/schedules/{schedule_identifier}/update": {
      "post": {
        "operationId": "updateSchedule",
        "description": "Update schedule. <br/>  <span class=\"since-beta-tag\">Version: 9.4.0.cl or later</span>",
        "tags": [
          "Schedules",
          "9.4.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of the scheduled job.",
                    "type": "string"
                  },
                  "description": {
                    "description": "Description of the scheduled job.",
                    "type": "string"
                  },
                  "metadata_type": {
                    "description": "Type of metadata object.",
                    "type": "string",
                    "enum": [
                      "LIVEBOARD"
                    ]
                  },
                  "metadata_identifier": {
                    "description": "Unique ID or name of the metadata object.",
                    "type": "string"
                  },
                  "file_format": {
                    "description": "Export file format.",
                    "type": "string",
                    "enum": [
                      "CSV",
                      "PDF"
                    ]
                  },
                  "liveboard_options": {
                    "description": "Options to specify the details of a Liveboard.",
                    "$ref": "#/components/schemas/LiveboardOptionsInput"
                  },
                  "pdf_options": {
                    "description": "Options for PDF export.",
                    "$ref": "#/components/schemas/SchedulesPdfOptionsInput"
                  },
                  "time_zone": {
                    "description": "Time zone",
                    "type": "string",
                    "enum": [
                      "Africa/Abidjan",
                      "Africa/Accra",
                      "Africa/Addis_Ababa",
                      "Africa/Algiers",
                      "Africa/Asmara",
                      "Africa/Asmera",
                      "Africa/Bamako",
                      "Africa/Bangui",
                      "Africa/Banjul",
                      "Africa/Bissau",
                      "Africa/Blantyre",
                      "Africa/Brazzaville",
                      "Africa/Bujumbura",
                      "Africa/Cairo",
                      "Africa/Casablanca",
                      "Africa/Ceuta",
                      "Africa/Conakry",
                      "Africa/Dakar",
                      "Africa/Dar_es_Salaam",
                      "Africa/Djibouti",
                      "Africa/Douala",
                      "Africa/El_Aaiun",
                      "Africa/Freetown",
                      "Africa/Gaborone",
                      "Africa/Harare",
                      "Africa/Johannesburg",
                      "Africa/Juba",
                      "Africa/Kampala",
                      "Africa/Khartoum",
                      "Africa/Kigali",
                      "Africa/Kinshasa",
                      "Africa/Lagos",
                      "Africa/Libreville",
                      "Africa/Lome",
                      "Africa/Luanda",
                      "Africa/Lubumbashi",
                      "Africa/Lusaka",
                      "Africa/Malabo",
                      "Africa/Maputo",
                      "Africa/Maseru",
                      "Africa/Mbabane",
                      "Africa/Mogadishu",
                      "Africa/Monrovia",
                      "Africa/Nairobi",
                      "Africa/Ndjamena",
                      "Africa/Niamey",
                      "Africa/Nouakchott",
                      "Africa/Ouagadougou",
                      "Africa/Porto-Novo",
                      "Africa/Sao_Tome",
                      "Africa/Timbuktu",
                      "Africa/Tripoli",
                      "Africa/Tunis",
                      "Africa/Windhoek",
                      "America/Adak",
                      "America/Anchorage",
                      "America/Anguilla",
                      "America/Antigua",
                      "America/Araguaina",
                      "America/Argentina/Buenos_Aires",
                      "America/Argentina/Catamarca",
                      "America/Argentina/ComodRivadavia",
                      "America/Argentina/Cordoba",
                      "America/Argentina/Jujuy",
                      "America/Argentina/La_Rioja",
                      "America/Argentina/Mendoza",
                      "America/Argentina/Rio_Gallegos",
                      "America/Argentina/Salta",
                      "America/Argentina/San_Juan",
                      "America/Argentina/San_Luis",
                      "America/Argentina/Tucuman",
                      "America/Argentina/Ushuaia",
                      "America/Aruba",
                      "America/Asuncion",
                      "America/Atikokan",
                      "America/Atka",
                      "America/Bahia",
                      "America/Bahia_Banderas",
                      "America/Barbados",
                      "America/Belem",
                      "America/Belize",
                      "America/Blanc-Sablon",
                      "America/Boa_Vista",
                      "America/Bogota",
                      "America/Boise",
                      "America/Buenos_Aires",
                      "America/Cambridge_Bay",
                      "America/Campo_Grande",
                      "America/Cancun",
                      "America/Caracas",
                      "America/Catamarca",
                      "America/Cayenne",
                      "America/Cayman",
                      "America/Chicago",
                      "America/Chihuahua",
                      "America/Coral_Harbour",
                      "America/Cordoba",
                      "America/Costa_Rica",
                      "America/Creston",
                      "America/Cuiaba",
                      "America/Curacao",
                      "America/Danmarkshavn",
                      "America/Dawson",
                      "America/Dawson_Creek",
                      "America/Denver",
                      "America/Detroit",
                      "America/Dominica",
                      "America/Edmonton",
                      "America/Eirunepe",
                      "America/El_Salvador",
                      "America/Ensenada",
                      "America/Fort_Nelson",
                      "America/Fort_Wayne",
                      "America/Fortaleza",
                      "America/Glace_Bay",
                      "America/Godthab",
                      "America/Goose_Bay",
                      "America/Grand_Turk",
                      "America/Grenada",
                      "America/Guadeloupe",
                      "America/Guatemala",
                      "America/Guayaquil",
                      "America/Guyana",
                      "America/Halifax",
                      "America/Havana",
                      "America/Hermosillo",
                      "America/Indiana/Indianapolis",
                      "America/Indiana/Knox",
                      "America/Indiana/Marengo",
                      "America/Indiana/Petersburg",
                      "America/Indiana/Tell_City",
                      "America/Indiana/Vevay",
                      "America/Indiana/Vincennes",
                      "America/Indiana/Winamac",
                      "America/Indianapolis",
                      "America/Inuvik",
                      "America/Iqaluit",
                      "America/Jamaica",
                      "America/Jujuy",
                      "America/Juneau",
                      "America/Kentucky/Louisville",
                      "America/Kentucky/Monticello",
                      "America/Knox_IN",
                      "America/Kralendijk",
                      "America/La_Paz",
                      "America/Lima",
                      "America/Los_Angeles",
                      "America/Louisville",
                      "America/Lower_Princes",
                      "America/Maceio",
                      "America/Managua",
                      "America/Manaus",
                      "America/Marigot",
                      "America/Martinique",
                      "America/Matamoros",
                      "America/Mazatlan",
                      "America/Mendoza",
                      "America/Menominee",
                      "America/Merida",
                      "America/Metlakatla",
                      "America/Mexico_City",
                      "America/Miquelon",
                      "America/Moncton",
                      "America/Monterrey",
                      "America/Montevideo",
                      "America/Montreal",
                      "America/Montserrat",
                      "America/Nassau",
                      "America/New_York",
                      "America/Nipigon",
                      "America/Nome",
                      "America/Noronha",
                      "America/North_Dakota/Beulah",
                      "America/North_Dakota/Center",
                      "America/North_Dakota/New_Salem",
                      "America/Nuuk",
                      "America/Ojinaga",
                      "America/Panama",
                      "America/Pangnirtung",
                      "America/Paramaribo",
                      "America/Phoenix",
                      "America/Port-au-Prince",
                      "America/Port_of_Spain",
                      "America/Porto_Acre",
                      "America/Porto_Velho",
                      "America/Puerto_Rico",
                      "America/Punta_Arenas",
                      "America/Rainy_River",
                      "America/Rankin_Inlet",
                      "America/Recife",
                      "America/Regina",
                      "America/Resolute",
                      "America/Rio_Branco",
                      "America/Rosario",
                      "America/Santa_Isabel",
                      "America/Santarem",
                      "America/Santiago",
                      "America/Santo_Domingo",
                      "America/Sao_Paulo",
                      "America/Scoresbysund",
                      "America/Shiprock",
                      "America/Sitka",
                      "America/St_Barthelemy",
                      "America/St_Johns",
                      "America/St_Kitts",
                      "America/St_Lucia",
                      "America/St_Thomas",
                      "America/St_Vincent",
                      "America/Swift_Current",
                      "America/Tegucigalpa",
                      "America/Thule",
                      "America/Thunder_Bay",
                      "America/Tijuana",
                      "America/Toronto",
                      "America/Tortola",
                      "America/Vancouver",
                      "America/Virgin",
                      "America/Whitehorse",
                      "America/Winnipeg",
                      "America/Yakutat",
                      "America/Yellowknife",
                      "Antarctica/Casey",
                      "Antarctica/Davis",
                      "Antarctica/DumontDUrville",
                      "Antarctica/Macquarie",
                      "Antarctica/Mawson",
                      "Antarctica/McMurdo",
                      "Antarctica/Palmer",
                      "Antarctica/Rothera",
                      "Antarctica/South_Pole",
                      "Antarctica/Syowa",
                      "Antarctica/Troll",
                      "Antarctica/Vostok",
                      "Arctic/Longyearbyen",
                      "Asia/Aden",
                      "Asia/Almaty",
                      "Asia/Amman",
                      "Asia/Anadyr",
                      "Asia/Aqtau",
                      "Asia/Aqtobe",
                      "Asia/Ashgabat",
                      "Asia/Ashkhabad",
                      "Asia/Atyrau",
                      "Asia/Baghdad",
                      "Asia/Bahrain",
                      "Asia/Baku",
                      "Asia/Bangkok",
                      "Asia/Barnaul",
                      "Asia/Beirut",
                      "Asia/Bishkek",
                      "Asia/Brunei",
                      "Asia/Calcutta",
                      "Asia/Chita",
                      "Asia/Choibalsan",
                      "Asia/Chongqing",
                      "Asia/Chungking",
                      "Asia/Colombo",
                      "Asia/Dacca",
                      "Asia/Damascus",
                      "Asia/Dhaka",
                      "Asia/Dili",
                      "Asia/Dubai",
                      "Asia/Dushanbe",
                      "Asia/Famagusta",
                      "Asia/Gaza",
                      "Asia/Harbin",
                      "Asia/Hebron",
                      "Asia/Ho_Chi_Minh",
                      "Asia/Hong_Kong",
                      "Asia/Hovd",
                      "Asia/Irkutsk",
                      "Asia/Istanbul",
                      "Asia/Jakarta",
                      "Asia/Jayapura",
                      "Asia/Jerusalem",
                      "Asia/Kabul",
                      "Asia/Kamchatka",
                      "Asia/Karachi",
                      "Asia/Kashgar",
                      "Asia/Kathmandu",
                      "Asia/Katmandu",
                      "Asia/Khandyga",
                      "Asia/Kolkata",
                      "Asia/Krasnoyarsk",
                      "Asia/Kuala_Lumpur",
                      "Asia/Kuching",
                      "Asia/Kuwait",
                      "Asia/Macao",
                      "Asia/Macau",
                      "Asia/Magadan",
                      "Asia/Makassar",
                      "Asia/Manila",
                      "Asia/Muscat",
                      "Asia/Nicosia",
                      "Asia/Novokuznetsk",
                      "Asia/Novosibirsk",
                      "Asia/Omsk",
                      "Asia/Oral",
                      "Asia/Phnom_Penh",
                      "Asia/Pontianak",
                      "Asia/Pyongyang",
                      "Asia/Qatar",
                      "Asia/Qostanay",
                      "Asia/Qyzylorda",
                      "Asia/Rangoon",
                      "Asia/Riyadh",
                      "Asia/Saigon",
                      "Asia/Sakhalin",
                      "Asia/Samarkand",
                      "Asia/Seoul",
                      "Asia/Shanghai",
                      "Asia/Singapore",
                      "Asia/Srednekolymsk",
                      "Asia/Taipei",
                      "Asia/Tashkent",
                      "Asia/Tbilisi",
                      "Asia/Tehran",
                      "Asia/Tel_Aviv",
                      "Asia/Thimbu",
                      "Asia/Thimphu",
                      "Asia/Tokyo",
                      "Asia/Tomsk",
                      "Asia/Ujung_Pandang",
                      "Asia/Ulaanbaatar",
                      "Asia/Ulan_Bator",
                      "Asia/Urumqi",
                      "Asia/Ust-Nera",
                      "Asia/Vientiane",
                      "Asia/Vladivostok",
                      "Asia/Yakutsk",
                      "Asia/Yangon",
                      "Asia/Yekaterinburg",
                      "Asia/Yerevan",
                      "Atlantic/Azores",
                      "Atlantic/Bermuda",
                      "Atlantic/Canary",
                      "Atlantic/Cape_Verde",
                      "Atlantic/Faeroe",
                      "Atlantic/Faroe",
                      "Atlantic/Jan_Mayen",
                      "Atlantic/Madeira",
                      "Atlantic/Reykjavik",
                      "Atlantic/South_Georgia",
                      "Atlantic/St_Helena",
                      "Atlantic/Stanley",
                      "Australia/ACT",
                      "Australia/Adelaide",
                      "Australia/Brisbane",
                      "Australia/Broken_Hill",
                      "Australia/Canberra",
                      "Australia/Currie",
                      "Australia/Darwin",
                      "Australia/Eucla",
                      "Australia/Hobart",
                      "Australia/LHI",
                      "Australia/Lindeman",
                      "Australia/Lord_Howe",
                      "Australia/Melbourne",
                      "Australia/NSW",
                      "Australia/North",
                      "Australia/Perth",
                      "Australia/Queensland",
                      "Australia/South",
                      "Australia/Sydney",
                      "Australia/Tasmania",
                      "Australia/Victoria",
                      "Australia/West",
                      "Australia/Yancowinna",
                      "Brazil/Acre",
                      "Brazil/DeNoronha",
                      "Brazil/East",
                      "Brazil/West",
                      "CET",
                      "CST6CDT",
                      "Canada/Atlantic",
                      "Canada/Central",
                      "Canada/Eastern",
                      "Canada/Mountain",
                      "Canada/Newfoundland",
                      "Canada/Pacific",
                      "Canada/Saskatchewan",
                      "Canada/Yukon",
                      "Chile/Continental",
                      "Chile/EasterIsland",
                      "Cuba",
                      "EET",
                      "EST5EDT",
                      "Egypt",
                      "Eire",
                      "Etc/GMT",
                      "Etc/GMT+0",
                      "Etc/GMT+1",
                      "Etc/GMT+10",
                      "Etc/GMT+11",
                      "Etc/GMT+12",
                      "Etc/GMT+2",
                      "Etc/GMT+3",
                      "Etc/GMT+4",
                      "Etc/GMT+5",
                      "Etc/GMT+6",
                      "Etc/GMT+7",
                      "Etc/GMT+8",
                      "Etc/GMT+9",
                      "Etc/GMT-0",
                      "Etc/GMT-1",
                      "Etc/GMT-10",
                      "Etc/GMT-11",
                      "Etc/GMT-12",
                      "Etc/GMT-13",
                      "Etc/GMT-14",
                      "Etc/GMT-2",
                      "Etc/GMT-3",
                      "Etc/GMT-4",
                      "Etc/GMT-5",
                      "Etc/GMT-6",
                      "Etc/GMT-7",
                      "Etc/GMT-8",
                      "Etc/GMT-9",
                      "Etc/GMT0",
                      "Etc/Greenwich",
                      "Etc/UCT",
                      "Etc/UTC",
                      "Etc/Universal",
                      "Etc/Zulu",
                      "Europe/Amsterdam",
                      "Europe/Andorra",
                      "Europe/Astrakhan",
                      "Europe/Athens",
                      "Europe/Belfast",
                      "Europe/Belgrade",
                      "Europe/Berlin",
                      "Europe/Bratislava",
                      "Europe/Brussels",
                      "Europe/Bucharest",
                      "Europe/Budapest",
                      "Europe/Busingen",
                      "Europe/Chisinau",
                      "Europe/Copenhagen",
                      "Europe/Dublin",
                      "Europe/Gibraltar",
                      "Europe/Guernsey",
                      "Europe/Helsinki",
                      "Europe/Isle_of_Man",
                      "Europe/Istanbul",
                      "Europe/Jersey",
                      "Europe/Kaliningrad",
                      "Europe/Kiev",
                      "Europe/Kirov",
                      "Europe/Kyiv",
                      "Europe/Lisbon",
                      "Europe/Ljubljana",
                      "Europe/London",
                      "Europe/Luxembourg",
                      "Europe/Madrid",
                      "Europe/Malta",
                      "Europe/Mariehamn",
                      "Europe/Minsk",
                      "Europe/Monaco",
                      "Europe/Moscow",
                      "Europe/Nicosia",
                      "Europe/Oslo",
                      "Europe/Paris",
                      "Europe/Podgorica",
                      "Europe/Prague",
                      "Europe/Riga",
                      "Europe/Rome",
                      "Europe/Samara",
                      "Europe/San_Marino",
                      "Europe/Sarajevo",
                      "Europe/Saratov",
                      "Europe/Simferopol",
                      "Europe/Skopje",
                      "Europe/Sofia",
                      "Europe/Stockholm",
                      "Europe/Tallinn",
                      "Europe/Tirane",
                      "Europe/Tiraspol",
                      "Europe/Ulyanovsk",
                      "Europe/Uzhgorod",
                      "Europe/Vaduz",
                      "Europe/Vatican",
                      "Europe/Vienna",
                      "Europe/Vilnius",
                      "Europe/Volgograd",
                      "Europe/Warsaw",
                      "Europe/Zagreb",
                      "Europe/Zaporozhye",
                      "Europe/Zurich",
                      "GB",
                      "GB-Eire",
                      "GMT",
                      "GMT0",
                      "Greenwich",
                      "Hongkong",
                      "Iceland",
                      "Indian/Antananarivo",
                      "Indian/Chagos",
                      "Indian/Christmas",
                      "Indian/Cocos",
                      "Indian/Comoro",
                      "Indian/Kerguelen",
                      "Indian/Mahe",
                      "Indian/Maldives",
                      "Indian/Mauritius",
                      "Indian/Mayotte",
                      "Indian/Reunion",
                      "Iran",
                      "Israel",
                      "Jamaica",
                      "Japan",
                      "Kwajalein",
                      "Libya",
                      "MET",
                      "MST7MDT",
                      "Mexico/BajaNorte",
                      "Mexico/BajaSur",
                      "Mexico/General",
                      "NZ",
                      "NZ-CHAT",
                      "Navajo",
                      "PRC",
                      "PST8PDT",
                      "Pacific/Apia",
                      "Pacific/Auckland",
                      "Pacific/Bougainville",
                      "Pacific/Chatham",
                      "Pacific/Chuuk",
                      "Pacific/Easter",
                      "Pacific/Efate",
                      "Pacific/Enderbury",
                      "Pacific/Fakaofo",
                      "Pacific/Fiji",
                      "Pacific/Funafuti",
                      "Pacific/Galapagos",
                      "Pacific/Gambier",
                      "Pacific/Guadalcanal",
                      "Pacific/Guam",
                      "Pacific/Honolulu",
                      "Pacific/Johnston",
                      "Pacific/Kanton",
                      "Pacific/Kiritimati",
                      "Pacific/Kosrae",
                      "Pacific/Kwajalein",
                      "Pacific/Majuro",
                      "Pacific/Marquesas",
                      "Pacific/Midway",
                      "Pacific/Nauru",
                      "Pacific/Niue",
                      "Pacific/Norfolk",
                      "Pacific/Noumea",
                      "Pacific/Pago_Pago",
                      "Pacific/Palau",
                      "Pacific/Pitcairn",
                      "Pacific/Pohnpei",
                      "Pacific/Ponape",
                      "Pacific/Port_Moresby",
                      "Pacific/Rarotonga",
                      "Pacific/Saipan",
                      "Pacific/Samoa",
                      "Pacific/Tahiti",
                      "Pacific/Tarawa",
                      "Pacific/Tongatapu",
                      "Pacific/Truk",
                      "Pacific/Wake",
                      "Pacific/Wallis",
                      "Pacific/Yap",
                      "Poland",
                      "Portugal",
                      "ROK",
                      "Singapore",
                      "SystemV/AST4",
                      "SystemV/AST4ADT",
                      "SystemV/CST6",
                      "SystemV/CST6CDT",
                      "SystemV/EST5",
                      "SystemV/EST5EDT",
                      "SystemV/HST10",
                      "SystemV/MST7",
                      "SystemV/MST7MDT",
                      "SystemV/PST8",
                      "SystemV/PST8PDT",
                      "SystemV/YST9",
                      "SystemV/YST9YDT",
                      "Turkey",
                      "UCT",
                      "US/Alaska",
                      "US/Aleutian",
                      "US/Arizona",
                      "US/Central",
                      "US/East-Indiana",
                      "US/Eastern",
                      "US/Hawaii",
                      "US/Indiana-Starke",
                      "US/Michigan",
                      "US/Mountain",
                      "US/Pacific",
                      "US/Samoa",
                      "UTC",
                      "Universal",
                      "W-SU",
                      "WET",
                      "Zulu",
                      "EST",
                      "HST",
                      "MST",
                      "ACT",
                      "AET",
                      "AGT",
                      "ART",
                      "AST",
                      "BET",
                      "BST",
                      "CAT",
                      "CNT",
                      "CST",
                      "CTT",
                      "EAT",
                      "ECT",
                      "IET",
                      "IST",
                      "JST",
                      "MIT",
                      "NET",
                      "NST",
                      "PLT",
                      "PNT",
                      "PRT",
                      "PST",
                      "SST",
                      "VST"
                    ]
                  },
                  "frequency": {
                    "description": "Frequency of the scheduled job run.",
                    "$ref": "#/components/schemas/FrequencyInput"
                  },
                  "recipient_details": {
                    "description": "Recipients of the scheduled job notifications. You can add the ID or name of the ThoughtSpot users or groups as recipients in the `principals` array. If a recipient is not a ThoughtSpot user, specify email address.",
                    "$ref": "#/components/schemas/RecipientDetailsInput"
                  },
                  "status": {
                    "description": "Status of the schedule",
                    "type": "string",
                    "enum": [
                      "ACTIVE",
                      "PAUSE"
                    ]
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "schedule_identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique ID or name of the schedule."
          }
        ],
        "responses": {
          "200": {
            "description": "Common successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "201": {
            "description": "Common error response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/customization/custom-actions": {
      "post": {
        "operationId": "createCustomAction",
        "description": " <span class=\"since-beta-tag\">Version: 9.6.0.cl or later</span>",
        "tags": [
          "Custom Action",
          "9.6.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of the custom action. The custom action name must be unique.",
                    "type": "string"
                  },
                  "action_details": {
                    "description": "Action details includes `Type` and Configuration data for Custom Actions, either Callback or URL is required.",
                    "$ref": "#/components/schemas/Action_Details_Input_Create"
                  },
                  "associate_metadata": {
                    "description": "Metadata objects to which the custom action needs to be associated.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Associate_Metadata_Input_Create"
                    }
                  },
                  "default_action_config": {
                    "description": "Default Custom action configuration. This includes if the custom action is available on all visualizations. By default, a custom action is added to all visualizations and Answers.",
                    "$ref": "#/components/schemas/Default_Action_Config_Input_Create"
                  },
                  "group_identifiers": {
                    "description": "Unique ID or name of the groups that can view and access the custom action.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "name",
                  "action_details"
                ]
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "Common successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCustomAction"
                }
              }
            }
          },
          "201": {
            "description": "Common error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCustomAction"
                }
              }
            }
          },
          "400": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/customization/custom-actions/{custom_action_identifier}/update": {
      "post": {
        "operationId": "updateCustomAction",
        "description": " <span class=\"since-beta-tag\">Version: 9.6.0.cl or later</span>",
        "tags": [
          "Custom Action",
          "9.6.0.cl"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "action_details": {
                    "description": "Action details includes `Type` and Configuration for Custom Actions, either Callback or URL is required.",
                    "$ref": "#/components/schemas/Action_Details_Input"
                  },
                  "associate_metadata": {
                    "description": "Metadata objects to which the custom action needs to be associated.",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Associate_Metadata_Input"
                    }
                  },
                  "default_action_config": {
                    "description": "Default Custom action configuration. This includes if the custom action available on visualizations and Answers. By default, a custom action is added to all visualizations and Answers.",
                    "$ref": "#/components/schemas/Default_Action_Config_Input"
                  },
                  "group_identifiers": {
                    "description": "Unique ID or name of the groups that can view and access the custom action.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "name": {
                    "description": "Name of the custom action. The custom action name must be unique.",
                    "type": "string"
                  },
                  "operation": {
                    "description": "Type of update operation. Default operation type is ADD",
                    "default": "ADD",
                    "type": "string",
                    "enum": [
                      "ADD",
                      "REMOVE"
                    ]
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "custom_action_identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique ID or name of the custom action."
          }
        ],
        "responses": {
          "200": {
            "description": "Common successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "201": {
            "description": "Common error response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rest/2.0/customization/custom-actions/{custom_action_identifier}/delete": {
      "post": {
        "operationId": "deleteCustomAction",
        "description": " <span class=\"since-beta-tag\">Version: 9.6.0.cl or later</span>",
        "tags": [
          "Custom Action",
          "9.6.0.cl"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "custom_action_identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique ID or name of the custom action."
          }
        ],
        "responses": {
          "200": {
            "description": "Common successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "201": {
            "description": "Common error response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "object"
          }
        }
      },
      "User": {
        "type": "object",
        "required": [
          "id",
          "name",
          "display_name",
          "visibility"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the user."
          },
          "name": {
            "type": "string",
            "description": "Name of the user."
          },
          "display_name": {
            "type": "string",
            "description": "Display name of the user."
          },
          "visibility": {
            "type": "string",
            "enum": [
              "SHARABLE",
              "NON_SHARABLE"
            ],
            "description": "Visibility of the users. The `SHARABLE` property makes a user visible to other users and group, who can share objects with the user."
          },
          "author_id": {
            "type": "string",
            "description": "Unique identifier of author of the user."
          },
          "can_change_password": {
            "type": "boolean",
            "description": "Defines whether the user can change their password."
          },
          "complete_detail": {
            "type": "boolean",
            "description": "Defines whether the response has complete detail of the user."
          },
          "creation_time_in_millis": {
            "type": "number",
            "format": "float",
            "description": "Creation time of the user in milliseconds."
          },
          "current_org": {
            "$ref": "#/components/schemas/Org",
            "description": "Current logged-in Org of the user."
          },
          "deleted": {
            "type": "boolean",
            "description": "Indicates whether the user is deleted."
          },
          "deprecated": {
            "type": "boolean",
            "description": "Indicates whether the user is deprecated."
          },
          "account_type": {
            "type": "string",
            "enum": [
              "LOCAL_USER",
              "LDAP_USER",
              "SAML_USER",
              "OIDC_USER",
              "REMOTE_USER"
            ],
            "description": "Type of the user account."
          },
          "account_status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "INACTIVE",
              "EXPIRED",
              "LOCKED",
              "PENDING"
            ],
            "description": "Status of the user account."
          },
          "email": {
            "type": "string",
            "description": "Email of the user."
          },
          "expiration_time_in_millis": {
            "type": "number",
            "format": "float",
            "description": "Expiration time of the user in milliseconds."
          },
          "external": {
            "type": "boolean",
            "description": "Indicates whether the user is external."
          },
          "favorite_metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FavoriteMetadataItem"
            },
            "description": "Metadata objects to add to the users' favorites list."
          },
          "first_login_time_in_millis": {
            "type": "number",
            "format": "float",
            "description": "Timestamp of the first login session of the user in milliseconds."
          },
          "group_mask": {
            "type": "integer",
            "format": "int32",
            "description": "Group mask of the user."
          },
          "hidden": {
            "type": "boolean",
            "description": "Indicates whether the user is hidden."
          },
          "home_liveboard": {
            "$ref": "#/components/schemas/Object_ID_And_Name",
            "description": "Unique ID or name of the default Liveboard assigned to the user."
          },
          "incomplete_details": {
            "type": "object",
            "description": "Incomplete details of user if any present."
          },
          "is_first_login": {
            "type": "boolean",
            "description": "Indicates whether it is first login of the user."
          },
          "modification_time_in_millis": {
            "type": "number",
            "format": "float",
            "description": "Last modified time of the user in milliseconds."
          },
          "modifier_id": {
            "type": "string",
            "description": "Unique identifier of modifier of the user."
          },
          "notify_on_share": {
            "type": "boolean",
            "description": "User preference for receiving email notifications on shared Answers or Liveboard."
          },
          "onboarding_experience_completed": {
            "type": "boolean",
            "description": "The user preference for turning off the onboarding experience."
          },
          "orgs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Org"
            },
            "description": "Orgs to which the user belongs."
          },
          "owner_id": {
            "type": "string",
            "description": "Unique identifier of owner of the user."
          },
          "parent_type": {
            "type": "string",
            "enum": [
              "USER",
              "GROUP"
            ],
            "description": "Parent type of the user."
          },
          "privileges": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Privileges which are assigned to the user."
          },
          "show_onboarding_experience": {
            "type": "boolean",
            "description": "User's preference to revisit the new user onboarding experience."
          },
          "super_user": {
            "type": "boolean",
            "description": "Indicates whether the user is a super user."
          },
          "system_user": {
            "type": "boolean",
            "description": "Indicates whether the user is a system user."
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Object_ID_And_Name"
            },
            "description": "Tags associated with the user."
          },
          "tenant_id": {
            "type": "string",
            "description": "Unique identifier of tenant of the user."
          },
          "user_groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Object_ID_And_Name"
            },
            "description": "Groups to which the user is assigned."
          },
          "user_inherited_groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Object_ID_And_Name"
            },
            "description": "Inherited User Groups which the user is part of."
          },
          "welcome_email_sent": {
            "type": "boolean",
            "description": "Indicates whether welcome email is sent for the user."
          },
          "org_privileges": {
            "type": "object",
            "description": "Privileges which are assigned to the user with org."
          },
          "preferred_locale": {
            "type": "string",
            "description": "Locale for the user."
          },
          "extended_properties": {
            "type": "object",
            "description": "Properties for the user"
          },
          "extended_preferences": {
            "type": "object",
            "description": "Preferences for the user"
          }
        }
      },
      "FavoriteMetadataInput": {
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string",
            "description": "Unique ID or name of the metadata object."
          },
          "type": {
            "type": "string",
            "enum": [
              "LIVEBOARD",
              "ANSWER"
            ],
            "description": "Type of metadata object."
          }
        }
      },
      "ImportUser": {
        "type": "object",
        "required": [
          "user_identifier",
          "display_name"
        ],
        "properties": {
          "user_identifier": {
            "type": "string",
            "description": "Unique ID or name of the user."
          },
          "display_name": {
            "type": "string",
            "description": "Display name of the user."
          },
          "password": {
            "type": "string",
            "description": "Password of the user."
          },
          "account_type": {
            "type": "string",
            "enum": [
              "LOCAL_USER",
              "LDAP_USER",
              "SAML_USER",
              "OIDC_USER",
              "REMOTE_USER"
            ],
            "default": "LOCAL_USER",
            "description": "Type of the user account."
          },
          "account_status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "INACTIVE",
              "EXPIRED",
              "LOCKED",
              "PENDING"
            ],
            "default": "ACTIVE",
            "description": "Status of the user account."
          },
          "email": {
            "type": "string",
            "description": "Email address of the user."
          },
          "org_identifiers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "ID or name of the Orgs to which the user belongs."
          },
          "group_identifiers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "ID or name of the groups to which the user belongs."
          },
          "visibility": {
            "type": "string",
            "enum": [
              "SHARABLE",
              "NON_SHARABLE"
            ],
            "description": "Visibility of the users. The SHARABLE property makes a user visible to other users and group, who can share objects with the user."
          },
          "notify_on_share": {
            "type": "boolean",
            "default": true,
            "description": "Notify user when other users or groups share metadata objects"
          },
          "show_onboarding_experience": {
            "type": "boolean",
            "description": "Show or hide the new user onboarding walkthroughs"
          },
          "onboarding_experience_completed": {
            "type": "boolean",
            "description": "Revisit the new user onboarding walkthroughs"
          },
          "home_liveboard_identifier": {
            "type": "string",
            "description": "Unique ID or name of the default Liveboard assigned to the user."
          },
          "favorite_metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FavoriteMetadataInput"
            },
            "description": "Metadata objects to add to the user's favorites list."
          }
        }
      },
      "ImportUsersResponse": {
        "type": "object",
        "properties": {
          "users_added": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImportUserType"
            }
          },
          "users_updated": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImportUserType"
            }
          },
          "users_deleted": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImportUserType"
            }
          }
        }
      },
      "SortOptions": {
        "type": "object",
        "properties": {
          "field_name": {
            "type": "string",
            "enum": [
              "NAME",
              "DISPLAY_NAME",
              "AUTHOR",
              "CREATED",
              "MODIFIED"
            ],
            "description": "Name of the field to apply the sort on."
          },
          "order": {
            "type": "string",
            "enum": [
              "ASC",
              "DESC"
            ],
            "description": "Sort order : ASC(Ascending) or DESC(Descending)."
          }
        },
        "description": "Sort options."
      },
      "UserGroup": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "VisualizationIdentifiersInput": {
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string",
            "description": "Unique ID or name of the visualization."
          }
        }
      },
      "MetadataTypeInput": {
        "type": "object",
        "required": [
          "identifier"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "LIVEBOARD",
              "ANSWER",
              "LOGICAL_TABLE",
              "LOGICAL_COLUMN",
              "CONNECTION",
              "TAG",
              "USER",
              "USER_GROUP",
              "LOGICAL_RELATIONSHIP"
            ],
            "description": "Type of metadata (Optional when given identifier is ID)."
          },
          "identifier": {
            "type": "string",
            "description": "Unique ID or name of the metadata object."
          }
        },
        "description": "MetadataType InputType associated in the Product"
      },
      "ExportMetadataTypeInput": {
        "type": "object",
        "required": [
          "identifier"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "LIVEBOARD",
              "ANSWER",
              "LOGICAL_TABLE",
              "CONNECTION",
              "ACTION_OBJECT"
            ],
            "description": "Type of metadata (Optional when given identifier is ID)."
          },
          "identifier": {
            "type": "string",
            "description": "Unique ID or name of the metadata object."
          }
        },
        "description": "MetadataType InputType used in Export MetadataType API"
      },
      "DeleteMetadataTypeInput": {
        "type": "object",
        "required": [
          "identifier"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "LIVEBOARD",
              "ANSWER",
              "LOGICAL_TABLE",
              "LOGICAL_COLUMN",
              "LOGICAL_RELATIONSHIP"
            ],
            "description": "Type of metadata (Optional when given identifier is ID)."
          },
          "identifier": {
            "type": "string",
            "description": "Unique ID or name of the metadata object."
          }
        },
        "description": "MetadataType InputType used in Delete MetadataType API"
      },
      "PrincipalsInput": {
        "type": "object",
        "required": [
          "identifier"
        ],
        "properties": {
          "identifier": {
            "type": "string",
            "description": "Unique ID or name of the principal object such as a user or group."
          },
          "type": {
            "type": "string",
            "enum": [
              "USER",
              "USER_GROUP"
            ],
            "description": "Principal type."
          }
        }
      },
      "AuthorMetadataTypeInput": {
        "type": "object",
        "required": [
          "identifier"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "LIVEBOARD",
              "ANSWER",
              "LOGICAL_TABLE"
            ],
            "description": "Type of metadata."
          },
          "identifier": {
            "type": "string",
            "description": "Unique ID or name of the metadata object."
          }
        },
        "description": "MetadataType InputType used in Author API's"
      },
      "PermissionsMetadataTypeInput": {
        "type": "object",
        "required": [
          "identifier"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "LIVEBOARD",
              "ANSWER",
              "LOGICAL_TABLE",
              "LOGICAL_COLUMN",
              "CONNECTION"
            ],
            "description": "Type of metadata object."
          },
          "identifier": {
            "type": "string",
            "description": "Unique ID or name of the metadata object."
          }
        },
        "description": "MetadataType InputType used in Permission API's"
      },
      "SharePermissionsInput": {
        "type": "object",
        "required": [
          "principal",
          "share_mode"
        ],
        "properties": {
          "principal": {
            "$ref": "#/components/schemas/PrincipalsInput",
            "description": "Details of users or groups."
          },
          "share_mode": {
            "type": "string",
            "enum": [
              "READ_ONLY",
              "MODIFY",
              "NO_ACCESS"
            ],
            "description": "Type of access to the shared object"
          }
        }
      },
      "SearchDataResponse": {
        "type": "object",
        "required": [
          "contents"
        ],
        "properties": {
          "contents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AnswerContent"
            },
            "description": "Data content of metadata objects"
          }
        },
        "description": "Response format associated with the search data API."
      },
      "AnswerDataResponse": {
        "type": "object",
        "required": [
          "metadata_id",
          "metadata_name",
          "contents"
        ],
        "properties": {
          "metadata_id": {
            "type": "string",
            "description": "The unique identifier of the object"
          },
          "metadata_name": {
            "type": "string",
            "description": "Name of the metadata object"
          },
          "contents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AnswerContent"
            },
            "description": "Data content of metadata objects"
          }
        },
        "description": "Response format associated with fetch data api"
      },
      "LiveboardDataResponse": {
        "type": "object",
        "required": [
          "metadata_id",
          "metadata_name",
          "contents"
        ],
        "properties": {
          "metadata_id": {
            "type": "string",
            "description": "The unique identifier of the object"
          },
          "metadata_name": {
            "type": "string",
            "description": "Name of the metadata object"
          },
          "contents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LiveboardContent"
            },
            "description": "Data content of metadata objects"
          }
        }
      },
      "Org": {
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "The ID of the object."
          },
          "name": {
            "type": "string",
            "description": "Name of the object."
          }
        },
        "description": "The current Org context of the user."
      },
      "GenericInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "CustomActionMetadataTypeInput": {
        "type": "object",
        "required": [
          "identifier"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "VISUALIZATION",
              "ANSWER",
              "WORKSHEET"
            ],
            "description": "Type of metadata object."
          },
          "identifier": {
            "type": "string",
            "description": "Unique ID or name of the metadata object."
          }
        },
        "description": "MetadataType InputType used in Custom Action API's"
      },
      "Object_ID_And_Name": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the object."
          },
          "name": {
            "type": "string",
            "description": "Name of the object."
          }
        },
        "description": "The object representation with ID and Name."
      },
      "RiseSetter": {
        "type": "object",
        "required": [
          "field",
          "path"
        ],
        "properties": {
          "field": {
            "type": "string"
          },
          "path": {
            "type": "string"
          }
        }
      },
      "GetTokenResponse": {
        "type": "object",
        "required": [
          "token",
          "creation_time_in_millis",
          "expiration_time_in_millis",
          "valid_for_user_id",
          "valid_for_username"
        ],
        "properties": {
          "token": {
            "type": "string",
            "description": "Bearer auth token."
          },
          "creation_time_in_millis": {
            "type": "number",
            "format": "float",
            "description": "Token creation time in milliseconds."
          },
          "expiration_time_in_millis": {
            "type": "number",
            "format": "float",
            "description": "Token expiration time in milliseconds."
          },
          "valid_for_user_id": {
            "type": "string",
            "description": "Username to whom the token is issued."
          },
          "valid_for_username": {
            "type": "string",
            "description": "Unique identifier of the user to whom the token is issued."
          }
        }
      },
      "SystemInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the object"
          },
          "name": {
            "type": "string",
            "description": "Name of the cluster."
          },
          "release_version": {
            "type": "string",
            "description": "The release version of the cluster."
          },
          "time_zone": {
            "type": "string",
            "description": "The timezone of the cluster."
          },
          "locale": {
            "type": "string",
            "description": "The default locale of the cluster."
          },
          "date_format": {
            "type": "string",
            "description": "The default date format representation of the cluster."
          },
          "api_version": {
            "type": "string",
            "description": "The API version of the cluster."
          },
          "type": {
            "type": "string",
            "description": "The deployment type of the cluster."
          },
          "environment": {
            "type": "string",
            "description": "The deployed environment of the cluster."
          },
          "license": {
            "type": "string",
            "description": "The license applied to the cluster."
          },
          "date_time_format": {
            "type": "string",
            "description": "The default date time format representation of the cluster."
          },
          "time_format": {
            "type": "string",
            "description": "The default time format representation of the cluster."
          },
          "system_user_id": {
            "type": "string",
            "description": "The unique identifier of system user."
          },
          "super_user_id": {
            "type": "string",
            "description": "The unique identifier of super user."
          },
          "hidden_object_id": {
            "type": "string",
            "description": "The unique identifier of hidden object."
          },
          "system_group_id": {
            "type": "string",
            "description": "The unique identifier of system group."
          },
          "tsadmin_user_id": {
            "type": "string",
            "description": "The unique identifier of tsadmin user."
          },
          "admin_group_id": {
            "type": "string",
            "description": "The unique identifier of admin group."
          },
          "all_tables_connection_id": {
            "type": "string",
            "description": "The unique identifier of all tables connection."
          },
          "all_user_group_id": {
            "type": "string",
            "description": "The unique identifier of ALL group."
          },
          "accept_language": {
            "type": "string",
            "description": "The supported accept language by the cluster."
          },
          "all_user_group_member_user_count": {
            "type": "integer",
            "format": "int32",
            "description": "The count of users of ALL group."
          },
          "logical_model_version": {
            "type": "integer",
            "format": "int32",
            "description": "The version number of logical model of the cluster."
          }
        }
      },
      "SystemConfig": {
        "type": "object",
        "properties": {
          "onboarding_content_url": {
            "type": "string"
          }
        }
      },
      "OrgResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "Unique identifier of the Org."
          },
          "name": {
            "type": "string",
            "description": "Name of the Org."
          },
          "status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "IN_ACTIVE"
            ],
            "description": "Status of the Org."
          },
          "description": {
            "type": "string",
            "description": "Description of the Org."
          },
          "visibility": {
            "type": "string",
            "enum": [
              "SHOW",
              "HIDDEN"
            ],
            "description": "Visibility of the Org."
          }
        }
      },
      "Tag": {
        "type": "object",
        "required": [
          "name",
          "id"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "color": {
            "type": "string"
          },
          "deleted": {
            "type": "boolean"
          },
          "hidden": {
            "type": "boolean"
          },
          "external": {
            "type": "boolean"
          },
          "deprecated": {
            "type": "boolean"
          },
          "creation_time_in_millis": {
            "type": "number",
            "format": "float"
          },
          "modification_time_in_millis": {
            "type": "number",
            "format": "float"
          },
          "author_id": {
            "type": "string"
          },
          "modifier_id": {
            "type": "string"
          },
          "owner_id": {
            "type": "string"
          }
        }
      },
      "UserGroupResponse": {
        "type": "object",
        "required": [
          "display_name",
          "id",
          "name",
          "visibility"
        ],
        "properties": {
          "author_id": {
            "type": "string",
            "description": "The unique identifier of the object"
          },
          "complete_detail": {
            "type": "boolean",
            "description": "Indicates whether the response has complete detail of the group."
          },
          "content": {
            "type": "object",
            "description": "Content details of the group"
          },
          "creation_time_in_millis": {
            "type": "number",
            "format": "float",
            "description": "Creation time of the group in milliseconds"
          },
          "default_liveboards": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserGroup"
            },
            "description": "Liveboards that are assigned as default Liveboards to the group."
          },
          "deleted": {
            "type": "boolean",
            "description": "Indicates whether the group is deleted"
          },
          "deprecated": {
            "type": "boolean",
            "description": "Indicates whether the group is deprecated"
          },
          "description": {
            "type": "string",
            "description": "Description of the group"
          },
          "display_name": {
            "type": "string",
            "description": "Display name of the group."
          },
          "external": {
            "type": "boolean",
            "description": "Indicates whether the group is external"
          },
          "generation_number": {
            "type": "integer",
            "format": "int32",
            "description": "Generation number of the group"
          },
          "hidden": {
            "type": "boolean",
            "description": "Indicates whether the group is hidden"
          },
          "id": {
            "type": "string",
            "description": "The unique identifier of the object"
          },
          "index": {
            "type": "integer",
            "format": "int32",
            "description": "Index number of the group"
          },
          "index_version": {
            "type": "integer",
            "format": "int32",
            "description": "Index version number of the group"
          },
          "metadata_version": {
            "type": "integer",
            "format": "int32",
            "description": "Metadata version number of the group"
          },
          "modification_time_in_millis": {
            "type": "number",
            "format": "float",
            "description": "Last modified time of the group in milliseconds."
          },
          "modifier_id": {
            "type": "string",
            "description": "The unique identifier of the object"
          },
          "name": {
            "type": "string",
            "description": "Name of the group."
          },
          "orgs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserGroup"
            },
            "description": "Orgs in which group exists."
          },
          "owner_id": {
            "type": "string",
            "description": "The unique identifier of the object"
          },
          "parent_type": {
            "type": "string",
            "enum": [
              "USER",
              "GROUP"
            ],
            "description": "Parent type of the group."
          },
          "privileges": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Privileges which are assigned to the group"
          },
          "sub_groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserGroup"
            },
            "description": "Groups who are part of the group"
          },
          "system_group": {
            "type": "boolean",
            "description": "Indicates whether the group is a system group."
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserGroup"
            },
            "description": "Tags associated with the group."
          },
          "type": {
            "type": "string",
            "enum": [
              "LOCAL_GROUP",
              "LDAP_GROUP"
            ],
            "description": "Type of the group."
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserGroup"
            },
            "description": "Users who are part of the group."
          },
          "visibility": {
            "type": "string",
            "enum": [
              "SHARABLE",
              "NON_SHARABLE"
            ],
            "description": "Visibility of the group. The SHARABLE makes a group visible to other users and groups, and thus allows them to share objects."
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Role"
            },
            "description": "List of roles assgined to the user"
          }
        }
      },
      "MetadataSearchResponse": {
        "type": "object",
        "required": [
          "metadata_type"
        ],
        "properties": {
          "metadata_id": {
            "type": "string",
            "description": "Unique identifier of the metadata."
          },
          "metadata_name": {
            "type": "string",
            "description": "Name of the metadata."
          },
          "metadata_type": {
            "type": "string",
            "enum": [
              "LIVEBOARD",
              "ANSWER",
              "LOGICAL_TABLE",
              "LOGICAL_COLUMN",
              "CONNECTION",
              "TAG",
              "USER",
              "USER_GROUP",
              "LOGICAL_RELATIONSHIP"
            ],
            "description": "Type of the metadata."
          },
          "dependent_objects": {
            "type": "object",
            "description": "Details of dependent objects of the metadata objects."
          },
          "incomplete_objects": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "Details of incomplete information of the metadata objects if any."
          },
          "metadata_detail": {
            "type": "object",
            "description": "Complete details of the metadata objects."
          },
          "metadata_header": {
            "type": "object",
            "description": "Header information of the metadata objects."
          },
          "visualization_headers": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "Visualization header information of the metadata objects."
          },
          "stats": {
            "type": "object",
            "description": "Stats of the metadata object. Includes views, favorites, last_accessed."
          }
        },
        "description": "Metadata Search Response Object."
      },
      "MetadataListItemInput": {
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string",
            "description": "Unique ID or name of the metadata."
          },
          "name_pattern": {
            "type": "string",
            "description": "A pattern to match the case-insensitive name of the metadata object. User % for a wildcard match."
          },
          "type": {
            "type": "string",
            "enum": [
              "LIVEBOARD",
              "ANSWER",
              "LOGICAL_TABLE",
              "LOGICAL_COLUMN",
              "CONNECTION",
              "TAG",
              "USER",
              "USER_GROUP",
              "LOGICAL_RELATIONSHIP"
            ],
            "description": "Type of metadata.\n1. Liveboard\n2. Answers\n3. LOGICAL_TABLE for any data object such as table, worksheet or view.\n4. LOGICAL_COLUMN for a column of any data object such as table, worksheet or view.\n5. CONNECTION for creating or modify data connections.\n6. TAG for tag objects.\n7. USER for user objects.\n8. USER_GROUP for group objects.\n9. LOGICAL_RELATIONSHIP for table or worksheet joins. A join combines from one or several data object by using matching values"
          }
        }
      },
      "PermissionInput": {
        "type": "object",
        "required": [
          "principal",
          "share_mode"
        ],
        "properties": {
          "principal": {
            "$ref": "#/components/schemas/PrincipalsInput",
            "description": "Details of users or groups."
          },
          "share_mode": {
            "type": "string",
            "enum": [
              "READ_ONLY",
              "MODIFY",
              "NO_ACCESS"
            ],
            "description": "Object share mode."
          }
        },
        "description": "Details of users or groups."
      },
      "ExcludeMetadataListItemInput": {
        "type": "object",
        "required": [
          "identifier",
          "type"
        ],
        "properties": {
          "identifier": {
            "type": "string",
            "description": "Unique ID or name of the metadata."
          },
          "type": {
            "type": "string",
            "enum": [
              "LIVEBOARD",
              "ANSWER",
              "LOGICAL_TABLE",
              "LOGICAL_COLUMN",
              "CONNECTION",
              "TAG",
              "USER",
              "USER_GROUP",
              "LOGICAL_RELATIONSHIP"
            ],
            "description": "Type of metadata.\n1. Liveboard\n2. Answers\n3. LOGICAL_TABLE for any data object such as table, worksheet or view\n4. LOGICAL_COLUMN for a column of any data object such as table, worksheet or view\n5. CONNECTION for connection objects\n6. TAG for tag objects\n7. USER for user objects\n8. USER_GROUP for group objects\n9. LOGICAL_RELATIONSHIP for table or worksheet joins. A join combines from one or several data object by using matching values."
          }
        }
      },
      "FavoriteObjectOptionsInput": {
        "type": "object",
        "properties": {
          "include": {
            "type": "boolean",
            "default": false,
            "description": "Includes objects marked as favorite for the specified users."
          },
          "user_identifiers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Unique ID or name of the users. If not specified, the favorite objects of current logged in user are returned."
          }
        },
        "description": "Favorite object options."
      },
      "MetadataSearchSortOptions": {
        "type": "object",
        "properties": {
          "field_name": {
            "type": "string",
            "enum": [
              "NAME",
              "DISPLAY_NAME",
              "AUTHOR",
              "CREATED",
              "MODIFIED",
              "VIEWS",
              "FAVORITES",
              "LAST_ACCESSED"
            ],
            "description": "Name of the field to apply the sort on."
          },
          "order": {
            "type": "string",
            "enum": [
              "ASC",
              "DESC"
            ],
            "description": "Sort order : ASC(Ascending) or DESC(Descending)."
          }
        },
        "description": "Sort options."
      },
      "SqlQueryResponse": {
        "type": "object",
        "required": [
          "metadata_id",
          "metadata_name",
          "metadata_type",
          "sql_queries"
        ],
        "properties": {
          "metadata_id": {
            "type": "string",
            "description": "Unique identifier of the metadata."
          },
          "metadata_name": {
            "type": "string",
            "description": "Name of the metadata."
          },
          "metadata_type": {
            "type": "string",
            "enum": [
              "LIVEBOARD",
              "ANSWER",
              "LOGICAL_TABLE",
              "LOGICAL_COLUMN",
              "CONNECTION",
              "TAG",
              "USER",
              "USER_GROUP",
              "LOGICAL_RELATIONSHIP"
            ],
            "description": "Type of the metadata."
          },
          "sql_queries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SqlQuery"
            },
            "description": "SQL query details of metadata objects."
          }
        }
      },
      "PdfOptionsInput": {
        "type": "object",
        "properties": {
          "include_cover_page": {
            "type": "boolean",
            "default": true,
            "description": "Indicates whether to include the cover page with the Liveboard title."
          },
          "include_custom_logo": {
            "type": "boolean",
            "default": true,
            "description": "Indicates whether to include customized wide logo in the footer if available."
          },
          "include_filter_page": {
            "type": "boolean",
            "default": true,
            "description": "Indicates whether to include a page with all applied filters."
          },
          "include_page_number": {
            "type": "boolean",
            "default": true,
            "description": "Indicates whether to include page number in the footer of each page."
          },
          "page_orientation": {
            "type": "string",
            "enum": [
              "PORTRAIT",
              "LANDSCAPE"
            ],
            "default": "PORTRAIT",
            "description": "Page orientation of the PDF."
          },
          "truncate_table": {
            "type": "boolean",
            "default": false,
            "description": "Indicates whether to include only the first page of the tables."
          },
          "page_footer_text": {
            "type": "string",
            "description": "Text to include in the footer of each page."
          }
        }
      },
      "PngOptionsInput": {
        "type": "object",
        "properties": {
          "include_cover_page": {
            "type": "boolean",
            "default": false,
            "description": "Indicates whether to include the cover page with the Liveboard title."
          },
          "include_filter_page": {
            "type": "boolean",
            "default": false,
            "description": "Indicates whether to include a page with all applied filters."
          }
        }
      },
      "LogResponse": {
        "type": "object",
        "required": [
          "date",
          "log"
        ],
        "properties": {
          "date": {
            "type": "string",
            "description": "Date timestamp of the log entry"
          },
          "log": {
            "type": "string",
            "description": "Log data"
          }
        }
      },
      "RepoConfigObject": {
        "type": "object",
        "properties": {
          "repository_url": {
            "type": "string",
            "description": "Remote repository URL configured"
          },
          "username": {
            "type": "string",
            "description": "Username to authenticate connection to the version control system"
          },
          "default_branch": {
            "type": "string",
            "description": "Name of the default remote branch"
          },
          "branches": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Branches that have been pulled in local repository"
          },
          "enable_guid_mapping": {
            "type": "boolean",
            "description": "Maintain mapping of guid for the deployment to an instance"
          },
          "guid_mapping_branch_name": {
            "type": "string",
            "description": "Name of the branch in the file containing guid mapping should be maintained"
          },
          "org": {
            "$ref": "#/components/schemas/Org",
            "description": "Details of the Org"
          }
        }
      },
      "CommitHistoryResponse": {
        "type": "object",
        "required": [
          "committer",
          "author",
          "comment",
          "commit_time",
          "commit_id",
          "branch"
        ],
        "properties": {
          "committer": {
            "$ref": "#/components/schemas/CommiterType",
            "description": "Repository user using which changes were committed"
          },
          "author": {
            "$ref": "#/components/schemas/AuthorType",
            "description": "Thoughtspot user who commits the changes"
          },
          "comment": {
            "type": "string",
            "description": "Comments associated with the commit"
          },
          "commit_time": {
            "type": "string",
            "description": "Time at which the changes were committed."
          },
          "commit_id": {
            "type": "string",
            "description": "SHA id associated with the commit"
          },
          "branch": {
            "type": "string",
            "description": "Branch where changes were committed"
          }
        }
      },
      "SearchConnectionResponse": {
        "type": "object",
        "required": [
          "id",
          "name",
          "data_warehouse_type"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID of the connection."
          },
          "name": {
            "type": "string",
            "description": "Name of the connection."
          },
          "description": {
            "type": "string",
            "description": "Description of the connection."
          },
          "data_warehouse_type": {
            "type": "string",
            "enum": [
              "SNOWFLAKE",
              "AMAZON_REDSHIFT",
              "GOOGLE_BIGQUERY",
              "AZURE_SYNAPSE",
              "TERADATA",
              "SAP_HANA",
              "STARBURST",
              "ORACLE_ADW",
              "DATABRICKS",
              "DENODO",
              "DREMIO",
              "TRINO",
              "PRESTO",
              "POSTGRES",
              "SQL_SERVER",
              "MYSQL",
              "GENERIC_JDBC",
              "AMAZON_RDS_POSTGRESQL",
              "AMAZON_AURORA_POSTGRESQL",
              "AMAZON_RDS_MYSQL",
              "AMAZON_AURORA_MYSQL",
              "LOOKER",
              "AMAZON_ATHENA"
            ],
            "description": "Type of data warehouse."
          },
          "data_warehouse_objects": {
            "$ref": "#/components/schemas/DataWarehouseObjects",
            "description": "List of Data warehouse objects"
          },
          "details": {
            "type": "object",
            "description": "Details of the connection."
          }
        }
      },
      "ConnectionInput": {
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string",
            "description": "Unique ID or name of the connection."
          },
          "name_pattern": {
            "type": "string",
            "description": "A pattern to match case-insensitive name of the connection object. User `%` for a wildcard match."
          },
          "data_warehouse_objects": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataWarehouseObjectInput"
            },
            "description": "Filter options for databases, schemas, tables and columns."
          }
        }
      },
      "SortOptionInput": {
        "type": "object",
        "properties": {
          "field_name": {
            "type": "string",
            "enum": [
              "NAME",
              "DISPLAY_NAME",
              "AUTHOR",
              "CREATED",
              "MODIFIED",
              "LAST_ACCESSED",
              "SYNCED",
              "VIEWS",
              "USER_STATE",
              "ROW_COUNT"
            ],
            "description": "Name of the field to apply the sort on."
          },
          "order": {
            "type": "string",
            "enum": [
              "ASC",
              "DESC"
            ],
            "description": "Sort order : ASC(Ascending) or DESC(Descending)."
          }
        }
      },
      "SearchRoleResponse": {
        "type": "object",
        "required": [
          "id",
          "name",
          "description",
          "privileges"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique Id of the role."
          },
          "name": {
            "type": "string",
            "description": "Name of the role"
          },
          "description": {
            "type": "string",
            "description": "Description of the role"
          },
          "groups_assigned_count": {
            "type": "integer",
            "format": "int32",
            "description": "number of groups assigned with this role"
          },
          "orgs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GenericInfo"
            },
            "description": "Orgs in which role exists."
          },
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GenericInfo"
            },
            "description": "Details of groups assigned with this role"
          },
          "privileges": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "UNKNOWN",
                "ADMINISTRATION",
                "AUTHORING",
                "USERDATAUPLOADING",
                "DATADOWNLOADING",
                "USERMANAGEMENT",
                "SECURITYMANAGEMENT",
                "LOGICALMODELING",
                "DATAMANAGEMENT",
                "TAGMANAGEMENT",
                "SHAREWITHALL",
                "SYSTEMMANAGEMENT",
                "JOBSCHEDULING",
                "A3ANALYSIS",
                "EXPERIMENTALFEATUREPRIVILEGE",
                "BYPASSRLS",
                "RANALYSIS",
                "DISABLE_PINBOARD_CREATION",
                "DEVELOPER",
                "APPLICATION_ADMINISTRATION",
                "USER_ADMINISTRATION",
                "GROUP_ADMINISTRATION",
                "BACKUP_ADMINISTRATION",
                "SYSTEM_INFO_ADMINISTRATION",
                "ENABLESPOTAPPCREATION",
                "SYNCMANAGEMENT",
                "ORG_ADMINISTRATION",
                "ROLE_ADMINISTRATION",
                "AUTHENTICATION_ADMINISTRATION",
                "BILLING_INFO_ADMINISTRATION",
                "PREVIEW_THOUGHTSPOT_SAGE"
              ]
            },
            "description": "Privileges granted to the role."
          },
          "permission": {
            "type": "string",
            "enum": [
              "READ_ONLY",
              "MODIFY",
              "NO_ACCESS"
            ],
            "description": "Permission details of the Role"
          },
          "author_id": {
            "type": "string",
            "description": "Unique identifier of author of the role."
          },
          "modifier_id": {
            "type": "string",
            "description": "Unique identifier of modifier of the role."
          },
          "creation_time_in_millis": {
            "type": "object",
            "description": "Creation time of the role in milliseconds."
          },
          "modification_time_in_millis": {
            "type": "object",
            "description": "Last modified time of the role in milliseconds."
          },
          "deleted": {
            "type": "boolean",
            "description": "Indicates whether the role is deleted."
          },
          "deprecated": {
            "type": "boolean",
            "description": "Indicates whether the role is deprecated."
          },
          "external": {
            "type": "boolean",
            "description": "Indicates whether the role is external."
          },
          "hidden": {
            "type": "boolean",
            "description": "Indicates whether the role is hidden."
          },
          "shared_via_connection": {
            "type": "boolean",
            "description": "Indicates whether the role is shared via connection"
          }
        },
        "description": "Response for search role api should handle hidden privileges as well."
      },
      "ResponseCustomAction": {
        "type": "object",
        "required": [
          "action_details",
          "default_action_config",
          "id",
          "name"
        ],
        "properties": {
          "action_details": {
            "$ref": "#/components/schemas/Action_details",
            "description": "`Type` and configuration data for custom actions"
          },
          "default_action_config": {
            "$ref": "#/components/schemas/Default_action_config",
            "description": "Default custom action configuration. This includes the custom action's visibility across all visualizations and Answers. By default, a custom action is added to all visualizations and Answers."
          },
          "id": {
            "type": "string",
            "description": "Unique Id of the custom action."
          },
          "metadata_association": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Metadata_Association_Item"
            },
            "description": "Metadata objects to assign the the custom action to."
          },
          "name": {
            "type": "string",
            "description": "Unique name of the custom action."
          },
          "user_groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Object_ID_And_Name"
            },
            "description": "Unique ID or name of the User groups which are associated with the custom action."
          }
        },
        "description": "Custom action details"
      },
      "Default_Action_Config_Search_Input": {
        "type": "object",
        "properties": {
          "visibility": {
            "type": "boolean",
            "description": "Custom action is available on all visualizations. Earlier naming convention: LOCAL/GLOBAL. TRUE signifies GLOBAL for backward compatibility."
          }
        },
        "description": "Default Custom action configuration. This includes the custom action's visibility across all visualizations and Answers. By default, a custom action is added to all visualizations and Answers."
      },
      "Token": {
        "type": "object",
        "required": [
          "token",
          "creation_time_in_millis",
          "expiration_time_in_millis",
          "scope",
          "valid_for_user_id",
          "valid_for_username"
        ],
        "properties": {
          "token": {
            "type": "string",
            "description": "Bearer auth token."
          },
          "creation_time_in_millis": {
            "type": "number",
            "format": "float",
            "description": "Token creation time in milliseconds."
          },
          "expiration_time_in_millis": {
            "type": "number",
            "format": "float",
            "description": "Token expiration time in milliseconds."
          },
          "scope": {
            "$ref": "#/components/schemas/Scope",
            "description": "Token access scope details"
          },
          "valid_for_user_id": {
            "type": "string",
            "description": "Username to whom the token is issued."
          },
          "valid_for_username": {
            "type": "string",
            "description": "Unique identifier of the user to whom the token is issued."
          }
        }
      },
      "TagMetadataTypeInput": {
        "type": "object",
        "required": [
          "identifier"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "LIVEBOARD",
              "ANSWER",
              "LOGICAL_TABLE",
              "LOGICAL_COLUMN",
              "CONNECTION"
            ],
            "description": "Type of metadata (Optional when given identifier is ID).\n1. LIVEBOARD\n2. ANSWERS\n3. LOGICAL_TABLE for any data object such as table, worksheet or view.\n4. LOGICAL_COLUMN for a column of any data object such as tables, worksheets or views."
          },
          "identifier": {
            "type": "string",
            "description": "Unique ID or name of the metadata."
          }
        }
      },
      "ImportUserGroupsResponse": {
        "type": "object",
        "required": [
          "groups_added",
          "groups_deleted",
          "groups_updated"
        ],
        "properties": {
          "groups_added": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserGroup"
            },
            "description": "The groups which are added into the system."
          },
          "groups_deleted": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserGroup"
            },
            "description": "The groups which are deleted from the system."
          },
          "groups_updated": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserGroup"
            },
            "description": "The groups which are updated in the system."
          }
        }
      },
      "GroupsImportListInput": {
        "type": "object",
        "required": [
          "display_name",
          "group_identifier"
        ],
        "properties": {
          "display_name": {
            "type": "string",
            "description": "Unique display name of the group."
          },
          "group_identifier": {
            "type": "string",
            "description": "Unique ID or name of the group."
          },
          "default_liveboard_identifiers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Unique ID of Liveboards that will be assigned as default Liveboards to the users in the group."
          },
          "description": {
            "type": "string",
            "description": "Description of the group."
          },
          "privileges": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "ADMINISTRATION",
                "AUTHORING",
                "USERDATAUPLOADING",
                "DATADOWNLOADING",
                "USERMANAGEMENT",
                "DATAMANAGEMENT",
                "SHAREWITHALL",
                "JOBSCHEDULING",
                "A3ANALYSIS",
                "EXPERIMENTALFEATUREPRIVILEGE",
                "BYPASSRLS",
                "RANALYSIS",
                "DEVELOPER",
                "USER_ADMINISTRATION",
                "GROUP_ADMINISTRATION",
                "SYNCMANAGEMENT",
                "CAN_CREATE_CATALOG",
                "DISABLE_PINBOARD_CREATION",
                "ENABLESPOTAPPCREATION",
                "LIVEBOARD_VERIFIER",
                "PREVIEW_THOUGHTSPOT_SAGE"
              ]
            },
            "description": "Privileges that will be assigned to the group."
          },
          "sub_group_identifiers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Unique ID or name of the sub-groups to add to the group."
          },
          "type": {
            "type": "string",
            "enum": [
              "LOCAL_GROUP",
              "LDAP_GROUP"
            ],
            "description": "Type of the group."
          },
          "user_identifiers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Unique ID or name of the users to assign to the group."
          },
          "visibility": {
            "type": "string",
            "enum": [
              "SHARABLE",
              "NON_SHARABLE"
            ],
            "description": "Visibility of the group. The SHARABLE makes a group visible to other users and groups, and thus allows them to share objects."
          }
        }
      },
      "CommitResponse": {
        "type": "object",
        "properties": {
          "committer": {
            "$ref": "#/components/schemas/CommiterType",
            "description": "Repository user using which changes were committed"
          },
          "author": {
            "$ref": "#/components/schemas/AuthorType",
            "description": "Thoughtspot user who commits the changes"
          },
          "comment": {
            "type": "string",
            "description": "Comments associated with the commit"
          },
          "commit_time": {
            "type": "string",
            "description": "Time at which the changes were committed."
          },
          "commit_id": {
            "type": "string",
            "description": "SHA id associated with the commit"
          },
          "branch": {
            "type": "string",
            "description": "Branch where changes were committed"
          },
          "committed_files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommitFileType"
            },
            "description": "Files that were pushed as part of this commit"
          }
        }
      },
      "MetadataObject": {
        "type": "object",
        "required": [
          "identifier"
        ],
        "properties": {
          "identifier": {
            "type": "string",
            "description": "Unique ID or name of the metadata"
          },
          "type": {
            "type": "string",
            "enum": [
              "LIVEBOARD",
              "ANSWER",
              "LOGICAL_TABLE"
            ],
            "description": "Type of metadata."
          }
        }
      },
      "RevertResponse": {
        "type": "object",
        "properties": {
          "committer": {
            "$ref": "#/components/schemas/CommiterType",
            "description": "Repository user using which changes were committed"
          },
          "author": {
            "$ref": "#/components/schemas/AuthorType",
            "description": "Thoughtspot user who commits the changes"
          },
          "comment": {
            "type": "string",
            "description": "Comments associated with the commit"
          },
          "commit_time": {
            "type": "string",
            "description": "Time at which the changes were committed."
          },
          "commit_id": {
            "type": "string",
            "description": "SHA id associated with the commit"
          },
          "branch": {
            "type": "string",
            "description": "Branch where changes were committed"
          },
          "committed_files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommitFileType"
            },
            "description": "Files that were pushed as part of this commit"
          },
          "reverted_metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RevertedMetadata"
            },
            "description": "Metadata of reverted file of this commit"
          }
        }
      },
      "DeployResponse": {
        "type": "object",
        "properties": {
          "file_name": {
            "type": "string",
            "description": "Name of the file deployed"
          },
          "metadata_name": {
            "type": "string",
            "description": "Name of the metadata object"
          },
          "metadata_type": {
            "type": "string",
            "description": "Type of the metadata object"
          },
          "status_code": {
            "type": "string",
            "description": "Indicates the status of deployment for the file"
          },
          "status_message": {
            "type": "string",
            "description": "Any error or warning with the deployment"
          }
        }
      },
      "CreateConnectionResponse": {
        "type": "object",
        "required": [
          "id",
          "name",
          "data_warehouse_type"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the connection created."
          },
          "name": {
            "type": "string",
            "description": "Name of the connection."
          },
          "data_warehouse_type": {
            "type": "string",
            "enum": [
              "SNOWFLAKE",
              "AMAZON_REDSHIFT",
              "GOOGLE_BIGQUERY",
              "AZURE_SYNAPSE",
              "TERADATA",
              "SAP_HANA",
              "STARBURST",
              "ORACLE_ADW",
              "DATABRICKS",
              "DENODO",
              "DREMIO",
              "TRINO",
              "PRESTO",
              "POSTGRES",
              "SQL_SERVER",
              "MYSQL",
              "GENERIC_JDBC",
              "AMAZON_RDS_POSTGRESQL",
              "AMAZON_AURORA_POSTGRESQL",
              "AMAZON_RDS_MYSQL",
              "AMAZON_AURORA_MYSQL",
              "LOOKER",
              "AMAZON_ATHENA"
            ],
            "description": "Type of data warehouse."
          },
          "details": {
            "type": "object",
            "description": "Details of the connection."
          }
        }
      },
      "RoleResponse": {
        "type": "object",
        "required": [
          "id",
          "name",
          "description",
          "privileges"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique Id of the role."
          },
          "name": {
            "type": "string",
            "description": "Name of the role"
          },
          "description": {
            "type": "string",
            "description": "Description of the role"
          },
          "groups_assigned_count": {
            "type": "integer",
            "format": "int32",
            "description": "number of groups assigned with this role"
          },
          "orgs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GenericInfo"
            },
            "description": "Orgs in which role exists."
          },
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GenericInfo"
            },
            "description": "Details of groups assigned with this role"
          },
          "privileges": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "USERDATAUPLOADING",
                "DATADOWNLOADING",
                "DATAMANAGEMENT",
                "SHAREWITHALL",
                "JOBSCHEDULING",
                "A3ANALYSIS",
                "EXPERIMENTALFEATUREPRIVILEGE",
                "BYPASSRLS",
                "DISABLE_PINBOARD_CREATION",
                "DEVELOPER",
                "APPLICATION_ADMINISTRATION",
                "USER_ADMINISTRATION",
                "GROUP_ADMINISTRATION",
                "SYSTEM_INFO_ADMINISTRATION",
                "SYNCMANAGEMENT",
                "ORG_ADMINISTRATION",
                "ROLE_ADMINISTRATION",
                "AUTHENTICATION_ADMINISTRATION",
                "BILLING_INFO_ADMINISTRATION"
              ]
            },
            "description": "Privileges granted to the role."
          },
          "permission": {
            "type": "string",
            "enum": [
              "READ_ONLY",
              "MODIFY",
              "NO_ACCESS"
            ],
            "description": "Permission details of the Role"
          },
          "author_id": {
            "type": "string",
            "description": "Unique identifier of author of the role."
          },
          "modifier_id": {
            "type": "string",
            "description": "Unique identifier of modifier of the role."
          },
          "creation_time_in_millis": {
            "type": "object",
            "description": "Creation time of the role in milliseconds."
          },
          "modification_time_in_millis": {
            "type": "object",
            "description": "Last modified time of the role in milliseconds."
          },
          "deleted": {
            "type": "boolean",
            "description": "Indicates whether the role is deleted."
          },
          "deprecated": {
            "type": "boolean",
            "description": "Indicates whether the role is deprecated."
          },
          "external": {
            "type": "boolean",
            "description": "Indicates whether the role is external."
          },
          "hidden": {
            "type": "boolean",
            "description": "Indicates whether the role is hidden."
          },
          "shared_via_connection": {
            "type": "boolean",
            "description": "Indicates whether the role is shared via connection"
          }
        }
      },
      "ResponseSchedule": {
        "type": "object",
        "required": [
          "author",
          "creation_time_in_millis",
          "file_format",
          "frequency",
          "id",
          "metadata",
          "name",
          "time_zone"
        ],
        "properties": {
          "author": {
            "$ref": "#/components/schemas/Author",
            "description": "Author of the schedule."
          },
          "creation_time_in_millis": {
            "type": "object",
            "description": "Schedule creation time in milliseconds."
          },
          "description": {
            "type": "string",
            "description": "Description of the job."
          },
          "file_format": {
            "type": "string",
            "description": "Export file format."
          },
          "frequency": {
            "$ref": "#/components/schemas/Frequency",
            "description": "Configuration of schedule with cron expression"
          },
          "id": {
            "type": "string",
            "description": "GUID of the scheduled job."
          },
          "liveboard_options": {
            "$ref": "#/components/schemas/LiveboardOptions",
            "description": "Options to specify details of Liveboard."
          },
          "metadata": {
            "$ref": "#/components/schemas/MetadataResponse",
            "description": "Unique ID or name of the metadata."
          },
          "name": {
            "type": "string",
            "description": "Name of the scheduled job."
          },
          "pdf_options": {
            "$ref": "#/components/schemas/PdfOptions",
            "description": "Options for PDF export."
          },
          "recipient_details": {
            "$ref": "#/components/schemas/RecipientDetails",
            "description": "Recipient of the scheduled job notifications."
          },
          "status": {
            "type": "string",
            "description": "Status of the job"
          },
          "time_zone": {
            "type": "string",
            "description": "Time zone"
          },
          "history_runs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseScheduleRun"
            },
            "description": "Schedule runs history records."
          }
        }
      },
      "LiveboardOptionsInput": {
        "type": "object",
        "required": [
          "visualization_identifiers"
        ],
        "properties": {
          "visualization_identifiers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Unique ID or name of visualizations."
          }
        },
        "description": "Options to specify details of Liveboard."
      },
      "SchedulesPdfOptionsInput": {
        "type": "object",
        "properties": {
          "complete_liveboard": {
            "type": "boolean",
            "description": "Indicates whether to include complete Liveboard."
          },
          "include_cover_page": {
            "type": "boolean",
            "description": "Indicates whether to include cover page with the Liveboard title."
          },
          "include_custom_logo": {
            "type": "boolean",
            "description": "Indicates whether to include customized wide logo in the footer if available."
          },
          "include_filter_page": {
            "type": "boolean",
            "description": "Indicates whether to include a page with all applied filters."
          },
          "include_page_number": {
            "type": "boolean",
            "description": "Indicates whether to include page number in the footer of each page"
          },
          "page_footer_text": {
            "type": "string",
            "description": "Text to include in the footer of each page."
          },
          "page_orientation": {
            "type": "string",
            "description": "Page orientation of the PDF."
          },
          "page_size": {
            "type": "string",
            "enum": [
              "A4"
            ],
            "description": "Page size."
          },
          "truncate_table": {
            "type": "boolean",
            "description": "Indicates whether to include only first page of the tables."
          }
        },
        "description": "Options for PDF export."
      },
      "FrequencyInput": {
        "type": "object",
        "required": [
          "cron_expression"
        ],
        "properties": {
          "cron_expression": {
            "$ref": "#/components/schemas/CronExpressionInput",
            "description": "Schedule selected cron expression."
          }
        },
        "description": "Configuration of schedule with cron expression"
      },
      "RecipientDetailsInput": {
        "type": "object",
        "properties": {
          "emails": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Emails of the recipients."
          },
          "principals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PrincipalsListItemInput"
            },
            "description": "User or groups to be set as recipients of the schedule notifications."
          }
        },
        "description": "Recipients of the scheduled job notification."
      },
      "MetadataInput": {
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "LIVEBOARD"
            ]
          }
        }
      },
      "SortingOptions": {
        "type": "object",
        "properties": {
          "field_name": {
            "type": "string",
            "description": "Name of the field to apply the sort on."
          },
          "order": {
            "type": "string",
            "description": "Sort order : ASC(Ascending) or DESC(Descending)."
          }
        },
        "description": "Sort options."
      },
      "ScheduleHistoryRunsOptionsInput": {
        "type": "object",
        "properties": {
          "include_history_runs": {
            "type": "boolean",
            "default": false,
            "description": "Indicates whether to fetch history runs for the scheduled notification."
          },
          "record_size": {
            "type": "integer",
            "format": "int32",
            "default": 10,
            "description": "Indicates the max number of records that can be fetched as past runs of any scheduled job."
          },
          "record_offset": {
            "type": "integer",
            "format": "int32",
            "default": 0,
            "description": "Indicates the starting record number from where history runs records should be fetched."
          }
        }
      },
      "Action_Details_Input_Create": {
        "type": "object",
        "properties": {
          "CALLBACK": {
            "$ref": "#/components/schemas/CALLBACKInputMandatory",
            "description": "CALLBACK Custom Action Type"
          },
          "URL": {
            "$ref": "#/components/schemas/URLInputMandatory",
            "description": "URL Custom Action Type"
          }
        },
        "description": "Action details includes Type and Configuration for Custom Actions, either Callback or URL is required.\nWhen both callback and url are provided, callback would be considered"
      },
      "Associate_Metadata_Input_Create": {
        "type": "object",
        "required": [
          "identifier"
        ],
        "properties": {
          "action_config": {
            "$ref": "#/components/schemas/ActionConfigInputCreate",
            "description": "Specify that the association is enabled for the metadata object"
          },
          "identifier": {
            "type": "string",
            "description": "Unique ID or name of the metadata."
          },
          "type": {
            "type": "string",
            "enum": [
              "VISUALIZATION",
              "ANSWER",
              "WORKSHEET"
            ],
            "description": "Type of metadata."
          }
        }
      },
      "Default_Action_Config_Input_Create": {
        "type": "object",
        "properties": {
          "visibility": {
            "type": "boolean",
            "default": true,
            "description": "Custom action is available on all visualizations. Earlier naming convention: LOCAL/GLOBAL. TRUE signifies GLOBAL for backward compatibility.\n\nDefault: true"
          }
        },
        "description": "Default Custom action configuration. This includes the custom action's visibility across all visualizations and Answers. By default, a custom action is added to all visualizations and Answers."
      },
      "Action_Details_Input": {
        "type": "object",
        "properties": {
          "CALLBACK": {
            "$ref": "#/components/schemas/CALLBACKInput",
            "description": "CALLBACK Custom Action Type"
          },
          "URL": {
            "$ref": "#/components/schemas/URLInput",
            "description": "URL Custom Action Type"
          }
        },
        "description": "Action details includes `Type` and configuration details of Custom Actions. Either Callback or URL is required."
      },
      "Associate_Metadata_Input": {
        "type": "object",
        "properties": {
          "action_config": {
            "$ref": "#/components/schemas/ActionConfigInput",
            "description": "Specify that the association is enabled for the metadata object"
          },
          "identifier": {
            "type": "string",
            "description": "Unique ID or name of the metadata."
          },
          "type": {
            "type": "string",
            "enum": [
              "VISUALIZATION",
              "ANSWER",
              "WORKSHEET"
            ],
            "description": "Type of metadata."
          }
        }
      },
      "Default_Action_Config_Input": {
        "type": "object",
        "properties": {
          "visibility": {
            "type": "boolean",
            "description": "Custom action is available on all visualizations. Earlier naming convention: LOCAL/GLOBAL. TRUE signifies GLOBAL for backward compatibility."
          }
        },
        "description": "Default Custom action configuration. This includes the custom action's visibility across all visualizations and Answers. By default, a custom action is added to all visualizations and Answers."
      },
      "FavoriteMetadataItem": {
        "type": "object",
        "required": [
          "id",
          "name",
          "type"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID of the metadata object."
          },
          "name": {
            "type": "string",
            "description": "name of the metadata object."
          },
          "type": {
            "type": "string",
            "enum": [
              "LIVEBOARD",
              "ANSWER",
              "LOGICAL_TABLE",
              "LOGICAL_COLUMN",
              "CONNECTION",
              "TAG",
              "USER",
              "USER_GROUP",
              "LOGICAL_RELATIONSHIP"
            ],
            "description": "Type of metadata object."
          }
        }
      },
      "ImportUserType": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the user."
          },
          "name": {
            "type": "string",
            "description": "Name of the user."
          }
        }
      },
      "AnswerContent": {
        "type": "object",
        "required": [
          "available_data_row_count",
          "column_names",
          "data_rows",
          "record_offset",
          "record_size",
          "returned_data_row_count",
          "sampling_ratio"
        ],
        "properties": {
          "available_data_row_count": {
            "type": "integer",
            "format": "int32",
            "description": "Total available data row count."
          },
          "column_names": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Name of the columns."
          },
          "data_rows": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "Rows of data set."
          },
          "record_offset": {
            "type": "integer",
            "format": "int32",
            "description": "The starting record number from where the records should be included."
          },
          "record_size": {
            "type": "integer",
            "format": "int32",
            "description": "The number of records that should be included."
          },
          "returned_data_row_count": {
            "type": "integer",
            "format": "int32",
            "description": "Total returned data row count."
          },
          "sampling_ratio": {
            "type": "number",
            "format": "float",
            "description": "Sampling ratio (0 to 1). If the query was sampled, it is the ratio of keys returned in the data set to the total number of keys expected in the query. If the value is 1.0, this means that the complete result is returned."
          }
        }
      },
      "LiveboardContent": {
        "type": "object",
        "required": [
          "available_data_row_count",
          "column_names",
          "data_rows",
          "record_offset",
          "record_size",
          "returned_data_row_count",
          "sampling_ratio"
        ],
        "properties": {
          "available_data_row_count": {
            "type": "integer",
            "format": "int32",
            "description": "Total available data row count."
          },
          "column_names": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Name of the columns."
          },
          "data_rows": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "Rows of data set."
          },
          "record_offset": {
            "type": "integer",
            "format": "int32",
            "description": "The starting record number from where the records should be included."
          },
          "record_size": {
            "type": "integer",
            "format": "int32",
            "description": "The number of records that should be included."
          },
          "returned_data_row_count": {
            "type": "integer",
            "format": "int32",
            "description": "Total returned data row count."
          },
          "sampling_ratio": {
            "type": "number",
            "format": "float",
            "description": "Sampling ratio (0 to 1). If the query was sampled, it is the ratio of keys returned in the data set to the total number of keys expected in the query. If the value is 1.0, this means that the complete result is returned."
          },
          "visualization_id": {
            "type": "string",
            "description": "Unique ID of the visualization."
          },
          "visualization_name": {
            "type": "string",
            "description": "Name of the visualization."
          }
        }
      },
      "Role": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "id of the role"
          },
          "name": {
            "type": "string",
            "description": "name of the role"
          }
        }
      },
      "SqlQuery": {
        "type": "object",
        "required": [
          "metadata_id",
          "metadata_name",
          "sql_query"
        ],
        "properties": {
          "metadata_id": {
            "type": "string",
            "description": "Unique identifier of the metadata."
          },
          "metadata_name": {
            "type": "string",
            "description": "Name of the metadata."
          },
          "sql_query": {
            "type": "string",
            "description": "SQL query of a metadata object."
          }
        },
        "description": "Response format associated with fetch SQL query api"
      },
      "CommiterType": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Email id of the committer"
          },
          "username": {
            "type": "string",
            "description": "Username of the committer"
          }
        }
      },
      "AuthorType": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Email id of the committer"
          },
          "username": {
            "type": "string",
            "description": "Username of the committer"
          }
        }
      },
      "DataWarehouseObjects": {
        "type": "object",
        "required": [
          "databases"
        ],
        "properties": {
          "databases": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Database"
            },
            "description": "Databases of the connection."
          }
        }
      },
      "DataWarehouseObjectInput": {
        "type": "object",
        "properties": {
          "database": {
            "type": "string",
            "description": "Name of the database."
          },
          "schema": {
            "type": "string",
            "description": "Name of the schema within the database."
          },
          "table": {
            "type": "string",
            "description": "Name of the table within the schema."
          },
          "column": {
            "type": "string",
            "description": "Name of the column within the table."
          }
        }
      },
      "Action_details": {
        "type": "object",
        "properties": {
          "CALLBACK": {
            "$ref": "#/components/schemas/CALLBACK",
            "description": "CALLBACK Custom Action Type"
          },
          "URL": {
            "$ref": "#/components/schemas/URL",
            "description": "URL Custom Action Type"
          }
        },
        "description": "Type and Configuration for Custom Actions"
      },
      "Default_action_config": {
        "type": "object",
        "properties": {
          "visibility": {
            "type": "boolean",
            "description": "Custom action is available on all visualizations. Earlier , the naming convention: LOCAL/GLOBAL. TRUE signifies GLOBAL for backward compatibility."
          }
        },
        "description": "Default Custom action configuration. This includes the custom action's visibility across all visualizations and Answers. By default, a custom action is added to all visualizations and Answers."
      },
      "Metadata_Association_Item": {
        "type": "object",
        "required": [
          "action_config",
          "identifier",
          "type"
        ],
        "properties": {
          "action_config": {
            "$ref": "#/components/schemas/Action_config",
            "description": "Specify that the association is enabled for the metadata object"
          },
          "identifier": {
            "type": "string",
            "description": "Unique ID or name of the metadata."
          },
          "type": {
            "type": "string",
            "description": "Type of metadata."
          }
        }
      },
      "Scope": {
        "type": "object",
        "required": [
          "access_type"
        ],
        "properties": {
          "access_type": {
            "type": "string",
            "description": "Object access scope type."
          },
          "org_id": {
            "type": "integer",
            "format": "int32",
            "description": "Unique identifier of the metadata."
          },
          "metadata_id": {
            "type": "string",
            "description": "Unique identifier of the Org."
          }
        }
      },
      "CommitFileType": {
        "type": "object",
        "required": [
          "file_name",
          "status_code"
        ],
        "properties": {
          "file_name": {
            "type": "string",
            "description": "Name of the file deployed"
          },
          "status_code": {
            "type": "string",
            "description": "Indicates the status of deployment for the file"
          },
          "status_message": {
            "type": "string",
            "description": "Any error or warning with the deployment"
          }
        }
      },
      "RevertedMetadata": {
        "type": "object",
        "required": [
          "file_name",
          "metadata_name",
          "metadata_type",
          "status_code",
          "status_message"
        ],
        "properties": {
          "file_name": {
            "type": "string",
            "description": "Name of the file deployed"
          },
          "metadata_name": {
            "type": "string",
            "description": "Name of the metadata object"
          },
          "metadata_type": {
            "type": "string",
            "description": "Type of the metadata object"
          },
          "status_code": {
            "type": "string",
            "description": "Indicates the status of deployment for the file"
          },
          "status_message": {
            "type": "string",
            "description": "Any error or warning with the deployment"
          }
        }
      },
      "Author": {
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the object."
          },
          "name": {
            "type": "string",
            "description": "Name of the object."
          }
        },
        "description": "Author of the schedule."
      },
      "Frequency": {
        "type": "object",
        "required": [
          "cron_expression"
        ],
        "properties": {
          "cron_expression": {
            "$ref": "#/components/schemas/CronExpression",
            "description": "Schedule selected cron expression."
          }
        },
        "description": "Configuration of schedule with cron expression"
      },
      "LiveboardOptions": {
        "type": "object",
        "required": [
          "visualization_identifiers"
        ],
        "properties": {
          "visualization_identifiers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Unique ID or name of visualizations."
          }
        },
        "description": "Options to specify details of Liveboard."
      },
      "MetadataResponse": {
        "type": "object",
        "required": [
          "id",
          "type"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "LIVEBOARD"
            ]
          }
        }
      },
      "PdfOptions": {
        "type": "object",
        "properties": {
          "complete_liveboard": {
            "type": "boolean",
            "description": "Indicates whether to include complete Liveboard."
          },
          "include_cover_page": {
            "type": "boolean",
            "description": "Indicates whether to include cover page with the Liveboard title."
          },
          "include_custom_logo": {
            "type": "boolean",
            "description": "Indicates whether to include customized wide logo in the footer if available."
          },
          "include_filter_page": {
            "type": "boolean",
            "description": "Indicates whether to include a page with all applied filters."
          },
          "include_page_number": {
            "type": "boolean",
            "description": "Indicates whether to include page number in the footer of each page"
          },
          "page_footer_text": {
            "type": "string",
            "description": "Text to include in the footer of each page."
          },
          "page_orientation": {
            "type": "string",
            "description": "Page orientation of the PDF."
          },
          "page_size": {
            "type": "string",
            "enum": [
              "A4"
            ],
            "description": "Page size."
          },
          "truncate_table": {
            "type": "boolean",
            "description": "Indicates whether to include only first page of the tables."
          }
        },
        "description": "Options for PDF export."
      },
      "RecipientDetails": {
        "type": "object",
        "properties": {
          "emails": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Emails of the recipients. Specify email address if the recipient is not a ThoughtSpot user."
          },
          "principals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PrincipalsListItem"
            },
            "description": "List of user or groups to subscribe for the scheduled job notifications."
          }
        },
        "description": "Recipient configuration which includes email address, ID or name of the users and groups."
      },
      "ResponseScheduleRun": {
        "type": "object",
        "required": [
          "id",
          "start_time_in_millis",
          "end_time_in_millis",
          "status"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "GUID of the scheduled job."
          },
          "start_time_in_millis": {
            "type": "integer",
            "format": "int32",
            "description": "Schedule run start time in milliseconds."
          },
          "end_time_in_millis": {
            "type": "integer",
            "format": "int32",
            "description": "Schedule run end time in milliseconds."
          },
          "status": {
            "type": "string",
            "description": "Status of the schedule run."
          },
          "detail": {
            "type": "string",
            "description": "Message details related to the schedule run."
          }
        },
        "description": "Schedule run response object"
      },
      "CronExpressionInput": {
        "type": "object",
        "required": [
          "day_of_month",
          "day_of_week",
          "hour",
          "minute",
          "month",
          "second"
        ],
        "properties": {
          "day_of_month": {
            "type": "string",
            "description": "Day of month of the object."
          },
          "day_of_week": {
            "type": "string",
            "description": "Day of Week of the object."
          },
          "hour": {
            "type": "string",
            "description": "Hour of the object."
          },
          "minute": {
            "type": "string",
            "description": "Minute of the object."
          },
          "month": {
            "type": "string",
            "description": "Month of the object."
          },
          "second": {
            "type": "string",
            "description": "Second of the object."
          }
        },
        "description": "Schedule selected cron expression."
      },
      "PrincipalsListItemInput": {
        "type": "object",
        "required": [
          "identifier",
          "type"
        ],
        "properties": {
          "identifier": {
            "type": "string",
            "description": "Unique ID or name of the user or group."
          },
          "type": {
            "type": "string",
            "description": "Principal type."
          }
        }
      },
      "CALLBACKInputMandatory": {
        "type": "object",
        "properties": {
          "reference": {
            "type": "string",
            "description": "Reference name. By default, the value will be set to action name."
          }
        },
        "description": "CALLBACK Custom Action Type"
      },
      "URLInputMandatory": {
        "type": "object",
        "required": [
          "url"
        ],
        "properties": {
          "authentication": {
            "$ref": "#/components/schemas/AuthenticationInput",
            "description": "Authorization type for the custom action."
          },
          "parameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ParametersListItemInput"
            },
            "description": "Query parameters for url."
          },
          "url": {
            "type": "string",
            "description": "Request Url for the Custom action."
          },
          "reference": {
            "type": "string",
            "description": "Reference name. By default the value will be set to action name"
          }
        },
        "description": "URL Custom Action Type"
      },
      "ActionConfigInputCreate": {
        "type": "object",
        "properties": {
          "position": {
            "type": "string",
            "enum": [
              "MENU",
              "PRIMARY",
              "CONTEXT_MENU"
            ],
            "default": "MENU",
            "description": "Position of the Custom action on the Metadata object. Earlier naming convention: context."
          },
          "visibility": {
            "type": "boolean",
            "default": true,
            "description": "Visibility of the metadata association with custom action. Earlier naming convention: enabled"
          }
        },
        "description": "Specify that the association is enabled for the metadata object Default"
      },
      "CALLBACKInput": {
        "type": "object",
        "properties": {
          "reference": {
            "type": "string",
            "description": "Reference name. By default, the value will be set to action name."
          }
        },
        "description": "CALLBACK Custom Action Type"
      },
      "URLInput": {
        "type": "object",
        "properties": {
          "authentication": {
            "$ref": "#/components/schemas/AuthenticationInput",
            "description": "Authorization type for the custom action."
          },
          "parameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ParametersListItemInput"
            },
            "description": "Query parameters for url."
          },
          "url": {
            "type": "string",
            "description": "Request Url for the Custom action."
          },
          "reference": {
            "type": "string",
            "description": "Reference name. By default the value will be set to action name"
          }
        },
        "description": "URL Custom Action Type"
      },
      "ActionConfigInput": {
        "type": "object",
        "properties": {
          "position": {
            "type": "string",
            "enum": [
              "MENU",
              "PRIMARY",
              "CONTEXT_MENU"
            ],
            "description": "Position of the Custom action on the Metadata object. Earlier naming convention: context."
          },
          "visibility": {
            "type": "boolean",
            "description": "Visibility of the metadata association with custom action. Earlier naming convention: enabled"
          }
        },
        "description": "Specify that the association is enabled for the metadata object Default"
      },
      "Database": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the database."
          },
          "schemas": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SchemaObject"
            },
            "description": "Schemas of the database."
          },
          "auto_created": {
            "type": "boolean",
            "description": "Determines if the object is auto created."
          }
        }
      },
      "CALLBACK": {
        "type": "object",
        "properties": {
          "reference": {
            "type": "string",
            "description": "Reference name of the SDK. By default, the value will be set to action name."
          }
        },
        "description": "CALLBACK Custom Action Type"
      },
      "URL": {
        "type": "object",
        "required": [
          "url"
        ],
        "properties": {
          "authentication": {
            "$ref": "#/components/schemas/Authentication",
            "description": "Authorization type for the custom action."
          },
          "parameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ParametersListItem"
            },
            "description": "Query parameters for url."
          },
          "url": {
            "type": "string",
            "description": "Request Url for the Custom action."
          },
          "reference": {
            "type": "string",
            "description": "Reference name of the SDK. By default, the value will be set to action name."
          }
        },
        "description": "URL Custom Action Type"
      },
      "Action_config": {
        "type": "object",
        "properties": {
          "position": {
            "type": "string",
            "description": "Position of the Custom action on the Metadata object. Earlier naming convention: context."
          },
          "visibility": {
            "type": "boolean",
            "description": "Visibility of the metadata association with custom action. Earlier naming convention: enabled"
          }
        },
        "description": "Specify that the association is enabled for the metadata object"
      },
      "CronExpression": {
        "type": "object",
        "required": [
          "day_of_month",
          "day_of_week",
          "hour",
          "minute",
          "month",
          "second"
        ],
        "properties": {
          "day_of_month": {
            "type": "string",
            "description": "Day of month of the object."
          },
          "day_of_week": {
            "type": "string",
            "description": "Day of Week of the object."
          },
          "hour": {
            "type": "string",
            "description": "Hour of the object."
          },
          "minute": {
            "type": "string",
            "description": "Minute of the object."
          },
          "month": {
            "type": "string",
            "description": "Month of the object."
          },
          "second": {
            "type": "string",
            "description": "Second of the object."
          }
        },
        "description": "Schedule selected cron expression."
      },
      "PrincipalsListItem": {
        "type": "object",
        "required": [
          "identifier",
          "type"
        ],
        "properties": {
          "identifier": {
            "type": "string",
            "description": "Unique ID or name of the user or group."
          },
          "type": {
            "type": "string",
            "description": "Principal type. Valid values are"
          }
        }
      },
      "AuthenticationInput": {
        "type": "object",
        "properties": {
          "API_Key": {
            "$ref": "#/components/schemas/API_KeyInput",
            "description": "With API key auth, you send a key-value pair to the API either in the request headers or query parameters."
          },
          "Basic_Auth": {
            "$ref": "#/components/schemas/Basic_AuthInput",
            "description": "Basic Auth: Basic authentication involves sending a verified username and password with your request."
          },
          "Bearer_Token": {
            "type": "string",
            "description": "Bearer tokens enable requests to authenticate using an access key."
          },
          "No_Auth": {
            "type": "string",
            "description": "No authorization. If your request doesn't require authorization."
          }
        },
        "description": "Authorization type for the custom action."
      },
      "ParametersListItemInput": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Key for the url query parameter"
          },
          "value": {
            "type": "string",
            "description": "Value for the url query parameter"
          }
        }
      },
      "SchemaObject": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the schema."
          },
          "tables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Table"
            },
            "description": "Tables in the schema."
          }
        }
      },
      "Authentication": {
        "type": "object",
        "properties": {
          "API_Key": {
            "$ref": "#/components/schemas/API_Key",
            "description": "With API key auth, you send a key-value pair to the API either in the request headers or query parameters."
          },
          "Basic_Auth": {
            "$ref": "#/components/schemas/Basic_Auth",
            "description": "Basic Auth: Basic authentication involves sending a verified username and password with your request."
          },
          "Bearer_Token": {
            "type": "string",
            "description": "Bearer tokens enable requests to authenticate using an access key."
          },
          "No_Auth": {
            "type": "string",
            "description": "No authorization. If your request doesn't require authorization."
          }
        },
        "description": "Authorization type for the custom action."
      },
      "ParametersListItem": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Key for the url query parameter"
          },
          "value": {
            "type": "string",
            "description": "Value for the url query parameter"
          }
        }
      },
      "API_KeyInput": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Enter your key name"
          },
          "value": {
            "type": "string",
            "description": "Enter you key value"
          }
        },
        "description": "With API key auth, you send a key-value pair to the API either in the request headers or query parameters."
      },
      "Basic_AuthInput": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string",
            "description": "Password for the basic authentication"
          },
          "username": {
            "type": "string",
            "description": "Username for the basic authentication"
          }
        },
        "description": "Basic Auth: Basic authentication involves sending a verified username and password with your request."
      },
      "Table": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the table."
          },
          "columns": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Column"
            },
            "description": "Columns of the table."
          },
          "type": {
            "type": "string",
            "description": "Type of table. Either view or table"
          },
          "description": {
            "type": "string",
            "description": "Description of the table"
          },
          "selected": {
            "type": "boolean",
            "description": "Determines if the table is selected"
          },
          "linked": {
            "type": "boolean",
            "description": "Determines if the table is linked"
          },
          "relationships": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "List of relationships for the table"
          }
        }
      },
      "API_Key": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Enter your key name"
          },
          "value": {
            "type": "string",
            "description": "Enter you key value"
          }
        },
        "description": "With API key auth, you send a key-value pair to the API either in the request headers or query parameters."
      },
      "Basic_Auth": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string",
            "description": "Password for the basic authentication"
          },
          "username": {
            "type": "string",
            "description": "Username for the basic authentication"
          }
        },
        "description": "Basic Auth: Basic authentication involves sending a verified username and password with your request."
      },
      "Column": {
        "type": "object",
        "required": [
          "name",
          "data_type"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the column"
          },
          "data_type": {
            "type": "string",
            "description": "Data type of the column"
          },
          "is_aggregate": {
            "type": "string",
            "description": "Determines if the column schema is an aggregate"
          },
          "can_import": {
            "type": "boolean",
            "description": "Determines if the column schema can be imported"
          },
          "selected": {
            "type": "boolean",
            "description": "Determines if the table is selected"
          },
          "is_linked_active": {
            "type": "boolean",
            "description": "Determines if the table is linked"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "servers": [
    {
      "url": "{base-url}",
      "variables": {
        "base-url": {
          "default": "https://localhost:443"
        }
      }
    }
  ]
}
