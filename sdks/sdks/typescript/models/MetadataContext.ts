/**
 * ThoughtSpot Public REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { HttpFile } from '../http/http';

export class MetadataContext {
    /**
    * List of data_source_identifiers to provide context for breaking down user query into analytical queries that can be run on them.
    */
    'data_source_identifiers'?: Array<string> | null;
    /**
    * List of answer unique identifiers (GUIDs) whose data will be used to guide the response.
    */
    'answer_identifiers'?: Array<string> | null;
    /**
    * Unique identifier to denote current conversation.
    */
    'conversation_identifier'?: string | null;
    /**
    * List of liveboard unique identifiers (GUIDs) whose data will be used to guide the response.
    */
    'liveboard_identifiers'?: Array<string> | null;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "data_source_identifiers",
            "baseName": "data_source_identifiers",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "answer_identifiers",
            "baseName": "answer_identifiers",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "conversation_identifier",
            "baseName": "conversation_identifier",
            "type": "string",
            "format": ""
        },
        {
            "name": "liveboard_identifiers",
            "baseName": "liveboard_identifiers",
            "type": "Array<string>",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return MetadataContext.attributeTypeMap;
    }

    public constructor() {
    }
}

