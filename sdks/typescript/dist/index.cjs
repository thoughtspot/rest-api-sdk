"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from2, except, desc) => {
  if (from2 && typeof from2 === "object" || typeof from2 === "function") {
    for (let key of __getOwnPropNames(from2))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from2[key], enumerable: !(desc = __getOwnPropDesc(from2, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// index.ts
var typescript_exports = {};
__export(typescript_exports, {
  AIApi: () => PromiseAIApi,
  APIKey: () => APIKey,
  APIKeyInput: () => APIKeyInput,
  AccessToken: () => AccessToken,
  ActionConfig: () => ActionConfig,
  ActionConfigInput: () => ActionConfigInput,
  ActionConfigInputCreate: () => ActionConfigInputCreate,
  ActionDetails: () => ActionDetails,
  ActionDetailsInput: () => ActionDetailsInput,
  ActionDetailsInputCreate: () => ActionDetailsInputCreate,
  ActivateUserRequest: () => ActivateUserRequest,
  AnswerContent: () => AnswerContent,
  AnswerDataResponse: () => AnswerDataResponse,
  ApiException: () => ApiException,
  AssignChangeAuthorRequest: () => AssignChangeAuthorRequest,
  AssignTagRequest: () => AssignTagRequest,
  AssociateMetadataInput: () => AssociateMetadataInput,
  AssociateMetadataInputCreate: () => AssociateMetadataInputCreate,
  Authentication: () => Authentication,
  AuthenticationApi: () => PromiseAuthenticationApi,
  AuthenticationInput: () => AuthenticationInput,
  Author: () => Author,
  AuthorMetadataTypeInput: () => AuthorMetadataTypeInput,
  AuthorType: () => AuthorType,
  BasicAuth: () => BasicAuth,
  BasicAuthInput: () => BasicAuthInput,
  BearerAuthAuthentication: () => BearerAuthAuthentication,
  CALLBACK: () => CALLBACK,
  CALLBACKInput: () => CALLBACKInput,
  CALLBACKInputMandatory: () => CALLBACKInputMandatory,
  ChangeUserPasswordRequest: () => ChangeUserPasswordRequest,
  Column: () => Column,
  CommitBranchRequest: () => CommitBranchRequest,
  CommitFileType: () => CommitFileType,
  CommitHistoryResponse: () => CommitHistoryResponse,
  CommitResponse: () => CommitResponse,
  CommiterType: () => CommiterType,
  ConnectionInput: () => ConnectionInput,
  ConnectionsApi: () => PromiseConnectionsApi,
  Conversation: () => Conversation,
  ConvertWorksheetToModelRequest: () => ConvertWorksheetToModelRequest,
  CopyObjectRequest: () => CopyObjectRequest,
  CreateConfigRequest: () => CreateConfigRequest,
  CreateConnectionRequest: () => CreateConnectionRequest,
  CreateConnectionResponse: () => CreateConnectionResponse,
  CreateConversationRequest: () => CreateConversationRequest,
  CreateCustomActionRequest: () => CreateCustomActionRequest,
  CreateCustomActionRequestActionDetails: () => CreateCustomActionRequestActionDetails,
  CreateCustomActionRequestDefaultActionConfig: () => CreateCustomActionRequestDefaultActionConfig,
  CreateEmailCustomisationRequest: () => CreateEmailCustomisationRequest,
  CreateEmailCustomisationResponse: () => CreateEmailCustomisationResponse,
  CreateOrgRequest: () => CreateOrgRequest,
  CreateRoleRequest: () => CreateRoleRequest,
  CreateScheduleRequest: () => CreateScheduleRequest,
  CreateScheduleRequestFrequency: () => CreateScheduleRequestFrequency,
  CreateScheduleRequestLiveboardOptions: () => CreateScheduleRequestLiveboardOptions,
  CreateScheduleRequestPdfOptions: () => CreateScheduleRequestPdfOptions,
  CreateScheduleRequestRecipientDetails: () => CreateScheduleRequestRecipientDetails,
  CreateTagRequest: () => CreateTagRequest,
  CreateUserGroupRequest: () => CreateUserGroupRequest,
  CreateUserRequest: () => CreateUserRequest,
  CreateVariableRequest: () => CreateVariableRequest,
  CronExpression: () => CronExpression,
  CronExpressionInput: () => CronExpressionInput,
  CustomActionApi: () => PromiseCustomActionApi,
  CustomActionMetadataTypeInput: () => CustomActionMetadataTypeInput,
  DBTApi: () => PromiseDBTApi,
  DataApi: () => PromiseDataApi,
  DataWarehouseObjectInput: () => DataWarehouseObjectInput,
  DataWarehouseObjects: () => DataWarehouseObjects,
  Database: () => Database,
  DbtConnectionRequest: () => DbtConnectionRequest,
  DbtGenerateSyncTmlRequest: () => DbtGenerateSyncTmlRequest,
  DbtGenerateTmlRequest: () => DbtGenerateTmlRequest,
  DbtSearchResponse: () => DbtSearchResponse,
  DeactivateUserRequest: () => DeactivateUserRequest,
  DefaultActionConfig: () => DefaultActionConfig,
  DefaultActionConfigInput: () => DefaultActionConfigInput,
  DefaultActionConfigInputCreate: () => DefaultActionConfigInputCreate,
  DefaultActionConfigSearchInput: () => DefaultActionConfigSearchInput,
  DeleteConfigRequest: () => DeleteConfigRequest,
  DeleteConnectionRequest: () => DeleteConnectionRequest,
  DeleteMetadataRequest: () => DeleteMetadataRequest,
  DeleteMetadataTypeInput: () => DeleteMetadataTypeInput,
  DeployCommitRequest: () => DeployCommitRequest,
  DeployResponse: () => DeployResponse,
  EmailCustomisationApi: () => PromiseEmailCustomisationApi,
  ErrorResponse: () => ErrorResponse,
  EurekaDecomposeQueryResponse: () => EurekaDecomposeQueryResponse,
  EurekaLLMDecomposeQueryResponse: () => EurekaLLMDecomposeQueryResponse,
  EurekaLLMSuggestedQuery: () => EurekaLLMSuggestedQuery,
  ExcludeMetadataListItemInput: () => ExcludeMetadataListItemInput,
  ExportAnswerReportRequest: () => ExportAnswerReportRequest,
  ExportAnswerReportRequestRegionalSettings: () => ExportAnswerReportRequestRegionalSettings,
  ExportLiveboardReportRequest: () => ExportLiveboardReportRequest,
  ExportLiveboardReportRequestPdfOptions: () => ExportLiveboardReportRequestPdfOptions,
  ExportLiveboardReportRequestPngOptions: () => ExportLiveboardReportRequestPngOptions,
  ExportMetadataTMLBatchedRequest: () => ExportMetadataTMLBatchedRequest,
  ExportMetadataTMLRequest: () => ExportMetadataTMLRequest,
  ExportMetadataTMLRequestExportOptions: () => ExportMetadataTMLRequestExportOptions,
  ExportMetadataTypeInput: () => ExportMetadataTypeInput,
  ExportOptions: () => ExportOptions,
  FavoriteMetadataInput: () => FavoriteMetadataInput,
  FavoriteMetadataItem: () => FavoriteMetadataItem,
  FavoriteObjectOptionsInput: () => FavoriteObjectOptionsInput,
  FetchAnswerDataRequest: () => FetchAnswerDataRequest,
  FetchAnswerSqlQueryRequest: () => FetchAnswerSqlQueryRequest,
  FetchAsyncImportTaskStatusRequest: () => FetchAsyncImportTaskStatusRequest,
  FetchConnectionDiffStatusResponse: () => FetchConnectionDiffStatusResponse,
  FetchLiveboardDataRequest: () => FetchLiveboardDataRequest,
  FetchLiveboardSqlQueryRequest: () => FetchLiveboardSqlQueryRequest,
  FetchLogsRequest: () => FetchLogsRequest,
  FetchPermissionsOfPrincipalsRequest: () => FetchPermissionsOfPrincipalsRequest,
  FetchPermissionsOnMetadataRequest: () => FetchPermissionsOnMetadataRequest,
  FilterRules: () => FilterRules,
  ForceLogoutUsersRequest: () => ForceLogoutUsersRequest,
  Frequency: () => Frequency,
  FrequencyInput: () => FrequencyInput,
  GenericInfo: () => GenericInfo,
  GetAsyncImportStatusResponse: () => GetAsyncImportStatusResponse,
  GetCustomAccessTokenRequest: () => GetCustomAccessTokenRequest,
  GetFullAccessTokenRequest: () => GetFullAccessTokenRequest,
  GetObjectAccessTokenRequest: () => GetObjectAccessTokenRequest,
  GetTokenResponse: () => GetTokenResponse,
  GroupObject: () => GroupObject,
  GroupsApi: () => PromiseGroupsApi,
  GroupsImportListInput: () => GroupsImportListInput,
  HeaderAttributeInput: () => HeaderAttributeInput,
  HeaderUpdateInput: () => HeaderUpdateInput,
  HttpException: () => HttpException,
  HttpMethod: () => HttpMethod,
  ImportEPackAsyncTaskStatus: () => ImportEPackAsyncTaskStatus,
  ImportMetadataTMLAsyncRequest: () => ImportMetadataTMLAsyncRequest,
  ImportMetadataTMLRequest: () => ImportMetadataTMLRequest,
  ImportUser: () => ImportUser,
  ImportUserGroupsRequest: () => ImportUserGroupsRequest,
  ImportUserGroupsResponse: () => ImportUserGroupsResponse,
  ImportUserType: () => ImportUserType,
  ImportUsersRequest: () => ImportUsersRequest,
  ImportUsersResponse: () => ImportUsersResponse,
  InputEurekaNLSRequest: () => InputEurekaNLSRequest,
  InputVariableValue: () => InputVariableValue,
  IsomorphicFetchHttpLibrary: () => IsomorphicFetchHttpLibrary,
  JWTMetadataObject: () => JWTMetadataObject,
  JWTParameter: () => JWTParameter,
  JWTUserOptions: () => JWTUserOptions,
  JWTUserOptionsFull: () => JWTUserOptionsFull,
  LiveboardContent: () => LiveboardContent,
  LiveboardDataResponse: () => LiveboardDataResponse,
  LiveboardOptions: () => LiveboardOptions,
  LiveboardOptionsInput: () => LiveboardOptionsInput,
  LogApi: () => PromiseLogApi,
  LogResponse: () => LogResponse,
  LoginRequest: () => LoginRequest,
  MetadataApi: () => PromiseMetadataApi,
  MetadataAssociationItem: () => MetadataAssociationItem,
  MetadataInput: () => MetadataInput,
  MetadataListItemInput: () => MetadataListItemInput,
  MetadataObject: () => MetadataObject,
  MetadataResponse: () => MetadataResponse,
  MetadataSearchResponse: () => MetadataSearchResponse,
  MetadataSearchSortOptions: () => MetadataSearchSortOptions,
  ModelTableList: () => ModelTableList,
  ObjectIDAndName: () => ObjectIDAndName,
  Org: () => Org,
  OrgInfo: () => OrgInfo,
  OrgResponse: () => OrgResponse,
  OrgType: () => OrgType,
  OrgsApi: () => PromiseOrgsApi,
  ParameterValues: () => ParameterValues,
  ParameterizeMetadataRequest: () => ParameterizeMetadataRequest,
  ParametersListItem: () => ParametersListItem,
  ParametersListItemInput: () => ParametersListItemInput,
  PdfOptions: () => PdfOptions,
  PdfOptionsInput: () => PdfOptionsInput,
  PermissionInput: () => PermissionInput,
  PermissionOfMetadataResponse: () => PermissionOfMetadataResponse,
  PermissionOfPrincipalsResponse: () => PermissionOfPrincipalsResponse,
  PermissionsMetadataTypeInput: () => PermissionsMetadataTypeInput,
  PngOptionsInput: () => PngOptionsInput,
  PrincipalsInput: () => PrincipalsInput,
  PrincipalsListItem: () => PrincipalsListItem,
  PrincipalsListItemInput: () => PrincipalsListItemInput,
  PublishMetadataListItem: () => PublishMetadataListItem,
  PublishMetadataRequest: () => PublishMetadataRequest,
  QueryGetDecomposedQueryRequest: () => QueryGetDecomposedQueryRequest,
  QueryGetDecomposedQueryRequestNlsRequest: () => QueryGetDecomposedQueryRequestNlsRequest,
  RecipientDetails: () => RecipientDetails,
  RecipientDetailsInput: () => RecipientDetailsInput,
  RegionalSettingsInput: () => RegionalSettingsInput,
  RepoConfigObject: () => RepoConfigObject,
  ReportsApi: () => PromiseReportsApi,
  RequestContext: () => RequestContext2,
  RequiredError: () => RequiredError,
  ResetUserPasswordRequest: () => ResetUserPasswordRequest,
  ResponseActivationURL: () => ResponseActivationURL,
  ResponseContext: () => ResponseContext,
  ResponseCopyObject: () => ResponseCopyObject,
  ResponseCustomAction: () => ResponseCustomAction,
  ResponseFailedEntities: () => ResponseFailedEntities,
  ResponseFailedEntity: () => ResponseFailedEntity,
  ResponseIncompleteEntities: () => ResponseIncompleteEntities,
  ResponseIncompleteEntity: () => ResponseIncompleteEntity,
  ResponseMessage: () => ResponseMessage,
  ResponsePostUpgradeFailedEntities: () => ResponsePostUpgradeFailedEntities,
  ResponsePostUpgradeFailedEntity: () => ResponsePostUpgradeFailedEntity,
  ResponseSchedule: () => ResponseSchedule,
  ResponseScheduleRun: () => ResponseScheduleRun,
  ResponseSuccessfulEntities: () => ResponseSuccessfulEntities,
  ResponseSuccessfulEntity: () => ResponseSuccessfulEntity,
  ResponseWorksheetToModelConversion: () => ResponseWorksheetToModelConversion,
  RevertCommitRequest: () => RevertCommitRequest,
  RevertResponse: () => RevertResponse,
  RevertedMetadata: () => RevertedMetadata,
  RevokeTokenRequest: () => RevokeTokenRequest,
  RiseGQLArgWrapper: () => RiseGQLArgWrapper,
  RiseSetter: () => RiseSetter,
  Role: () => Role,
  RoleResponse: () => RoleResponse,
  RolesApi: () => PromiseRolesApi,
  RuntimeFilter: () => RuntimeFilter,
  RuntimeFilters: () => RuntimeFilters,
  RuntimeParamOverride: () => RuntimeParamOverride,
  RuntimeParameters: () => RuntimeParameters,
  RuntimeSort: () => RuntimeSort,
  RuntimeSorts: () => RuntimeSorts,
  ScheduleHistoryRunsOptionsInput: () => ScheduleHistoryRunsOptionsInput,
  SchedulesApi: () => PromiseSchedulesApi,
  SchedulesPdfOptionsInput: () => SchedulesPdfOptionsInput,
  SchemaObject: () => SchemaObject,
  Scope: () => Scope,
  SearchCommitsRequest: () => SearchCommitsRequest,
  SearchConfigRequest: () => SearchConfigRequest,
  SearchConnectionRequest: () => SearchConnectionRequest,
  SearchConnectionRequestSortOptions: () => SearchConnectionRequestSortOptions,
  SearchConnectionResponse: () => SearchConnectionResponse,
  SearchCustomActionsRequest: () => SearchCustomActionsRequest,
  SearchCustomActionsRequestDefaultActionConfig: () => SearchCustomActionsRequestDefaultActionConfig,
  SearchDataRequest: () => SearchDataRequest,
  SearchDataResponse: () => SearchDataResponse,
  SearchMetadataRequest: () => SearchMetadataRequest,
  SearchMetadataRequestFavoriteObjectOptions: () => SearchMetadataRequestFavoriteObjectOptions,
  SearchMetadataRequestSortOptions: () => SearchMetadataRequestSortOptions,
  SearchOrgsRequest: () => SearchOrgsRequest,
  SearchRoleResponse: () => SearchRoleResponse,
  SearchRolesRequest: () => SearchRolesRequest,
  SearchSchedulesRequest: () => SearchSchedulesRequest,
  SearchSchedulesRequestHistoryRunsOptions: () => SearchSchedulesRequestHistoryRunsOptions,
  SearchSchedulesRequestSortOptions: () => SearchSchedulesRequestSortOptions,
  SearchTagsRequest: () => SearchTagsRequest,
  SearchUserGroupsRequest: () => SearchUserGroupsRequest,
  SearchUserGroupsRequestSortOptions: () => SearchUserGroupsRequestSortOptions,
  SearchUsersRequest: () => SearchUsersRequest,
  SearchUsersRequestSortOptions: () => SearchUsersRequestSortOptions,
  SearchVariablesRequest: () => SearchVariablesRequest,
  SecurityApi: () => PromiseSecurityApi,
  SelfDecodingBody: () => SelfDecodingBody,
  SendMessageRequest: () => SendMessageRequest,
  ServerConfiguration: () => ServerConfiguration,
  ShareMetadataRequest: () => ShareMetadataRequest,
  ShareMetadataTypeInput: () => ShareMetadataTypeInput,
  SharePermissionsInput: () => SharePermissionsInput,
  SingleAnswerRequest: () => SingleAnswerRequest,
  SortOptionInput: () => SortOptionInput,
  SortOptions: () => SortOptions,
  SortingOptions: () => SortingOptions,
  SqlQuery: () => SqlQuery,
  SqlQueryResponse: () => SqlQueryResponse,
  SystemApi: () => PromiseSystemApi,
  SystemConfig: () => SystemConfig,
  SystemInfo: () => SystemInfo,
  Table: () => Table,
  Tag: () => Tag,
  TagMetadataTypeInput: () => TagMetadataTypeInput,
  TagsApi: () => PromiseTagsApi,
  ThoughtSpotRestApi: () => PromiseThoughtSpotRestApi,
  Token: () => Token,
  TokenAccessScopeObject: () => TokenAccessScopeObject,
  TokenValidationResponse: () => TokenValidationResponse,
  URL: () => URL2,
  URLInput: () => URLInput,
  URLInputMandatory: () => URLInputMandatory,
  UnparameterizeMetadataRequest: () => UnparameterizeMetadataRequest,
  UnpublishMetadataRequest: () => UnpublishMetadataRequest,
  UpdateConfigRequest: () => UpdateConfigRequest,
  UpdateConnectionRequest: () => UpdateConnectionRequest,
  UpdateConnectionV2Request: () => UpdateConnectionV2Request,
  UpdateCustomActionRequest: () => UpdateCustomActionRequest,
  UpdateCustomActionRequestActionDetails: () => UpdateCustomActionRequestActionDetails,
  UpdateCustomActionRequestDefaultActionConfig: () => UpdateCustomActionRequestDefaultActionConfig,
  UpdateDbtConnectionRequest: () => UpdateDbtConnectionRequest,
  UpdateMetadataHeaderRequest: () => UpdateMetadataHeaderRequest,
  UpdateMetadataObjIdRequest: () => UpdateMetadataObjIdRequest,
  UpdateObjIdInput: () => UpdateObjIdInput,
  UpdateOrgRequest: () => UpdateOrgRequest,
  UpdateRoleRequest: () => UpdateRoleRequest,
  UpdateScheduleRequest: () => UpdateScheduleRequest,
  UpdateScheduleRequestFrequency: () => UpdateScheduleRequestFrequency,
  UpdateScheduleRequestLiveboardOptions: () => UpdateScheduleRequestLiveboardOptions,
  UpdateScheduleRequestPdfOptions: () => UpdateScheduleRequestPdfOptions,
  UpdateScheduleRequestRecipientDetails: () => UpdateScheduleRequestRecipientDetails,
  UpdateSystemConfigRequest: () => UpdateSystemConfigRequest,
  UpdateTagRequest: () => UpdateTagRequest,
  UpdateUserGroupRequest: () => UpdateUserGroupRequest,
  UpdateUserRequest: () => UpdateUserRequest,
  UpdateVariableRequest: () => UpdateVariableRequest,
  UpdateVariableValuesRequest: () => UpdateVariableValuesRequest,
  User: () => User,
  UserGroup: () => UserGroup,
  UserGroupResponse: () => UserGroupResponse,
  UserInfo: () => UserInfo,
  UserObject: () => UserObject,
  UserParameterOptions: () => UserParameterOptions,
  UsersApi: () => PromiseUsersApi,
  ValidateMergeRequest: () => ValidateMergeRequest,
  ValidateTokenRequest: () => ValidateTokenRequest,
  Variable: () => Variable,
  VariableApi: () => PromiseVariableApi,
  VariableDetailInput: () => VariableDetailInput,
  VariableValue: () => VariableValue,
  VariableValueInput: () => VariableValueInput,
  VersionControlApi: () => PromiseVersionControlApi,
  configureAuthMethods: () => configureAuthMethods,
  createBasicConfig: () => createBasicConfig,
  createBearerAuthenticationConfig: () => createBearerAuthenticationConfig,
  createConfiguration: () => createConfiguration,
  server1: () => server1,
  servers: () => servers,
  wrapHttpLibrary: () => wrapHttpLibrary
});
module.exports = __toCommonJS(typescript_exports);

// rxjsStub.ts
var Observable = class _Observable {
  constructor(promise) {
    this.promise = promise;
  }
  toPromise() {
    return this.promise;
  }
  pipe(callback) {
    return new _Observable(this.promise.then(callback));
  }
};
function from(promise) {
  return new Observable(promise);
}
function of(value) {
  return new Observable(Promise.resolve(value));
}
function mergeMap(callback) {
  return (value) => callback(value).toPromise();
}
function map(callback) {
  return callback;
}

// http/isomorphic-fetch.ts
var import_whatwg_fetch = require("whatwg-fetch");
var IsomorphicFetchHttpLibrary = class {
  send(request) {
    let method = request.getHttpMethod().toString();
    let body = request.getBody();
    const resultPromise = fetch(request.getUrl(), {
      method,
      body,
      headers: request.getHeaders(),
      credentials: "include"
    }).then((resp) => {
      const headers = {};
      resp.headers.forEach((value, name) => {
        headers[name] = value;
      });
      const body2 = {
        text: () => resp.text(),
        binary: () => resp.blob()
      };
      return new ResponseContext(resp.status, headers, body2);
    });
    return from(resultPromise);
  }
};

// http/http.ts
var HttpMethod = /* @__PURE__ */ ((HttpMethod3) => {
  HttpMethod3["GET"] = "GET";
  HttpMethod3["HEAD"] = "HEAD";
  HttpMethod3["POST"] = "POST";
  HttpMethod3["PUT"] = "PUT";
  HttpMethod3["DELETE"] = "DELETE";
  HttpMethod3["CONNECT"] = "CONNECT";
  HttpMethod3["OPTIONS"] = "OPTIONS";
  HttpMethod3["TRACE"] = "TRACE";
  HttpMethod3["PATCH"] = "PATCH";
  return HttpMethod3;
})(HttpMethod || {});
var HttpException = class extends Error {
  constructor(msg) {
    super(msg);
  }
};
var RequestContext2 = class {
  /**
   * Creates the request context using a http method and request resource url
   *
   * @param url url of the requested resource
   * @param httpMethod http method
   */
  constructor(url, httpMethod) {
    this.httpMethod = httpMethod;
    this.headers = {};
    this.body = void 0;
    this.url = new URL(url);
  }
  /*
   * Returns the url set in the constructor including the query string
   *
   */
  getUrl() {
    return this.url.toString().endsWith("/") ? this.url.toString().slice(0, -1) : this.url.toString();
  }
  /**
   * Replaces the url set in the constructor with this url.
   *
   */
  setUrl(url) {
    this.url = new URL(url);
  }
  /**
   * Sets the body of the http request either as a string or FormData
   *
   * Note that setting a body on a HTTP GET, HEAD, DELETE, CONNECT or TRACE
   * request is discouraged.
   * https://httpwg.org/http-core/draft-ietf-httpbis-semantics-latest.html#rfc.section.7.3.1
   *
   * @param body the body of the request
   */
  setBody(body) {
    this.body = body;
  }
  getHttpMethod() {
    return this.httpMethod;
  }
  getHeaders() {
    return this.headers;
  }
  getBody() {
    return this.body;
  }
  setQueryParam(name, value) {
    this.url.searchParams.set(name, value);
  }
  /**
   * Sets a cookie with the name and value. NO check  for duplicate cookies is performed
   *
   */
  addCookie(name, value) {
    if (!this.headers["Cookie"]) {
      this.headers["Cookie"] = "";
    }
    this.headers["Cookie"] += name + "=" + value + "; ";
  }
  setHeaderParam(key, value) {
    this.headers[key] = value;
  }
};
var SelfDecodingBody = class {
  constructor(dataSource) {
    this.dataSource = dataSource;
  }
  binary() {
    return this.dataSource;
  }
  text() {
    return __async(this, null, function* () {
      const data = yield this.dataSource;
      if (data.text) {
        return data.text();
      }
      return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.addEventListener("load", () => resolve(reader.result));
        reader.addEventListener("error", () => reject(reader.error));
        reader.readAsText(data);
      });
    });
  }
};
var ResponseContext = class {
  constructor(httpStatusCode, headers, body) {
    this.httpStatusCode = httpStatusCode;
    this.headers = headers;
    this.body = body;
  }
  /**
   * Parse header value in the form `value; param1="value1"`
   *
   * E.g. for Content-Type or Content-Disposition
   * Parameter names are converted to lower case
   * The first parameter is returned with the key `""`
   */
  getParsedHeader(headerName) {
    const result = {};
    if (!this.headers[headerName]) {
      return result;
    }
    const parameters = this.headers[headerName].split(";");
    for (const parameter of parameters) {
      let [key, value] = parameter.split("=", 2);
      key = key.toLowerCase().trim();
      if (value === void 0) {
        result[""] = key;
      } else {
        value = value.trim();
        if (value.startsWith('"') && value.endsWith('"')) {
          value = value.substring(1, value.length - 1);
        }
        result[key] = value;
      }
    }
    return result;
  }
  getBodyAsFile() {
    return __async(this, null, function* () {
      const data = yield this.body.binary();
      const fileName = this.getParsedHeader("content-disposition")["filename"] || "";
      const contentType = this.headers["content-type"] || "";
      try {
        return new File([data], fileName, { type: contentType });
      } catch (error) {
        return Object.assign(data, {
          name: fileName,
          type: contentType
        });
      }
    });
  }
  /**
   * Use a heuristic to get a body of unknown data structure.
   * Return as string if possible, otherwise as binary.
   */
  getBodyAsAny() {
    try {
      return this.body.text();
    } catch (e) {
    }
    try {
      return this.body.binary();
    } catch (e) {
    }
    return Promise.resolve(void 0);
  }
};
function wrapHttpLibrary(promiseHttpLibrary) {
  return {
    send(request) {
      return from(promiseHttpLibrary.send(request));
    }
  };
}

// auth/auth.ts
var BearerAuthAuthentication = class {
  /**
   * Configures the http authentication with the required details.
   *
   * @param tokenProvider service that can provide the up-to-date token when needed
   */
  constructor(tokenProvider) {
    this.tokenProvider = tokenProvider;
  }
  getName() {
    return "bearerAuth";
  }
  applySecurityAuthentication(context) {
    return __async(this, null, function* () {
      context.setHeaderParam("Authorization", "Bearer " + (yield this.tokenProvider.getToken()));
    });
  }
};
function configureAuthMethods(config) {
  let authMethods = {};
  if (!config) {
    return authMethods;
  }
  authMethods["default"] = config["default"];
  if (config["bearerAuth"]) {
    authMethods["bearerAuth"] = new BearerAuthAuthentication(
      config["bearerAuth"]["tokenProvider"]
    );
  }
  return authMethods;
}

// models/APIKey.ts
var _APIKey = class _APIKey {
  static getAttributeTypeMap() {
    return _APIKey.attributeTypeMap;
  }
  constructor() {
  }
};
_APIKey.discriminator = void 0;
_APIKey.attributeTypeMap = [
  {
    "name": "key",
    "baseName": "key",
    "type": "string",
    "format": ""
  },
  {
    "name": "value",
    "baseName": "value",
    "type": "string",
    "format": ""
  }
];
var APIKey = _APIKey;

// models/APIKeyInput.ts
var _APIKeyInput = class _APIKeyInput {
  static getAttributeTypeMap() {
    return _APIKeyInput.attributeTypeMap;
  }
  constructor() {
  }
};
_APIKeyInput.discriminator = void 0;
_APIKeyInput.attributeTypeMap = [
  {
    "name": "key",
    "baseName": "key",
    "type": "string",
    "format": ""
  },
  {
    "name": "value",
    "baseName": "value",
    "type": "string",
    "format": ""
  }
];
var APIKeyInput = _APIKeyInput;

// models/AccessToken.ts
var _AccessToken = class _AccessToken {
  static getAttributeTypeMap() {
    return _AccessToken.attributeTypeMap;
  }
  constructor() {
  }
};
_AccessToken.discriminator = void 0;
_AccessToken.attributeTypeMap = [
  {
    "name": "id",
    "baseName": "id",
    "type": "string",
    "format": ""
  },
  {
    "name": "token",
    "baseName": "token",
    "type": "string",
    "format": ""
  },
  {
    "name": "org",
    "baseName": "org",
    "type": "OrgInfo",
    "format": ""
  },
  {
    "name": "user",
    "baseName": "user",
    "type": "UserInfo",
    "format": ""
  },
  {
    "name": "creation_time_in_millis",
    "baseName": "creation_time_in_millis",
    "type": "number",
    "format": "float"
  },
  {
    "name": "expiration_time_in_millis",
    "baseName": "expiration_time_in_millis",
    "type": "number",
    "format": "float"
  }
];
var AccessToken = _AccessToken;

// models/ActionConfig.ts
var _ActionConfig = class _ActionConfig {
  static getAttributeTypeMap() {
    return _ActionConfig.attributeTypeMap;
  }
  constructor() {
  }
};
_ActionConfig.discriminator = void 0;
_ActionConfig.attributeTypeMap = [
  {
    "name": "position",
    "baseName": "position",
    "type": "string",
    "format": ""
  },
  {
    "name": "visibility",
    "baseName": "visibility",
    "type": "boolean",
    "format": ""
  }
];
var ActionConfig = _ActionConfig;

// models/ActionConfigInput.ts
var _ActionConfigInput = class _ActionConfigInput {
  static getAttributeTypeMap() {
    return _ActionConfigInput.attributeTypeMap;
  }
  constructor() {
  }
};
_ActionConfigInput.discriminator = void 0;
_ActionConfigInput.attributeTypeMap = [
  {
    "name": "position",
    "baseName": "position",
    "type": "ActionConfigInputPositionEnum",
    "format": ""
  },
  {
    "name": "visibility",
    "baseName": "visibility",
    "type": "boolean",
    "format": ""
  }
];
var ActionConfigInput = _ActionConfigInput;

// models/ActionConfigInputCreate.ts
var _ActionConfigInputCreate = class _ActionConfigInputCreate {
  static getAttributeTypeMap() {
    return _ActionConfigInputCreate.attributeTypeMap;
  }
  constructor() {
  }
};
_ActionConfigInputCreate.discriminator = void 0;
_ActionConfigInputCreate.attributeTypeMap = [
  {
    "name": "position",
    "baseName": "position",
    "type": "ActionConfigInputCreatePositionEnum",
    "format": ""
  },
  {
    "name": "visibility",
    "baseName": "visibility",
    "type": "boolean",
    "format": ""
  }
];
var ActionConfigInputCreate = _ActionConfigInputCreate;

// models/ActionDetails.ts
var _ActionDetails = class _ActionDetails {
  static getAttributeTypeMap() {
    return _ActionDetails.attributeTypeMap;
  }
  constructor() {
  }
};
_ActionDetails.discriminator = void 0;
_ActionDetails.attributeTypeMap = [
  {
    "name": "CALLBACK",
    "baseName": "CALLBACK",
    "type": "CALLBACK",
    "format": ""
  },
  {
    "name": "URL",
    "baseName": "URL",
    "type": "URL",
    "format": ""
  }
];
var ActionDetails = _ActionDetails;

// models/ActionDetailsInput.ts
var _ActionDetailsInput = class _ActionDetailsInput {
  static getAttributeTypeMap() {
    return _ActionDetailsInput.attributeTypeMap;
  }
  constructor() {
  }
};
_ActionDetailsInput.discriminator = void 0;
_ActionDetailsInput.attributeTypeMap = [
  {
    "name": "CALLBACK",
    "baseName": "CALLBACK",
    "type": "CALLBACKInput",
    "format": ""
  },
  {
    "name": "URL",
    "baseName": "URL",
    "type": "URLInput",
    "format": ""
  }
];
var ActionDetailsInput = _ActionDetailsInput;

// models/ActionDetailsInputCreate.ts
var _ActionDetailsInputCreate = class _ActionDetailsInputCreate {
  static getAttributeTypeMap() {
    return _ActionDetailsInputCreate.attributeTypeMap;
  }
  constructor() {
  }
};
_ActionDetailsInputCreate.discriminator = void 0;
_ActionDetailsInputCreate.attributeTypeMap = [
  {
    "name": "CALLBACK",
    "baseName": "CALLBACK",
    "type": "CALLBACKInputMandatory",
    "format": ""
  },
  {
    "name": "URL",
    "baseName": "URL",
    "type": "URLInputMandatory",
    "format": ""
  }
];
var ActionDetailsInputCreate = _ActionDetailsInputCreate;

// models/ActivateUserRequest.ts
var _ActivateUserRequest = class _ActivateUserRequest {
  static getAttributeTypeMap() {
    return _ActivateUserRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_ActivateUserRequest.discriminator = void 0;
_ActivateUserRequest.attributeTypeMap = [
  {
    "name": "user_identifier",
    "baseName": "user_identifier",
    "type": "string",
    "format": ""
  },
  {
    "name": "auth_token",
    "baseName": "auth_token",
    "type": "string",
    "format": ""
  },
  {
    "name": "password",
    "baseName": "password",
    "type": "string",
    "format": ""
  },
  {
    "name": "properties",
    "baseName": "properties",
    "type": "string",
    "format": ""
  }
];
var ActivateUserRequest = _ActivateUserRequest;

// models/AnswerContent.ts
var _AnswerContent = class _AnswerContent {
  static getAttributeTypeMap() {
    return _AnswerContent.attributeTypeMap;
  }
  constructor() {
  }
};
_AnswerContent.discriminator = void 0;
_AnswerContent.attributeTypeMap = [
  {
    "name": "available_data_row_count",
    "baseName": "available_data_row_count",
    "type": "number",
    "format": "int32"
  },
  {
    "name": "column_names",
    "baseName": "column_names",
    "type": "Array<string>",
    "format": ""
  },
  {
    "name": "data_rows",
    "baseName": "data_rows",
    "type": "Array<any>",
    "format": ""
  },
  {
    "name": "record_offset",
    "baseName": "record_offset",
    "type": "number",
    "format": "int32"
  },
  {
    "name": "record_size",
    "baseName": "record_size",
    "type": "number",
    "format": "int32"
  },
  {
    "name": "returned_data_row_count",
    "baseName": "returned_data_row_count",
    "type": "number",
    "format": "int32"
  },
  {
    "name": "sampling_ratio",
    "baseName": "sampling_ratio",
    "type": "number",
    "format": "float"
  }
];
var AnswerContent = _AnswerContent;

// models/AnswerDataResponse.ts
var _AnswerDataResponse = class _AnswerDataResponse {
  static getAttributeTypeMap() {
    return _AnswerDataResponse.attributeTypeMap;
  }
  constructor() {
  }
};
_AnswerDataResponse.discriminator = void 0;
_AnswerDataResponse.attributeTypeMap = [
  {
    "name": "metadata_id",
    "baseName": "metadata_id",
    "type": "string",
    "format": ""
  },
  {
    "name": "metadata_name",
    "baseName": "metadata_name",
    "type": "string",
    "format": ""
  },
  {
    "name": "contents",
    "baseName": "contents",
    "type": "Array<AnswerContent>",
    "format": ""
  }
];
var AnswerDataResponse = _AnswerDataResponse;

// models/AssignChangeAuthorRequest.ts
var _AssignChangeAuthorRequest = class _AssignChangeAuthorRequest {
  static getAttributeTypeMap() {
    return _AssignChangeAuthorRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_AssignChangeAuthorRequest.discriminator = void 0;
_AssignChangeAuthorRequest.attributeTypeMap = [
  {
    "name": "metadata",
    "baseName": "metadata",
    "type": "Array<AuthorMetadataTypeInput>",
    "format": ""
  },
  {
    "name": "user_identifier",
    "baseName": "user_identifier",
    "type": "string",
    "format": ""
  },
  {
    "name": "current_owner_identifier",
    "baseName": "current_owner_identifier",
    "type": "string",
    "format": ""
  }
];
var AssignChangeAuthorRequest = _AssignChangeAuthorRequest;

// models/AssignTagRequest.ts
var _AssignTagRequest = class _AssignTagRequest {
  static getAttributeTypeMap() {
    return _AssignTagRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_AssignTagRequest.discriminator = void 0;
_AssignTagRequest.attributeTypeMap = [
  {
    "name": "metadata",
    "baseName": "metadata",
    "type": "Array<TagMetadataTypeInput>",
    "format": ""
  },
  {
    "name": "tag_identifiers",
    "baseName": "tag_identifiers",
    "type": "Array<string>",
    "format": ""
  }
];
var AssignTagRequest = _AssignTagRequest;

// models/AssociateMetadataInput.ts
var _AssociateMetadataInput = class _AssociateMetadataInput {
  static getAttributeTypeMap() {
    return _AssociateMetadataInput.attributeTypeMap;
  }
  constructor() {
  }
};
_AssociateMetadataInput.discriminator = void 0;
_AssociateMetadataInput.attributeTypeMap = [
  {
    "name": "action_config",
    "baseName": "action_config",
    "type": "ActionConfigInput",
    "format": ""
  },
  {
    "name": "identifier",
    "baseName": "identifier",
    "type": "string",
    "format": ""
  },
  {
    "name": "type",
    "baseName": "type",
    "type": "AssociateMetadataInputTypeEnum",
    "format": ""
  }
];
var AssociateMetadataInput = _AssociateMetadataInput;

// models/AssociateMetadataInputCreate.ts
var _AssociateMetadataInputCreate = class _AssociateMetadataInputCreate {
  static getAttributeTypeMap() {
    return _AssociateMetadataInputCreate.attributeTypeMap;
  }
  constructor() {
  }
};
_AssociateMetadataInputCreate.discriminator = void 0;
_AssociateMetadataInputCreate.attributeTypeMap = [
  {
    "name": "action_config",
    "baseName": "action_config",
    "type": "ActionConfigInputCreate",
    "format": ""
  },
  {
    "name": "identifier",
    "baseName": "identifier",
    "type": "string",
    "format": ""
  },
  {
    "name": "type",
    "baseName": "type",
    "type": "AssociateMetadataInputCreateTypeEnum",
    "format": ""
  }
];
var AssociateMetadataInputCreate = _AssociateMetadataInputCreate;

// models/Authentication.ts
var _Authentication = class _Authentication {
  static getAttributeTypeMap() {
    return _Authentication.attributeTypeMap;
  }
  constructor() {
  }
};
_Authentication.discriminator = void 0;
_Authentication.attributeTypeMap = [
  {
    "name": "API_Key",
    "baseName": "API_Key",
    "type": "APIKey",
    "format": ""
  },
  {
    "name": "Basic_Auth",
    "baseName": "Basic_Auth",
    "type": "BasicAuth",
    "format": ""
  },
  {
    "name": "Bearer_Token",
    "baseName": "Bearer_Token",
    "type": "string",
    "format": ""
  },
  {
    "name": "No_Auth",
    "baseName": "No_Auth",
    "type": "string",
    "format": ""
  }
];
var Authentication = _Authentication;

// models/AuthenticationInput.ts
var _AuthenticationInput = class _AuthenticationInput {
  static getAttributeTypeMap() {
    return _AuthenticationInput.attributeTypeMap;
  }
  constructor() {
  }
};
_AuthenticationInput.discriminator = void 0;
_AuthenticationInput.attributeTypeMap = [
  {
    "name": "API_Key",
    "baseName": "API_Key",
    "type": "APIKeyInput",
    "format": ""
  },
  {
    "name": "Basic_Auth",
    "baseName": "Basic_Auth",
    "type": "BasicAuthInput",
    "format": ""
  },
  {
    "name": "Bearer_Token",
    "baseName": "Bearer_Token",
    "type": "string",
    "format": ""
  },
  {
    "name": "No_Auth",
    "baseName": "No_Auth",
    "type": "string",
    "format": ""
  }
];
var AuthenticationInput = _AuthenticationInput;

// models/Author.ts
var _Author = class _Author {
  static getAttributeTypeMap() {
    return _Author.attributeTypeMap;
  }
  constructor() {
  }
};
_Author.discriminator = void 0;
_Author.attributeTypeMap = [
  {
    "name": "id",
    "baseName": "id",
    "type": "string",
    "format": ""
  },
  {
    "name": "name",
    "baseName": "name",
    "type": "string",
    "format": ""
  }
];
var Author = _Author;

// models/AuthorMetadataTypeInput.ts
var _AuthorMetadataTypeInput = class _AuthorMetadataTypeInput {
  static getAttributeTypeMap() {
    return _AuthorMetadataTypeInput.attributeTypeMap;
  }
  constructor() {
  }
};
_AuthorMetadataTypeInput.discriminator = void 0;
_AuthorMetadataTypeInput.attributeTypeMap = [
  {
    "name": "type",
    "baseName": "type",
    "type": "AuthorMetadataTypeInputTypeEnum",
    "format": ""
  },
  {
    "name": "identifier",
    "baseName": "identifier",
    "type": "string",
    "format": ""
  }
];
var AuthorMetadataTypeInput = _AuthorMetadataTypeInput;

// models/AuthorType.ts
var _AuthorType = class _AuthorType {
  static getAttributeTypeMap() {
    return _AuthorType.attributeTypeMap;
  }
  constructor() {
  }
};
_AuthorType.discriminator = void 0;
_AuthorType.attributeTypeMap = [
  {
    "name": "email",
    "baseName": "email",
    "type": "string",
    "format": ""
  },
  {
    "name": "username",
    "baseName": "username",
    "type": "string",
    "format": ""
  }
];
var AuthorType = _AuthorType;

// models/BasicAuth.ts
var _BasicAuth = class _BasicAuth {
  static getAttributeTypeMap() {
    return _BasicAuth.attributeTypeMap;
  }
  constructor() {
  }
};
_BasicAuth.discriminator = void 0;
_BasicAuth.attributeTypeMap = [
  {
    "name": "password",
    "baseName": "password",
    "type": "string",
    "format": ""
  },
  {
    "name": "username",
    "baseName": "username",
    "type": "string",
    "format": ""
  }
];
var BasicAuth = _BasicAuth;

// models/BasicAuthInput.ts
var _BasicAuthInput = class _BasicAuthInput {
  static getAttributeTypeMap() {
    return _BasicAuthInput.attributeTypeMap;
  }
  constructor() {
  }
};
_BasicAuthInput.discriminator = void 0;
_BasicAuthInput.attributeTypeMap = [
  {
    "name": "password",
    "baseName": "password",
    "type": "string",
    "format": ""
  },
  {
    "name": "username",
    "baseName": "username",
    "type": "string",
    "format": ""
  }
];
var BasicAuthInput = _BasicAuthInput;

// models/CALLBACK.ts
var _CALLBACK = class _CALLBACK {
  static getAttributeTypeMap() {
    return _CALLBACK.attributeTypeMap;
  }
  constructor() {
  }
};
_CALLBACK.discriminator = void 0;
_CALLBACK.attributeTypeMap = [
  {
    "name": "reference",
    "baseName": "reference",
    "type": "string",
    "format": ""
  }
];
var CALLBACK = _CALLBACK;

// models/CALLBACKInput.ts
var _CALLBACKInput = class _CALLBACKInput {
  static getAttributeTypeMap() {
    return _CALLBACKInput.attributeTypeMap;
  }
  constructor() {
  }
};
_CALLBACKInput.discriminator = void 0;
_CALLBACKInput.attributeTypeMap = [
  {
    "name": "reference",
    "baseName": "reference",
    "type": "string",
    "format": ""
  }
];
var CALLBACKInput = _CALLBACKInput;

// models/CALLBACKInputMandatory.ts
var _CALLBACKInputMandatory = class _CALLBACKInputMandatory {
  static getAttributeTypeMap() {
    return _CALLBACKInputMandatory.attributeTypeMap;
  }
  constructor() {
  }
};
_CALLBACKInputMandatory.discriminator = void 0;
_CALLBACKInputMandatory.attributeTypeMap = [
  {
    "name": "reference",
    "baseName": "reference",
    "type": "string",
    "format": ""
  }
];
var CALLBACKInputMandatory = _CALLBACKInputMandatory;

// models/ChangeUserPasswordRequest.ts
var _ChangeUserPasswordRequest = class _ChangeUserPasswordRequest {
  static getAttributeTypeMap() {
    return _ChangeUserPasswordRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_ChangeUserPasswordRequest.discriminator = void 0;
_ChangeUserPasswordRequest.attributeTypeMap = [
  {
    "name": "current_password",
    "baseName": "current_password",
    "type": "string",
    "format": ""
  },
  {
    "name": "new_password",
    "baseName": "new_password",
    "type": "string",
    "format": ""
  },
  {
    "name": "user_identifier",
    "baseName": "user_identifier",
    "type": "string",
    "format": ""
  }
];
var ChangeUserPasswordRequest = _ChangeUserPasswordRequest;

// models/Column.ts
var _Column = class _Column {
  static getAttributeTypeMap() {
    return _Column.attributeTypeMap;
  }
  constructor() {
  }
};
_Column.discriminator = void 0;
_Column.attributeTypeMap = [
  {
    "name": "name",
    "baseName": "name",
    "type": "string",
    "format": ""
  },
  {
    "name": "data_type",
    "baseName": "data_type",
    "type": "string",
    "format": ""
  },
  {
    "name": "is_aggregate",
    "baseName": "is_aggregate",
    "type": "string",
    "format": ""
  },
  {
    "name": "can_import",
    "baseName": "can_import",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "selected",
    "baseName": "selected",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "is_linked_active",
    "baseName": "is_linked_active",
    "type": "boolean",
    "format": ""
  }
];
var Column = _Column;

// models/CommitBranchRequest.ts
var _CommitBranchRequest = class _CommitBranchRequest {
  static getAttributeTypeMap() {
    return _CommitBranchRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_CommitBranchRequest.discriminator = void 0;
_CommitBranchRequest.attributeTypeMap = [
  {
    "name": "metadata",
    "baseName": "metadata",
    "type": "Array<MetadataObject>",
    "format": ""
  },
  {
    "name": "delete_aware",
    "baseName": "delete_aware",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "branch_name",
    "baseName": "branch_name",
    "type": "string",
    "format": ""
  },
  {
    "name": "comment",
    "baseName": "comment",
    "type": "string",
    "format": ""
  }
];
var CommitBranchRequest = _CommitBranchRequest;

// models/CommitFileType.ts
var _CommitFileType = class _CommitFileType {
  static getAttributeTypeMap() {
    return _CommitFileType.attributeTypeMap;
  }
  constructor() {
  }
};
_CommitFileType.discriminator = void 0;
_CommitFileType.attributeTypeMap = [
  {
    "name": "file_name",
    "baseName": "file_name",
    "type": "string",
    "format": ""
  },
  {
    "name": "status_code",
    "baseName": "status_code",
    "type": "string",
    "format": ""
  },
  {
    "name": "status_message",
    "baseName": "status_message",
    "type": "string",
    "format": ""
  }
];
var CommitFileType = _CommitFileType;

// models/CommitHistoryResponse.ts
var _CommitHistoryResponse = class _CommitHistoryResponse {
  static getAttributeTypeMap() {
    return _CommitHistoryResponse.attributeTypeMap;
  }
  constructor() {
  }
};
_CommitHistoryResponse.discriminator = void 0;
_CommitHistoryResponse.attributeTypeMap = [
  {
    "name": "committer",
    "baseName": "committer",
    "type": "CommiterType",
    "format": ""
  },
  {
    "name": "author",
    "baseName": "author",
    "type": "AuthorType",
    "format": ""
  },
  {
    "name": "comment",
    "baseName": "comment",
    "type": "string",
    "format": ""
  },
  {
    "name": "commit_time",
    "baseName": "commit_time",
    "type": "string",
    "format": ""
  },
  {
    "name": "commit_id",
    "baseName": "commit_id",
    "type": "string",
    "format": ""
  },
  {
    "name": "branch",
    "baseName": "branch",
    "type": "string",
    "format": ""
  }
];
var CommitHistoryResponse = _CommitHistoryResponse;

// models/CommitResponse.ts
var _CommitResponse = class _CommitResponse {
  static getAttributeTypeMap() {
    return _CommitResponse.attributeTypeMap;
  }
  constructor() {
  }
};
_CommitResponse.discriminator = void 0;
_CommitResponse.attributeTypeMap = [
  {
    "name": "committer",
    "baseName": "committer",
    "type": "CommiterType",
    "format": ""
  },
  {
    "name": "author",
    "baseName": "author",
    "type": "AuthorType",
    "format": ""
  },
  {
    "name": "comment",
    "baseName": "comment",
    "type": "string",
    "format": ""
  },
  {
    "name": "commit_time",
    "baseName": "commit_time",
    "type": "string",
    "format": ""
  },
  {
    "name": "commit_id",
    "baseName": "commit_id",
    "type": "string",
    "format": ""
  },
  {
    "name": "branch",
    "baseName": "branch",
    "type": "string",
    "format": ""
  },
  {
    "name": "committed_files",
    "baseName": "committed_files",
    "type": "Array<CommitFileType>",
    "format": ""
  }
];
var CommitResponse = _CommitResponse;

// models/CommiterType.ts
var _CommiterType = class _CommiterType {
  static getAttributeTypeMap() {
    return _CommiterType.attributeTypeMap;
  }
  constructor() {
  }
};
_CommiterType.discriminator = void 0;
_CommiterType.attributeTypeMap = [
  {
    "name": "email",
    "baseName": "email",
    "type": "string",
    "format": ""
  },
  {
    "name": "username",
    "baseName": "username",
    "type": "string",
    "format": ""
  }
];
var CommiterType = _CommiterType;

// models/ConnectionInput.ts
var _ConnectionInput = class _ConnectionInput {
  static getAttributeTypeMap() {
    return _ConnectionInput.attributeTypeMap;
  }
  constructor() {
  }
};
_ConnectionInput.discriminator = void 0;
_ConnectionInput.attributeTypeMap = [
  {
    "name": "identifier",
    "baseName": "identifier",
    "type": "string",
    "format": ""
  },
  {
    "name": "name_pattern",
    "baseName": "name_pattern",
    "type": "string",
    "format": ""
  },
  {
    "name": "data_warehouse_objects",
    "baseName": "data_warehouse_objects",
    "type": "Array<DataWarehouseObjectInput>",
    "format": ""
  }
];
var ConnectionInput = _ConnectionInput;

// models/Conversation.ts
var _Conversation = class _Conversation {
  static getAttributeTypeMap() {
    return _Conversation.attributeTypeMap;
  }
  constructor() {
  }
};
_Conversation.discriminator = void 0;
_Conversation.attributeTypeMap = [
  {
    "name": "conversation_identifier",
    "baseName": "conversation_identifier",
    "type": "string",
    "format": ""
  }
];
var Conversation = _Conversation;

// models/ConvertWorksheetToModelRequest.ts
var _ConvertWorksheetToModelRequest = class _ConvertWorksheetToModelRequest {
  static getAttributeTypeMap() {
    return _ConvertWorksheetToModelRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_ConvertWorksheetToModelRequest.discriminator = void 0;
_ConvertWorksheetToModelRequest.attributeTypeMap = [
  {
    "name": "worksheet_ids",
    "baseName": "worksheet_ids",
    "type": "Array<string>",
    "format": ""
  },
  {
    "name": "exclude_worksheet_ids",
    "baseName": "exclude_worksheet_ids",
    "type": "Array<string>",
    "format": ""
  },
  {
    "name": "convert_all",
    "baseName": "convert_all",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "apply_changes",
    "baseName": "apply_changes",
    "type": "boolean",
    "format": ""
  }
];
var ConvertWorksheetToModelRequest = _ConvertWorksheetToModelRequest;

// models/CopyObjectRequest.ts
var _CopyObjectRequest = class _CopyObjectRequest {
  static getAttributeTypeMap() {
    return _CopyObjectRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_CopyObjectRequest.discriminator = void 0;
_CopyObjectRequest.attributeTypeMap = [
  {
    "name": "description",
    "baseName": "description",
    "type": "string",
    "format": ""
  },
  {
    "name": "identifier",
    "baseName": "identifier",
    "type": "string",
    "format": ""
  },
  {
    "name": "type",
    "baseName": "type",
    "type": "CopyObjectRequestTypeEnum",
    "format": ""
  },
  {
    "name": "title",
    "baseName": "title",
    "type": "string",
    "format": ""
  }
];
var CopyObjectRequest = _CopyObjectRequest;

// models/CreateConfigRequest.ts
var _CreateConfigRequest = class _CreateConfigRequest {
  static getAttributeTypeMap() {
    return _CreateConfigRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_CreateConfigRequest.discriminator = void 0;
_CreateConfigRequest.attributeTypeMap = [
  {
    "name": "repository_url",
    "baseName": "repository_url",
    "type": "string",
    "format": ""
  },
  {
    "name": "username",
    "baseName": "username",
    "type": "string",
    "format": ""
  },
  {
    "name": "access_token",
    "baseName": "access_token",
    "type": "string",
    "format": ""
  },
  {
    "name": "org_identifier",
    "baseName": "org_identifier",
    "type": "string",
    "format": ""
  },
  {
    "name": "branch_names",
    "baseName": "branch_names",
    "type": "Array<string>",
    "format": ""
  },
  {
    "name": "commit_branch_name",
    "baseName": "commit_branch_name",
    "type": "string",
    "format": ""
  },
  {
    "name": "enable_guid_mapping",
    "baseName": "enable_guid_mapping",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "configuration_branch_name",
    "baseName": "configuration_branch_name",
    "type": "string",
    "format": ""
  }
];
var CreateConfigRequest = _CreateConfigRequest;

// models/CreateConnectionRequest.ts
var _CreateConnectionRequest = class _CreateConnectionRequest {
  static getAttributeTypeMap() {
    return _CreateConnectionRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_CreateConnectionRequest.discriminator = void 0;
_CreateConnectionRequest.attributeTypeMap = [
  {
    "name": "name",
    "baseName": "name",
    "type": "string",
    "format": ""
  },
  {
    "name": "description",
    "baseName": "description",
    "type": "string",
    "format": ""
  },
  {
    "name": "data_warehouse_type",
    "baseName": "data_warehouse_type",
    "type": "CreateConnectionRequestDataWarehouseTypeEnum",
    "format": ""
  },
  {
    "name": "data_warehouse_config",
    "baseName": "data_warehouse_config",
    "type": "any",
    "format": ""
  },
  {
    "name": "validate",
    "baseName": "validate",
    "type": "boolean",
    "format": ""
  }
];
var CreateConnectionRequest = _CreateConnectionRequest;

// models/CreateConnectionResponse.ts
var _CreateConnectionResponse = class _CreateConnectionResponse {
  static getAttributeTypeMap() {
    return _CreateConnectionResponse.attributeTypeMap;
  }
  constructor() {
  }
};
_CreateConnectionResponse.discriminator = void 0;
_CreateConnectionResponse.attributeTypeMap = [
  {
    "name": "id",
    "baseName": "id",
    "type": "string",
    "format": ""
  },
  {
    "name": "name",
    "baseName": "name",
    "type": "string",
    "format": ""
  },
  {
    "name": "data_warehouse_type",
    "baseName": "data_warehouse_type",
    "type": "CreateConnectionResponseDataWarehouseTypeEnum",
    "format": ""
  },
  {
    "name": "details",
    "baseName": "details",
    "type": "any",
    "format": ""
  }
];
var CreateConnectionResponse = _CreateConnectionResponse;

// models/CreateConversationRequest.ts
var _CreateConversationRequest = class _CreateConversationRequest {
  static getAttributeTypeMap() {
    return _CreateConversationRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_CreateConversationRequest.discriminator = void 0;
_CreateConversationRequest.attributeTypeMap = [
  {
    "name": "metadata_identifier",
    "baseName": "metadata_identifier",
    "type": "string",
    "format": ""
  },
  {
    "name": "tokens",
    "baseName": "tokens",
    "type": "string",
    "format": ""
  }
];
var CreateConversationRequest = _CreateConversationRequest;

// models/CreateCustomActionRequest.ts
var _CreateCustomActionRequest = class _CreateCustomActionRequest {
  static getAttributeTypeMap() {
    return _CreateCustomActionRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_CreateCustomActionRequest.discriminator = void 0;
_CreateCustomActionRequest.attributeTypeMap = [
  {
    "name": "name",
    "baseName": "name",
    "type": "string",
    "format": ""
  },
  {
    "name": "action_details",
    "baseName": "action_details",
    "type": "CreateCustomActionRequestActionDetails",
    "format": ""
  },
  {
    "name": "associate_metadata",
    "baseName": "associate_metadata",
    "type": "Array<AssociateMetadataInputCreate>",
    "format": ""
  },
  {
    "name": "default_action_config",
    "baseName": "default_action_config",
    "type": "CreateCustomActionRequestDefaultActionConfig",
    "format": ""
  },
  {
    "name": "group_identifiers",
    "baseName": "group_identifiers",
    "type": "Array<string>",
    "format": ""
  }
];
var CreateCustomActionRequest = _CreateCustomActionRequest;

// models/CreateCustomActionRequestActionDetails.ts
var _CreateCustomActionRequestActionDetails = class _CreateCustomActionRequestActionDetails {
  static getAttributeTypeMap() {
    return _CreateCustomActionRequestActionDetails.attributeTypeMap;
  }
  constructor() {
  }
};
_CreateCustomActionRequestActionDetails.discriminator = void 0;
_CreateCustomActionRequestActionDetails.attributeTypeMap = [
  {
    "name": "CALLBACK",
    "baseName": "CALLBACK",
    "type": "CALLBACKInputMandatory",
    "format": ""
  },
  {
    "name": "URL",
    "baseName": "URL",
    "type": "URLInputMandatory",
    "format": ""
  }
];
var CreateCustomActionRequestActionDetails = _CreateCustomActionRequestActionDetails;

// models/CreateCustomActionRequestDefaultActionConfig.ts
var _CreateCustomActionRequestDefaultActionConfig = class _CreateCustomActionRequestDefaultActionConfig {
  static getAttributeTypeMap() {
    return _CreateCustomActionRequestDefaultActionConfig.attributeTypeMap;
  }
  constructor() {
  }
};
_CreateCustomActionRequestDefaultActionConfig.discriminator = void 0;
_CreateCustomActionRequestDefaultActionConfig.attributeTypeMap = [
  {
    "name": "visibility",
    "baseName": "visibility",
    "type": "boolean",
    "format": ""
  }
];
var CreateCustomActionRequestDefaultActionConfig = _CreateCustomActionRequestDefaultActionConfig;

// models/CreateEmailCustomisationRequest.ts
var _CreateEmailCustomisationRequest = class _CreateEmailCustomisationRequest {
  static getAttributeTypeMap() {
    return _CreateEmailCustomisationRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_CreateEmailCustomisationRequest.discriminator = void 0;
_CreateEmailCustomisationRequest.attributeTypeMap = [
  {
    "name": "template_properties",
    "baseName": "template_properties",
    "type": "any",
    "format": ""
  }
];
var CreateEmailCustomisationRequest = _CreateEmailCustomisationRequest;

// models/CreateEmailCustomisationResponse.ts
var _CreateEmailCustomisationResponse = class _CreateEmailCustomisationResponse {
  static getAttributeTypeMap() {
    return _CreateEmailCustomisationResponse.attributeTypeMap;
  }
  constructor() {
  }
};
_CreateEmailCustomisationResponse.discriminator = void 0;
_CreateEmailCustomisationResponse.attributeTypeMap = [
  {
    "name": "tenant_id",
    "baseName": "tenant_id",
    "type": "string",
    "format": ""
  },
  {
    "name": "org",
    "baseName": "org",
    "type": "OrgType",
    "format": ""
  },
  {
    "name": "name",
    "baseName": "name",
    "type": "string",
    "format": ""
  },
  {
    "name": "template_properties",
    "baseName": "template_properties",
    "type": "any",
    "format": ""
  }
];
var CreateEmailCustomisationResponse = _CreateEmailCustomisationResponse;

// models/CreateOrgRequest.ts
var _CreateOrgRequest = class _CreateOrgRequest {
  static getAttributeTypeMap() {
    return _CreateOrgRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_CreateOrgRequest.discriminator = void 0;
_CreateOrgRequest.attributeTypeMap = [
  {
    "name": "name",
    "baseName": "name",
    "type": "string",
    "format": ""
  },
  {
    "name": "description",
    "baseName": "description",
    "type": "string",
    "format": ""
  }
];
var CreateOrgRequest = _CreateOrgRequest;

// models/CreateRoleRequest.ts
var _CreateRoleRequest = class _CreateRoleRequest {
  static getAttributeTypeMap() {
    return _CreateRoleRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_CreateRoleRequest.discriminator = void 0;
_CreateRoleRequest.attributeTypeMap = [
  {
    "name": "name",
    "baseName": "name",
    "type": "string",
    "format": ""
  },
  {
    "name": "description",
    "baseName": "description",
    "type": "string",
    "format": ""
  },
  {
    "name": "privileges",
    "baseName": "privileges",
    "type": "Array<CreateRoleRequestPrivilegesEnum>",
    "format": ""
  },
  {
    "name": "read_only",
    "baseName": "read_only",
    "type": "boolean",
    "format": ""
  }
];
var CreateRoleRequest = _CreateRoleRequest;

// models/CreateScheduleRequest.ts
var _CreateScheduleRequest = class _CreateScheduleRequest {
  static getAttributeTypeMap() {
    return _CreateScheduleRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_CreateScheduleRequest.discriminator = void 0;
_CreateScheduleRequest.attributeTypeMap = [
  {
    "name": "name",
    "baseName": "name",
    "type": "string",
    "format": ""
  },
  {
    "name": "description",
    "baseName": "description",
    "type": "string",
    "format": ""
  },
  {
    "name": "metadata_type",
    "baseName": "metadata_type",
    "type": "CreateScheduleRequestMetadataTypeEnum",
    "format": ""
  },
  {
    "name": "metadata_identifier",
    "baseName": "metadata_identifier",
    "type": "string",
    "format": ""
  },
  {
    "name": "file_format",
    "baseName": "file_format",
    "type": "CreateScheduleRequestFileFormatEnum",
    "format": ""
  },
  {
    "name": "liveboard_options",
    "baseName": "liveboard_options",
    "type": "CreateScheduleRequestLiveboardOptions",
    "format": ""
  },
  {
    "name": "pdf_options",
    "baseName": "pdf_options",
    "type": "CreateScheduleRequestPdfOptions",
    "format": ""
  },
  {
    "name": "time_zone",
    "baseName": "time_zone",
    "type": "CreateScheduleRequestTimeZoneEnum",
    "format": ""
  },
  {
    "name": "frequency",
    "baseName": "frequency",
    "type": "CreateScheduleRequestFrequency",
    "format": ""
  },
  {
    "name": "recipient_details",
    "baseName": "recipient_details",
    "type": "CreateScheduleRequestRecipientDetails",
    "format": ""
  },
  {
    "name": "personalised_view_id",
    "baseName": "personalised_view_id",
    "type": "string",
    "format": ""
  }
];
var CreateScheduleRequest = _CreateScheduleRequest;

// models/CreateScheduleRequestFrequency.ts
var _CreateScheduleRequestFrequency = class _CreateScheduleRequestFrequency {
  static getAttributeTypeMap() {
    return _CreateScheduleRequestFrequency.attributeTypeMap;
  }
  constructor() {
  }
};
_CreateScheduleRequestFrequency.discriminator = void 0;
_CreateScheduleRequestFrequency.attributeTypeMap = [
  {
    "name": "cron_expression",
    "baseName": "cron_expression",
    "type": "CronExpressionInput",
    "format": ""
  }
];
var CreateScheduleRequestFrequency = _CreateScheduleRequestFrequency;

// models/CreateScheduleRequestLiveboardOptions.ts
var _CreateScheduleRequestLiveboardOptions = class _CreateScheduleRequestLiveboardOptions {
  static getAttributeTypeMap() {
    return _CreateScheduleRequestLiveboardOptions.attributeTypeMap;
  }
  constructor() {
  }
};
_CreateScheduleRequestLiveboardOptions.discriminator = void 0;
_CreateScheduleRequestLiveboardOptions.attributeTypeMap = [
  {
    "name": "visualization_identifiers",
    "baseName": "visualization_identifiers",
    "type": "Array<string>",
    "format": ""
  }
];
var CreateScheduleRequestLiveboardOptions = _CreateScheduleRequestLiveboardOptions;

// models/CreateScheduleRequestPdfOptions.ts
var _CreateScheduleRequestPdfOptions = class _CreateScheduleRequestPdfOptions {
  static getAttributeTypeMap() {
    return _CreateScheduleRequestPdfOptions.attributeTypeMap;
  }
  constructor() {
  }
};
_CreateScheduleRequestPdfOptions.discriminator = void 0;
_CreateScheduleRequestPdfOptions.attributeTypeMap = [
  {
    "name": "complete_liveboard",
    "baseName": "complete_liveboard",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "include_cover_page",
    "baseName": "include_cover_page",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "include_custom_logo",
    "baseName": "include_custom_logo",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "include_filter_page",
    "baseName": "include_filter_page",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "include_page_number",
    "baseName": "include_page_number",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "page_footer_text",
    "baseName": "page_footer_text",
    "type": "string",
    "format": ""
  },
  {
    "name": "page_orientation",
    "baseName": "page_orientation",
    "type": "string",
    "format": ""
  },
  {
    "name": "page_size",
    "baseName": "page_size",
    "type": "CreateScheduleRequestPdfOptionsPageSizeEnum",
    "format": ""
  },
  {
    "name": "truncate_table",
    "baseName": "truncate_table",
    "type": "boolean",
    "format": ""
  }
];
var CreateScheduleRequestPdfOptions = _CreateScheduleRequestPdfOptions;

// models/CreateScheduleRequestRecipientDetails.ts
var _CreateScheduleRequestRecipientDetails = class _CreateScheduleRequestRecipientDetails {
  static getAttributeTypeMap() {
    return _CreateScheduleRequestRecipientDetails.attributeTypeMap;
  }
  constructor() {
  }
};
_CreateScheduleRequestRecipientDetails.discriminator = void 0;
_CreateScheduleRequestRecipientDetails.attributeTypeMap = [
  {
    "name": "emails",
    "baseName": "emails",
    "type": "Array<string>",
    "format": ""
  },
  {
    "name": "principals",
    "baseName": "principals",
    "type": "Array<PrincipalsListItemInput>",
    "format": ""
  }
];
var CreateScheduleRequestRecipientDetails = _CreateScheduleRequestRecipientDetails;

// models/CreateTagRequest.ts
var _CreateTagRequest = class _CreateTagRequest {
  static getAttributeTypeMap() {
    return _CreateTagRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_CreateTagRequest.discriminator = void 0;
_CreateTagRequest.attributeTypeMap = [
  {
    "name": "name",
    "baseName": "name",
    "type": "string",
    "format": ""
  },
  {
    "name": "color",
    "baseName": "color",
    "type": "string",
    "format": ""
  }
];
var CreateTagRequest = _CreateTagRequest;

// models/CreateUserGroupRequest.ts
var _CreateUserGroupRequest = class _CreateUserGroupRequest {
  static getAttributeTypeMap() {
    return _CreateUserGroupRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_CreateUserGroupRequest.discriminator = void 0;
_CreateUserGroupRequest.attributeTypeMap = [
  {
    "name": "name",
    "baseName": "name",
    "type": "string",
    "format": ""
  },
  {
    "name": "display_name",
    "baseName": "display_name",
    "type": "string",
    "format": ""
  },
  {
    "name": "default_liveboard_identifiers",
    "baseName": "default_liveboard_identifiers",
    "type": "Array<string>",
    "format": ""
  },
  {
    "name": "description",
    "baseName": "description",
    "type": "string",
    "format": ""
  },
  {
    "name": "privileges",
    "baseName": "privileges",
    "type": "Array<CreateUserGroupRequestPrivilegesEnum>",
    "format": ""
  },
  {
    "name": "sub_group_identifiers",
    "baseName": "sub_group_identifiers",
    "type": "Array<string>",
    "format": ""
  },
  {
    "name": "type",
    "baseName": "type",
    "type": "CreateUserGroupRequestTypeEnum",
    "format": ""
  },
  {
    "name": "user_identifiers",
    "baseName": "user_identifiers",
    "type": "Array<string>",
    "format": ""
  },
  {
    "name": "visibility",
    "baseName": "visibility",
    "type": "CreateUserGroupRequestVisibilityEnum",
    "format": ""
  },
  {
    "name": "role_identifiers",
    "baseName": "role_identifiers",
    "type": "Array<string>",
    "format": ""
  }
];
var CreateUserGroupRequest = _CreateUserGroupRequest;

// models/CreateUserRequest.ts
var _CreateUserRequest = class _CreateUserRequest {
  static getAttributeTypeMap() {
    return _CreateUserRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_CreateUserRequest.discriminator = void 0;
_CreateUserRequest.attributeTypeMap = [
  {
    "name": "name",
    "baseName": "name",
    "type": "string",
    "format": ""
  },
  {
    "name": "display_name",
    "baseName": "display_name",
    "type": "string",
    "format": ""
  },
  {
    "name": "password",
    "baseName": "password",
    "type": "string",
    "format": ""
  },
  {
    "name": "email",
    "baseName": "email",
    "type": "string",
    "format": ""
  },
  {
    "name": "account_type",
    "baseName": "account_type",
    "type": "CreateUserRequestAccountTypeEnum",
    "format": ""
  },
  {
    "name": "account_status",
    "baseName": "account_status",
    "type": "CreateUserRequestAccountStatusEnum",
    "format": ""
  },
  {
    "name": "org_identifiers",
    "baseName": "org_identifiers",
    "type": "Array<string>",
    "format": ""
  },
  {
    "name": "group_identifiers",
    "baseName": "group_identifiers",
    "type": "Array<string>",
    "format": ""
  },
  {
    "name": "visibility",
    "baseName": "visibility",
    "type": "CreateUserRequestVisibilityEnum",
    "format": ""
  },
  {
    "name": "notify_on_share",
    "baseName": "notify_on_share",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "show_onboarding_experience",
    "baseName": "show_onboarding_experience",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "onboarding_experience_completed",
    "baseName": "onboarding_experience_completed",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "home_liveboard_identifier",
    "baseName": "home_liveboard_identifier",
    "type": "string",
    "format": ""
  },
  {
    "name": "favorite_metadata",
    "baseName": "favorite_metadata",
    "type": "Array<FavoriteMetadataInput>",
    "format": ""
  },
  {
    "name": "preferred_locale",
    "baseName": "preferred_locale",
    "type": "CreateUserRequestPreferredLocaleEnum",
    "format": ""
  },
  {
    "name": "extended_properties",
    "baseName": "extended_properties",
    "type": "any",
    "format": ""
  },
  {
    "name": "extended_preferences",
    "baseName": "extended_preferences",
    "type": "any",
    "format": ""
  },
  {
    "name": "trigger_welcome_email",
    "baseName": "trigger_welcome_email",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "trigger_activation_email",
    "baseName": "trigger_activation_email",
    "type": "boolean",
    "format": ""
  }
];
var CreateUserRequest = _CreateUserRequest;

// models/CreateVariableRequest.ts
var _CreateVariableRequest = class _CreateVariableRequest {
  static getAttributeTypeMap() {
    return _CreateVariableRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_CreateVariableRequest.discriminator = void 0;
_CreateVariableRequest.attributeTypeMap = [
  {
    "name": "type",
    "baseName": "type",
    "type": "CreateVariableRequestTypeEnum",
    "format": ""
  },
  {
    "name": "name",
    "baseName": "name",
    "type": "string",
    "format": ""
  },
  {
    "name": "sensitive",
    "baseName": "sensitive",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "values",
    "baseName": "values",
    "type": "Array<InputVariableValue>",
    "format": ""
  }
];
var CreateVariableRequest = _CreateVariableRequest;

// models/CronExpression.ts
var _CronExpression = class _CronExpression {
  static getAttributeTypeMap() {
    return _CronExpression.attributeTypeMap;
  }
  constructor() {
  }
};
_CronExpression.discriminator = void 0;
_CronExpression.attributeTypeMap = [
  {
    "name": "day_of_month",
    "baseName": "day_of_month",
    "type": "string",
    "format": ""
  },
  {
    "name": "day_of_week",
    "baseName": "day_of_week",
    "type": "string",
    "format": ""
  },
  {
    "name": "hour",
    "baseName": "hour",
    "type": "string",
    "format": ""
  },
  {
    "name": "minute",
    "baseName": "minute",
    "type": "string",
    "format": ""
  },
  {
    "name": "month",
    "baseName": "month",
    "type": "string",
    "format": ""
  },
  {
    "name": "second",
    "baseName": "second",
    "type": "string",
    "format": ""
  }
];
var CronExpression = _CronExpression;

// models/CronExpressionInput.ts
var _CronExpressionInput = class _CronExpressionInput {
  static getAttributeTypeMap() {
    return _CronExpressionInput.attributeTypeMap;
  }
  constructor() {
  }
};
_CronExpressionInput.discriminator = void 0;
_CronExpressionInput.attributeTypeMap = [
  {
    "name": "day_of_month",
    "baseName": "day_of_month",
    "type": "string",
    "format": ""
  },
  {
    "name": "day_of_week",
    "baseName": "day_of_week",
    "type": "string",
    "format": ""
  },
  {
    "name": "hour",
    "baseName": "hour",
    "type": "string",
    "format": ""
  },
  {
    "name": "minute",
    "baseName": "minute",
    "type": "string",
    "format": ""
  },
  {
    "name": "month",
    "baseName": "month",
    "type": "string",
    "format": ""
  },
  {
    "name": "second",
    "baseName": "second",
    "type": "string",
    "format": ""
  }
];
var CronExpressionInput = _CronExpressionInput;

// models/CustomActionMetadataTypeInput.ts
var _CustomActionMetadataTypeInput = class _CustomActionMetadataTypeInput {
  static getAttributeTypeMap() {
    return _CustomActionMetadataTypeInput.attributeTypeMap;
  }
  constructor() {
  }
};
_CustomActionMetadataTypeInput.discriminator = void 0;
_CustomActionMetadataTypeInput.attributeTypeMap = [
  {
    "name": "type",
    "baseName": "type",
    "type": "CustomActionMetadataTypeInputTypeEnum",
    "format": ""
  },
  {
    "name": "identifier",
    "baseName": "identifier",
    "type": "string",
    "format": ""
  }
];
var CustomActionMetadataTypeInput = _CustomActionMetadataTypeInput;

// models/DataWarehouseObjectInput.ts
var _DataWarehouseObjectInput = class _DataWarehouseObjectInput {
  static getAttributeTypeMap() {
    return _DataWarehouseObjectInput.attributeTypeMap;
  }
  constructor() {
  }
};
_DataWarehouseObjectInput.discriminator = void 0;
_DataWarehouseObjectInput.attributeTypeMap = [
  {
    "name": "database",
    "baseName": "database",
    "type": "string",
    "format": ""
  },
  {
    "name": "schema",
    "baseName": "schema",
    "type": "string",
    "format": ""
  },
  {
    "name": "table",
    "baseName": "table",
    "type": "string",
    "format": ""
  },
  {
    "name": "column",
    "baseName": "column",
    "type": "string",
    "format": ""
  }
];
var DataWarehouseObjectInput = _DataWarehouseObjectInput;

// models/DataWarehouseObjects.ts
var _DataWarehouseObjects = class _DataWarehouseObjects {
  static getAttributeTypeMap() {
    return _DataWarehouseObjects.attributeTypeMap;
  }
  constructor() {
  }
};
_DataWarehouseObjects.discriminator = void 0;
_DataWarehouseObjects.attributeTypeMap = [
  {
    "name": "databases",
    "baseName": "databases",
    "type": "Array<Database>",
    "format": ""
  }
];
var DataWarehouseObjects = _DataWarehouseObjects;

// models/Database.ts
var _Database = class _Database {
  static getAttributeTypeMap() {
    return _Database.attributeTypeMap;
  }
  constructor() {
  }
};
_Database.discriminator = void 0;
_Database.attributeTypeMap = [
  {
    "name": "name",
    "baseName": "name",
    "type": "string",
    "format": ""
  },
  {
    "name": "schemas",
    "baseName": "schemas",
    "type": "Array<SchemaObject>",
    "format": ""
  },
  {
    "name": "auto_created",
    "baseName": "auto_created",
    "type": "boolean",
    "format": ""
  }
];
var Database = _Database;

// models/DbtConnectionRequest.ts
var _DbtConnectionRequest = class _DbtConnectionRequest {
  static getAttributeTypeMap() {
    return _DbtConnectionRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_DbtConnectionRequest.discriminator = void 0;
_DbtConnectionRequest.attributeTypeMap = [
  {
    "name": "connection_name",
    "baseName": "connection_name",
    "type": "string",
    "format": ""
  },
  {
    "name": "database_name",
    "baseName": "database_name",
    "type": "string",
    "format": ""
  },
  {
    "name": "import_type",
    "baseName": "import_type",
    "type": "DbtConnectionRequestImportTypeEnum",
    "format": ""
  },
  {
    "name": "access_token",
    "baseName": "access_token",
    "type": "string",
    "format": ""
  },
  {
    "name": "dbt_url",
    "baseName": "dbt_url",
    "type": "string",
    "format": ""
  },
  {
    "name": "account_id",
    "baseName": "account_id",
    "type": "string",
    "format": ""
  },
  {
    "name": "project_id",
    "baseName": "project_id",
    "type": "string",
    "format": ""
  },
  {
    "name": "dbt_env_id",
    "baseName": "dbt_env_id",
    "type": "string",
    "format": ""
  },
  {
    "name": "project_name",
    "baseName": "project_name",
    "type": "string",
    "format": ""
  },
  {
    "name": "file_content",
    "baseName": "file_content",
    "type": "HttpFile",
    "format": "binary"
  }
];
var DbtConnectionRequest = _DbtConnectionRequest;

// models/DbtGenerateSyncTmlRequest.ts
var _DbtGenerateSyncTmlRequest = class _DbtGenerateSyncTmlRequest {
  static getAttributeTypeMap() {
    return _DbtGenerateSyncTmlRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_DbtGenerateSyncTmlRequest.discriminator = void 0;
_DbtGenerateSyncTmlRequest.attributeTypeMap = [
  {
    "name": "dbt_connection_identifier",
    "baseName": "dbt_connection_identifier",
    "type": "string",
    "format": ""
  },
  {
    "name": "file_content",
    "baseName": "file_content",
    "type": "HttpFile",
    "format": "binary"
  }
];
var DbtGenerateSyncTmlRequest = _DbtGenerateSyncTmlRequest;

// models/DbtGenerateTmlRequest.ts
var _DbtGenerateTmlRequest = class _DbtGenerateTmlRequest {
  static getAttributeTypeMap() {
    return _DbtGenerateTmlRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_DbtGenerateTmlRequest.discriminator = void 0;
_DbtGenerateTmlRequest.attributeTypeMap = [
  {
    "name": "dbt_connection_identifier",
    "baseName": "dbt_connection_identifier",
    "type": "string",
    "format": ""
  },
  {
    "name": "model_tables",
    "baseName": "model_tables",
    "type": "Array<ModelTableList>",
    "format": ""
  },
  {
    "name": "import_worksheets",
    "baseName": "import_worksheets",
    "type": "DbtGenerateTmlRequestImportWorksheetsEnum",
    "format": ""
  },
  {
    "name": "worksheets",
    "baseName": "worksheets",
    "type": "Array<string>",
    "format": ""
  },
  {
    "name": "file_content",
    "baseName": "file_content",
    "type": "HttpFile",
    "format": "binary"
  }
];
var DbtGenerateTmlRequest = _DbtGenerateTmlRequest;

// models/DbtSearchResponse.ts
var _DbtSearchResponse = class _DbtSearchResponse {
  static getAttributeTypeMap() {
    return _DbtSearchResponse.attributeTypeMap;
  }
  constructor() {
  }
};
_DbtSearchResponse.discriminator = void 0;
_DbtSearchResponse.attributeTypeMap = [
  {
    "name": "dbt_connection_identifier",
    "baseName": "dbt_connection_identifier",
    "type": "string",
    "format": ""
  },
  {
    "name": "project_name",
    "baseName": "project_name",
    "type": "string",
    "format": ""
  },
  {
    "name": "connection_id",
    "baseName": "connection_id",
    "type": "string",
    "format": ""
  },
  {
    "name": "connection_name",
    "baseName": "connection_name",
    "type": "string",
    "format": ""
  },
  {
    "name": "cdw_database",
    "baseName": "cdw_database",
    "type": "string",
    "format": ""
  },
  {
    "name": "import_type",
    "baseName": "import_type",
    "type": "string",
    "format": ""
  },
  {
    "name": "author_name",
    "baseName": "author_name",
    "type": "string",
    "format": ""
  }
];
var DbtSearchResponse = _DbtSearchResponse;

// models/DeactivateUserRequest.ts
var _DeactivateUserRequest = class _DeactivateUserRequest {
  static getAttributeTypeMap() {
    return _DeactivateUserRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_DeactivateUserRequest.discriminator = void 0;
_DeactivateUserRequest.attributeTypeMap = [
  {
    "name": "user_identifier",
    "baseName": "user_identifier",
    "type": "string",
    "format": ""
  },
  {
    "name": "base_url",
    "baseName": "base_url",
    "type": "string",
    "format": ""
  }
];
var DeactivateUserRequest = _DeactivateUserRequest;

// models/DefaultActionConfig.ts
var _DefaultActionConfig = class _DefaultActionConfig {
  static getAttributeTypeMap() {
    return _DefaultActionConfig.attributeTypeMap;
  }
  constructor() {
  }
};
_DefaultActionConfig.discriminator = void 0;
_DefaultActionConfig.attributeTypeMap = [
  {
    "name": "visibility",
    "baseName": "visibility",
    "type": "boolean",
    "format": ""
  }
];
var DefaultActionConfig = _DefaultActionConfig;

// models/DefaultActionConfigInput.ts
var _DefaultActionConfigInput = class _DefaultActionConfigInput {
  static getAttributeTypeMap() {
    return _DefaultActionConfigInput.attributeTypeMap;
  }
  constructor() {
  }
};
_DefaultActionConfigInput.discriminator = void 0;
_DefaultActionConfigInput.attributeTypeMap = [
  {
    "name": "visibility",
    "baseName": "visibility",
    "type": "boolean",
    "format": ""
  }
];
var DefaultActionConfigInput = _DefaultActionConfigInput;

// models/DefaultActionConfigInputCreate.ts
var _DefaultActionConfigInputCreate = class _DefaultActionConfigInputCreate {
  static getAttributeTypeMap() {
    return _DefaultActionConfigInputCreate.attributeTypeMap;
  }
  constructor() {
  }
};
_DefaultActionConfigInputCreate.discriminator = void 0;
_DefaultActionConfigInputCreate.attributeTypeMap = [
  {
    "name": "visibility",
    "baseName": "visibility",
    "type": "boolean",
    "format": ""
  }
];
var DefaultActionConfigInputCreate = _DefaultActionConfigInputCreate;

// models/DefaultActionConfigSearchInput.ts
var _DefaultActionConfigSearchInput = class _DefaultActionConfigSearchInput {
  static getAttributeTypeMap() {
    return _DefaultActionConfigSearchInput.attributeTypeMap;
  }
  constructor() {
  }
};
_DefaultActionConfigSearchInput.discriminator = void 0;
_DefaultActionConfigSearchInput.attributeTypeMap = [
  {
    "name": "visibility",
    "baseName": "visibility",
    "type": "boolean",
    "format": ""
  }
];
var DefaultActionConfigSearchInput = _DefaultActionConfigSearchInput;

// models/DeleteConfigRequest.ts
var _DeleteConfigRequest = class _DeleteConfigRequest {
  static getAttributeTypeMap() {
    return _DeleteConfigRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_DeleteConfigRequest.discriminator = void 0;
_DeleteConfigRequest.attributeTypeMap = [
  {
    "name": "cluster_level",
    "baseName": "cluster_level",
    "type": "boolean",
    "format": ""
  }
];
var DeleteConfigRequest = _DeleteConfigRequest;

// models/DeleteConnectionRequest.ts
var _DeleteConnectionRequest = class _DeleteConnectionRequest {
  static getAttributeTypeMap() {
    return _DeleteConnectionRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_DeleteConnectionRequest.discriminator = void 0;
_DeleteConnectionRequest.attributeTypeMap = [
  {
    "name": "connection_identifier",
    "baseName": "connection_identifier",
    "type": "string",
    "format": ""
  }
];
var DeleteConnectionRequest = _DeleteConnectionRequest;

// models/DeleteMetadataRequest.ts
var _DeleteMetadataRequest = class _DeleteMetadataRequest {
  static getAttributeTypeMap() {
    return _DeleteMetadataRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_DeleteMetadataRequest.discriminator = void 0;
_DeleteMetadataRequest.attributeTypeMap = [
  {
    "name": "metadata",
    "baseName": "metadata",
    "type": "Array<DeleteMetadataTypeInput>",
    "format": ""
  },
  {
    "name": "delete_disabled_objects",
    "baseName": "delete_disabled_objects",
    "type": "boolean",
    "format": ""
  }
];
var DeleteMetadataRequest = _DeleteMetadataRequest;

// models/DeleteMetadataTypeInput.ts
var _DeleteMetadataTypeInput = class _DeleteMetadataTypeInput {
  static getAttributeTypeMap() {
    return _DeleteMetadataTypeInput.attributeTypeMap;
  }
  constructor() {
  }
};
_DeleteMetadataTypeInput.discriminator = void 0;
_DeleteMetadataTypeInput.attributeTypeMap = [
  {
    "name": "type",
    "baseName": "type",
    "type": "DeleteMetadataTypeInputTypeEnum",
    "format": ""
  },
  {
    "name": "identifier",
    "baseName": "identifier",
    "type": "string",
    "format": ""
  }
];
var DeleteMetadataTypeInput = _DeleteMetadataTypeInput;

// models/DeployCommitRequest.ts
var _DeployCommitRequest = class _DeployCommitRequest {
  static getAttributeTypeMap() {
    return _DeployCommitRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_DeployCommitRequest.discriminator = void 0;
_DeployCommitRequest.attributeTypeMap = [
  {
    "name": "commit_id",
    "baseName": "commit_id",
    "type": "string",
    "format": ""
  },
  {
    "name": "branch_name",
    "baseName": "branch_name",
    "type": "string",
    "format": ""
  },
  {
    "name": "deploy_type",
    "baseName": "deploy_type",
    "type": "DeployCommitRequestDeployTypeEnum",
    "format": ""
  },
  {
    "name": "deploy_policy",
    "baseName": "deploy_policy",
    "type": "DeployCommitRequestDeployPolicyEnum",
    "format": ""
  }
];
var DeployCommitRequest = _DeployCommitRequest;

// models/DeployResponse.ts
var _DeployResponse = class _DeployResponse {
  static getAttributeTypeMap() {
    return _DeployResponse.attributeTypeMap;
  }
  constructor() {
  }
};
_DeployResponse.discriminator = void 0;
_DeployResponse.attributeTypeMap = [
  {
    "name": "file_name",
    "baseName": "file_name",
    "type": "string",
    "format": ""
  },
  {
    "name": "metadata_name",
    "baseName": "metadata_name",
    "type": "string",
    "format": ""
  },
  {
    "name": "metadata_type",
    "baseName": "metadata_type",
    "type": "string",
    "format": ""
  },
  {
    "name": "status_code",
    "baseName": "status_code",
    "type": "string",
    "format": ""
  },
  {
    "name": "status_message",
    "baseName": "status_message",
    "type": "string",
    "format": ""
  }
];
var DeployResponse = _DeployResponse;

// models/ErrorResponse.ts
var _ErrorResponse = class _ErrorResponse {
  static getAttributeTypeMap() {
    return _ErrorResponse.attributeTypeMap;
  }
  constructor() {
  }
};
_ErrorResponse.discriminator = void 0;
_ErrorResponse.attributeTypeMap = [
  {
    "name": "error",
    "baseName": "error",
    "type": "any",
    "format": ""
  }
];
var ErrorResponse = _ErrorResponse;

// models/EurekaDecomposeQueryResponse.ts
var _EurekaDecomposeQueryResponse = class _EurekaDecomposeQueryResponse {
  static getAttributeTypeMap() {
    return _EurekaDecomposeQueryResponse.attributeTypeMap;
  }
  constructor() {
  }
};
_EurekaDecomposeQueryResponse.discriminator = void 0;
_EurekaDecomposeQueryResponse.attributeTypeMap = [
  {
    "name": "decomposedQueryResponse",
    "baseName": "decomposedQueryResponse",
    "type": "EurekaLLMDecomposeQueryResponse",
    "format": ""
  }
];
var EurekaDecomposeQueryResponse = _EurekaDecomposeQueryResponse;

// models/EurekaLLMDecomposeQueryResponse.ts
var _EurekaLLMDecomposeQueryResponse = class _EurekaLLMDecomposeQueryResponse {
  static getAttributeTypeMap() {
    return _EurekaLLMDecomposeQueryResponse.attributeTypeMap;
  }
  constructor() {
  }
};
_EurekaLLMDecomposeQueryResponse.discriminator = void 0;
_EurekaLLMDecomposeQueryResponse.attributeTypeMap = [
  {
    "name": "decomposedQueries",
    "baseName": "decomposedQueries",
    "type": "Array<EurekaLLMSuggestedQuery>",
    "format": ""
  }
];
var EurekaLLMDecomposeQueryResponse = _EurekaLLMDecomposeQueryResponse;

// models/EurekaLLMSuggestedQuery.ts
var _EurekaLLMSuggestedQuery = class _EurekaLLMSuggestedQuery {
  static getAttributeTypeMap() {
    return _EurekaLLMSuggestedQuery.attributeTypeMap;
  }
  constructor() {
  }
};
_EurekaLLMSuggestedQuery.discriminator = void 0;
_EurekaLLMSuggestedQuery.attributeTypeMap = [
  {
    "name": "query",
    "baseName": "query",
    "type": "string",
    "format": ""
  },
  {
    "name": "worksheetId",
    "baseName": "worksheetId",
    "type": "string",
    "format": ""
  },
  {
    "name": "worksheetName",
    "baseName": "worksheetName",
    "type": "string",
    "format": ""
  }
];
var EurekaLLMSuggestedQuery = _EurekaLLMSuggestedQuery;

// models/ExcludeMetadataListItemInput.ts
var _ExcludeMetadataListItemInput = class _ExcludeMetadataListItemInput {
  static getAttributeTypeMap() {
    return _ExcludeMetadataListItemInput.attributeTypeMap;
  }
  constructor() {
  }
};
_ExcludeMetadataListItemInput.discriminator = void 0;
_ExcludeMetadataListItemInput.attributeTypeMap = [
  {
    "name": "identifier",
    "baseName": "identifier",
    "type": "string",
    "format": ""
  },
  {
    "name": "type",
    "baseName": "type",
    "type": "ExcludeMetadataListItemInputTypeEnum",
    "format": ""
  }
];
var ExcludeMetadataListItemInput = _ExcludeMetadataListItemInput;

// models/ExportAnswerReportRequest.ts
var _ExportAnswerReportRequest = class _ExportAnswerReportRequest {
  static getAttributeTypeMap() {
    return _ExportAnswerReportRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_ExportAnswerReportRequest.discriminator = void 0;
_ExportAnswerReportRequest.attributeTypeMap = [
  {
    "name": "metadata_identifier",
    "baseName": "metadata_identifier",
    "type": "string",
    "format": ""
  },
  {
    "name": "session_identifier",
    "baseName": "session_identifier",
    "type": "string",
    "format": ""
  },
  {
    "name": "generation_number",
    "baseName": "generation_number",
    "type": "number",
    "format": "int32"
  },
  {
    "name": "file_format",
    "baseName": "file_format",
    "type": "ExportAnswerReportRequestFileFormatEnum",
    "format": ""
  },
  {
    "name": "runtime_filter",
    "baseName": "runtime_filter",
    "type": "any",
    "format": ""
  },
  {
    "name": "runtime_sort",
    "baseName": "runtime_sort",
    "type": "any",
    "format": ""
  },
  {
    "name": "runtime_param_override",
    "baseName": "runtime_param_override",
    "type": "any",
    "format": ""
  },
  {
    "name": "regional_settings",
    "baseName": "regional_settings",
    "type": "ExportAnswerReportRequestRegionalSettings",
    "format": ""
  }
];
var ExportAnswerReportRequest = _ExportAnswerReportRequest;

// models/ExportAnswerReportRequestRegionalSettings.ts
var _ExportAnswerReportRequestRegionalSettings = class _ExportAnswerReportRequestRegionalSettings {
  static getAttributeTypeMap() {
    return _ExportAnswerReportRequestRegionalSettings.attributeTypeMap;
  }
  constructor() {
  }
};
_ExportAnswerReportRequestRegionalSettings.discriminator = void 0;
_ExportAnswerReportRequestRegionalSettings.attributeTypeMap = [
  {
    "name": "currency_format",
    "baseName": "currency_format",
    "type": "ExportAnswerReportRequestRegionalSettingsCurrencyFormatEnum",
    "format": ""
  },
  {
    "name": "user_locale",
    "baseName": "user_locale",
    "type": "ExportAnswerReportRequestRegionalSettingsUserLocaleEnum",
    "format": ""
  },
  {
    "name": "number_format_locale",
    "baseName": "number_format_locale",
    "type": "ExportAnswerReportRequestRegionalSettingsNumberFormatLocaleEnum",
    "format": ""
  },
  {
    "name": "date_format_locale",
    "baseName": "date_format_locale",
    "type": "ExportAnswerReportRequestRegionalSettingsDateFormatLocaleEnum",
    "format": ""
  }
];
var ExportAnswerReportRequestRegionalSettings = _ExportAnswerReportRequestRegionalSettings;

// models/ExportLiveboardReportRequest.ts
var _ExportLiveboardReportRequest = class _ExportLiveboardReportRequest {
  static getAttributeTypeMap() {
    return _ExportLiveboardReportRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_ExportLiveboardReportRequest.discriminator = void 0;
_ExportLiveboardReportRequest.attributeTypeMap = [
  {
    "name": "metadata_identifier",
    "baseName": "metadata_identifier",
    "type": "string",
    "format": ""
  },
  {
    "name": "tab_identifiers",
    "baseName": "tab_identifiers",
    "type": "Array<string>",
    "format": ""
  },
  {
    "name": "personalised_view_identifier",
    "baseName": "personalised_view_identifier",
    "type": "string",
    "format": ""
  },
  {
    "name": "visualization_identifiers",
    "baseName": "visualization_identifiers",
    "type": "Array<string>",
    "format": ""
  },
  {
    "name": "transient_content",
    "baseName": "transient_content",
    "type": "string",
    "format": ""
  },
  {
    "name": "file_format",
    "baseName": "file_format",
    "type": "ExportLiveboardReportRequestFileFormatEnum",
    "format": ""
  },
  {
    "name": "runtime_filter",
    "baseName": "runtime_filter",
    "type": "any",
    "format": ""
  },
  {
    "name": "override_filters",
    "baseName": "override_filters",
    "type": "any",
    "format": ""
  },
  {
    "name": "runtime_sort",
    "baseName": "runtime_sort",
    "type": "any",
    "format": ""
  },
  {
    "name": "pdf_options",
    "baseName": "pdf_options",
    "type": "ExportLiveboardReportRequestPdfOptions",
    "format": ""
  },
  {
    "name": "png_options",
    "baseName": "png_options",
    "type": "ExportLiveboardReportRequestPngOptions",
    "format": ""
  },
  {
    "name": "runtime_param_override",
    "baseName": "runtime_param_override",
    "type": "any",
    "format": ""
  },
  {
    "name": "regional_settings",
    "baseName": "regional_settings",
    "type": "ExportAnswerReportRequestRegionalSettings",
    "format": ""
  }
];
var ExportLiveboardReportRequest = _ExportLiveboardReportRequest;

// models/ExportLiveboardReportRequestPdfOptions.ts
var _ExportLiveboardReportRequestPdfOptions = class _ExportLiveboardReportRequestPdfOptions {
  static getAttributeTypeMap() {
    return _ExportLiveboardReportRequestPdfOptions.attributeTypeMap;
  }
  constructor() {
  }
};
_ExportLiveboardReportRequestPdfOptions.discriminator = void 0;
_ExportLiveboardReportRequestPdfOptions.attributeTypeMap = [
  {
    "name": "include_cover_page",
    "baseName": "include_cover_page",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "include_custom_logo",
    "baseName": "include_custom_logo",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "include_filter_page",
    "baseName": "include_filter_page",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "include_page_number",
    "baseName": "include_page_number",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "page_orientation",
    "baseName": "page_orientation",
    "type": "ExportLiveboardReportRequestPdfOptionsPageOrientationEnum",
    "format": ""
  },
  {
    "name": "truncate_table",
    "baseName": "truncate_table",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "page_footer_text",
    "baseName": "page_footer_text",
    "type": "string",
    "format": ""
  }
];
var ExportLiveboardReportRequestPdfOptions = _ExportLiveboardReportRequestPdfOptions;

// models/ExportLiveboardReportRequestPngOptions.ts
var _ExportLiveboardReportRequestPngOptions = class _ExportLiveboardReportRequestPngOptions {
  static getAttributeTypeMap() {
    return _ExportLiveboardReportRequestPngOptions.attributeTypeMap;
  }
  constructor() {
  }
};
_ExportLiveboardReportRequestPngOptions.discriminator = void 0;
_ExportLiveboardReportRequestPngOptions.attributeTypeMap = [
  {
    "name": "include_cover_page",
    "baseName": "include_cover_page",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "include_filter_page",
    "baseName": "include_filter_page",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "personalised_view_id",
    "baseName": "personalised_view_id",
    "type": "string",
    "format": ""
  },
  {
    "name": "image_resolution",
    "baseName": "image_resolution",
    "type": "number",
    "format": "int32"
  },
  {
    "name": "image_scale",
    "baseName": "image_scale",
    "type": "number",
    "format": "int32"
  },
  {
    "name": "include_header",
    "baseName": "include_header",
    "type": "boolean",
    "format": ""
  }
];
var ExportLiveboardReportRequestPngOptions = _ExportLiveboardReportRequestPngOptions;

// models/ExportMetadataTMLBatchedRequest.ts
var _ExportMetadataTMLBatchedRequest = class _ExportMetadataTMLBatchedRequest {
  static getAttributeTypeMap() {
    return _ExportMetadataTMLBatchedRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_ExportMetadataTMLBatchedRequest.discriminator = void 0;
_ExportMetadataTMLBatchedRequest.attributeTypeMap = [
  {
    "name": "metadata_type",
    "baseName": "metadata_type",
    "type": "ExportMetadataTMLBatchedRequestMetadataTypeEnum",
    "format": ""
  },
  {
    "name": "batch_offset",
    "baseName": "batch_offset",
    "type": "number",
    "format": "int32"
  },
  {
    "name": "batch_size",
    "baseName": "batch_size",
    "type": "number",
    "format": "int32"
  },
  {
    "name": "edoc_format",
    "baseName": "edoc_format",
    "type": "ExportMetadataTMLBatchedRequestEdocFormatEnum",
    "format": ""
  },
  {
    "name": "export_dependent",
    "baseName": "export_dependent",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "all_orgs_override",
    "baseName": "all_orgs_override",
    "type": "boolean",
    "format": ""
  }
];
var ExportMetadataTMLBatchedRequest = _ExportMetadataTMLBatchedRequest;

// models/ExportMetadataTMLRequest.ts
var _ExportMetadataTMLRequest = class _ExportMetadataTMLRequest {
  static getAttributeTypeMap() {
    return _ExportMetadataTMLRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_ExportMetadataTMLRequest.discriminator = void 0;
_ExportMetadataTMLRequest.attributeTypeMap = [
  {
    "name": "metadata",
    "baseName": "metadata",
    "type": "Array<ExportMetadataTypeInput>",
    "format": ""
  },
  {
    "name": "export_associated",
    "baseName": "export_associated",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "export_fqn",
    "baseName": "export_fqn",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "edoc_format",
    "baseName": "edoc_format",
    "type": "ExportMetadataTMLRequestEdocFormatEnum",
    "format": ""
  },
  {
    "name": "export_schema_version",
    "baseName": "export_schema_version",
    "type": "ExportMetadataTMLRequestExportSchemaVersionEnum",
    "format": ""
  },
  {
    "name": "export_dependent",
    "baseName": "export_dependent",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "export_connection_as_dependent",
    "baseName": "export_connection_as_dependent",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "all_orgs_override",
    "baseName": "all_orgs_override",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "export_options",
    "baseName": "export_options",
    "type": "ExportMetadataTMLRequestExportOptions",
    "format": ""
  }
];
var ExportMetadataTMLRequest = _ExportMetadataTMLRequest;

// models/ExportMetadataTMLRequestExportOptions.ts
var _ExportMetadataTMLRequestExportOptions = class _ExportMetadataTMLRequestExportOptions {
  static getAttributeTypeMap() {
    return _ExportMetadataTMLRequestExportOptions.attributeTypeMap;
  }
  constructor() {
  }
};
_ExportMetadataTMLRequestExportOptions.discriminator = void 0;
_ExportMetadataTMLRequestExportOptions.attributeTypeMap = [
  {
    "name": "include_obj_id_ref",
    "baseName": "include_obj_id_ref",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "include_guid",
    "baseName": "include_guid",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "include_obj_id",
    "baseName": "include_obj_id",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "export_with_associated_feedbacks",
    "baseName": "export_with_associated_feedbacks",
    "type": "boolean",
    "format": ""
  }
];
var ExportMetadataTMLRequestExportOptions = _ExportMetadataTMLRequestExportOptions;

// models/ExportMetadataTypeInput.ts
var _ExportMetadataTypeInput = class _ExportMetadataTypeInput {
  static getAttributeTypeMap() {
    return _ExportMetadataTypeInput.attributeTypeMap;
  }
  constructor() {
  }
};
_ExportMetadataTypeInput.discriminator = void 0;
_ExportMetadataTypeInput.attributeTypeMap = [
  {
    "name": "type",
    "baseName": "type",
    "type": "ExportMetadataTypeInputTypeEnum",
    "format": ""
  },
  {
    "name": "identifier",
    "baseName": "identifier",
    "type": "string",
    "format": ""
  }
];
var ExportMetadataTypeInput = _ExportMetadataTypeInput;

// models/ExportOptions.ts
var _ExportOptions = class _ExportOptions {
  static getAttributeTypeMap() {
    return _ExportOptions.attributeTypeMap;
  }
  constructor() {
  }
};
_ExportOptions.discriminator = void 0;
_ExportOptions.attributeTypeMap = [
  {
    "name": "include_obj_id_ref",
    "baseName": "include_obj_id_ref",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "include_guid",
    "baseName": "include_guid",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "include_obj_id",
    "baseName": "include_obj_id",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "export_with_associated_feedbacks",
    "baseName": "export_with_associated_feedbacks",
    "type": "boolean",
    "format": ""
  }
];
var ExportOptions = _ExportOptions;

// models/FavoriteMetadataInput.ts
var _FavoriteMetadataInput = class _FavoriteMetadataInput {
  static getAttributeTypeMap() {
    return _FavoriteMetadataInput.attributeTypeMap;
  }
  constructor() {
  }
};
_FavoriteMetadataInput.discriminator = void 0;
_FavoriteMetadataInput.attributeTypeMap = [
  {
    "name": "identifier",
    "baseName": "identifier",
    "type": "string",
    "format": ""
  },
  {
    "name": "type",
    "baseName": "type",
    "type": "FavoriteMetadataInputTypeEnum",
    "format": ""
  }
];
var FavoriteMetadataInput = _FavoriteMetadataInput;

// models/FavoriteMetadataItem.ts
var _FavoriteMetadataItem = class _FavoriteMetadataItem {
  static getAttributeTypeMap() {
    return _FavoriteMetadataItem.attributeTypeMap;
  }
  constructor() {
  }
};
_FavoriteMetadataItem.discriminator = void 0;
_FavoriteMetadataItem.attributeTypeMap = [
  {
    "name": "id",
    "baseName": "id",
    "type": "string",
    "format": ""
  },
  {
    "name": "name",
    "baseName": "name",
    "type": "string",
    "format": ""
  },
  {
    "name": "type",
    "baseName": "type",
    "type": "FavoriteMetadataItemTypeEnum",
    "format": ""
  }
];
var FavoriteMetadataItem = _FavoriteMetadataItem;

// models/FavoriteObjectOptionsInput.ts
var _FavoriteObjectOptionsInput = class _FavoriteObjectOptionsInput {
  static getAttributeTypeMap() {
    return _FavoriteObjectOptionsInput.attributeTypeMap;
  }
  constructor() {
  }
};
_FavoriteObjectOptionsInput.discriminator = void 0;
_FavoriteObjectOptionsInput.attributeTypeMap = [
  {
    "name": "include",
    "baseName": "include",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "user_identifiers",
    "baseName": "user_identifiers",
    "type": "Array<string>",
    "format": ""
  }
];
var FavoriteObjectOptionsInput = _FavoriteObjectOptionsInput;

// models/FetchAnswerDataRequest.ts
var _FetchAnswerDataRequest = class _FetchAnswerDataRequest {
  static getAttributeTypeMap() {
    return _FetchAnswerDataRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_FetchAnswerDataRequest.discriminator = void 0;
_FetchAnswerDataRequest.attributeTypeMap = [
  {
    "name": "metadata_identifier",
    "baseName": "metadata_identifier",
    "type": "string",
    "format": ""
  },
  {
    "name": "data_format",
    "baseName": "data_format",
    "type": "FetchAnswerDataRequestDataFormatEnum",
    "format": ""
  },
  {
    "name": "record_offset",
    "baseName": "record_offset",
    "type": "number",
    "format": "int32"
  },
  {
    "name": "record_size",
    "baseName": "record_size",
    "type": "number",
    "format": "int32"
  },
  {
    "name": "runtime_filter",
    "baseName": "runtime_filter",
    "type": "any",
    "format": ""
  },
  {
    "name": "runtime_sort",
    "baseName": "runtime_sort",
    "type": "any",
    "format": ""
  },
  {
    "name": "runtime_param_override",
    "baseName": "runtime_param_override",
    "type": "any",
    "format": ""
  }
];
var FetchAnswerDataRequest = _FetchAnswerDataRequest;

// models/FetchAnswerSqlQueryRequest.ts
var _FetchAnswerSqlQueryRequest = class _FetchAnswerSqlQueryRequest {
  static getAttributeTypeMap() {
    return _FetchAnswerSqlQueryRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_FetchAnswerSqlQueryRequest.discriminator = void 0;
_FetchAnswerSqlQueryRequest.attributeTypeMap = [
  {
    "name": "metadata_identifier",
    "baseName": "metadata_identifier",
    "type": "string",
    "format": ""
  }
];
var FetchAnswerSqlQueryRequest = _FetchAnswerSqlQueryRequest;

// models/FetchAsyncImportTaskStatusRequest.ts
var _FetchAsyncImportTaskStatusRequest = class _FetchAsyncImportTaskStatusRequest {
  static getAttributeTypeMap() {
    return _FetchAsyncImportTaskStatusRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_FetchAsyncImportTaskStatusRequest.discriminator = void 0;
_FetchAsyncImportTaskStatusRequest.attributeTypeMap = [
  {
    "name": "task_ids",
    "baseName": "task_ids",
    "type": "Array<string>",
    "format": ""
  },
  {
    "name": "task_status",
    "baseName": "task_status",
    "type": "Array<FetchAsyncImportTaskStatusRequestTaskStatusEnum>",
    "format": ""
  },
  {
    "name": "author_identifier",
    "baseName": "author_identifier",
    "type": "string",
    "format": ""
  },
  {
    "name": "record_offset",
    "baseName": "record_offset",
    "type": "number",
    "format": "int32"
  },
  {
    "name": "record_size",
    "baseName": "record_size",
    "type": "number",
    "format": "int32"
  },
  {
    "name": "include_import_response",
    "baseName": "include_import_response",
    "type": "boolean",
    "format": ""
  }
];
var FetchAsyncImportTaskStatusRequest = _FetchAsyncImportTaskStatusRequest;

// models/FetchConnectionDiffStatusResponse.ts
var _FetchConnectionDiffStatusResponse = class _FetchConnectionDiffStatusResponse {
  static getAttributeTypeMap() {
    return _FetchConnectionDiffStatusResponse.attributeTypeMap;
  }
  constructor() {
  }
};
_FetchConnectionDiffStatusResponse.discriminator = void 0;
_FetchConnectionDiffStatusResponse.attributeTypeMap = [
  {
    "name": "status",
    "baseName": "status",
    "type": "boolean",
    "format": ""
  }
];
var FetchConnectionDiffStatusResponse = _FetchConnectionDiffStatusResponse;

// models/FetchLiveboardDataRequest.ts
var _FetchLiveboardDataRequest = class _FetchLiveboardDataRequest {
  static getAttributeTypeMap() {
    return _FetchLiveboardDataRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_FetchLiveboardDataRequest.discriminator = void 0;
_FetchLiveboardDataRequest.attributeTypeMap = [
  {
    "name": "metadata_identifier",
    "baseName": "metadata_identifier",
    "type": "string",
    "format": ""
  },
  {
    "name": "visualization_identifiers",
    "baseName": "visualization_identifiers",
    "type": "Array<string>",
    "format": ""
  },
  {
    "name": "transient_content",
    "baseName": "transient_content",
    "type": "string",
    "format": ""
  },
  {
    "name": "data_format",
    "baseName": "data_format",
    "type": "FetchLiveboardDataRequestDataFormatEnum",
    "format": ""
  },
  {
    "name": "record_offset",
    "baseName": "record_offset",
    "type": "number",
    "format": "int32"
  },
  {
    "name": "record_size",
    "baseName": "record_size",
    "type": "number",
    "format": "int32"
  },
  {
    "name": "runtime_filter",
    "baseName": "runtime_filter",
    "type": "any",
    "format": ""
  },
  {
    "name": "runtime_sort",
    "baseName": "runtime_sort",
    "type": "any",
    "format": ""
  },
  {
    "name": "runtime_param_override",
    "baseName": "runtime_param_override",
    "type": "any",
    "format": ""
  }
];
var FetchLiveboardDataRequest = _FetchLiveboardDataRequest;

// models/FetchLiveboardSqlQueryRequest.ts
var _FetchLiveboardSqlQueryRequest = class _FetchLiveboardSqlQueryRequest {
  static getAttributeTypeMap() {
    return _FetchLiveboardSqlQueryRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_FetchLiveboardSqlQueryRequest.discriminator = void 0;
_FetchLiveboardSqlQueryRequest.attributeTypeMap = [
  {
    "name": "metadata_identifier",
    "baseName": "metadata_identifier",
    "type": "string",
    "format": ""
  },
  {
    "name": "visualization_identifiers",
    "baseName": "visualization_identifiers",
    "type": "Array<string>",
    "format": ""
  }
];
var FetchLiveboardSqlQueryRequest = _FetchLiveboardSqlQueryRequest;

// models/FetchLogsRequest.ts
var _FetchLogsRequest = class _FetchLogsRequest {
  static getAttributeTypeMap() {
    return _FetchLogsRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_FetchLogsRequest.discriminator = void 0;
_FetchLogsRequest.attributeTypeMap = [
  {
    "name": "log_type",
    "baseName": "log_type",
    "type": "FetchLogsRequestLogTypeEnum",
    "format": ""
  },
  {
    "name": "start_epoch_time_in_millis",
    "baseName": "start_epoch_time_in_millis",
    "type": "number",
    "format": "float"
  },
  {
    "name": "end_epoch_time_in_millis",
    "baseName": "end_epoch_time_in_millis",
    "type": "number",
    "format": "float"
  },
  {
    "name": "get_all_logs",
    "baseName": "get_all_logs",
    "type": "boolean",
    "format": ""
  }
];
var FetchLogsRequest = _FetchLogsRequest;

// models/FetchPermissionsOfPrincipalsRequest.ts
var _FetchPermissionsOfPrincipalsRequest = class _FetchPermissionsOfPrincipalsRequest {
  static getAttributeTypeMap() {
    return _FetchPermissionsOfPrincipalsRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_FetchPermissionsOfPrincipalsRequest.discriminator = void 0;
_FetchPermissionsOfPrincipalsRequest.attributeTypeMap = [
  {
    "name": "principals",
    "baseName": "principals",
    "type": "Array<PrincipalsInput>",
    "format": ""
  },
  {
    "name": "metadata",
    "baseName": "metadata",
    "type": "Array<PermissionsMetadataTypeInput>",
    "format": ""
  },
  {
    "name": "record_offset",
    "baseName": "record_offset",
    "type": "number",
    "format": "int32"
  },
  {
    "name": "record_size",
    "baseName": "record_size",
    "type": "number",
    "format": "int32"
  },
  {
    "name": "default_metadata_type",
    "baseName": "default_metadata_type",
    "type": "FetchPermissionsOfPrincipalsRequestDefaultMetadataTypeEnum",
    "format": ""
  }
];
var FetchPermissionsOfPrincipalsRequest = _FetchPermissionsOfPrincipalsRequest;

// models/FetchPermissionsOnMetadataRequest.ts
var _FetchPermissionsOnMetadataRequest = class _FetchPermissionsOnMetadataRequest {
  static getAttributeTypeMap() {
    return _FetchPermissionsOnMetadataRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_FetchPermissionsOnMetadataRequest.discriminator = void 0;
_FetchPermissionsOnMetadataRequest.attributeTypeMap = [
  {
    "name": "metadata",
    "baseName": "metadata",
    "type": "Array<PermissionsMetadataTypeInput>",
    "format": ""
  },
  {
    "name": "principals",
    "baseName": "principals",
    "type": "Array<PrincipalsInput>",
    "format": ""
  },
  {
    "name": "include_dependent_objects",
    "baseName": "include_dependent_objects",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "record_offset",
    "baseName": "record_offset",
    "type": "number",
    "format": "int32"
  },
  {
    "name": "record_size",
    "baseName": "record_size",
    "type": "number",
    "format": "int32"
  },
  {
    "name": "permission_type",
    "baseName": "permission_type",
    "type": "string",
    "format": ""
  }
];
var FetchPermissionsOnMetadataRequest = _FetchPermissionsOnMetadataRequest;

// models/FilterRules.ts
var _FilterRules = class _FilterRules {
  static getAttributeTypeMap() {
    return _FilterRules.attributeTypeMap;
  }
  constructor() {
  }
};
_FilterRules.discriminator = void 0;
_FilterRules.attributeTypeMap = [
  {
    "name": "column_name",
    "baseName": "column_name",
    "type": "string",
    "format": ""
  },
  {
    "name": "operator",
    "baseName": "operator",
    "type": "FilterRulesOperatorEnum",
    "format": ""
  },
  {
    "name": "values",
    "baseName": "values",
    "type": "Array<any>",
    "format": ""
  }
];
var FilterRules = _FilterRules;

// models/ForceLogoutUsersRequest.ts
var _ForceLogoutUsersRequest = class _ForceLogoutUsersRequest {
  static getAttributeTypeMap() {
    return _ForceLogoutUsersRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_ForceLogoutUsersRequest.discriminator = void 0;
_ForceLogoutUsersRequest.attributeTypeMap = [
  {
    "name": "user_identifiers",
    "baseName": "user_identifiers",
    "type": "Array<string>",
    "format": ""
  }
];
var ForceLogoutUsersRequest = _ForceLogoutUsersRequest;

// models/Frequency.ts
var _Frequency = class _Frequency {
  static getAttributeTypeMap() {
    return _Frequency.attributeTypeMap;
  }
  constructor() {
  }
};
_Frequency.discriminator = void 0;
_Frequency.attributeTypeMap = [
  {
    "name": "cron_expression",
    "baseName": "cron_expression",
    "type": "CronExpression",
    "format": ""
  }
];
var Frequency = _Frequency;

// models/FrequencyInput.ts
var _FrequencyInput = class _FrequencyInput {
  static getAttributeTypeMap() {
    return _FrequencyInput.attributeTypeMap;
  }
  constructor() {
  }
};
_FrequencyInput.discriminator = void 0;
_FrequencyInput.attributeTypeMap = [
  {
    "name": "cron_expression",
    "baseName": "cron_expression",
    "type": "CronExpressionInput",
    "format": ""
  }
];
var FrequencyInput = _FrequencyInput;

// models/GenericInfo.ts
var _GenericInfo = class _GenericInfo {
  static getAttributeTypeMap() {
    return _GenericInfo.attributeTypeMap;
  }
  constructor() {
  }
};
_GenericInfo.discriminator = void 0;
_GenericInfo.attributeTypeMap = [
  {
    "name": "id",
    "baseName": "id",
    "type": "string",
    "format": ""
  },
  {
    "name": "name",
    "baseName": "name",
    "type": "string",
    "format": ""
  }
];
var GenericInfo = _GenericInfo;

// models/GetAsyncImportStatusResponse.ts
var _GetAsyncImportStatusResponse = class _GetAsyncImportStatusResponse {
  static getAttributeTypeMap() {
    return _GetAsyncImportStatusResponse.attributeTypeMap;
  }
  constructor() {
  }
};
_GetAsyncImportStatusResponse.discriminator = void 0;
_GetAsyncImportStatusResponse.attributeTypeMap = [
  {
    "name": "status_list",
    "baseName": "status_list",
    "type": "Array<ImportEPackAsyncTaskStatus>",
    "format": ""
  },
  {
    "name": "last_batch",
    "baseName": "last_batch",
    "type": "boolean",
    "format": ""
  }
];
var GetAsyncImportStatusResponse = _GetAsyncImportStatusResponse;

// models/GetCustomAccessTokenRequest.ts
var _GetCustomAccessTokenRequest = class _GetCustomAccessTokenRequest {
  static getAttributeTypeMap() {
    return _GetCustomAccessTokenRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_GetCustomAccessTokenRequest.discriminator = void 0;
_GetCustomAccessTokenRequest.attributeTypeMap = [
  {
    "name": "username",
    "baseName": "username",
    "type": "string",
    "format": ""
  },
  {
    "name": "password",
    "baseName": "password",
    "type": "string",
    "format": ""
  },
  {
    "name": "secret_key",
    "baseName": "secret_key",
    "type": "string",
    "format": ""
  },
  {
    "name": "validity_time_in_sec",
    "baseName": "validity_time_in_sec",
    "type": "number",
    "format": "int32"
  },
  {
    "name": "org_identifier",
    "baseName": "org_identifier",
    "type": "string",
    "format": ""
  },
  {
    "name": "persist_option",
    "baseName": "persist_option",
    "type": "GetCustomAccessTokenRequestPersistOptionEnum",
    "format": ""
  },
  {
    "name": "filter_rules",
    "baseName": "filter_rules",
    "type": "Array<FilterRules>",
    "format": ""
  },
  {
    "name": "parameter_values",
    "baseName": "parameter_values",
    "type": "Array<ParameterValues>",
    "format": ""
  },
  {
    "name": "objects",
    "baseName": "objects",
    "type": "Array<TokenAccessScopeObject>",
    "format": ""
  },
  {
    "name": "email",
    "baseName": "email",
    "type": "string",
    "format": ""
  },
  {
    "name": "display_name",
    "baseName": "display_name",
    "type": "string",
    "format": ""
  },
  {
    "name": "groups",
    "baseName": "groups",
    "type": "Array<GroupObject>",
    "format": ""
  },
  {
    "name": "auto_create",
    "baseName": "auto_create",
    "type": "boolean",
    "format": ""
  }
];
var GetCustomAccessTokenRequest = _GetCustomAccessTokenRequest;

// models/GetFullAccessTokenRequest.ts
var _GetFullAccessTokenRequest = class _GetFullAccessTokenRequest {
  static getAttributeTypeMap() {
    return _GetFullAccessTokenRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_GetFullAccessTokenRequest.discriminator = void 0;
_GetFullAccessTokenRequest.attributeTypeMap = [
  {
    "name": "username",
    "baseName": "username",
    "type": "string",
    "format": ""
  },
  {
    "name": "password",
    "baseName": "password",
    "type": "string",
    "format": ""
  },
  {
    "name": "secret_key",
    "baseName": "secret_key",
    "type": "string",
    "format": ""
  },
  {
    "name": "validity_time_in_sec",
    "baseName": "validity_time_in_sec",
    "type": "number",
    "format": "int32"
  },
  {
    "name": "org_id",
    "baseName": "org_id",
    "type": "number",
    "format": "int32"
  },
  {
    "name": "email",
    "baseName": "email",
    "type": "string",
    "format": ""
  },
  {
    "name": "display_name",
    "baseName": "display_name",
    "type": "string",
    "format": ""
  },
  {
    "name": "auto_create",
    "baseName": "auto_create",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "group_identifiers",
    "baseName": "group_identifiers",
    "type": "Array<string>",
    "format": ""
  }
];
var GetFullAccessTokenRequest = _GetFullAccessTokenRequest;

// models/GetObjectAccessTokenRequest.ts
var _GetObjectAccessTokenRequest = class _GetObjectAccessTokenRequest {
  static getAttributeTypeMap() {
    return _GetObjectAccessTokenRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_GetObjectAccessTokenRequest.discriminator = void 0;
_GetObjectAccessTokenRequest.attributeTypeMap = [
  {
    "name": "username",
    "baseName": "username",
    "type": "string",
    "format": ""
  },
  {
    "name": "object_id",
    "baseName": "object_id",
    "type": "string",
    "format": ""
  },
  {
    "name": "password",
    "baseName": "password",
    "type": "string",
    "format": ""
  },
  {
    "name": "secret_key",
    "baseName": "secret_key",
    "type": "string",
    "format": ""
  },
  {
    "name": "validity_time_in_sec",
    "baseName": "validity_time_in_sec",
    "type": "number",
    "format": "int32"
  },
  {
    "name": "org_id",
    "baseName": "org_id",
    "type": "number",
    "format": "int32"
  },
  {
    "name": "email",
    "baseName": "email",
    "type": "string",
    "format": ""
  },
  {
    "name": "display_name",
    "baseName": "display_name",
    "type": "string",
    "format": ""
  },
  {
    "name": "auto_create",
    "baseName": "auto_create",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "group_identifiers",
    "baseName": "group_identifiers",
    "type": "Array<string>",
    "format": ""
  }
];
var GetObjectAccessTokenRequest = _GetObjectAccessTokenRequest;

// models/GetTokenResponse.ts
var _GetTokenResponse = class _GetTokenResponse {
  static getAttributeTypeMap() {
    return _GetTokenResponse.attributeTypeMap;
  }
  constructor() {
  }
};
_GetTokenResponse.discriminator = void 0;
_GetTokenResponse.attributeTypeMap = [
  {
    "name": "token",
    "baseName": "token",
    "type": "string",
    "format": ""
  },
  {
    "name": "creation_time_in_millis",
    "baseName": "creation_time_in_millis",
    "type": "number",
    "format": "float"
  },
  {
    "name": "expiration_time_in_millis",
    "baseName": "expiration_time_in_millis",
    "type": "number",
    "format": "float"
  },
  {
    "name": "valid_for_user_id",
    "baseName": "valid_for_user_id",
    "type": "string",
    "format": ""
  },
  {
    "name": "valid_for_username",
    "baseName": "valid_for_username",
    "type": "string",
    "format": ""
  }
];
var GetTokenResponse = _GetTokenResponse;

// models/GroupObject.ts
var _GroupObject = class _GroupObject {
  static getAttributeTypeMap() {
    return _GroupObject.attributeTypeMap;
  }
  constructor() {
  }
};
_GroupObject.discriminator = void 0;
_GroupObject.attributeTypeMap = [
  {
    "name": "identifier",
    "baseName": "identifier",
    "type": "string",
    "format": ""
  }
];
var GroupObject = _GroupObject;

// models/GroupsImportListInput.ts
var _GroupsImportListInput = class _GroupsImportListInput {
  static getAttributeTypeMap() {
    return _GroupsImportListInput.attributeTypeMap;
  }
  constructor() {
  }
};
_GroupsImportListInput.discriminator = void 0;
_GroupsImportListInput.attributeTypeMap = [
  {
    "name": "display_name",
    "baseName": "display_name",
    "type": "string",
    "format": ""
  },
  {
    "name": "group_identifier",
    "baseName": "group_identifier",
    "type": "string",
    "format": ""
  },
  {
    "name": "default_liveboard_identifiers",
    "baseName": "default_liveboard_identifiers",
    "type": "Array<string>",
    "format": ""
  },
  {
    "name": "description",
    "baseName": "description",
    "type": "string",
    "format": ""
  },
  {
    "name": "privileges",
    "baseName": "privileges",
    "type": "Array<GroupsImportListInputPrivilegesEnum>",
    "format": ""
  },
  {
    "name": "sub_group_identifiers",
    "baseName": "sub_group_identifiers",
    "type": "Array<string>",
    "format": ""
  },
  {
    "name": "type",
    "baseName": "type",
    "type": "GroupsImportListInputTypeEnum",
    "format": ""
  },
  {
    "name": "user_identifiers",
    "baseName": "user_identifiers",
    "type": "Array<string>",
    "format": ""
  },
  {
    "name": "visibility",
    "baseName": "visibility",
    "type": "GroupsImportListInputVisibilityEnum",
    "format": ""
  }
];
var GroupsImportListInput = _GroupsImportListInput;

// models/HeaderAttributeInput.ts
var _HeaderAttributeInput = class _HeaderAttributeInput {
  static getAttributeTypeMap() {
    return _HeaderAttributeInput.attributeTypeMap;
  }
  constructor() {
  }
};
_HeaderAttributeInput.discriminator = void 0;
_HeaderAttributeInput.attributeTypeMap = [
  {
    "name": "name",
    "baseName": "name",
    "type": "string",
    "format": ""
  },
  {
    "name": "value",
    "baseName": "value",
    "type": "string",
    "format": ""
  }
];
var HeaderAttributeInput = _HeaderAttributeInput;

// models/HeaderUpdateInput.ts
var _HeaderUpdateInput = class _HeaderUpdateInput {
  static getAttributeTypeMap() {
    return _HeaderUpdateInput.attributeTypeMap;
  }
  constructor() {
  }
};
_HeaderUpdateInput.discriminator = void 0;
_HeaderUpdateInput.attributeTypeMap = [
  {
    "name": "identifier",
    "baseName": "identifier",
    "type": "string",
    "format": ""
  },
  {
    "name": "obj_identifier",
    "baseName": "obj_identifier",
    "type": "string",
    "format": ""
  },
  {
    "name": "type",
    "baseName": "type",
    "type": "HeaderUpdateInputTypeEnum",
    "format": ""
  },
  {
    "name": "attributes",
    "baseName": "attributes",
    "type": "Array<HeaderAttributeInput>",
    "format": ""
  }
];
var HeaderUpdateInput = _HeaderUpdateInput;

// models/ImportEPackAsyncTaskStatus.ts
var _ImportEPackAsyncTaskStatus = class _ImportEPackAsyncTaskStatus {
  static getAttributeTypeMap() {
    return _ImportEPackAsyncTaskStatus.attributeTypeMap;
  }
  constructor() {
  }
};
_ImportEPackAsyncTaskStatus.discriminator = void 0;
_ImportEPackAsyncTaskStatus.attributeTypeMap = [
  {
    "name": "tenant_id",
    "baseName": "tenant_id",
    "type": "string",
    "format": ""
  },
  {
    "name": "org_id",
    "baseName": "org_id",
    "type": "number",
    "format": "int32"
  },
  {
    "name": "task_id",
    "baseName": "task_id",
    "type": "string",
    "format": ""
  },
  {
    "name": "task_name",
    "baseName": "task_name",
    "type": "string",
    "format": ""
  },
  {
    "name": "import_response",
    "baseName": "import_response",
    "type": "any",
    "format": ""
  },
  {
    "name": "task_status",
    "baseName": "task_status",
    "type": "ImportEPackAsyncTaskStatusTaskStatusEnum",
    "format": ""
  },
  {
    "name": "author_id",
    "baseName": "author_id",
    "type": "string",
    "format": ""
  },
  {
    "name": "import_policy",
    "baseName": "import_policy",
    "type": "ImportEPackAsyncTaskStatusImportPolicyEnum",
    "format": ""
  },
  {
    "name": "created_at",
    "baseName": "created_at",
    "type": "number",
    "format": "float"
  },
  {
    "name": "in_progress_at",
    "baseName": "in_progress_at",
    "type": "number",
    "format": "float"
  },
  {
    "name": "completed_at",
    "baseName": "completed_at",
    "type": "number",
    "format": "float"
  },
  {
    "name": "total_object_count",
    "baseName": "total_object_count",
    "type": "number",
    "format": "int32"
  },
  {
    "name": "object_processed_count",
    "baseName": "object_processed_count",
    "type": "number",
    "format": "int32"
  },
  {
    "name": "modified_at",
    "baseName": "modified_at",
    "type": "number",
    "format": "float"
  }
];
var ImportEPackAsyncTaskStatus = _ImportEPackAsyncTaskStatus;

// models/ImportMetadataTMLAsyncRequest.ts
var _ImportMetadataTMLAsyncRequest = class _ImportMetadataTMLAsyncRequest {
  static getAttributeTypeMap() {
    return _ImportMetadataTMLAsyncRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_ImportMetadataTMLAsyncRequest.discriminator = void 0;
_ImportMetadataTMLAsyncRequest.attributeTypeMap = [
  {
    "name": "metadata_tmls",
    "baseName": "metadata_tmls",
    "type": "Array<string>",
    "format": ""
  },
  {
    "name": "create_new",
    "baseName": "create_new",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "all_orgs_override",
    "baseName": "all_orgs_override",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "import_policy",
    "baseName": "import_policy",
    "type": "ImportMetadataTMLAsyncRequestImportPolicyEnum",
    "format": ""
  },
  {
    "name": "skip_diff_check",
    "baseName": "skip_diff_check",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "enable_large_metadata_validation",
    "baseName": "enable_large_metadata_validation",
    "type": "boolean",
    "format": ""
  }
];
var ImportMetadataTMLAsyncRequest = _ImportMetadataTMLAsyncRequest;

// models/ImportMetadataTMLRequest.ts
var _ImportMetadataTMLRequest = class _ImportMetadataTMLRequest {
  static getAttributeTypeMap() {
    return _ImportMetadataTMLRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_ImportMetadataTMLRequest.discriminator = void 0;
_ImportMetadataTMLRequest.attributeTypeMap = [
  {
    "name": "metadata_tmls",
    "baseName": "metadata_tmls",
    "type": "Array<string>",
    "format": ""
  },
  {
    "name": "import_policy",
    "baseName": "import_policy",
    "type": "ImportMetadataTMLRequestImportPolicyEnum",
    "format": ""
  },
  {
    "name": "create_new",
    "baseName": "create_new",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "all_orgs_override",
    "baseName": "all_orgs_override",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "skip_diff_check",
    "baseName": "skip_diff_check",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "enable_large_metadata_validation",
    "baseName": "enable_large_metadata_validation",
    "type": "boolean",
    "format": ""
  }
];
var ImportMetadataTMLRequest = _ImportMetadataTMLRequest;

// models/ImportUser.ts
var _ImportUser = class _ImportUser {
  static getAttributeTypeMap() {
    return _ImportUser.attributeTypeMap;
  }
  constructor() {
  }
};
_ImportUser.discriminator = void 0;
_ImportUser.attributeTypeMap = [
  {
    "name": "user_identifier",
    "baseName": "user_identifier",
    "type": "string",
    "format": ""
  },
  {
    "name": "display_name",
    "baseName": "display_name",
    "type": "string",
    "format": ""
  },
  {
    "name": "password",
    "baseName": "password",
    "type": "string",
    "format": ""
  },
  {
    "name": "account_type",
    "baseName": "account_type",
    "type": "ImportUserAccountTypeEnum",
    "format": ""
  },
  {
    "name": "account_status",
    "baseName": "account_status",
    "type": "ImportUserAccountStatusEnum",
    "format": ""
  },
  {
    "name": "email",
    "baseName": "email",
    "type": "string",
    "format": ""
  },
  {
    "name": "org_identifiers",
    "baseName": "org_identifiers",
    "type": "Array<string>",
    "format": ""
  },
  {
    "name": "group_identifiers",
    "baseName": "group_identifiers",
    "type": "Array<string>",
    "format": ""
  },
  {
    "name": "visibility",
    "baseName": "visibility",
    "type": "ImportUserVisibilityEnum",
    "format": ""
  },
  {
    "name": "notify_on_share",
    "baseName": "notify_on_share",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "show_onboarding_experience",
    "baseName": "show_onboarding_experience",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "onboarding_experience_completed",
    "baseName": "onboarding_experience_completed",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "home_liveboard_identifier",
    "baseName": "home_liveboard_identifier",
    "type": "string",
    "format": ""
  },
  {
    "name": "favorite_metadata",
    "baseName": "favorite_metadata",
    "type": "Array<FavoriteMetadataInput>",
    "format": ""
  }
];
var ImportUser = _ImportUser;

// models/ImportUserGroupsRequest.ts
var _ImportUserGroupsRequest = class _ImportUserGroupsRequest {
  static getAttributeTypeMap() {
    return _ImportUserGroupsRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_ImportUserGroupsRequest.discriminator = void 0;
_ImportUserGroupsRequest.attributeTypeMap = [
  {
    "name": "groups",
    "baseName": "groups",
    "type": "Array<GroupsImportListInput>",
    "format": ""
  },
  {
    "name": "delete_unspecified_groups",
    "baseName": "delete_unspecified_groups",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "dry_run",
    "baseName": "dry_run",
    "type": "boolean",
    "format": ""
  }
];
var ImportUserGroupsRequest = _ImportUserGroupsRequest;

// models/ImportUserGroupsResponse.ts
var _ImportUserGroupsResponse = class _ImportUserGroupsResponse {
  static getAttributeTypeMap() {
    return _ImportUserGroupsResponse.attributeTypeMap;
  }
  constructor() {
  }
};
_ImportUserGroupsResponse.discriminator = void 0;
_ImportUserGroupsResponse.attributeTypeMap = [
  {
    "name": "groups_added",
    "baseName": "groups_added",
    "type": "Array<UserGroup>",
    "format": ""
  },
  {
    "name": "groups_deleted",
    "baseName": "groups_deleted",
    "type": "Array<UserGroup>",
    "format": ""
  },
  {
    "name": "groups_updated",
    "baseName": "groups_updated",
    "type": "Array<UserGroup>",
    "format": ""
  }
];
var ImportUserGroupsResponse = _ImportUserGroupsResponse;

// models/ImportUserType.ts
var _ImportUserType = class _ImportUserType {
  static getAttributeTypeMap() {
    return _ImportUserType.attributeTypeMap;
  }
  constructor() {
  }
};
_ImportUserType.discriminator = void 0;
_ImportUserType.attributeTypeMap = [
  {
    "name": "id",
    "baseName": "id",
    "type": "string",
    "format": ""
  },
  {
    "name": "name",
    "baseName": "name",
    "type": "string",
    "format": ""
  }
];
var ImportUserType = _ImportUserType;

// models/ImportUsersRequest.ts
var _ImportUsersRequest = class _ImportUsersRequest {
  static getAttributeTypeMap() {
    return _ImportUsersRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_ImportUsersRequest.discriminator = void 0;
_ImportUsersRequest.attributeTypeMap = [
  {
    "name": "users",
    "baseName": "users",
    "type": "Array<ImportUser>",
    "format": ""
  },
  {
    "name": "default_password",
    "baseName": "default_password",
    "type": "string",
    "format": ""
  },
  {
    "name": "dry_run",
    "baseName": "dry_run",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "delete_unspecified_users",
    "baseName": "delete_unspecified_users",
    "type": "boolean",
    "format": ""
  }
];
var ImportUsersRequest = _ImportUsersRequest;

// models/ImportUsersResponse.ts
var _ImportUsersResponse = class _ImportUsersResponse {
  static getAttributeTypeMap() {
    return _ImportUsersResponse.attributeTypeMap;
  }
  constructor() {
  }
};
_ImportUsersResponse.discriminator = void 0;
_ImportUsersResponse.attributeTypeMap = [
  {
    "name": "users_added",
    "baseName": "users_added",
    "type": "Array<ImportUserType>",
    "format": ""
  },
  {
    "name": "users_updated",
    "baseName": "users_updated",
    "type": "Array<ImportUserType>",
    "format": ""
  },
  {
    "name": "users_deleted",
    "baseName": "users_deleted",
    "type": "Array<ImportUserType>",
    "format": ""
  }
];
var ImportUsersResponse = _ImportUsersResponse;

// models/InputEurekaNLSRequest.ts
var _InputEurekaNLSRequest = class _InputEurekaNLSRequest {
  static getAttributeTypeMap() {
    return _InputEurekaNLSRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_InputEurekaNLSRequest.discriminator = void 0;
_InputEurekaNLSRequest.attributeTypeMap = [
  {
    "name": "agentVersion",
    "baseName": "agentVersion",
    "type": "number",
    "format": "int32"
  },
  {
    "name": "bypassCache",
    "baseName": "bypassCache",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "instructions",
    "baseName": "instructions",
    "type": "Array<string>",
    "format": ""
  },
  {
    "name": "query",
    "baseName": "query",
    "type": "string",
    "format": ""
  }
];
var InputEurekaNLSRequest = _InputEurekaNLSRequest;

// models/InputVariableValue.ts
var _InputVariableValue = class _InputVariableValue {
  static getAttributeTypeMap() {
    return _InputVariableValue.attributeTypeMap;
  }
  constructor() {
  }
};
_InputVariableValue.discriminator = void 0;
_InputVariableValue.attributeTypeMap = [
  {
    "name": "value",
    "baseName": "value",
    "type": "string",
    "format": ""
  },
  {
    "name": "org_identifier",
    "baseName": "org_identifier",
    "type": "string",
    "format": ""
  },
  {
    "name": "principal_type",
    "baseName": "principal_type",
    "type": "InputVariableValuePrincipalTypeEnum",
    "format": ""
  },
  {
    "name": "principal_identifier",
    "baseName": "principal_identifier",
    "type": "string",
    "format": ""
  },
  {
    "name": "priority",
    "baseName": "priority",
    "type": "number",
    "format": "int32"
  }
];
var InputVariableValue = _InputVariableValue;

// models/JWTMetadataObject.ts
var _JWTMetadataObject = class _JWTMetadataObject {
  static getAttributeTypeMap() {
    return _JWTMetadataObject.attributeTypeMap;
  }
  constructor() {
  }
};
_JWTMetadataObject.discriminator = void 0;
_JWTMetadataObject.attributeTypeMap = [
  {
    "name": "identifier",
    "baseName": "identifier",
    "type": "string",
    "format": ""
  },
  {
    "name": "type",
    "baseName": "type",
    "type": "JWTMetadataObjectTypeEnum",
    "format": ""
  }
];
var JWTMetadataObject = _JWTMetadataObject;

// models/JWTParameter.ts
var _JWTParameter = class _JWTParameter {
  static getAttributeTypeMap() {
    return _JWTParameter.attributeTypeMap;
  }
  constructor() {
  }
};
_JWTParameter.discriminator = void 0;
_JWTParameter.attributeTypeMap = [
  {
    "name": "runtime_filter",
    "baseName": "runtime_filter",
    "type": "any",
    "format": ""
  },
  {
    "name": "runtime_sort",
    "baseName": "runtime_sort",
    "type": "any",
    "format": ""
  },
  {
    "name": "runtime_param_override",
    "baseName": "runtime_param_override",
    "type": "any",
    "format": ""
  }
];
var JWTParameter = _JWTParameter;

// models/JWTUserOptions.ts
var _JWTUserOptions = class _JWTUserOptions {
  static getAttributeTypeMap() {
    return _JWTUserOptions.attributeTypeMap;
  }
  constructor() {
  }
};
_JWTUserOptions.discriminator = void 0;
_JWTUserOptions.attributeTypeMap = [
  {
    "name": "parameters",
    "baseName": "parameters",
    "type": "Array<any>",
    "format": ""
  },
  {
    "name": "metadata",
    "baseName": "metadata",
    "type": "Array<JWTMetadataObject>",
    "format": ""
  }
];
var JWTUserOptions = _JWTUserOptions;

// models/JWTUserOptionsFull.ts
var _JWTUserOptionsFull = class _JWTUserOptionsFull {
  static getAttributeTypeMap() {
    return _JWTUserOptionsFull.attributeTypeMap;
  }
  constructor() {
  }
};
_JWTUserOptionsFull.discriminator = void 0;
_JWTUserOptionsFull.attributeTypeMap = [
  {
    "name": "parameters",
    "baseName": "parameters",
    "type": "Array<JWTParameter>",
    "format": ""
  }
];
var JWTUserOptionsFull = _JWTUserOptionsFull;

// models/LiveboardContent.ts
var _LiveboardContent = class _LiveboardContent {
  static getAttributeTypeMap() {
    return _LiveboardContent.attributeTypeMap;
  }
  constructor() {
  }
};
_LiveboardContent.discriminator = void 0;
_LiveboardContent.attributeTypeMap = [
  {
    "name": "available_data_row_count",
    "baseName": "available_data_row_count",
    "type": "number",
    "format": "int32"
  },
  {
    "name": "column_names",
    "baseName": "column_names",
    "type": "Array<string>",
    "format": ""
  },
  {
    "name": "data_rows",
    "baseName": "data_rows",
    "type": "Array<any>",
    "format": ""
  },
  {
    "name": "record_offset",
    "baseName": "record_offset",
    "type": "number",
    "format": "int32"
  },
  {
    "name": "record_size",
    "baseName": "record_size",
    "type": "number",
    "format": "int32"
  },
  {
    "name": "returned_data_row_count",
    "baseName": "returned_data_row_count",
    "type": "number",
    "format": "int32"
  },
  {
    "name": "sampling_ratio",
    "baseName": "sampling_ratio",
    "type": "number",
    "format": "float"
  },
  {
    "name": "visualization_id",
    "baseName": "visualization_id",
    "type": "string",
    "format": ""
  },
  {
    "name": "visualization_name",
    "baseName": "visualization_name",
    "type": "string",
    "format": ""
  }
];
var LiveboardContent = _LiveboardContent;

// models/LiveboardDataResponse.ts
var _LiveboardDataResponse = class _LiveboardDataResponse {
  static getAttributeTypeMap() {
    return _LiveboardDataResponse.attributeTypeMap;
  }
  constructor() {
  }
};
_LiveboardDataResponse.discriminator = void 0;
_LiveboardDataResponse.attributeTypeMap = [
  {
    "name": "metadata_id",
    "baseName": "metadata_id",
    "type": "string",
    "format": ""
  },
  {
    "name": "metadata_name",
    "baseName": "metadata_name",
    "type": "string",
    "format": ""
  },
  {
    "name": "contents",
    "baseName": "contents",
    "type": "Array<LiveboardContent>",
    "format": ""
  }
];
var LiveboardDataResponse = _LiveboardDataResponse;

// models/LiveboardOptions.ts
var _LiveboardOptions = class _LiveboardOptions {
  static getAttributeTypeMap() {
    return _LiveboardOptions.attributeTypeMap;
  }
  constructor() {
  }
};
_LiveboardOptions.discriminator = void 0;
_LiveboardOptions.attributeTypeMap = [
  {
    "name": "visualization_identifiers",
    "baseName": "visualization_identifiers",
    "type": "Array<string>",
    "format": ""
  }
];
var LiveboardOptions = _LiveboardOptions;

// models/LiveboardOptionsInput.ts
var _LiveboardOptionsInput = class _LiveboardOptionsInput {
  static getAttributeTypeMap() {
    return _LiveboardOptionsInput.attributeTypeMap;
  }
  constructor() {
  }
};
_LiveboardOptionsInput.discriminator = void 0;
_LiveboardOptionsInput.attributeTypeMap = [
  {
    "name": "visualization_identifiers",
    "baseName": "visualization_identifiers",
    "type": "Array<string>",
    "format": ""
  }
];
var LiveboardOptionsInput = _LiveboardOptionsInput;

// models/LogResponse.ts
var _LogResponse = class _LogResponse {
  static getAttributeTypeMap() {
    return _LogResponse.attributeTypeMap;
  }
  constructor() {
  }
};
_LogResponse.discriminator = void 0;
_LogResponse.attributeTypeMap = [
  {
    "name": "date",
    "baseName": "date",
    "type": "string",
    "format": ""
  },
  {
    "name": "log",
    "baseName": "log",
    "type": "string",
    "format": ""
  }
];
var LogResponse = _LogResponse;

// models/LoginRequest.ts
var _LoginRequest = class _LoginRequest {
  static getAttributeTypeMap() {
    return _LoginRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_LoginRequest.discriminator = void 0;
_LoginRequest.attributeTypeMap = [
  {
    "name": "username",
    "baseName": "username",
    "type": "string",
    "format": ""
  },
  {
    "name": "password",
    "baseName": "password",
    "type": "string",
    "format": ""
  },
  {
    "name": "org_identifier",
    "baseName": "org_identifier",
    "type": "string",
    "format": ""
  },
  {
    "name": "remember_me",
    "baseName": "remember_me",
    "type": "boolean",
    "format": ""
  }
];
var LoginRequest = _LoginRequest;

// models/MetadataAssociationItem.ts
var _MetadataAssociationItem = class _MetadataAssociationItem {
  static getAttributeTypeMap() {
    return _MetadataAssociationItem.attributeTypeMap;
  }
  constructor() {
  }
};
_MetadataAssociationItem.discriminator = void 0;
_MetadataAssociationItem.attributeTypeMap = [
  {
    "name": "action_config",
    "baseName": "action_config",
    "type": "ActionConfig",
    "format": ""
  },
  {
    "name": "identifier",
    "baseName": "identifier",
    "type": "string",
    "format": ""
  },
  {
    "name": "type",
    "baseName": "type",
    "type": "string",
    "format": ""
  }
];
var MetadataAssociationItem = _MetadataAssociationItem;

// models/MetadataInput.ts
var _MetadataInput = class _MetadataInput {
  static getAttributeTypeMap() {
    return _MetadataInput.attributeTypeMap;
  }
  constructor() {
  }
};
_MetadataInput.discriminator = void 0;
_MetadataInput.attributeTypeMap = [
  {
    "name": "identifier",
    "baseName": "identifier",
    "type": "string",
    "format": ""
  },
  {
    "name": "type",
    "baseName": "type",
    "type": "MetadataInputTypeEnum",
    "format": ""
  }
];
var MetadataInput = _MetadataInput;

// models/MetadataListItemInput.ts
var _MetadataListItemInput = class _MetadataListItemInput {
  static getAttributeTypeMap() {
    return _MetadataListItemInput.attributeTypeMap;
  }
  constructor() {
  }
};
_MetadataListItemInput.discriminator = void 0;
_MetadataListItemInput.attributeTypeMap = [
  {
    "name": "identifier",
    "baseName": "identifier",
    "type": "string",
    "format": ""
  },
  {
    "name": "obj_identifier",
    "baseName": "obj_identifier",
    "type": "string",
    "format": ""
  },
  {
    "name": "name_pattern",
    "baseName": "name_pattern",
    "type": "string",
    "format": ""
  },
  {
    "name": "type",
    "baseName": "type",
    "type": "MetadataListItemInputTypeEnum",
    "format": ""
  }
];
var MetadataListItemInput = _MetadataListItemInput;

// models/MetadataObject.ts
var _MetadataObject = class _MetadataObject {
  static getAttributeTypeMap() {
    return _MetadataObject.attributeTypeMap;
  }
  constructor() {
  }
};
_MetadataObject.discriminator = void 0;
_MetadataObject.attributeTypeMap = [
  {
    "name": "identifier",
    "baseName": "identifier",
    "type": "string",
    "format": ""
  },
  {
    "name": "type",
    "baseName": "type",
    "type": "MetadataObjectTypeEnum",
    "format": ""
  }
];
var MetadataObject = _MetadataObject;

// models/MetadataResponse.ts
var _MetadataResponse = class _MetadataResponse {
  static getAttributeTypeMap() {
    return _MetadataResponse.attributeTypeMap;
  }
  constructor() {
  }
};
_MetadataResponse.discriminator = void 0;
_MetadataResponse.attributeTypeMap = [
  {
    "name": "name",
    "baseName": "name",
    "type": "string",
    "format": ""
  },
  {
    "name": "id",
    "baseName": "id",
    "type": "string",
    "format": ""
  },
  {
    "name": "type",
    "baseName": "type",
    "type": "MetadataResponseTypeEnum",
    "format": ""
  }
];
var MetadataResponse = _MetadataResponse;

// models/MetadataSearchResponse.ts
var _MetadataSearchResponse = class _MetadataSearchResponse {
  static getAttributeTypeMap() {
    return _MetadataSearchResponse.attributeTypeMap;
  }
  constructor() {
  }
};
_MetadataSearchResponse.discriminator = void 0;
_MetadataSearchResponse.attributeTypeMap = [
  {
    "name": "metadata_id",
    "baseName": "metadata_id",
    "type": "string",
    "format": ""
  },
  {
    "name": "metadata_name",
    "baseName": "metadata_name",
    "type": "string",
    "format": ""
  },
  {
    "name": "metadata_type",
    "baseName": "metadata_type",
    "type": "MetadataSearchResponseMetadataTypeEnum",
    "format": ""
  },
  {
    "name": "metadata_obj_id",
    "baseName": "metadata_obj_id",
    "type": "string",
    "format": ""
  },
  {
    "name": "dependent_objects",
    "baseName": "dependent_objects",
    "type": "any",
    "format": ""
  },
  {
    "name": "incomplete_objects",
    "baseName": "incomplete_objects",
    "type": "Array<any>",
    "format": ""
  },
  {
    "name": "metadata_detail",
    "baseName": "metadata_detail",
    "type": "any",
    "format": ""
  },
  {
    "name": "metadata_header",
    "baseName": "metadata_header",
    "type": "any",
    "format": ""
  },
  {
    "name": "visualization_headers",
    "baseName": "visualization_headers",
    "type": "Array<any>",
    "format": ""
  },
  {
    "name": "stats",
    "baseName": "stats",
    "type": "any",
    "format": ""
  }
];
var MetadataSearchResponse = _MetadataSearchResponse;

// models/MetadataSearchSortOptions.ts
var _MetadataSearchSortOptions = class _MetadataSearchSortOptions {
  static getAttributeTypeMap() {
    return _MetadataSearchSortOptions.attributeTypeMap;
  }
  constructor() {
  }
};
_MetadataSearchSortOptions.discriminator = void 0;
_MetadataSearchSortOptions.attributeTypeMap = [
  {
    "name": "field_name",
    "baseName": "field_name",
    "type": "MetadataSearchSortOptionsFieldNameEnum",
    "format": ""
  },
  {
    "name": "order",
    "baseName": "order",
    "type": "MetadataSearchSortOptionsOrderEnum",
    "format": ""
  }
];
var MetadataSearchSortOptions = _MetadataSearchSortOptions;

// models/ModelTableList.ts
var _ModelTableList = class _ModelTableList {
  static getAttributeTypeMap() {
    return _ModelTableList.attributeTypeMap;
  }
  constructor() {
  }
};
_ModelTableList.discriminator = void 0;
_ModelTableList.attributeTypeMap = [
  {
    "name": "model_name",
    "baseName": "model_name",
    "type": "string",
    "format": ""
  },
  {
    "name": "model_path",
    "baseName": "model_path",
    "type": "string",
    "format": ""
  },
  {
    "name": "tables",
    "baseName": "tables",
    "type": "Array<string>",
    "format": ""
  }
];
var ModelTableList = _ModelTableList;

// models/ObjectIDAndName.ts
var _ObjectIDAndName = class _ObjectIDAndName {
  static getAttributeTypeMap() {
    return _ObjectIDAndName.attributeTypeMap;
  }
  constructor() {
  }
};
_ObjectIDAndName.discriminator = void 0;
_ObjectIDAndName.attributeTypeMap = [
  {
    "name": "id",
    "baseName": "id",
    "type": "string",
    "format": ""
  },
  {
    "name": "name",
    "baseName": "name",
    "type": "string",
    "format": ""
  }
];
var ObjectIDAndName = _ObjectIDAndName;

// models/Org.ts
var _Org = class _Org {
  static getAttributeTypeMap() {
    return _Org.attributeTypeMap;
  }
  constructor() {
  }
};
_Org.discriminator = void 0;
_Org.attributeTypeMap = [
  {
    "name": "id",
    "baseName": "id",
    "type": "number",
    "format": "int32"
  },
  {
    "name": "name",
    "baseName": "name",
    "type": "string",
    "format": ""
  }
];
var Org = _Org;

// models/OrgInfo.ts
var _OrgInfo = class _OrgInfo {
  static getAttributeTypeMap() {
    return _OrgInfo.attributeTypeMap;
  }
  constructor() {
  }
};
_OrgInfo.discriminator = void 0;
_OrgInfo.attributeTypeMap = [
  {
    "name": "id",
    "baseName": "id",
    "type": "number",
    "format": "int32"
  },
  {
    "name": "name",
    "baseName": "name",
    "type": "string",
    "format": ""
  }
];
var OrgInfo = _OrgInfo;

// models/OrgResponse.ts
var _OrgResponse = class _OrgResponse {
  static getAttributeTypeMap() {
    return _OrgResponse.attributeTypeMap;
  }
  constructor() {
  }
};
_OrgResponse.discriminator = void 0;
_OrgResponse.attributeTypeMap = [
  {
    "name": "id",
    "baseName": "id",
    "type": "number",
    "format": "int32"
  },
  {
    "name": "name",
    "baseName": "name",
    "type": "string",
    "format": ""
  },
  {
    "name": "status",
    "baseName": "status",
    "type": "OrgResponseStatusEnum",
    "format": ""
  },
  {
    "name": "description",
    "baseName": "description",
    "type": "string",
    "format": ""
  },
  {
    "name": "visibility",
    "baseName": "visibility",
    "type": "OrgResponseVisibilityEnum",
    "format": ""
  }
];
var OrgResponse = _OrgResponse;

// models/OrgType.ts
var _OrgType = class _OrgType {
  static getAttributeTypeMap() {
    return _OrgType.attributeTypeMap;
  }
  constructor() {
  }
};
_OrgType.discriminator = void 0;
_OrgType.attributeTypeMap = [
  {
    "name": "name",
    "baseName": "name",
    "type": "string",
    "format": ""
  },
  {
    "name": "id",
    "baseName": "id",
    "type": "number",
    "format": "int32"
  }
];
var OrgType = _OrgType;

// models/ParameterValues.ts
var _ParameterValues = class _ParameterValues {
  static getAttributeTypeMap() {
    return _ParameterValues.attributeTypeMap;
  }
  constructor() {
  }
};
_ParameterValues.discriminator = void 0;
_ParameterValues.attributeTypeMap = [
  {
    "name": "name",
    "baseName": "name",
    "type": "string",
    "format": ""
  },
  {
    "name": "values",
    "baseName": "values",
    "type": "Array<any>",
    "format": ""
  }
];
var ParameterValues = _ParameterValues;

// models/ParameterizeMetadataRequest.ts
var _ParameterizeMetadataRequest = class _ParameterizeMetadataRequest {
  static getAttributeTypeMap() {
    return _ParameterizeMetadataRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_ParameterizeMetadataRequest.discriminator = void 0;
_ParameterizeMetadataRequest.attributeTypeMap = [
  {
    "name": "metadata_type",
    "baseName": "metadata_type",
    "type": "ParameterizeMetadataRequestMetadataTypeEnum",
    "format": ""
  },
  {
    "name": "metadata_identifier",
    "baseName": "metadata_identifier",
    "type": "string",
    "format": ""
  },
  {
    "name": "field_type",
    "baseName": "field_type",
    "type": "ParameterizeMetadataRequestFieldTypeEnum",
    "format": ""
  },
  {
    "name": "field_name",
    "baseName": "field_name",
    "type": "string",
    "format": ""
  },
  {
    "name": "variable_identifier",
    "baseName": "variable_identifier",
    "type": "string",
    "format": ""
  }
];
var ParameterizeMetadataRequest = _ParameterizeMetadataRequest;

// models/ParametersListItem.ts
var _ParametersListItem = class _ParametersListItem {
  static getAttributeTypeMap() {
    return _ParametersListItem.attributeTypeMap;
  }
  constructor() {
  }
};
_ParametersListItem.discriminator = void 0;
_ParametersListItem.attributeTypeMap = [
  {
    "name": "key",
    "baseName": "key",
    "type": "string",
    "format": ""
  },
  {
    "name": "value",
    "baseName": "value",
    "type": "string",
    "format": ""
  }
];
var ParametersListItem = _ParametersListItem;

// models/ParametersListItemInput.ts
var _ParametersListItemInput = class _ParametersListItemInput {
  static getAttributeTypeMap() {
    return _ParametersListItemInput.attributeTypeMap;
  }
  constructor() {
  }
};
_ParametersListItemInput.discriminator = void 0;
_ParametersListItemInput.attributeTypeMap = [
  {
    "name": "key",
    "baseName": "key",
    "type": "string",
    "format": ""
  },
  {
    "name": "value",
    "baseName": "value",
    "type": "string",
    "format": ""
  }
];
var ParametersListItemInput = _ParametersListItemInput;

// models/PdfOptions.ts
var _PdfOptions = class _PdfOptions {
  static getAttributeTypeMap() {
    return _PdfOptions.attributeTypeMap;
  }
  constructor() {
  }
};
_PdfOptions.discriminator = void 0;
_PdfOptions.attributeTypeMap = [
  {
    "name": "complete_liveboard",
    "baseName": "complete_liveboard",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "include_cover_page",
    "baseName": "include_cover_page",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "include_custom_logo",
    "baseName": "include_custom_logo",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "include_filter_page",
    "baseName": "include_filter_page",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "include_page_number",
    "baseName": "include_page_number",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "page_footer_text",
    "baseName": "page_footer_text",
    "type": "string",
    "format": ""
  },
  {
    "name": "page_orientation",
    "baseName": "page_orientation",
    "type": "string",
    "format": ""
  },
  {
    "name": "page_size",
    "baseName": "page_size",
    "type": "PdfOptionsPageSizeEnum",
    "format": ""
  },
  {
    "name": "truncate_table",
    "baseName": "truncate_table",
    "type": "boolean",
    "format": ""
  }
];
var PdfOptions = _PdfOptions;

// models/PdfOptionsInput.ts
var _PdfOptionsInput = class _PdfOptionsInput {
  static getAttributeTypeMap() {
    return _PdfOptionsInput.attributeTypeMap;
  }
  constructor() {
  }
};
_PdfOptionsInput.discriminator = void 0;
_PdfOptionsInput.attributeTypeMap = [
  {
    "name": "include_cover_page",
    "baseName": "include_cover_page",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "include_custom_logo",
    "baseName": "include_custom_logo",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "include_filter_page",
    "baseName": "include_filter_page",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "include_page_number",
    "baseName": "include_page_number",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "page_orientation",
    "baseName": "page_orientation",
    "type": "PdfOptionsInputPageOrientationEnum",
    "format": ""
  },
  {
    "name": "truncate_table",
    "baseName": "truncate_table",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "page_footer_text",
    "baseName": "page_footer_text",
    "type": "string",
    "format": ""
  }
];
var PdfOptionsInput = _PdfOptionsInput;

// models/PermissionInput.ts
var _PermissionInput = class _PermissionInput {
  static getAttributeTypeMap() {
    return _PermissionInput.attributeTypeMap;
  }
  constructor() {
  }
};
_PermissionInput.discriminator = void 0;
_PermissionInput.attributeTypeMap = [
  {
    "name": "principal",
    "baseName": "principal",
    "type": "PrincipalsInput",
    "format": ""
  },
  {
    "name": "share_mode",
    "baseName": "share_mode",
    "type": "PermissionInputShareModeEnum",
    "format": ""
  }
];
var PermissionInput = _PermissionInput;

// models/PermissionOfMetadataResponse.ts
var _PermissionOfMetadataResponse = class _PermissionOfMetadataResponse {
  static getAttributeTypeMap() {
    return _PermissionOfMetadataResponse.attributeTypeMap;
  }
  constructor() {
  }
};
_PermissionOfMetadataResponse.discriminator = void 0;
_PermissionOfMetadataResponse.attributeTypeMap = [
  {
    "name": "metadata_permission_details",
    "baseName": "metadata_permission_details",
    "type": "any",
    "format": ""
  }
];
var PermissionOfMetadataResponse = _PermissionOfMetadataResponse;

// models/PermissionOfPrincipalsResponse.ts
var _PermissionOfPrincipalsResponse = class _PermissionOfPrincipalsResponse {
  static getAttributeTypeMap() {
    return _PermissionOfPrincipalsResponse.attributeTypeMap;
  }
  constructor() {
  }
};
_PermissionOfPrincipalsResponse.discriminator = void 0;
_PermissionOfPrincipalsResponse.attributeTypeMap = [
  {
    "name": "principal_permission_details",
    "baseName": "principal_permission_details",
    "type": "any",
    "format": ""
  }
];
var PermissionOfPrincipalsResponse = _PermissionOfPrincipalsResponse;

// models/PermissionsMetadataTypeInput.ts
var _PermissionsMetadataTypeInput = class _PermissionsMetadataTypeInput {
  static getAttributeTypeMap() {
    return _PermissionsMetadataTypeInput.attributeTypeMap;
  }
  constructor() {
  }
};
_PermissionsMetadataTypeInput.discriminator = void 0;
_PermissionsMetadataTypeInput.attributeTypeMap = [
  {
    "name": "type",
    "baseName": "type",
    "type": "PermissionsMetadataTypeInputTypeEnum",
    "format": ""
  },
  {
    "name": "identifier",
    "baseName": "identifier",
    "type": "string",
    "format": ""
  }
];
var PermissionsMetadataTypeInput = _PermissionsMetadataTypeInput;

// models/PngOptionsInput.ts
var _PngOptionsInput = class _PngOptionsInput {
  static getAttributeTypeMap() {
    return _PngOptionsInput.attributeTypeMap;
  }
  constructor() {
  }
};
_PngOptionsInput.discriminator = void 0;
_PngOptionsInput.attributeTypeMap = [
  {
    "name": "include_cover_page",
    "baseName": "include_cover_page",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "include_filter_page",
    "baseName": "include_filter_page",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "personalised_view_id",
    "baseName": "personalised_view_id",
    "type": "string",
    "format": ""
  },
  {
    "name": "image_resolution",
    "baseName": "image_resolution",
    "type": "number",
    "format": "int32"
  },
  {
    "name": "image_scale",
    "baseName": "image_scale",
    "type": "number",
    "format": "int32"
  },
  {
    "name": "include_header",
    "baseName": "include_header",
    "type": "boolean",
    "format": ""
  }
];
var PngOptionsInput = _PngOptionsInput;

// models/PrincipalsInput.ts
var _PrincipalsInput = class _PrincipalsInput {
  static getAttributeTypeMap() {
    return _PrincipalsInput.attributeTypeMap;
  }
  constructor() {
  }
};
_PrincipalsInput.discriminator = void 0;
_PrincipalsInput.attributeTypeMap = [
  {
    "name": "identifier",
    "baseName": "identifier",
    "type": "string",
    "format": ""
  },
  {
    "name": "type",
    "baseName": "type",
    "type": "PrincipalsInputTypeEnum",
    "format": ""
  }
];
var PrincipalsInput = _PrincipalsInput;

// models/PrincipalsListItem.ts
var _PrincipalsListItem = class _PrincipalsListItem {
  static getAttributeTypeMap() {
    return _PrincipalsListItem.attributeTypeMap;
  }
  constructor() {
  }
};
_PrincipalsListItem.discriminator = void 0;
_PrincipalsListItem.attributeTypeMap = [
  {
    "name": "identifier",
    "baseName": "identifier",
    "type": "string",
    "format": ""
  },
  {
    "name": "type",
    "baseName": "type",
    "type": "string",
    "format": ""
  }
];
var PrincipalsListItem = _PrincipalsListItem;

// models/PrincipalsListItemInput.ts
var _PrincipalsListItemInput = class _PrincipalsListItemInput {
  static getAttributeTypeMap() {
    return _PrincipalsListItemInput.attributeTypeMap;
  }
  constructor() {
  }
};
_PrincipalsListItemInput.discriminator = void 0;
_PrincipalsListItemInput.attributeTypeMap = [
  {
    "name": "identifier",
    "baseName": "identifier",
    "type": "string",
    "format": ""
  },
  {
    "name": "type",
    "baseName": "type",
    "type": "string",
    "format": ""
  }
];
var PrincipalsListItemInput = _PrincipalsListItemInput;

// models/PublishMetadataListItem.ts
var _PublishMetadataListItem = class _PublishMetadataListItem {
  static getAttributeTypeMap() {
    return _PublishMetadataListItem.attributeTypeMap;
  }
  constructor() {
  }
};
_PublishMetadataListItem.discriminator = void 0;
_PublishMetadataListItem.attributeTypeMap = [
  {
    "name": "identifier",
    "baseName": "identifier",
    "type": "string",
    "format": ""
  },
  {
    "name": "type",
    "baseName": "type",
    "type": "PublishMetadataListItemTypeEnum",
    "format": ""
  }
];
var PublishMetadataListItem = _PublishMetadataListItem;

// models/PublishMetadataRequest.ts
var _PublishMetadataRequest = class _PublishMetadataRequest {
  static getAttributeTypeMap() {
    return _PublishMetadataRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_PublishMetadataRequest.discriminator = void 0;
_PublishMetadataRequest.attributeTypeMap = [
  {
    "name": "metadata",
    "baseName": "metadata",
    "type": "Array<PublishMetadataListItem>",
    "format": ""
  },
  {
    "name": "org_identifiers",
    "baseName": "org_identifiers",
    "type": "Array<string>",
    "format": ""
  },
  {
    "name": "skip_validation",
    "baseName": "skip_validation",
    "type": "boolean",
    "format": ""
  }
];
var PublishMetadataRequest = _PublishMetadataRequest;

// models/QueryGetDecomposedQueryRequest.ts
var _QueryGetDecomposedQueryRequest = class _QueryGetDecomposedQueryRequest {
  static getAttributeTypeMap() {
    return _QueryGetDecomposedQueryRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_QueryGetDecomposedQueryRequest.discriminator = void 0;
_QueryGetDecomposedQueryRequest.attributeTypeMap = [
  {
    "name": "answerIds",
    "baseName": "answerIds",
    "type": "Array<string>",
    "format": ""
  },
  {
    "name": "content",
    "baseName": "content",
    "type": "Array<string>",
    "format": ""
  },
  {
    "name": "conversationId",
    "baseName": "conversationId",
    "type": "string",
    "format": ""
  },
  {
    "name": "liveboardIds",
    "baseName": "liveboardIds",
    "type": "Array<string>",
    "format": ""
  },
  {
    "name": "maxDecomposedQueries",
    "baseName": "maxDecomposedQueries",
    "type": "number",
    "format": "int32"
  },
  {
    "name": "nlsRequest",
    "baseName": "nlsRequest",
    "type": "QueryGetDecomposedQueryRequestNlsRequest",
    "format": ""
  },
  {
    "name": "worksheetIds",
    "baseName": "worksheetIds",
    "type": "Array<string>",
    "format": ""
  }
];
var QueryGetDecomposedQueryRequest = _QueryGetDecomposedQueryRequest;

// models/QueryGetDecomposedQueryRequestNlsRequest.ts
var _QueryGetDecomposedQueryRequestNlsRequest = class _QueryGetDecomposedQueryRequestNlsRequest {
  static getAttributeTypeMap() {
    return _QueryGetDecomposedQueryRequestNlsRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_QueryGetDecomposedQueryRequestNlsRequest.discriminator = void 0;
_QueryGetDecomposedQueryRequestNlsRequest.attributeTypeMap = [
  {
    "name": "agentVersion",
    "baseName": "agentVersion",
    "type": "number",
    "format": "int32"
  },
  {
    "name": "bypassCache",
    "baseName": "bypassCache",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "instructions",
    "baseName": "instructions",
    "type": "Array<string>",
    "format": ""
  },
  {
    "name": "query",
    "baseName": "query",
    "type": "string",
    "format": ""
  }
];
var QueryGetDecomposedQueryRequestNlsRequest = _QueryGetDecomposedQueryRequestNlsRequest;

// models/RecipientDetails.ts
var _RecipientDetails = class _RecipientDetails {
  static getAttributeTypeMap() {
    return _RecipientDetails.attributeTypeMap;
  }
  constructor() {
  }
};
_RecipientDetails.discriminator = void 0;
_RecipientDetails.attributeTypeMap = [
  {
    "name": "emails",
    "baseName": "emails",
    "type": "Array<string>",
    "format": ""
  },
  {
    "name": "principals",
    "baseName": "principals",
    "type": "Array<PrincipalsListItem>",
    "format": ""
  }
];
var RecipientDetails = _RecipientDetails;

// models/RecipientDetailsInput.ts
var _RecipientDetailsInput = class _RecipientDetailsInput {
  static getAttributeTypeMap() {
    return _RecipientDetailsInput.attributeTypeMap;
  }
  constructor() {
  }
};
_RecipientDetailsInput.discriminator = void 0;
_RecipientDetailsInput.attributeTypeMap = [
  {
    "name": "emails",
    "baseName": "emails",
    "type": "Array<string>",
    "format": ""
  },
  {
    "name": "principals",
    "baseName": "principals",
    "type": "Array<PrincipalsListItemInput>",
    "format": ""
  }
];
var RecipientDetailsInput = _RecipientDetailsInput;

// models/RegionalSettingsInput.ts
var _RegionalSettingsInput = class _RegionalSettingsInput {
  static getAttributeTypeMap() {
    return _RegionalSettingsInput.attributeTypeMap;
  }
  constructor() {
  }
};
_RegionalSettingsInput.discriminator = void 0;
_RegionalSettingsInput.attributeTypeMap = [
  {
    "name": "currency_format",
    "baseName": "currency_format",
    "type": "RegionalSettingsInputCurrencyFormatEnum",
    "format": ""
  },
  {
    "name": "user_locale",
    "baseName": "user_locale",
    "type": "RegionalSettingsInputUserLocaleEnum",
    "format": ""
  },
  {
    "name": "number_format_locale",
    "baseName": "number_format_locale",
    "type": "RegionalSettingsInputNumberFormatLocaleEnum",
    "format": ""
  },
  {
    "name": "date_format_locale",
    "baseName": "date_format_locale",
    "type": "RegionalSettingsInputDateFormatLocaleEnum",
    "format": ""
  }
];
var RegionalSettingsInput = _RegionalSettingsInput;

// models/RepoConfigObject.ts
var _RepoConfigObject = class _RepoConfigObject {
  static getAttributeTypeMap() {
    return _RepoConfigObject.attributeTypeMap;
  }
  constructor() {
  }
};
_RepoConfigObject.discriminator = void 0;
_RepoConfigObject.attributeTypeMap = [
  {
    "name": "repository_url",
    "baseName": "repository_url",
    "type": "string",
    "format": ""
  },
  {
    "name": "username",
    "baseName": "username",
    "type": "string",
    "format": ""
  },
  {
    "name": "commit_branch_name",
    "baseName": "commit_branch_name",
    "type": "string",
    "format": ""
  },
  {
    "name": "branches",
    "baseName": "branches",
    "type": "Array<string>",
    "format": ""
  },
  {
    "name": "enable_guid_mapping",
    "baseName": "enable_guid_mapping",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "configuration_branch_name",
    "baseName": "configuration_branch_name",
    "type": "string",
    "format": ""
  },
  {
    "name": "org",
    "baseName": "org",
    "type": "Org",
    "format": ""
  }
];
var RepoConfigObject = _RepoConfigObject;

// models/ResetUserPasswordRequest.ts
var _ResetUserPasswordRequest = class _ResetUserPasswordRequest {
  static getAttributeTypeMap() {
    return _ResetUserPasswordRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_ResetUserPasswordRequest.discriminator = void 0;
_ResetUserPasswordRequest.attributeTypeMap = [
  {
    "name": "new_password",
    "baseName": "new_password",
    "type": "string",
    "format": ""
  },
  {
    "name": "user_identifier",
    "baseName": "user_identifier",
    "type": "string",
    "format": ""
  }
];
var ResetUserPasswordRequest = _ResetUserPasswordRequest;

// models/ResponseActivationURL.ts
var _ResponseActivationURL = class _ResponseActivationURL {
  static getAttributeTypeMap() {
    return _ResponseActivationURL.attributeTypeMap;
  }
  constructor() {
  }
};
_ResponseActivationURL.discriminator = void 0;
_ResponseActivationURL.attributeTypeMap = [
  {
    "name": "activation_link",
    "baseName": "activation_link",
    "type": "string",
    "format": ""
  }
];
var ResponseActivationURL = _ResponseActivationURL;

// models/ResponseCopyObject.ts
var _ResponseCopyObject = class _ResponseCopyObject {
  static getAttributeTypeMap() {
    return _ResponseCopyObject.attributeTypeMap;
  }
  constructor() {
  }
};
_ResponseCopyObject.discriminator = void 0;
_ResponseCopyObject.attributeTypeMap = [
  {
    "name": "metadata_id",
    "baseName": "metadata_id",
    "type": "string",
    "format": ""
  }
];
var ResponseCopyObject = _ResponseCopyObject;

// models/ResponseCustomAction.ts
var _ResponseCustomAction = class _ResponseCustomAction {
  static getAttributeTypeMap() {
    return _ResponseCustomAction.attributeTypeMap;
  }
  constructor() {
  }
};
_ResponseCustomAction.discriminator = void 0;
_ResponseCustomAction.attributeTypeMap = [
  {
    "name": "action_details",
    "baseName": "action_details",
    "type": "ActionDetails",
    "format": ""
  },
  {
    "name": "default_action_config",
    "baseName": "default_action_config",
    "type": "DefaultActionConfig",
    "format": ""
  },
  {
    "name": "id",
    "baseName": "id",
    "type": "string",
    "format": ""
  },
  {
    "name": "metadata_association",
    "baseName": "metadata_association",
    "type": "Array<MetadataAssociationItem>",
    "format": ""
  },
  {
    "name": "name",
    "baseName": "name",
    "type": "string",
    "format": ""
  },
  {
    "name": "user_groups",
    "baseName": "user_groups",
    "type": "Array<ObjectIDAndName>",
    "format": ""
  }
];
var ResponseCustomAction = _ResponseCustomAction;

// models/ResponseFailedEntities.ts
var _ResponseFailedEntities = class _ResponseFailedEntities {
  static getAttributeTypeMap() {
    return _ResponseFailedEntities.attributeTypeMap;
  }
  constructor() {
  }
};
_ResponseFailedEntities.discriminator = void 0;
_ResponseFailedEntities.attributeTypeMap = [
  {
    "name": "data",
    "baseName": "data",
    "type": "Array<ResponseFailedEntity>",
    "format": ""
  }
];
var ResponseFailedEntities = _ResponseFailedEntities;

// models/ResponseFailedEntity.ts
var _ResponseFailedEntity = class _ResponseFailedEntity {
  static getAttributeTypeMap() {
    return _ResponseFailedEntity.attributeTypeMap;
  }
  constructor() {
  }
};
_ResponseFailedEntity.discriminator = void 0;
_ResponseFailedEntity.attributeTypeMap = [
  {
    "name": "id",
    "baseName": "id",
    "type": "string",
    "format": ""
  },
  {
    "name": "name",
    "baseName": "name",
    "type": "string",
    "format": ""
  },
  {
    "name": "error",
    "baseName": "error",
    "type": "string",
    "format": ""
  }
];
var ResponseFailedEntity = _ResponseFailedEntity;

// models/ResponseIncompleteEntities.ts
var _ResponseIncompleteEntities = class _ResponseIncompleteEntities {
  static getAttributeTypeMap() {
    return _ResponseIncompleteEntities.attributeTypeMap;
  }
  constructor() {
  }
};
_ResponseIncompleteEntities.discriminator = void 0;
_ResponseIncompleteEntities.attributeTypeMap = [
  {
    "name": "data",
    "baseName": "data",
    "type": "Array<ResponseIncompleteEntity>",
    "format": ""
  }
];
var ResponseIncompleteEntities = _ResponseIncompleteEntities;

// models/ResponseIncompleteEntity.ts
var _ResponseIncompleteEntity = class _ResponseIncompleteEntity {
  static getAttributeTypeMap() {
    return _ResponseIncompleteEntity.attributeTypeMap;
  }
  constructor() {
  }
};
_ResponseIncompleteEntity.discriminator = void 0;
_ResponseIncompleteEntity.attributeTypeMap = [
  {
    "name": "id",
    "baseName": "id",
    "type": "string",
    "format": ""
  },
  {
    "name": "name",
    "baseName": "name",
    "type": "string",
    "format": ""
  },
  {
    "name": "error",
    "baseName": "error",
    "type": "string",
    "format": ""
  }
];
var ResponseIncompleteEntity = _ResponseIncompleteEntity;

// models/ResponseMessage.ts
var _ResponseMessage = class _ResponseMessage {
  static getAttributeTypeMap() {
    return _ResponseMessage.attributeTypeMap;
  }
  constructor() {
  }
};
_ResponseMessage.discriminator = void 0;
_ResponseMessage.attributeTypeMap = [
  {
    "name": "session_identifier",
    "baseName": "session_identifier",
    "type": "string",
    "format": ""
  },
  {
    "name": "generation_number",
    "baseName": "generation_number",
    "type": "number",
    "format": "int32"
  },
  {
    "name": "message_type",
    "baseName": "message_type",
    "type": "ResponseMessageMessageTypeEnum",
    "format": ""
  },
  {
    "name": "visualization_type",
    "baseName": "visualization_type",
    "type": "ResponseMessageVisualizationTypeEnum",
    "format": ""
  },
  {
    "name": "tokens",
    "baseName": "tokens",
    "type": "string",
    "format": ""
  },
  {
    "name": "display_tokens",
    "baseName": "display_tokens",
    "type": "string",
    "format": ""
  }
];
var ResponseMessage = _ResponseMessage;

// models/ResponsePostUpgradeFailedEntities.ts
var _ResponsePostUpgradeFailedEntities = class _ResponsePostUpgradeFailedEntities {
  static getAttributeTypeMap() {
    return _ResponsePostUpgradeFailedEntities.attributeTypeMap;
  }
  constructor() {
  }
};
_ResponsePostUpgradeFailedEntities.discriminator = void 0;
_ResponsePostUpgradeFailedEntities.attributeTypeMap = [
  {
    "name": "data",
    "baseName": "data",
    "type": "Array<ResponsePostUpgradeFailedEntity>",
    "format": ""
  }
];
var ResponsePostUpgradeFailedEntities = _ResponsePostUpgradeFailedEntities;

// models/ResponsePostUpgradeFailedEntity.ts
var _ResponsePostUpgradeFailedEntity = class _ResponsePostUpgradeFailedEntity {
  static getAttributeTypeMap() {
    return _ResponsePostUpgradeFailedEntity.attributeTypeMap;
  }
  constructor() {
  }
};
_ResponsePostUpgradeFailedEntity.discriminator = void 0;
_ResponsePostUpgradeFailedEntity.attributeTypeMap = [
  {
    "name": "id",
    "baseName": "id",
    "type": "string",
    "format": ""
  },
  {
    "name": "name",
    "baseName": "name",
    "type": "string",
    "format": ""
  },
  {
    "name": "error",
    "baseName": "error",
    "type": "string",
    "format": ""
  }
];
var ResponsePostUpgradeFailedEntity = _ResponsePostUpgradeFailedEntity;

// models/ResponseSchedule.ts
var _ResponseSchedule = class _ResponseSchedule {
  static getAttributeTypeMap() {
    return _ResponseSchedule.attributeTypeMap;
  }
  constructor() {
  }
};
_ResponseSchedule.discriminator = void 0;
_ResponseSchedule.attributeTypeMap = [
  {
    "name": "author",
    "baseName": "author",
    "type": "Author",
    "format": ""
  },
  {
    "name": "creation_time_in_millis",
    "baseName": "creation_time_in_millis",
    "type": "any",
    "format": ""
  },
  {
    "name": "description",
    "baseName": "description",
    "type": "string",
    "format": ""
  },
  {
    "name": "file_format",
    "baseName": "file_format",
    "type": "string",
    "format": ""
  },
  {
    "name": "frequency",
    "baseName": "frequency",
    "type": "Frequency",
    "format": ""
  },
  {
    "name": "id",
    "baseName": "id",
    "type": "string",
    "format": ""
  },
  {
    "name": "liveboard_options",
    "baseName": "liveboard_options",
    "type": "LiveboardOptions",
    "format": ""
  },
  {
    "name": "metadata",
    "baseName": "metadata",
    "type": "MetadataResponse",
    "format": ""
  },
  {
    "name": "name",
    "baseName": "name",
    "type": "string",
    "format": ""
  },
  {
    "name": "pdf_options",
    "baseName": "pdf_options",
    "type": "PdfOptions",
    "format": ""
  },
  {
    "name": "recipient_details",
    "baseName": "recipient_details",
    "type": "RecipientDetails",
    "format": ""
  },
  {
    "name": "status",
    "baseName": "status",
    "type": "string",
    "format": ""
  },
  {
    "name": "time_zone",
    "baseName": "time_zone",
    "type": "string",
    "format": ""
  },
  {
    "name": "history_runs",
    "baseName": "history_runs",
    "type": "Array<ResponseScheduleRun>",
    "format": ""
  },
  {
    "name": "personalised_view_id",
    "baseName": "personalised_view_id",
    "type": "string",
    "format": ""
  }
];
var ResponseSchedule = _ResponseSchedule;

// models/ResponseScheduleRun.ts
var _ResponseScheduleRun = class _ResponseScheduleRun {
  static getAttributeTypeMap() {
    return _ResponseScheduleRun.attributeTypeMap;
  }
  constructor() {
  }
};
_ResponseScheduleRun.discriminator = void 0;
_ResponseScheduleRun.attributeTypeMap = [
  {
    "name": "id",
    "baseName": "id",
    "type": "string",
    "format": ""
  },
  {
    "name": "start_time_in_millis",
    "baseName": "start_time_in_millis",
    "type": "number",
    "format": "int32"
  },
  {
    "name": "end_time_in_millis",
    "baseName": "end_time_in_millis",
    "type": "number",
    "format": "int32"
  },
  {
    "name": "status",
    "baseName": "status",
    "type": "string",
    "format": ""
  },
  {
    "name": "detail",
    "baseName": "detail",
    "type": "string",
    "format": ""
  }
];
var ResponseScheduleRun = _ResponseScheduleRun;

// models/ResponseSuccessfulEntities.ts
var _ResponseSuccessfulEntities = class _ResponseSuccessfulEntities {
  static getAttributeTypeMap() {
    return _ResponseSuccessfulEntities.attributeTypeMap;
  }
  constructor() {
  }
};
_ResponseSuccessfulEntities.discriminator = void 0;
_ResponseSuccessfulEntities.attributeTypeMap = [
  {
    "name": "data",
    "baseName": "data",
    "type": "Array<ResponseSuccessfulEntity>",
    "format": ""
  }
];
var ResponseSuccessfulEntities = _ResponseSuccessfulEntities;

// models/ResponseSuccessfulEntity.ts
var _ResponseSuccessfulEntity = class _ResponseSuccessfulEntity {
  static getAttributeTypeMap() {
    return _ResponseSuccessfulEntity.attributeTypeMap;
  }
  constructor() {
  }
};
_ResponseSuccessfulEntity.discriminator = void 0;
_ResponseSuccessfulEntity.attributeTypeMap = [
  {
    "name": "id",
    "baseName": "id",
    "type": "string",
    "format": ""
  },
  {
    "name": "name",
    "baseName": "name",
    "type": "string",
    "format": ""
  }
];
var ResponseSuccessfulEntity = _ResponseSuccessfulEntity;

// models/ResponseWorksheetToModelConversion.ts
var _ResponseWorksheetToModelConversion = class _ResponseWorksheetToModelConversion {
  static getAttributeTypeMap() {
    return _ResponseWorksheetToModelConversion.attributeTypeMap;
  }
  constructor() {
  }
};
_ResponseWorksheetToModelConversion.discriminator = void 0;
_ResponseWorksheetToModelConversion.attributeTypeMap = [
  {
    "name": "name",
    "baseName": "name",
    "type": "string",
    "format": ""
  },
  {
    "name": "success_count",
    "baseName": "success_count",
    "type": "number",
    "format": "int32"
  },
  {
    "name": "failure_count",
    "baseName": "failure_count",
    "type": "number",
    "format": "int32"
  },
  {
    "name": "incomplete_count",
    "baseName": "incomplete_count",
    "type": "number",
    "format": "int32"
  },
  {
    "name": "post_upgrade_failed_count",
    "baseName": "post_upgrade_failed_count",
    "type": "number",
    "format": "int32"
  },
  {
    "name": "total_time_in_millis",
    "baseName": "total_time_in_millis",
    "type": "number",
    "format": "int32"
  },
  {
    "name": "successful_entities",
    "baseName": "successful_entities",
    "type": "ResponseSuccessfulEntities",
    "format": ""
  },
  {
    "name": "failed_entities",
    "baseName": "failed_entities",
    "type": "ResponseFailedEntities",
    "format": ""
  },
  {
    "name": "incomplete_entities",
    "baseName": "incomplete_entities",
    "type": "ResponseIncompleteEntities",
    "format": ""
  },
  {
    "name": "post_upgrade_failed_entities",
    "baseName": "post_upgrade_failed_entities",
    "type": "ResponsePostUpgradeFailedEntities",
    "format": ""
  }
];
var ResponseWorksheetToModelConversion = _ResponseWorksheetToModelConversion;

// models/RevertCommitRequest.ts
var _RevertCommitRequest = class _RevertCommitRequest {
  static getAttributeTypeMap() {
    return _RevertCommitRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_RevertCommitRequest.discriminator = void 0;
_RevertCommitRequest.attributeTypeMap = [
  {
    "name": "metadata",
    "baseName": "metadata",
    "type": "Array<MetadataObject>",
    "format": ""
  },
  {
    "name": "branch_name",
    "baseName": "branch_name",
    "type": "string",
    "format": ""
  },
  {
    "name": "revert_policy",
    "baseName": "revert_policy",
    "type": "RevertCommitRequestRevertPolicyEnum",
    "format": ""
  }
];
var RevertCommitRequest = _RevertCommitRequest;

// models/RevertResponse.ts
var _RevertResponse = class _RevertResponse {
  static getAttributeTypeMap() {
    return _RevertResponse.attributeTypeMap;
  }
  constructor() {
  }
};
_RevertResponse.discriminator = void 0;
_RevertResponse.attributeTypeMap = [
  {
    "name": "committer",
    "baseName": "committer",
    "type": "CommiterType",
    "format": ""
  },
  {
    "name": "author",
    "baseName": "author",
    "type": "AuthorType",
    "format": ""
  },
  {
    "name": "comment",
    "baseName": "comment",
    "type": "string",
    "format": ""
  },
  {
    "name": "commit_time",
    "baseName": "commit_time",
    "type": "string",
    "format": ""
  },
  {
    "name": "commit_id",
    "baseName": "commit_id",
    "type": "string",
    "format": ""
  },
  {
    "name": "branch",
    "baseName": "branch",
    "type": "string",
    "format": ""
  },
  {
    "name": "committed_files",
    "baseName": "committed_files",
    "type": "Array<CommitFileType>",
    "format": ""
  },
  {
    "name": "reverted_metadata",
    "baseName": "reverted_metadata",
    "type": "Array<RevertedMetadata>",
    "format": ""
  }
];
var RevertResponse = _RevertResponse;

// models/RevertedMetadata.ts
var _RevertedMetadata = class _RevertedMetadata {
  static getAttributeTypeMap() {
    return _RevertedMetadata.attributeTypeMap;
  }
  constructor() {
  }
};
_RevertedMetadata.discriminator = void 0;
_RevertedMetadata.attributeTypeMap = [
  {
    "name": "file_name",
    "baseName": "file_name",
    "type": "string",
    "format": ""
  },
  {
    "name": "metadata_name",
    "baseName": "metadata_name",
    "type": "string",
    "format": ""
  },
  {
    "name": "metadata_type",
    "baseName": "metadata_type",
    "type": "string",
    "format": ""
  },
  {
    "name": "status_code",
    "baseName": "status_code",
    "type": "string",
    "format": ""
  },
  {
    "name": "status_message",
    "baseName": "status_message",
    "type": "string",
    "format": ""
  }
];
var RevertedMetadata = _RevertedMetadata;

// models/RevokeTokenRequest.ts
var _RevokeTokenRequest = class _RevokeTokenRequest {
  static getAttributeTypeMap() {
    return _RevokeTokenRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_RevokeTokenRequest.discriminator = void 0;
_RevokeTokenRequest.attributeTypeMap = [
  {
    "name": "user_identifier",
    "baseName": "user_identifier",
    "type": "string",
    "format": ""
  },
  {
    "name": "token",
    "baseName": "token",
    "type": "string",
    "format": ""
  }
];
var RevokeTokenRequest = _RevokeTokenRequest;

// models/RiseGQLArgWrapper.ts
var _RiseGQLArgWrapper = class _RiseGQLArgWrapper {
  static getAttributeTypeMap() {
    return _RiseGQLArgWrapper.attributeTypeMap;
  }
  constructor() {
  }
};
_RiseGQLArgWrapper.discriminator = void 0;
_RiseGQLArgWrapper.attributeTypeMap = [
  {
    "name": "name",
    "baseName": "name",
    "type": "string",
    "format": ""
  },
  {
    "name": "type",
    "baseName": "type",
    "type": "string",
    "format": ""
  }
];
var RiseGQLArgWrapper = _RiseGQLArgWrapper;

// models/RiseSetter.ts
var _RiseSetter = class _RiseSetter {
  static getAttributeTypeMap() {
    return _RiseSetter.attributeTypeMap;
  }
  constructor() {
  }
};
_RiseSetter.discriminator = void 0;
_RiseSetter.attributeTypeMap = [
  {
    "name": "field",
    "baseName": "field",
    "type": "string",
    "format": ""
  },
  {
    "name": "path",
    "baseName": "path",
    "type": "string",
    "format": ""
  }
];
var RiseSetter = _RiseSetter;

// models/Role.ts
var _Role = class _Role {
  static getAttributeTypeMap() {
    return _Role.attributeTypeMap;
  }
  constructor() {
  }
};
_Role.discriminator = void 0;
_Role.attributeTypeMap = [
  {
    "name": "id",
    "baseName": "id",
    "type": "string",
    "format": ""
  },
  {
    "name": "name",
    "baseName": "name",
    "type": "string",
    "format": ""
  }
];
var Role = _Role;

// models/RoleResponse.ts
var _RoleResponse = class _RoleResponse {
  static getAttributeTypeMap() {
    return _RoleResponse.attributeTypeMap;
  }
  constructor() {
  }
};
_RoleResponse.discriminator = void 0;
_RoleResponse.attributeTypeMap = [
  {
    "name": "id",
    "baseName": "id",
    "type": "string",
    "format": ""
  },
  {
    "name": "name",
    "baseName": "name",
    "type": "string",
    "format": ""
  },
  {
    "name": "description",
    "baseName": "description",
    "type": "string",
    "format": ""
  },
  {
    "name": "groups_assigned_count",
    "baseName": "groups_assigned_count",
    "type": "number",
    "format": "int32"
  },
  {
    "name": "orgs",
    "baseName": "orgs",
    "type": "Array<GenericInfo>",
    "format": ""
  },
  {
    "name": "groups",
    "baseName": "groups",
    "type": "Array<GenericInfo>",
    "format": ""
  },
  {
    "name": "privileges",
    "baseName": "privileges",
    "type": "Array<RoleResponsePrivilegesEnum>",
    "format": ""
  },
  {
    "name": "permission",
    "baseName": "permission",
    "type": "RoleResponsePermissionEnum",
    "format": ""
  },
  {
    "name": "author_id",
    "baseName": "author_id",
    "type": "string",
    "format": ""
  },
  {
    "name": "modifier_id",
    "baseName": "modifier_id",
    "type": "string",
    "format": ""
  },
  {
    "name": "creation_time_in_millis",
    "baseName": "creation_time_in_millis",
    "type": "any",
    "format": ""
  },
  {
    "name": "modification_time_in_millis",
    "baseName": "modification_time_in_millis",
    "type": "any",
    "format": ""
  },
  {
    "name": "deleted",
    "baseName": "deleted",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "deprecated",
    "baseName": "deprecated",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "external",
    "baseName": "external",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "hidden",
    "baseName": "hidden",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "shared_via_connection",
    "baseName": "shared_via_connection",
    "type": "boolean",
    "format": ""
  }
];
var RoleResponse = _RoleResponse;

// models/RuntimeFilter.ts
var _RuntimeFilter = class _RuntimeFilter {
  static getAttributeTypeMap() {
    return _RuntimeFilter.attributeTypeMap;
  }
  constructor() {
  }
};
_RuntimeFilter.discriminator = void 0;
_RuntimeFilter.attributeTypeMap = [
  {
    "name": "runtime_filter",
    "baseName": "runtime_filter",
    "type": "any",
    "format": ""
  }
];
var RuntimeFilter = _RuntimeFilter;

// models/RuntimeFilters.ts
var _RuntimeFilters = class _RuntimeFilters {
  static getAttributeTypeMap() {
    return _RuntimeFilters.attributeTypeMap;
  }
  constructor() {
  }
};
_RuntimeFilters.discriminator = void 0;
_RuntimeFilters.attributeTypeMap = [
  {
    "name": "column_name",
    "baseName": "column_name",
    "type": "string",
    "format": ""
  },
  {
    "name": "values",
    "baseName": "values",
    "type": "Array<string>",
    "format": ""
  },
  {
    "name": "operator",
    "baseName": "operator",
    "type": "RuntimeFiltersOperatorEnum",
    "format": ""
  },
  {
    "name": "persist",
    "baseName": "persist",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "objects",
    "baseName": "objects",
    "type": "Array<UserObject>",
    "format": ""
  }
];
var RuntimeFilters = _RuntimeFilters;

// models/RuntimeParamOverride.ts
var _RuntimeParamOverride = class _RuntimeParamOverride {
  static getAttributeTypeMap() {
    return _RuntimeParamOverride.attributeTypeMap;
  }
  constructor() {
  }
};
_RuntimeParamOverride.discriminator = void 0;
_RuntimeParamOverride.attributeTypeMap = [
  {
    "name": "runtime_param_override",
    "baseName": "runtime_param_override",
    "type": "any",
    "format": ""
  }
];
var RuntimeParamOverride = _RuntimeParamOverride;

// models/RuntimeParameters.ts
var _RuntimeParameters = class _RuntimeParameters {
  static getAttributeTypeMap() {
    return _RuntimeParameters.attributeTypeMap;
  }
  constructor() {
  }
};
_RuntimeParameters.discriminator = void 0;
_RuntimeParameters.attributeTypeMap = [
  {
    "name": "name",
    "baseName": "name",
    "type": "string",
    "format": ""
  },
  {
    "name": "values",
    "baseName": "values",
    "type": "Array<string>",
    "format": ""
  },
  {
    "name": "persist",
    "baseName": "persist",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "objects",
    "baseName": "objects",
    "type": "Array<UserObject>",
    "format": ""
  }
];
var RuntimeParameters = _RuntimeParameters;

// models/RuntimeSort.ts
var _RuntimeSort = class _RuntimeSort {
  static getAttributeTypeMap() {
    return _RuntimeSort.attributeTypeMap;
  }
  constructor() {
  }
};
_RuntimeSort.discriminator = void 0;
_RuntimeSort.attributeTypeMap = [
  {
    "name": "runtime_sort",
    "baseName": "runtime_sort",
    "type": "any",
    "format": ""
  }
];
var RuntimeSort = _RuntimeSort;

// models/RuntimeSorts.ts
var _RuntimeSorts = class _RuntimeSorts {
  static getAttributeTypeMap() {
    return _RuntimeSorts.attributeTypeMap;
  }
  constructor() {
  }
};
_RuntimeSorts.discriminator = void 0;
_RuntimeSorts.attributeTypeMap = [
  {
    "name": "column_name",
    "baseName": "column_name",
    "type": "string",
    "format": ""
  },
  {
    "name": "order",
    "baseName": "order",
    "type": "RuntimeSortsOrderEnum",
    "format": ""
  },
  {
    "name": "persist",
    "baseName": "persist",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "objects",
    "baseName": "objects",
    "type": "Array<UserObject>",
    "format": ""
  }
];
var RuntimeSorts = _RuntimeSorts;

// models/ScheduleHistoryRunsOptionsInput.ts
var _ScheduleHistoryRunsOptionsInput = class _ScheduleHistoryRunsOptionsInput {
  static getAttributeTypeMap() {
    return _ScheduleHistoryRunsOptionsInput.attributeTypeMap;
  }
  constructor() {
  }
};
_ScheduleHistoryRunsOptionsInput.discriminator = void 0;
_ScheduleHistoryRunsOptionsInput.attributeTypeMap = [
  {
    "name": "include_history_runs",
    "baseName": "include_history_runs",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "record_size",
    "baseName": "record_size",
    "type": "number",
    "format": "int32"
  },
  {
    "name": "record_offset",
    "baseName": "record_offset",
    "type": "number",
    "format": "int32"
  }
];
var ScheduleHistoryRunsOptionsInput = _ScheduleHistoryRunsOptionsInput;

// models/SchedulesPdfOptionsInput.ts
var _SchedulesPdfOptionsInput = class _SchedulesPdfOptionsInput {
  static getAttributeTypeMap() {
    return _SchedulesPdfOptionsInput.attributeTypeMap;
  }
  constructor() {
  }
};
_SchedulesPdfOptionsInput.discriminator = void 0;
_SchedulesPdfOptionsInput.attributeTypeMap = [
  {
    "name": "complete_liveboard",
    "baseName": "complete_liveboard",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "include_cover_page",
    "baseName": "include_cover_page",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "include_custom_logo",
    "baseName": "include_custom_logo",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "include_filter_page",
    "baseName": "include_filter_page",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "include_page_number",
    "baseName": "include_page_number",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "page_footer_text",
    "baseName": "page_footer_text",
    "type": "string",
    "format": ""
  },
  {
    "name": "page_orientation",
    "baseName": "page_orientation",
    "type": "string",
    "format": ""
  },
  {
    "name": "page_size",
    "baseName": "page_size",
    "type": "SchedulesPdfOptionsInputPageSizeEnum",
    "format": ""
  },
  {
    "name": "truncate_table",
    "baseName": "truncate_table",
    "type": "boolean",
    "format": ""
  }
];
var SchedulesPdfOptionsInput = _SchedulesPdfOptionsInput;

// models/SchemaObject.ts
var _SchemaObject = class _SchemaObject {
  static getAttributeTypeMap() {
    return _SchemaObject.attributeTypeMap;
  }
  constructor() {
  }
};
_SchemaObject.discriminator = void 0;
_SchemaObject.attributeTypeMap = [
  {
    "name": "name",
    "baseName": "name",
    "type": "string",
    "format": ""
  },
  {
    "name": "tables",
    "baseName": "tables",
    "type": "Array<Table>",
    "format": ""
  }
];
var SchemaObject = _SchemaObject;

// models/Scope.ts
var _Scope = class _Scope {
  static getAttributeTypeMap() {
    return _Scope.attributeTypeMap;
  }
  constructor() {
  }
};
_Scope.discriminator = void 0;
_Scope.attributeTypeMap = [
  {
    "name": "access_type",
    "baseName": "access_type",
    "type": "string",
    "format": ""
  },
  {
    "name": "org_id",
    "baseName": "org_id",
    "type": "number",
    "format": "int32"
  },
  {
    "name": "metadata_id",
    "baseName": "metadata_id",
    "type": "string",
    "format": ""
  }
];
var Scope = _Scope;

// models/SearchCommitsRequest.ts
var _SearchCommitsRequest = class _SearchCommitsRequest {
  static getAttributeTypeMap() {
    return _SearchCommitsRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_SearchCommitsRequest.discriminator = void 0;
_SearchCommitsRequest.attributeTypeMap = [
  {
    "name": "metadata_identifier",
    "baseName": "metadata_identifier",
    "type": "string",
    "format": ""
  },
  {
    "name": "metadata_type",
    "baseName": "metadata_type",
    "type": "SearchCommitsRequestMetadataTypeEnum",
    "format": ""
  },
  {
    "name": "branch_name",
    "baseName": "branch_name",
    "type": "string",
    "format": ""
  },
  {
    "name": "record_offset",
    "baseName": "record_offset",
    "type": "number",
    "format": "int32"
  },
  {
    "name": "record_size",
    "baseName": "record_size",
    "type": "number",
    "format": "int32"
  }
];
var SearchCommitsRequest = _SearchCommitsRequest;

// models/SearchConfigRequest.ts
var _SearchConfigRequest = class _SearchConfigRequest {
  static getAttributeTypeMap() {
    return _SearchConfigRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_SearchConfigRequest.discriminator = void 0;
_SearchConfigRequest.attributeTypeMap = [
  {
    "name": "org_identifiers",
    "baseName": "org_identifiers",
    "type": "Array<string>",
    "format": ""
  }
];
var SearchConfigRequest = _SearchConfigRequest;

// models/SearchConnectionRequest.ts
var _SearchConnectionRequest = class _SearchConnectionRequest {
  static getAttributeTypeMap() {
    return _SearchConnectionRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_SearchConnectionRequest.discriminator = void 0;
_SearchConnectionRequest.attributeTypeMap = [
  {
    "name": "connections",
    "baseName": "connections",
    "type": "Array<ConnectionInput>",
    "format": ""
  },
  {
    "name": "data_warehouse_types",
    "baseName": "data_warehouse_types",
    "type": "Array<SearchConnectionRequestDataWarehouseTypesEnum>",
    "format": ""
  },
  {
    "name": "record_offset",
    "baseName": "record_offset",
    "type": "number",
    "format": "int32"
  },
  {
    "name": "record_size",
    "baseName": "record_size",
    "type": "number",
    "format": "int32"
  },
  {
    "name": "tag_identifiers",
    "baseName": "tag_identifiers",
    "type": "Array<string>",
    "format": ""
  },
  {
    "name": "data_warehouse_object_type",
    "baseName": "data_warehouse_object_type",
    "type": "SearchConnectionRequestDataWarehouseObjectTypeEnum",
    "format": ""
  },
  {
    "name": "sort_options",
    "baseName": "sort_options",
    "type": "SearchConnectionRequestSortOptions",
    "format": ""
  },
  {
    "name": "include_details",
    "baseName": "include_details",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "configuration",
    "baseName": "configuration",
    "type": "any",
    "format": ""
  },
  {
    "name": "authentication_type",
    "baseName": "authentication_type",
    "type": "SearchConnectionRequestAuthenticationTypeEnum",
    "format": ""
  },
  {
    "name": "show_resolved_parameters",
    "baseName": "show_resolved_parameters",
    "type": "boolean",
    "format": ""
  }
];
var SearchConnectionRequest = _SearchConnectionRequest;

// models/SearchConnectionRequestSortOptions.ts
var _SearchConnectionRequestSortOptions = class _SearchConnectionRequestSortOptions {
  static getAttributeTypeMap() {
    return _SearchConnectionRequestSortOptions.attributeTypeMap;
  }
  constructor() {
  }
};
_SearchConnectionRequestSortOptions.discriminator = void 0;
_SearchConnectionRequestSortOptions.attributeTypeMap = [
  {
    "name": "field_name",
    "baseName": "field_name",
    "type": "SearchConnectionRequestSortOptionsFieldNameEnum",
    "format": ""
  },
  {
    "name": "order",
    "baseName": "order",
    "type": "SearchConnectionRequestSortOptionsOrderEnum",
    "format": ""
  }
];
var SearchConnectionRequestSortOptions = _SearchConnectionRequestSortOptions;

// models/SearchConnectionResponse.ts
var _SearchConnectionResponse = class _SearchConnectionResponse {
  static getAttributeTypeMap() {
    return _SearchConnectionResponse.attributeTypeMap;
  }
  constructor() {
  }
};
_SearchConnectionResponse.discriminator = void 0;
_SearchConnectionResponse.attributeTypeMap = [
  {
    "name": "id",
    "baseName": "id",
    "type": "string",
    "format": ""
  },
  {
    "name": "name",
    "baseName": "name",
    "type": "string",
    "format": ""
  },
  {
    "name": "description",
    "baseName": "description",
    "type": "string",
    "format": ""
  },
  {
    "name": "data_warehouse_type",
    "baseName": "data_warehouse_type",
    "type": "SearchConnectionResponseDataWarehouseTypeEnum",
    "format": ""
  },
  {
    "name": "data_warehouse_objects",
    "baseName": "data_warehouse_objects",
    "type": "DataWarehouseObjects",
    "format": ""
  },
  {
    "name": "details",
    "baseName": "details",
    "type": "any",
    "format": ""
  }
];
var SearchConnectionResponse = _SearchConnectionResponse;

// models/SearchCustomActionsRequest.ts
var _SearchCustomActionsRequest = class _SearchCustomActionsRequest {
  static getAttributeTypeMap() {
    return _SearchCustomActionsRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_SearchCustomActionsRequest.discriminator = void 0;
_SearchCustomActionsRequest.attributeTypeMap = [
  {
    "name": "custom_action_identifier",
    "baseName": "custom_action_identifier",
    "type": "string",
    "format": ""
  },
  {
    "name": "name_pattern",
    "baseName": "name_pattern",
    "type": "string",
    "format": ""
  },
  {
    "name": "default_action_config",
    "baseName": "default_action_config",
    "type": "SearchCustomActionsRequestDefaultActionConfig",
    "format": ""
  },
  {
    "name": "include_group_associations",
    "baseName": "include_group_associations",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "include_metadata_associations",
    "baseName": "include_metadata_associations",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "metadata",
    "baseName": "metadata",
    "type": "Array<CustomActionMetadataTypeInput>",
    "format": ""
  },
  {
    "name": "type",
    "baseName": "type",
    "type": "SearchCustomActionsRequestTypeEnum",
    "format": ""
  }
];
var SearchCustomActionsRequest = _SearchCustomActionsRequest;

// models/SearchCustomActionsRequestDefaultActionConfig.ts
var _SearchCustomActionsRequestDefaultActionConfig = class _SearchCustomActionsRequestDefaultActionConfig {
  static getAttributeTypeMap() {
    return _SearchCustomActionsRequestDefaultActionConfig.attributeTypeMap;
  }
  constructor() {
  }
};
_SearchCustomActionsRequestDefaultActionConfig.discriminator = void 0;
_SearchCustomActionsRequestDefaultActionConfig.attributeTypeMap = [
  {
    "name": "visibility",
    "baseName": "visibility",
    "type": "boolean",
    "format": ""
  }
];
var SearchCustomActionsRequestDefaultActionConfig = _SearchCustomActionsRequestDefaultActionConfig;

// models/SearchDataRequest.ts
var _SearchDataRequest = class _SearchDataRequest {
  static getAttributeTypeMap() {
    return _SearchDataRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_SearchDataRequest.discriminator = void 0;
_SearchDataRequest.attributeTypeMap = [
  {
    "name": "query_string",
    "baseName": "query_string",
    "type": "string",
    "format": ""
  },
  {
    "name": "logical_table_identifier",
    "baseName": "logical_table_identifier",
    "type": "string",
    "format": ""
  },
  {
    "name": "data_format",
    "baseName": "data_format",
    "type": "SearchDataRequestDataFormatEnum",
    "format": ""
  },
  {
    "name": "record_offset",
    "baseName": "record_offset",
    "type": "number",
    "format": "int32"
  },
  {
    "name": "record_size",
    "baseName": "record_size",
    "type": "number",
    "format": "int32"
  },
  {
    "name": "runtime_filter",
    "baseName": "runtime_filter",
    "type": "any",
    "format": ""
  },
  {
    "name": "runtime_sort",
    "baseName": "runtime_sort",
    "type": "any",
    "format": ""
  },
  {
    "name": "runtime_param_override",
    "baseName": "runtime_param_override",
    "type": "any",
    "format": ""
  }
];
var SearchDataRequest = _SearchDataRequest;

// models/SearchDataResponse.ts
var _SearchDataResponse = class _SearchDataResponse {
  static getAttributeTypeMap() {
    return _SearchDataResponse.attributeTypeMap;
  }
  constructor() {
  }
};
_SearchDataResponse.discriminator = void 0;
_SearchDataResponse.attributeTypeMap = [
  {
    "name": "contents",
    "baseName": "contents",
    "type": "Array<AnswerContent>",
    "format": ""
  }
];
var SearchDataResponse = _SearchDataResponse;

// models/SearchMetadataRequest.ts
var _SearchMetadataRequest = class _SearchMetadataRequest {
  static getAttributeTypeMap() {
    return _SearchMetadataRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_SearchMetadataRequest.discriminator = void 0;
_SearchMetadataRequest.attributeTypeMap = [
  {
    "name": "metadata",
    "baseName": "metadata",
    "type": "Array<MetadataListItemInput>",
    "format": ""
  },
  {
    "name": "permissions",
    "baseName": "permissions",
    "type": "Array<PermissionInput>",
    "format": ""
  },
  {
    "name": "created_by_user_identifiers",
    "baseName": "created_by_user_identifiers",
    "type": "Array<string>",
    "format": ""
  },
  {
    "name": "dependent_object_version",
    "baseName": "dependent_object_version",
    "type": "SearchMetadataRequestDependentObjectVersionEnum",
    "format": ""
  },
  {
    "name": "exclude_objects",
    "baseName": "exclude_objects",
    "type": "Array<ExcludeMetadataListItemInput>",
    "format": ""
  },
  {
    "name": "favorite_object_options",
    "baseName": "favorite_object_options",
    "type": "SearchMetadataRequestFavoriteObjectOptions",
    "format": ""
  },
  {
    "name": "include_auto_created_objects",
    "baseName": "include_auto_created_objects",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "include_dependent_objects",
    "baseName": "include_dependent_objects",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "dependent_objects_record_size",
    "baseName": "dependent_objects_record_size",
    "type": "number",
    "format": "int32"
  },
  {
    "name": "include_details",
    "baseName": "include_details",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "include_headers",
    "baseName": "include_headers",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "include_hidden_objects",
    "baseName": "include_hidden_objects",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "include_incomplete_objects",
    "baseName": "include_incomplete_objects",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "include_visualization_headers",
    "baseName": "include_visualization_headers",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "include_worksheet_search_assist_data",
    "baseName": "include_worksheet_search_assist_data",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "modified_by_user_identifiers",
    "baseName": "modified_by_user_identifiers",
    "type": "Array<string>",
    "format": ""
  },
  {
    "name": "record_offset",
    "baseName": "record_offset",
    "type": "number",
    "format": "int32"
  },
  {
    "name": "record_size",
    "baseName": "record_size",
    "type": "number",
    "format": "int32"
  },
  {
    "name": "sort_options",
    "baseName": "sort_options",
    "type": "SearchMetadataRequestSortOptions",
    "format": ""
  },
  {
    "name": "tag_identifiers",
    "baseName": "tag_identifiers",
    "type": "Array<string>",
    "format": ""
  },
  {
    "name": "include_stats",
    "baseName": "include_stats",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "include_discoverable_objects",
    "baseName": "include_discoverable_objects",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "show_resolved_parameters",
    "baseName": "show_resolved_parameters",
    "type": "boolean",
    "format": ""
  }
];
var SearchMetadataRequest = _SearchMetadataRequest;

// models/SearchMetadataRequestFavoriteObjectOptions.ts
var _SearchMetadataRequestFavoriteObjectOptions = class _SearchMetadataRequestFavoriteObjectOptions {
  static getAttributeTypeMap() {
    return _SearchMetadataRequestFavoriteObjectOptions.attributeTypeMap;
  }
  constructor() {
  }
};
_SearchMetadataRequestFavoriteObjectOptions.discriminator = void 0;
_SearchMetadataRequestFavoriteObjectOptions.attributeTypeMap = [
  {
    "name": "include",
    "baseName": "include",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "user_identifiers",
    "baseName": "user_identifiers",
    "type": "Array<string>",
    "format": ""
  }
];
var SearchMetadataRequestFavoriteObjectOptions = _SearchMetadataRequestFavoriteObjectOptions;

// models/SearchMetadataRequestSortOptions.ts
var _SearchMetadataRequestSortOptions = class _SearchMetadataRequestSortOptions {
  static getAttributeTypeMap() {
    return _SearchMetadataRequestSortOptions.attributeTypeMap;
  }
  constructor() {
  }
};
_SearchMetadataRequestSortOptions.discriminator = void 0;
_SearchMetadataRequestSortOptions.attributeTypeMap = [
  {
    "name": "field_name",
    "baseName": "field_name",
    "type": "SearchMetadataRequestSortOptionsFieldNameEnum",
    "format": ""
  },
  {
    "name": "order",
    "baseName": "order",
    "type": "SearchMetadataRequestSortOptionsOrderEnum",
    "format": ""
  }
];
var SearchMetadataRequestSortOptions = _SearchMetadataRequestSortOptions;

// models/SearchOrgsRequest.ts
var _SearchOrgsRequest = class _SearchOrgsRequest {
  static getAttributeTypeMap() {
    return _SearchOrgsRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_SearchOrgsRequest.discriminator = void 0;
_SearchOrgsRequest.attributeTypeMap = [
  {
    "name": "org_identifier",
    "baseName": "org_identifier",
    "type": "string",
    "format": ""
  },
  {
    "name": "description",
    "baseName": "description",
    "type": "string",
    "format": ""
  },
  {
    "name": "visibility",
    "baseName": "visibility",
    "type": "SearchOrgsRequestVisibilityEnum",
    "format": ""
  },
  {
    "name": "status",
    "baseName": "status",
    "type": "SearchOrgsRequestStatusEnum",
    "format": ""
  },
  {
    "name": "user_identifiers",
    "baseName": "user_identifiers",
    "type": "Array<string>",
    "format": ""
  }
];
var SearchOrgsRequest = _SearchOrgsRequest;

// models/SearchRoleResponse.ts
var _SearchRoleResponse = class _SearchRoleResponse {
  static getAttributeTypeMap() {
    return _SearchRoleResponse.attributeTypeMap;
  }
  constructor() {
  }
};
_SearchRoleResponse.discriminator = void 0;
_SearchRoleResponse.attributeTypeMap = [
  {
    "name": "id",
    "baseName": "id",
    "type": "string",
    "format": ""
  },
  {
    "name": "name",
    "baseName": "name",
    "type": "string",
    "format": ""
  },
  {
    "name": "description",
    "baseName": "description",
    "type": "string",
    "format": ""
  },
  {
    "name": "groups_assigned_count",
    "baseName": "groups_assigned_count",
    "type": "number",
    "format": "int32"
  },
  {
    "name": "orgs",
    "baseName": "orgs",
    "type": "Array<GenericInfo>",
    "format": ""
  },
  {
    "name": "groups",
    "baseName": "groups",
    "type": "Array<GenericInfo>",
    "format": ""
  },
  {
    "name": "privileges",
    "baseName": "privileges",
    "type": "Array<SearchRoleResponsePrivilegesEnum>",
    "format": ""
  },
  {
    "name": "permission",
    "baseName": "permission",
    "type": "SearchRoleResponsePermissionEnum",
    "format": ""
  },
  {
    "name": "author_id",
    "baseName": "author_id",
    "type": "string",
    "format": ""
  },
  {
    "name": "modifier_id",
    "baseName": "modifier_id",
    "type": "string",
    "format": ""
  },
  {
    "name": "creation_time_in_millis",
    "baseName": "creation_time_in_millis",
    "type": "any",
    "format": ""
  },
  {
    "name": "modification_time_in_millis",
    "baseName": "modification_time_in_millis",
    "type": "any",
    "format": ""
  },
  {
    "name": "deleted",
    "baseName": "deleted",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "deprecated",
    "baseName": "deprecated",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "external",
    "baseName": "external",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "hidden",
    "baseName": "hidden",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "shared_via_connection",
    "baseName": "shared_via_connection",
    "type": "boolean",
    "format": ""
  }
];
var SearchRoleResponse = _SearchRoleResponse;

// models/SearchRolesRequest.ts
var _SearchRolesRequest = class _SearchRolesRequest {
  static getAttributeTypeMap() {
    return _SearchRolesRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_SearchRolesRequest.discriminator = void 0;
_SearchRolesRequest.attributeTypeMap = [
  {
    "name": "role_identifiers",
    "baseName": "role_identifiers",
    "type": "Array<string>",
    "format": ""
  },
  {
    "name": "org_identifiers",
    "baseName": "org_identifiers",
    "type": "Array<string>",
    "format": ""
  },
  {
    "name": "group_identifiers",
    "baseName": "group_identifiers",
    "type": "Array<string>",
    "format": ""
  },
  {
    "name": "privileges",
    "baseName": "privileges",
    "type": "Array<SearchRolesRequestPrivilegesEnum>",
    "format": ""
  },
  {
    "name": "deprecated",
    "baseName": "deprecated",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "external",
    "baseName": "external",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "shared_via_connection",
    "baseName": "shared_via_connection",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "permissions",
    "baseName": "permissions",
    "type": "Array<SearchRolesRequestPermissionsEnum>",
    "format": ""
  }
];
var SearchRolesRequest = _SearchRolesRequest;

// models/SearchSchedulesRequest.ts
var _SearchSchedulesRequest = class _SearchSchedulesRequest {
  static getAttributeTypeMap() {
    return _SearchSchedulesRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_SearchSchedulesRequest.discriminator = void 0;
_SearchSchedulesRequest.attributeTypeMap = [
  {
    "name": "metadata",
    "baseName": "metadata",
    "type": "Array<MetadataInput>",
    "format": ""
  },
  {
    "name": "record_offset",
    "baseName": "record_offset",
    "type": "number",
    "format": "int32"
  },
  {
    "name": "record_size",
    "baseName": "record_size",
    "type": "number",
    "format": "int32"
  },
  {
    "name": "sort_options",
    "baseName": "sort_options",
    "type": "SearchSchedulesRequestSortOptions",
    "format": ""
  },
  {
    "name": "history_runs_options",
    "baseName": "history_runs_options",
    "type": "SearchSchedulesRequestHistoryRunsOptions",
    "format": ""
  },
  {
    "name": "schedule_identifiers",
    "baseName": "schedule_identifiers",
    "type": "Array<string>",
    "format": ""
  }
];
var SearchSchedulesRequest = _SearchSchedulesRequest;

// models/SearchSchedulesRequestHistoryRunsOptions.ts
var _SearchSchedulesRequestHistoryRunsOptions = class _SearchSchedulesRequestHistoryRunsOptions {
  static getAttributeTypeMap() {
    return _SearchSchedulesRequestHistoryRunsOptions.attributeTypeMap;
  }
  constructor() {
  }
};
_SearchSchedulesRequestHistoryRunsOptions.discriminator = void 0;
_SearchSchedulesRequestHistoryRunsOptions.attributeTypeMap = [
  {
    "name": "include_history_runs",
    "baseName": "include_history_runs",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "record_size",
    "baseName": "record_size",
    "type": "number",
    "format": "int32"
  },
  {
    "name": "record_offset",
    "baseName": "record_offset",
    "type": "number",
    "format": "int32"
  }
];
var SearchSchedulesRequestHistoryRunsOptions = _SearchSchedulesRequestHistoryRunsOptions;

// models/SearchSchedulesRequestSortOptions.ts
var _SearchSchedulesRequestSortOptions = class _SearchSchedulesRequestSortOptions {
  static getAttributeTypeMap() {
    return _SearchSchedulesRequestSortOptions.attributeTypeMap;
  }
  constructor() {
  }
};
_SearchSchedulesRequestSortOptions.discriminator = void 0;
_SearchSchedulesRequestSortOptions.attributeTypeMap = [
  {
    "name": "field_name",
    "baseName": "field_name",
    "type": "string",
    "format": ""
  },
  {
    "name": "order",
    "baseName": "order",
    "type": "string",
    "format": ""
  }
];
var SearchSchedulesRequestSortOptions = _SearchSchedulesRequestSortOptions;

// models/SearchTagsRequest.ts
var _SearchTagsRequest = class _SearchTagsRequest {
  static getAttributeTypeMap() {
    return _SearchTagsRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_SearchTagsRequest.discriminator = void 0;
_SearchTagsRequest.attributeTypeMap = [
  {
    "name": "tag_identifier",
    "baseName": "tag_identifier",
    "type": "string",
    "format": ""
  },
  {
    "name": "name_pattern",
    "baseName": "name_pattern",
    "type": "string",
    "format": ""
  },
  {
    "name": "color",
    "baseName": "color",
    "type": "string",
    "format": ""
  }
];
var SearchTagsRequest = _SearchTagsRequest;

// models/SearchUserGroupsRequest.ts
var _SearchUserGroupsRequest = class _SearchUserGroupsRequest {
  static getAttributeTypeMap() {
    return _SearchUserGroupsRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_SearchUserGroupsRequest.discriminator = void 0;
_SearchUserGroupsRequest.attributeTypeMap = [
  {
    "name": "default_liveboard_identifiers",
    "baseName": "default_liveboard_identifiers",
    "type": "Array<string>",
    "format": ""
  },
  {
    "name": "description",
    "baseName": "description",
    "type": "string",
    "format": ""
  },
  {
    "name": "display_name",
    "baseName": "display_name",
    "type": "string",
    "format": ""
  },
  {
    "name": "name_pattern",
    "baseName": "name_pattern",
    "type": "string",
    "format": ""
  },
  {
    "name": "group_identifier",
    "baseName": "group_identifier",
    "type": "string",
    "format": ""
  },
  {
    "name": "org_identifiers",
    "baseName": "org_identifiers",
    "type": "Array<string>",
    "format": ""
  },
  {
    "name": "privileges",
    "baseName": "privileges",
    "type": "Array<SearchUserGroupsRequestPrivilegesEnum>",
    "format": ""
  },
  {
    "name": "sub_group_identifiers",
    "baseName": "sub_group_identifiers",
    "type": "Array<string>",
    "format": ""
  },
  {
    "name": "type",
    "baseName": "type",
    "type": "SearchUserGroupsRequestTypeEnum",
    "format": ""
  },
  {
    "name": "user_identifiers",
    "baseName": "user_identifiers",
    "type": "Array<string>",
    "format": ""
  },
  {
    "name": "visibility",
    "baseName": "visibility",
    "type": "SearchUserGroupsRequestVisibilityEnum",
    "format": ""
  },
  {
    "name": "role_identifiers",
    "baseName": "role_identifiers",
    "type": "Array<string>",
    "format": ""
  },
  {
    "name": "record_offset",
    "baseName": "record_offset",
    "type": "number",
    "format": "int32"
  },
  {
    "name": "record_size",
    "baseName": "record_size",
    "type": "number",
    "format": "int32"
  },
  {
    "name": "sort_options",
    "baseName": "sort_options",
    "type": "SearchUserGroupsRequestSortOptions",
    "format": ""
  },
  {
    "name": "include_users",
    "baseName": "include_users",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "include_sub_groups",
    "baseName": "include_sub_groups",
    "type": "boolean",
    "format": ""
  }
];
var SearchUserGroupsRequest = _SearchUserGroupsRequest;

// models/SearchUserGroupsRequestSortOptions.ts
var _SearchUserGroupsRequestSortOptions = class _SearchUserGroupsRequestSortOptions {
  static getAttributeTypeMap() {
    return _SearchUserGroupsRequestSortOptions.attributeTypeMap;
  }
  constructor() {
  }
};
_SearchUserGroupsRequestSortOptions.discriminator = void 0;
_SearchUserGroupsRequestSortOptions.attributeTypeMap = [
  {
    "name": "field_name",
    "baseName": "field_name",
    "type": "SearchUserGroupsRequestSortOptionsFieldNameEnum",
    "format": ""
  },
  {
    "name": "order",
    "baseName": "order",
    "type": "SearchUserGroupsRequestSortOptionsOrderEnum",
    "format": ""
  }
];
var SearchUserGroupsRequestSortOptions = _SearchUserGroupsRequestSortOptions;

// models/SearchUsersRequest.ts
var _SearchUsersRequest = class _SearchUsersRequest {
  static getAttributeTypeMap() {
    return _SearchUsersRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_SearchUsersRequest.discriminator = void 0;
_SearchUsersRequest.attributeTypeMap = [
  {
    "name": "user_identifier",
    "baseName": "user_identifier",
    "type": "string",
    "format": ""
  },
  {
    "name": "display_name",
    "baseName": "display_name",
    "type": "string",
    "format": ""
  },
  {
    "name": "name_pattern",
    "baseName": "name_pattern",
    "type": "string",
    "format": ""
  },
  {
    "name": "visibility",
    "baseName": "visibility",
    "type": "SearchUsersRequestVisibilityEnum",
    "format": ""
  },
  {
    "name": "email",
    "baseName": "email",
    "type": "string",
    "format": ""
  },
  {
    "name": "group_identifiers",
    "baseName": "group_identifiers",
    "type": "Array<string>",
    "format": ""
  },
  {
    "name": "privileges",
    "baseName": "privileges",
    "type": "Array<SearchUsersRequestPrivilegesEnum>",
    "format": ""
  },
  {
    "name": "account_type",
    "baseName": "account_type",
    "type": "SearchUsersRequestAccountTypeEnum",
    "format": ""
  },
  {
    "name": "account_status",
    "baseName": "account_status",
    "type": "SearchUsersRequestAccountStatusEnum",
    "format": ""
  },
  {
    "name": "notify_on_share",
    "baseName": "notify_on_share",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "show_onboarding_experience",
    "baseName": "show_onboarding_experience",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "onboarding_experience_completed",
    "baseName": "onboarding_experience_completed",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "org_identifiers",
    "baseName": "org_identifiers",
    "type": "Array<string>",
    "format": ""
  },
  {
    "name": "home_liveboard_identifier",
    "baseName": "home_liveboard_identifier",
    "type": "string",
    "format": ""
  },
  {
    "name": "favorite_metadata",
    "baseName": "favorite_metadata",
    "type": "Array<FavoriteMetadataInput>",
    "format": ""
  },
  {
    "name": "record_offset",
    "baseName": "record_offset",
    "type": "number",
    "format": "int32"
  },
  {
    "name": "record_size",
    "baseName": "record_size",
    "type": "number",
    "format": "int32"
  },
  {
    "name": "sort_options",
    "baseName": "sort_options",
    "type": "SearchUsersRequestSortOptions",
    "format": ""
  },
  {
    "name": "role_identifiers",
    "baseName": "role_identifiers",
    "type": "Array<string>",
    "format": ""
  },
  {
    "name": "include_favorite_metadata",
    "baseName": "include_favorite_metadata",
    "type": "boolean",
    "format": ""
  }
];
var SearchUsersRequest = _SearchUsersRequest;

// models/SearchUsersRequestSortOptions.ts
var _SearchUsersRequestSortOptions = class _SearchUsersRequestSortOptions {
  static getAttributeTypeMap() {
    return _SearchUsersRequestSortOptions.attributeTypeMap;
  }
  constructor() {
  }
};
_SearchUsersRequestSortOptions.discriminator = void 0;
_SearchUsersRequestSortOptions.attributeTypeMap = [
  {
    "name": "field_name",
    "baseName": "field_name",
    "type": "SearchUsersRequestSortOptionsFieldNameEnum",
    "format": ""
  },
  {
    "name": "order",
    "baseName": "order",
    "type": "SearchUsersRequestSortOptionsOrderEnum",
    "format": ""
  }
];
var SearchUsersRequestSortOptions = _SearchUsersRequestSortOptions;

// models/SearchVariablesRequest.ts
var _SearchVariablesRequest = class _SearchVariablesRequest {
  static getAttributeTypeMap() {
    return _SearchVariablesRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_SearchVariablesRequest.discriminator = void 0;
_SearchVariablesRequest.attributeTypeMap = [
  {
    "name": "variable_details",
    "baseName": "variable_details",
    "type": "Array<VariableDetailInput>",
    "format": ""
  },
  {
    "name": "record_offset",
    "baseName": "record_offset",
    "type": "number",
    "format": "int32"
  },
  {
    "name": "record_size",
    "baseName": "record_size",
    "type": "number",
    "format": "int32"
  },
  {
    "name": "output_format",
    "baseName": "output_format",
    "type": "SearchVariablesRequestOutputFormatEnum",
    "format": ""
  }
];
var SearchVariablesRequest = _SearchVariablesRequest;

// models/SendMessageRequest.ts
var _SendMessageRequest = class _SendMessageRequest {
  static getAttributeTypeMap() {
    return _SendMessageRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_SendMessageRequest.discriminator = void 0;
_SendMessageRequest.attributeTypeMap = [
  {
    "name": "metadata_identifier",
    "baseName": "metadata_identifier",
    "type": "string",
    "format": ""
  },
  {
    "name": "message",
    "baseName": "message",
    "type": "string",
    "format": ""
  }
];
var SendMessageRequest = _SendMessageRequest;

// models/ShareMetadataRequest.ts
var _ShareMetadataRequest = class _ShareMetadataRequest {
  static getAttributeTypeMap() {
    return _ShareMetadataRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_ShareMetadataRequest.discriminator = void 0;
_ShareMetadataRequest.attributeTypeMap = [
  {
    "name": "metadata_type",
    "baseName": "metadata_type",
    "type": "ShareMetadataRequestMetadataTypeEnum",
    "format": ""
  },
  {
    "name": "metadata_identifiers",
    "baseName": "metadata_identifiers",
    "type": "Array<string>",
    "format": ""
  },
  {
    "name": "metadata",
    "baseName": "metadata",
    "type": "Array<ShareMetadataTypeInput>",
    "format": ""
  },
  {
    "name": "permissions",
    "baseName": "permissions",
    "type": "Array<SharePermissionsInput>",
    "format": ""
  },
  {
    "name": "visualization_identifiers",
    "baseName": "visualization_identifiers",
    "type": "Array<string>",
    "format": ""
  },
  {
    "name": "emails",
    "baseName": "emails",
    "type": "Array<string>",
    "format": ""
  },
  {
    "name": "message",
    "baseName": "message",
    "type": "string",
    "format": ""
  },
  {
    "name": "enable_custom_url",
    "baseName": "enable_custom_url",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "notify_on_share",
    "baseName": "notify_on_share",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "has_lenient_discoverability",
    "baseName": "has_lenient_discoverability",
    "type": "boolean",
    "format": ""
  }
];
var ShareMetadataRequest = _ShareMetadataRequest;

// models/ShareMetadataTypeInput.ts
var _ShareMetadataTypeInput = class _ShareMetadataTypeInput {
  static getAttributeTypeMap() {
    return _ShareMetadataTypeInput.attributeTypeMap;
  }
  constructor() {
  }
};
_ShareMetadataTypeInput.discriminator = void 0;
_ShareMetadataTypeInput.attributeTypeMap = [
  {
    "name": "type",
    "baseName": "type",
    "type": "ShareMetadataTypeInputTypeEnum",
    "format": ""
  },
  {
    "name": "identifier",
    "baseName": "identifier",
    "type": "string",
    "format": ""
  }
];
var ShareMetadataTypeInput = _ShareMetadataTypeInput;

// models/SharePermissionsInput.ts
var _SharePermissionsInput = class _SharePermissionsInput {
  static getAttributeTypeMap() {
    return _SharePermissionsInput.attributeTypeMap;
  }
  constructor() {
  }
};
_SharePermissionsInput.discriminator = void 0;
_SharePermissionsInput.attributeTypeMap = [
  {
    "name": "principal",
    "baseName": "principal",
    "type": "PrincipalsInput",
    "format": ""
  },
  {
    "name": "share_mode",
    "baseName": "share_mode",
    "type": "SharePermissionsInputShareModeEnum",
    "format": ""
  }
];
var SharePermissionsInput = _SharePermissionsInput;

// models/SingleAnswerRequest.ts
var _SingleAnswerRequest = class _SingleAnswerRequest {
  static getAttributeTypeMap() {
    return _SingleAnswerRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_SingleAnswerRequest.discriminator = void 0;
_SingleAnswerRequest.attributeTypeMap = [
  {
    "name": "query",
    "baseName": "query",
    "type": "string",
    "format": ""
  },
  {
    "name": "metadata_identifier",
    "baseName": "metadata_identifier",
    "type": "string",
    "format": ""
  }
];
var SingleAnswerRequest = _SingleAnswerRequest;

// models/SortOptionInput.ts
var _SortOptionInput = class _SortOptionInput {
  static getAttributeTypeMap() {
    return _SortOptionInput.attributeTypeMap;
  }
  constructor() {
  }
};
_SortOptionInput.discriminator = void 0;
_SortOptionInput.attributeTypeMap = [
  {
    "name": "field_name",
    "baseName": "field_name",
    "type": "SortOptionInputFieldNameEnum",
    "format": ""
  },
  {
    "name": "order",
    "baseName": "order",
    "type": "SortOptionInputOrderEnum",
    "format": ""
  }
];
var SortOptionInput = _SortOptionInput;

// models/SortOptions.ts
var _SortOptions = class _SortOptions {
  static getAttributeTypeMap() {
    return _SortOptions.attributeTypeMap;
  }
  constructor() {
  }
};
_SortOptions.discriminator = void 0;
_SortOptions.attributeTypeMap = [
  {
    "name": "field_name",
    "baseName": "field_name",
    "type": "SortOptionsFieldNameEnum",
    "format": ""
  },
  {
    "name": "order",
    "baseName": "order",
    "type": "SortOptionsOrderEnum",
    "format": ""
  }
];
var SortOptions = _SortOptions;

// models/SortingOptions.ts
var _SortingOptions = class _SortingOptions {
  static getAttributeTypeMap() {
    return _SortingOptions.attributeTypeMap;
  }
  constructor() {
  }
};
_SortingOptions.discriminator = void 0;
_SortingOptions.attributeTypeMap = [
  {
    "name": "field_name",
    "baseName": "field_name",
    "type": "string",
    "format": ""
  },
  {
    "name": "order",
    "baseName": "order",
    "type": "string",
    "format": ""
  }
];
var SortingOptions = _SortingOptions;

// models/SqlQuery.ts
var _SqlQuery = class _SqlQuery {
  static getAttributeTypeMap() {
    return _SqlQuery.attributeTypeMap;
  }
  constructor() {
  }
};
_SqlQuery.discriminator = void 0;
_SqlQuery.attributeTypeMap = [
  {
    "name": "metadata_id",
    "baseName": "metadata_id",
    "type": "string",
    "format": ""
  },
  {
    "name": "metadata_name",
    "baseName": "metadata_name",
    "type": "string",
    "format": ""
  },
  {
    "name": "sql_query",
    "baseName": "sql_query",
    "type": "string",
    "format": ""
  }
];
var SqlQuery = _SqlQuery;

// models/SqlQueryResponse.ts
var _SqlQueryResponse = class _SqlQueryResponse {
  static getAttributeTypeMap() {
    return _SqlQueryResponse.attributeTypeMap;
  }
  constructor() {
  }
};
_SqlQueryResponse.discriminator = void 0;
_SqlQueryResponse.attributeTypeMap = [
  {
    "name": "metadata_id",
    "baseName": "metadata_id",
    "type": "string",
    "format": ""
  },
  {
    "name": "metadata_name",
    "baseName": "metadata_name",
    "type": "string",
    "format": ""
  },
  {
    "name": "metadata_type",
    "baseName": "metadata_type",
    "type": "SqlQueryResponseMetadataTypeEnum",
    "format": ""
  },
  {
    "name": "sql_queries",
    "baseName": "sql_queries",
    "type": "Array<SqlQuery>",
    "format": ""
  }
];
var SqlQueryResponse = _SqlQueryResponse;

// models/SystemConfig.ts
var _SystemConfig = class _SystemConfig {
  static getAttributeTypeMap() {
    return _SystemConfig.attributeTypeMap;
  }
  constructor() {
  }
};
_SystemConfig.discriminator = void 0;
_SystemConfig.attributeTypeMap = [
  {
    "name": "onboarding_content_url",
    "baseName": "onboarding_content_url",
    "type": "string",
    "format": ""
  }
];
var SystemConfig = _SystemConfig;

// models/SystemInfo.ts
var _SystemInfo = class _SystemInfo {
  static getAttributeTypeMap() {
    return _SystemInfo.attributeTypeMap;
  }
  constructor() {
  }
};
_SystemInfo.discriminator = void 0;
_SystemInfo.attributeTypeMap = [
  {
    "name": "id",
    "baseName": "id",
    "type": "string",
    "format": ""
  },
  {
    "name": "name",
    "baseName": "name",
    "type": "string",
    "format": ""
  },
  {
    "name": "release_version",
    "baseName": "release_version",
    "type": "string",
    "format": ""
  },
  {
    "name": "time_zone",
    "baseName": "time_zone",
    "type": "string",
    "format": ""
  },
  {
    "name": "locale",
    "baseName": "locale",
    "type": "string",
    "format": ""
  },
  {
    "name": "date_format",
    "baseName": "date_format",
    "type": "string",
    "format": ""
  },
  {
    "name": "api_version",
    "baseName": "api_version",
    "type": "string",
    "format": ""
  },
  {
    "name": "type",
    "baseName": "type",
    "type": "string",
    "format": ""
  },
  {
    "name": "environment",
    "baseName": "environment",
    "type": "string",
    "format": ""
  },
  {
    "name": "license",
    "baseName": "license",
    "type": "string",
    "format": ""
  },
  {
    "name": "date_time_format",
    "baseName": "date_time_format",
    "type": "string",
    "format": ""
  },
  {
    "name": "time_format",
    "baseName": "time_format",
    "type": "string",
    "format": ""
  },
  {
    "name": "system_user_id",
    "baseName": "system_user_id",
    "type": "string",
    "format": ""
  },
  {
    "name": "super_user_id",
    "baseName": "super_user_id",
    "type": "string",
    "format": ""
  },
  {
    "name": "hidden_object_id",
    "baseName": "hidden_object_id",
    "type": "string",
    "format": ""
  },
  {
    "name": "system_group_id",
    "baseName": "system_group_id",
    "type": "string",
    "format": ""
  },
  {
    "name": "tsadmin_user_id",
    "baseName": "tsadmin_user_id",
    "type": "string",
    "format": ""
  },
  {
    "name": "admin_group_id",
    "baseName": "admin_group_id",
    "type": "string",
    "format": ""
  },
  {
    "name": "all_tables_connection_id",
    "baseName": "all_tables_connection_id",
    "type": "string",
    "format": ""
  },
  {
    "name": "all_user_group_id",
    "baseName": "all_user_group_id",
    "type": "string",
    "format": ""
  },
  {
    "name": "accept_language",
    "baseName": "accept_language",
    "type": "string",
    "format": ""
  },
  {
    "name": "all_user_group_member_user_count",
    "baseName": "all_user_group_member_user_count",
    "type": "number",
    "format": "int32"
  },
  {
    "name": "logical_model_version",
    "baseName": "logical_model_version",
    "type": "number",
    "format": "int32"
  }
];
var SystemInfo = _SystemInfo;

// models/Table.ts
var _Table = class _Table {
  static getAttributeTypeMap() {
    return _Table.attributeTypeMap;
  }
  constructor() {
  }
};
_Table.discriminator = void 0;
_Table.attributeTypeMap = [
  {
    "name": "name",
    "baseName": "name",
    "type": "string",
    "format": ""
  },
  {
    "name": "columns",
    "baseName": "columns",
    "type": "Array<Column>",
    "format": ""
  },
  {
    "name": "type",
    "baseName": "type",
    "type": "string",
    "format": ""
  },
  {
    "name": "description",
    "baseName": "description",
    "type": "string",
    "format": ""
  },
  {
    "name": "selected",
    "baseName": "selected",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "linked",
    "baseName": "linked",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "relationships",
    "baseName": "relationships",
    "type": "Array<any>",
    "format": ""
  }
];
var Table = _Table;

// models/Tag.ts
var _Tag = class _Tag {
  static getAttributeTypeMap() {
    return _Tag.attributeTypeMap;
  }
  constructor() {
  }
};
_Tag.discriminator = void 0;
_Tag.attributeTypeMap = [
  {
    "name": "name",
    "baseName": "name",
    "type": "string",
    "format": ""
  },
  {
    "name": "id",
    "baseName": "id",
    "type": "string",
    "format": ""
  },
  {
    "name": "color",
    "baseName": "color",
    "type": "string",
    "format": ""
  },
  {
    "name": "deleted",
    "baseName": "deleted",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "hidden",
    "baseName": "hidden",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "external",
    "baseName": "external",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "deprecated",
    "baseName": "deprecated",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "creation_time_in_millis",
    "baseName": "creation_time_in_millis",
    "type": "number",
    "format": "float"
  },
  {
    "name": "modification_time_in_millis",
    "baseName": "modification_time_in_millis",
    "type": "number",
    "format": "float"
  },
  {
    "name": "author_id",
    "baseName": "author_id",
    "type": "string",
    "format": ""
  },
  {
    "name": "modifier_id",
    "baseName": "modifier_id",
    "type": "string",
    "format": ""
  },
  {
    "name": "owner_id",
    "baseName": "owner_id",
    "type": "string",
    "format": ""
  }
];
var Tag = _Tag;

// models/TagMetadataTypeInput.ts
var _TagMetadataTypeInput = class _TagMetadataTypeInput {
  static getAttributeTypeMap() {
    return _TagMetadataTypeInput.attributeTypeMap;
  }
  constructor() {
  }
};
_TagMetadataTypeInput.discriminator = void 0;
_TagMetadataTypeInput.attributeTypeMap = [
  {
    "name": "type",
    "baseName": "type",
    "type": "TagMetadataTypeInputTypeEnum",
    "format": ""
  },
  {
    "name": "identifier",
    "baseName": "identifier",
    "type": "string",
    "format": ""
  }
];
var TagMetadataTypeInput = _TagMetadataTypeInput;

// models/Token.ts
var _Token = class _Token {
  static getAttributeTypeMap() {
    return _Token.attributeTypeMap;
  }
  constructor() {
  }
};
_Token.discriminator = void 0;
_Token.attributeTypeMap = [
  {
    "name": "token",
    "baseName": "token",
    "type": "string",
    "format": ""
  },
  {
    "name": "creation_time_in_millis",
    "baseName": "creation_time_in_millis",
    "type": "number",
    "format": "float"
  },
  {
    "name": "expiration_time_in_millis",
    "baseName": "expiration_time_in_millis",
    "type": "number",
    "format": "float"
  },
  {
    "name": "scope",
    "baseName": "scope",
    "type": "Scope",
    "format": ""
  },
  {
    "name": "valid_for_user_id",
    "baseName": "valid_for_user_id",
    "type": "string",
    "format": ""
  },
  {
    "name": "valid_for_username",
    "baseName": "valid_for_username",
    "type": "string",
    "format": ""
  }
];
var Token = _Token;

// models/TokenAccessScopeObject.ts
var _TokenAccessScopeObject = class _TokenAccessScopeObject {
  static getAttributeTypeMap() {
    return _TokenAccessScopeObject.attributeTypeMap;
  }
  constructor() {
  }
};
_TokenAccessScopeObject.discriminator = void 0;
_TokenAccessScopeObject.attributeTypeMap = [
  {
    "name": "type",
    "baseName": "type",
    "type": "TokenAccessScopeObjectTypeEnum",
    "format": ""
  },
  {
    "name": "identifier",
    "baseName": "identifier",
    "type": "string",
    "format": ""
  }
];
var TokenAccessScopeObject = _TokenAccessScopeObject;

// models/TokenValidationResponse.ts
var _TokenValidationResponse = class _TokenValidationResponse {
  static getAttributeTypeMap() {
    return _TokenValidationResponse.attributeTypeMap;
  }
  constructor() {
  }
};
_TokenValidationResponse.discriminator = void 0;
_TokenValidationResponse.attributeTypeMap = [
  {
    "name": "creation_time_in_millis",
    "baseName": "creation_time_in_millis",
    "type": "number",
    "format": "float"
  },
  {
    "name": "expiration_time_in_millis",
    "baseName": "expiration_time_in_millis",
    "type": "number",
    "format": "float"
  },
  {
    "name": "scope",
    "baseName": "scope",
    "type": "Scope",
    "format": ""
  },
  {
    "name": "valid_for_user_id",
    "baseName": "valid_for_user_id",
    "type": "string",
    "format": ""
  },
  {
    "name": "token_type",
    "baseName": "token_type",
    "type": "string",
    "format": ""
  }
];
var TokenValidationResponse = _TokenValidationResponse;

// models/URL.ts
var _URL = class _URL {
  static getAttributeTypeMap() {
    return _URL.attributeTypeMap;
  }
  constructor() {
  }
};
_URL.discriminator = void 0;
_URL.attributeTypeMap = [
  {
    "name": "authentication",
    "baseName": "authentication",
    "type": "Authentication",
    "format": ""
  },
  {
    "name": "parameters",
    "baseName": "parameters",
    "type": "Array<ParametersListItem>",
    "format": ""
  },
  {
    "name": "url",
    "baseName": "url",
    "type": "string",
    "format": ""
  },
  {
    "name": "reference",
    "baseName": "reference",
    "type": "string",
    "format": ""
  }
];
var URL2 = _URL;

// models/URLInput.ts
var _URLInput = class _URLInput {
  static getAttributeTypeMap() {
    return _URLInput.attributeTypeMap;
  }
  constructor() {
  }
};
_URLInput.discriminator = void 0;
_URLInput.attributeTypeMap = [
  {
    "name": "authentication",
    "baseName": "authentication",
    "type": "AuthenticationInput",
    "format": ""
  },
  {
    "name": "parameters",
    "baseName": "parameters",
    "type": "Array<ParametersListItemInput>",
    "format": ""
  },
  {
    "name": "url",
    "baseName": "url",
    "type": "string",
    "format": ""
  },
  {
    "name": "reference",
    "baseName": "reference",
    "type": "string",
    "format": ""
  }
];
var URLInput = _URLInput;

// models/URLInputMandatory.ts
var _URLInputMandatory = class _URLInputMandatory {
  static getAttributeTypeMap() {
    return _URLInputMandatory.attributeTypeMap;
  }
  constructor() {
  }
};
_URLInputMandatory.discriminator = void 0;
_URLInputMandatory.attributeTypeMap = [
  {
    "name": "authentication",
    "baseName": "authentication",
    "type": "AuthenticationInput",
    "format": ""
  },
  {
    "name": "parameters",
    "baseName": "parameters",
    "type": "Array<ParametersListItemInput>",
    "format": ""
  },
  {
    "name": "url",
    "baseName": "url",
    "type": "string",
    "format": ""
  },
  {
    "name": "reference",
    "baseName": "reference",
    "type": "string",
    "format": ""
  }
];
var URLInputMandatory = _URLInputMandatory;

// models/UnparameterizeMetadataRequest.ts
var _UnparameterizeMetadataRequest = class _UnparameterizeMetadataRequest {
  static getAttributeTypeMap() {
    return _UnparameterizeMetadataRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_UnparameterizeMetadataRequest.discriminator = void 0;
_UnparameterizeMetadataRequest.attributeTypeMap = [
  {
    "name": "metadata_type",
    "baseName": "metadata_type",
    "type": "UnparameterizeMetadataRequestMetadataTypeEnum",
    "format": ""
  },
  {
    "name": "metadata_identifier",
    "baseName": "metadata_identifier",
    "type": "string",
    "format": ""
  },
  {
    "name": "field_type",
    "baseName": "field_type",
    "type": "UnparameterizeMetadataRequestFieldTypeEnum",
    "format": ""
  },
  {
    "name": "field_name",
    "baseName": "field_name",
    "type": "string",
    "format": ""
  },
  {
    "name": "value",
    "baseName": "value",
    "type": "string",
    "format": ""
  }
];
var UnparameterizeMetadataRequest = _UnparameterizeMetadataRequest;

// models/UnpublishMetadataRequest.ts
var _UnpublishMetadataRequest = class _UnpublishMetadataRequest {
  static getAttributeTypeMap() {
    return _UnpublishMetadataRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_UnpublishMetadataRequest.discriminator = void 0;
_UnpublishMetadataRequest.attributeTypeMap = [
  {
    "name": "force",
    "baseName": "force",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "include_dependencies",
    "baseName": "include_dependencies",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "metadata",
    "baseName": "metadata",
    "type": "Array<PublishMetadataListItem>",
    "format": ""
  },
  {
    "name": "org_identifiers",
    "baseName": "org_identifiers",
    "type": "Array<string>",
    "format": ""
  }
];
var UnpublishMetadataRequest = _UnpublishMetadataRequest;

// models/UpdateConfigRequest.ts
var _UpdateConfigRequest = class _UpdateConfigRequest {
  static getAttributeTypeMap() {
    return _UpdateConfigRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_UpdateConfigRequest.discriminator = void 0;
_UpdateConfigRequest.attributeTypeMap = [
  {
    "name": "username",
    "baseName": "username",
    "type": "string",
    "format": ""
  },
  {
    "name": "access_token",
    "baseName": "access_token",
    "type": "string",
    "format": ""
  },
  {
    "name": "org_identifier",
    "baseName": "org_identifier",
    "type": "string",
    "format": ""
  },
  {
    "name": "branch_names",
    "baseName": "branch_names",
    "type": "Array<string>",
    "format": ""
  },
  {
    "name": "commit_branch_name",
    "baseName": "commit_branch_name",
    "type": "string",
    "format": ""
  },
  {
    "name": "enable_guid_mapping",
    "baseName": "enable_guid_mapping",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "configuration_branch_name",
    "baseName": "configuration_branch_name",
    "type": "string",
    "format": ""
  }
];
var UpdateConfigRequest = _UpdateConfigRequest;

// models/UpdateConnectionRequest.ts
var _UpdateConnectionRequest = class _UpdateConnectionRequest {
  static getAttributeTypeMap() {
    return _UpdateConnectionRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_UpdateConnectionRequest.discriminator = void 0;
_UpdateConnectionRequest.attributeTypeMap = [
  {
    "name": "connection_identifier",
    "baseName": "connection_identifier",
    "type": "string",
    "format": ""
  },
  {
    "name": "name",
    "baseName": "name",
    "type": "string",
    "format": ""
  },
  {
    "name": "description",
    "baseName": "description",
    "type": "string",
    "format": ""
  },
  {
    "name": "data_warehouse_config",
    "baseName": "data_warehouse_config",
    "type": "any",
    "format": ""
  },
  {
    "name": "validate",
    "baseName": "validate",
    "type": "boolean",
    "format": ""
  }
];
var UpdateConnectionRequest = _UpdateConnectionRequest;

// models/UpdateConnectionV2Request.ts
var _UpdateConnectionV2Request = class _UpdateConnectionV2Request {
  static getAttributeTypeMap() {
    return _UpdateConnectionV2Request.attributeTypeMap;
  }
  constructor() {
  }
};
_UpdateConnectionV2Request.discriminator = void 0;
_UpdateConnectionV2Request.attributeTypeMap = [
  {
    "name": "name",
    "baseName": "name",
    "type": "string",
    "format": ""
  },
  {
    "name": "description",
    "baseName": "description",
    "type": "string",
    "format": ""
  },
  {
    "name": "data_warehouse_config",
    "baseName": "data_warehouse_config",
    "type": "any",
    "format": ""
  },
  {
    "name": "validate",
    "baseName": "validate",
    "type": "boolean",
    "format": ""
  }
];
var UpdateConnectionV2Request = _UpdateConnectionV2Request;

// models/UpdateCustomActionRequest.ts
var _UpdateCustomActionRequest = class _UpdateCustomActionRequest {
  static getAttributeTypeMap() {
    return _UpdateCustomActionRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_UpdateCustomActionRequest.discriminator = void 0;
_UpdateCustomActionRequest.attributeTypeMap = [
  {
    "name": "action_details",
    "baseName": "action_details",
    "type": "UpdateCustomActionRequestActionDetails",
    "format": ""
  },
  {
    "name": "associate_metadata",
    "baseName": "associate_metadata",
    "type": "Array<AssociateMetadataInput>",
    "format": ""
  },
  {
    "name": "default_action_config",
    "baseName": "default_action_config",
    "type": "UpdateCustomActionRequestDefaultActionConfig",
    "format": ""
  },
  {
    "name": "group_identifiers",
    "baseName": "group_identifiers",
    "type": "Array<string>",
    "format": ""
  },
  {
    "name": "name",
    "baseName": "name",
    "type": "string",
    "format": ""
  },
  {
    "name": "operation",
    "baseName": "operation",
    "type": "UpdateCustomActionRequestOperationEnum",
    "format": ""
  }
];
var UpdateCustomActionRequest = _UpdateCustomActionRequest;

// models/UpdateCustomActionRequestActionDetails.ts
var _UpdateCustomActionRequestActionDetails = class _UpdateCustomActionRequestActionDetails {
  static getAttributeTypeMap() {
    return _UpdateCustomActionRequestActionDetails.attributeTypeMap;
  }
  constructor() {
  }
};
_UpdateCustomActionRequestActionDetails.discriminator = void 0;
_UpdateCustomActionRequestActionDetails.attributeTypeMap = [
  {
    "name": "CALLBACK",
    "baseName": "CALLBACK",
    "type": "CALLBACKInput",
    "format": ""
  },
  {
    "name": "URL",
    "baseName": "URL",
    "type": "URLInput",
    "format": ""
  }
];
var UpdateCustomActionRequestActionDetails = _UpdateCustomActionRequestActionDetails;

// models/UpdateCustomActionRequestDefaultActionConfig.ts
var _UpdateCustomActionRequestDefaultActionConfig = class _UpdateCustomActionRequestDefaultActionConfig {
  static getAttributeTypeMap() {
    return _UpdateCustomActionRequestDefaultActionConfig.attributeTypeMap;
  }
  constructor() {
  }
};
_UpdateCustomActionRequestDefaultActionConfig.discriminator = void 0;
_UpdateCustomActionRequestDefaultActionConfig.attributeTypeMap = [
  {
    "name": "visibility",
    "baseName": "visibility",
    "type": "boolean",
    "format": ""
  }
];
var UpdateCustomActionRequestDefaultActionConfig = _UpdateCustomActionRequestDefaultActionConfig;

// models/UpdateDbtConnectionRequest.ts
var _UpdateDbtConnectionRequest = class _UpdateDbtConnectionRequest {
  static getAttributeTypeMap() {
    return _UpdateDbtConnectionRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_UpdateDbtConnectionRequest.discriminator = void 0;
_UpdateDbtConnectionRequest.attributeTypeMap = [
  {
    "name": "dbt_connection_identifier",
    "baseName": "dbt_connection_identifier",
    "type": "string",
    "format": ""
  },
  {
    "name": "connection_name",
    "baseName": "connection_name",
    "type": "string",
    "format": ""
  },
  {
    "name": "database_name",
    "baseName": "database_name",
    "type": "string",
    "format": ""
  },
  {
    "name": "import_type",
    "baseName": "import_type",
    "type": "UpdateDbtConnectionRequestImportTypeEnum",
    "format": ""
  },
  {
    "name": "access_token",
    "baseName": "access_token",
    "type": "string",
    "format": ""
  },
  {
    "name": "dbt_url",
    "baseName": "dbt_url",
    "type": "string",
    "format": ""
  },
  {
    "name": "account_id",
    "baseName": "account_id",
    "type": "string",
    "format": ""
  },
  {
    "name": "project_id",
    "baseName": "project_id",
    "type": "string",
    "format": ""
  },
  {
    "name": "dbt_env_id",
    "baseName": "dbt_env_id",
    "type": "string",
    "format": ""
  },
  {
    "name": "project_name",
    "baseName": "project_name",
    "type": "string",
    "format": ""
  },
  {
    "name": "file_content",
    "baseName": "file_content",
    "type": "HttpFile",
    "format": "binary"
  }
];
var UpdateDbtConnectionRequest = _UpdateDbtConnectionRequest;

// models/UpdateMetadataHeaderRequest.ts
var _UpdateMetadataHeaderRequest = class _UpdateMetadataHeaderRequest {
  static getAttributeTypeMap() {
    return _UpdateMetadataHeaderRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_UpdateMetadataHeaderRequest.discriminator = void 0;
_UpdateMetadataHeaderRequest.attributeTypeMap = [
  {
    "name": "headers_update",
    "baseName": "headers_update",
    "type": "Array<HeaderUpdateInput>",
    "format": ""
  },
  {
    "name": "org_identifier",
    "baseName": "org_identifier",
    "type": "string",
    "format": ""
  }
];
var UpdateMetadataHeaderRequest = _UpdateMetadataHeaderRequest;

// models/UpdateMetadataObjIdRequest.ts
var _UpdateMetadataObjIdRequest = class _UpdateMetadataObjIdRequest {
  static getAttributeTypeMap() {
    return _UpdateMetadataObjIdRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_UpdateMetadataObjIdRequest.discriminator = void 0;
_UpdateMetadataObjIdRequest.attributeTypeMap = [
  {
    "name": "metadata",
    "baseName": "metadata",
    "type": "Array<UpdateObjIdInput>",
    "format": ""
  }
];
var UpdateMetadataObjIdRequest = _UpdateMetadataObjIdRequest;

// models/UpdateObjIdInput.ts
var _UpdateObjIdInput = class _UpdateObjIdInput {
  static getAttributeTypeMap() {
    return _UpdateObjIdInput.attributeTypeMap;
  }
  constructor() {
  }
};
_UpdateObjIdInput.discriminator = void 0;
_UpdateObjIdInput.attributeTypeMap = [
  {
    "name": "metadata_identifier",
    "baseName": "metadata_identifier",
    "type": "string",
    "format": ""
  },
  {
    "name": "type",
    "baseName": "type",
    "type": "UpdateObjIdInputTypeEnum",
    "format": ""
  },
  {
    "name": "current_obj_id",
    "baseName": "current_obj_id",
    "type": "string",
    "format": ""
  },
  {
    "name": "new_obj_id",
    "baseName": "new_obj_id",
    "type": "string",
    "format": ""
  }
];
var UpdateObjIdInput = _UpdateObjIdInput;

// models/UpdateOrgRequest.ts
var _UpdateOrgRequest = class _UpdateOrgRequest {
  static getAttributeTypeMap() {
    return _UpdateOrgRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_UpdateOrgRequest.discriminator = void 0;
_UpdateOrgRequest.attributeTypeMap = [
  {
    "name": "name",
    "baseName": "name",
    "type": "string",
    "format": ""
  },
  {
    "name": "description",
    "baseName": "description",
    "type": "string",
    "format": ""
  },
  {
    "name": "user_identifiers",
    "baseName": "user_identifiers",
    "type": "Array<string>",
    "format": ""
  },
  {
    "name": "group_identifiers",
    "baseName": "group_identifiers",
    "type": "Array<string>",
    "format": ""
  },
  {
    "name": "operation",
    "baseName": "operation",
    "type": "UpdateOrgRequestOperationEnum",
    "format": ""
  }
];
var UpdateOrgRequest = _UpdateOrgRequest;

// models/UpdateRoleRequest.ts
var _UpdateRoleRequest = class _UpdateRoleRequest {
  static getAttributeTypeMap() {
    return _UpdateRoleRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_UpdateRoleRequest.discriminator = void 0;
_UpdateRoleRequest.attributeTypeMap = [
  {
    "name": "name",
    "baseName": "name",
    "type": "string",
    "format": ""
  },
  {
    "name": "description",
    "baseName": "description",
    "type": "string",
    "format": ""
  },
  {
    "name": "privileges",
    "baseName": "privileges",
    "type": "Array<UpdateRoleRequestPrivilegesEnum>",
    "format": ""
  }
];
var UpdateRoleRequest = _UpdateRoleRequest;

// models/UpdateScheduleRequest.ts
var _UpdateScheduleRequest = class _UpdateScheduleRequest {
  static getAttributeTypeMap() {
    return _UpdateScheduleRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_UpdateScheduleRequest.discriminator = void 0;
_UpdateScheduleRequest.attributeTypeMap = [
  {
    "name": "name",
    "baseName": "name",
    "type": "string",
    "format": ""
  },
  {
    "name": "description",
    "baseName": "description",
    "type": "string",
    "format": ""
  },
  {
    "name": "metadata_type",
    "baseName": "metadata_type",
    "type": "UpdateScheduleRequestMetadataTypeEnum",
    "format": ""
  },
  {
    "name": "metadata_identifier",
    "baseName": "metadata_identifier",
    "type": "string",
    "format": ""
  },
  {
    "name": "file_format",
    "baseName": "file_format",
    "type": "UpdateScheduleRequestFileFormatEnum",
    "format": ""
  },
  {
    "name": "liveboard_options",
    "baseName": "liveboard_options",
    "type": "UpdateScheduleRequestLiveboardOptions",
    "format": ""
  },
  {
    "name": "pdf_options",
    "baseName": "pdf_options",
    "type": "UpdateScheduleRequestPdfOptions",
    "format": ""
  },
  {
    "name": "time_zone",
    "baseName": "time_zone",
    "type": "UpdateScheduleRequestTimeZoneEnum",
    "format": ""
  },
  {
    "name": "frequency",
    "baseName": "frequency",
    "type": "UpdateScheduleRequestFrequency",
    "format": ""
  },
  {
    "name": "recipient_details",
    "baseName": "recipient_details",
    "type": "UpdateScheduleRequestRecipientDetails",
    "format": ""
  },
  {
    "name": "status",
    "baseName": "status",
    "type": "UpdateScheduleRequestStatusEnum",
    "format": ""
  },
  {
    "name": "personalised_view_id",
    "baseName": "personalised_view_id",
    "type": "string",
    "format": ""
  }
];
var UpdateScheduleRequest = _UpdateScheduleRequest;

// models/UpdateScheduleRequestFrequency.ts
var _UpdateScheduleRequestFrequency = class _UpdateScheduleRequestFrequency {
  static getAttributeTypeMap() {
    return _UpdateScheduleRequestFrequency.attributeTypeMap;
  }
  constructor() {
  }
};
_UpdateScheduleRequestFrequency.discriminator = void 0;
_UpdateScheduleRequestFrequency.attributeTypeMap = [
  {
    "name": "cron_expression",
    "baseName": "cron_expression",
    "type": "CronExpressionInput",
    "format": ""
  }
];
var UpdateScheduleRequestFrequency = _UpdateScheduleRequestFrequency;

// models/UpdateScheduleRequestLiveboardOptions.ts
var _UpdateScheduleRequestLiveboardOptions = class _UpdateScheduleRequestLiveboardOptions {
  static getAttributeTypeMap() {
    return _UpdateScheduleRequestLiveboardOptions.attributeTypeMap;
  }
  constructor() {
  }
};
_UpdateScheduleRequestLiveboardOptions.discriminator = void 0;
_UpdateScheduleRequestLiveboardOptions.attributeTypeMap = [
  {
    "name": "visualization_identifiers",
    "baseName": "visualization_identifiers",
    "type": "Array<string>",
    "format": ""
  }
];
var UpdateScheduleRequestLiveboardOptions = _UpdateScheduleRequestLiveboardOptions;

// models/UpdateScheduleRequestPdfOptions.ts
var _UpdateScheduleRequestPdfOptions = class _UpdateScheduleRequestPdfOptions {
  static getAttributeTypeMap() {
    return _UpdateScheduleRequestPdfOptions.attributeTypeMap;
  }
  constructor() {
  }
};
_UpdateScheduleRequestPdfOptions.discriminator = void 0;
_UpdateScheduleRequestPdfOptions.attributeTypeMap = [
  {
    "name": "complete_liveboard",
    "baseName": "complete_liveboard",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "include_cover_page",
    "baseName": "include_cover_page",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "include_custom_logo",
    "baseName": "include_custom_logo",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "include_filter_page",
    "baseName": "include_filter_page",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "include_page_number",
    "baseName": "include_page_number",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "page_footer_text",
    "baseName": "page_footer_text",
    "type": "string",
    "format": ""
  },
  {
    "name": "page_orientation",
    "baseName": "page_orientation",
    "type": "string",
    "format": ""
  },
  {
    "name": "page_size",
    "baseName": "page_size",
    "type": "UpdateScheduleRequestPdfOptionsPageSizeEnum",
    "format": ""
  },
  {
    "name": "truncate_table",
    "baseName": "truncate_table",
    "type": "boolean",
    "format": ""
  }
];
var UpdateScheduleRequestPdfOptions = _UpdateScheduleRequestPdfOptions;

// models/UpdateScheduleRequestRecipientDetails.ts
var _UpdateScheduleRequestRecipientDetails = class _UpdateScheduleRequestRecipientDetails {
  static getAttributeTypeMap() {
    return _UpdateScheduleRequestRecipientDetails.attributeTypeMap;
  }
  constructor() {
  }
};
_UpdateScheduleRequestRecipientDetails.discriminator = void 0;
_UpdateScheduleRequestRecipientDetails.attributeTypeMap = [
  {
    "name": "emails",
    "baseName": "emails",
    "type": "Array<string>",
    "format": ""
  },
  {
    "name": "principals",
    "baseName": "principals",
    "type": "Array<PrincipalsListItemInput>",
    "format": ""
  }
];
var UpdateScheduleRequestRecipientDetails = _UpdateScheduleRequestRecipientDetails;

// models/UpdateSystemConfigRequest.ts
var _UpdateSystemConfigRequest = class _UpdateSystemConfigRequest {
  static getAttributeTypeMap() {
    return _UpdateSystemConfigRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_UpdateSystemConfigRequest.discriminator = void 0;
_UpdateSystemConfigRequest.attributeTypeMap = [
  {
    "name": "configuration",
    "baseName": "configuration",
    "type": "any",
    "format": ""
  }
];
var UpdateSystemConfigRequest = _UpdateSystemConfigRequest;

// models/UpdateTagRequest.ts
var _UpdateTagRequest = class _UpdateTagRequest {
  static getAttributeTypeMap() {
    return _UpdateTagRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_UpdateTagRequest.discriminator = void 0;
_UpdateTagRequest.attributeTypeMap = [
  {
    "name": "name",
    "baseName": "name",
    "type": "string",
    "format": ""
  },
  {
    "name": "color",
    "baseName": "color",
    "type": "string",
    "format": ""
  }
];
var UpdateTagRequest = _UpdateTagRequest;

// models/UpdateUserGroupRequest.ts
var _UpdateUserGroupRequest = class _UpdateUserGroupRequest {
  static getAttributeTypeMap() {
    return _UpdateUserGroupRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_UpdateUserGroupRequest.discriminator = void 0;
_UpdateUserGroupRequest.attributeTypeMap = [
  {
    "name": "name",
    "baseName": "name",
    "type": "string",
    "format": ""
  },
  {
    "name": "default_liveboard_identifiers",
    "baseName": "default_liveboard_identifiers",
    "type": "Array<string>",
    "format": ""
  },
  {
    "name": "description",
    "baseName": "description",
    "type": "string",
    "format": ""
  },
  {
    "name": "display_name",
    "baseName": "display_name",
    "type": "string",
    "format": ""
  },
  {
    "name": "privileges",
    "baseName": "privileges",
    "type": "Array<UpdateUserGroupRequestPrivilegesEnum>",
    "format": ""
  },
  {
    "name": "sub_group_identifiers",
    "baseName": "sub_group_identifiers",
    "type": "Array<string>",
    "format": ""
  },
  {
    "name": "type",
    "baseName": "type",
    "type": "UpdateUserGroupRequestTypeEnum",
    "format": ""
  },
  {
    "name": "user_identifiers",
    "baseName": "user_identifiers",
    "type": "Array<string>",
    "format": ""
  },
  {
    "name": "visibility",
    "baseName": "visibility",
    "type": "UpdateUserGroupRequestVisibilityEnum",
    "format": ""
  },
  {
    "name": "role_identifiers",
    "baseName": "role_identifiers",
    "type": "Array<string>",
    "format": ""
  },
  {
    "name": "operation",
    "baseName": "operation",
    "type": "UpdateUserGroupRequestOperationEnum",
    "format": ""
  }
];
var UpdateUserGroupRequest = _UpdateUserGroupRequest;

// models/UpdateUserRequest.ts
var _UpdateUserRequest = class _UpdateUserRequest {
  static getAttributeTypeMap() {
    return _UpdateUserRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_UpdateUserRequest.discriminator = void 0;
_UpdateUserRequest.attributeTypeMap = [
  {
    "name": "name",
    "baseName": "name",
    "type": "string",
    "format": ""
  },
  {
    "name": "display_name",
    "baseName": "display_name",
    "type": "string",
    "format": ""
  },
  {
    "name": "visibility",
    "baseName": "visibility",
    "type": "UpdateUserRequestVisibilityEnum",
    "format": ""
  },
  {
    "name": "email",
    "baseName": "email",
    "type": "string",
    "format": ""
  },
  {
    "name": "account_status",
    "baseName": "account_status",
    "type": "UpdateUserRequestAccountStatusEnum",
    "format": ""
  },
  {
    "name": "notify_on_share",
    "baseName": "notify_on_share",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "show_onboarding_experience",
    "baseName": "show_onboarding_experience",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "onboarding_experience_completed",
    "baseName": "onboarding_experience_completed",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "account_type",
    "baseName": "account_type",
    "type": "UpdateUserRequestAccountTypeEnum",
    "format": ""
  },
  {
    "name": "group_identifiers",
    "baseName": "group_identifiers",
    "type": "Array<string>",
    "format": ""
  },
  {
    "name": "home_liveboard_identifier",
    "baseName": "home_liveboard_identifier",
    "type": "string",
    "format": ""
  },
  {
    "name": "favorite_metadata",
    "baseName": "favorite_metadata",
    "type": "Array<FavoriteMetadataInput>",
    "format": ""
  },
  {
    "name": "org_identifiers",
    "baseName": "org_identifiers",
    "type": "Array<string>",
    "format": ""
  },
  {
    "name": "operation",
    "baseName": "operation",
    "type": "UpdateUserRequestOperationEnum",
    "format": ""
  },
  {
    "name": "preferred_locale",
    "baseName": "preferred_locale",
    "type": "UpdateUserRequestPreferredLocaleEnum",
    "format": ""
  },
  {
    "name": "extended_properties",
    "baseName": "extended_properties",
    "type": "any",
    "format": ""
  },
  {
    "name": "extended_preferences",
    "baseName": "extended_preferences",
    "type": "any",
    "format": ""
  }
];
var UpdateUserRequest = _UpdateUserRequest;

// models/UpdateVariableRequest.ts
var _UpdateVariableRequest = class _UpdateVariableRequest {
  static getAttributeTypeMap() {
    return _UpdateVariableRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_UpdateVariableRequest.discriminator = void 0;
_UpdateVariableRequest.attributeTypeMap = [
  {
    "name": "name",
    "baseName": "name",
    "type": "string",
    "format": ""
  },
  {
    "name": "operation",
    "baseName": "operation",
    "type": "UpdateVariableRequestOperationEnum",
    "format": ""
  },
  {
    "name": "values",
    "baseName": "values",
    "type": "Array<InputVariableValue>",
    "format": ""
  }
];
var UpdateVariableRequest = _UpdateVariableRequest;

// models/UpdateVariableValuesRequest.ts
var _UpdateVariableValuesRequest = class _UpdateVariableValuesRequest {
  static getAttributeTypeMap() {
    return _UpdateVariableValuesRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_UpdateVariableValuesRequest.discriminator = void 0;
_UpdateVariableValuesRequest.attributeTypeMap = [
  {
    "name": "variable_updates",
    "baseName": "variable_updates",
    "type": "Array<VariableValueInput>",
    "format": ""
  },
  {
    "name": "operation",
    "baseName": "operation",
    "type": "UpdateVariableValuesRequestOperationEnum",
    "format": ""
  }
];
var UpdateVariableValuesRequest = _UpdateVariableValuesRequest;

// models/User.ts
var _User = class _User {
  static getAttributeTypeMap() {
    return _User.attributeTypeMap;
  }
  constructor() {
  }
};
_User.discriminator = void 0;
_User.attributeTypeMap = [
  {
    "name": "id",
    "baseName": "id",
    "type": "string",
    "format": ""
  },
  {
    "name": "name",
    "baseName": "name",
    "type": "string",
    "format": ""
  },
  {
    "name": "display_name",
    "baseName": "display_name",
    "type": "string",
    "format": ""
  },
  {
    "name": "visibility",
    "baseName": "visibility",
    "type": "UserVisibilityEnum",
    "format": ""
  },
  {
    "name": "author_id",
    "baseName": "author_id",
    "type": "string",
    "format": ""
  },
  {
    "name": "can_change_password",
    "baseName": "can_change_password",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "complete_detail",
    "baseName": "complete_detail",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "creation_time_in_millis",
    "baseName": "creation_time_in_millis",
    "type": "number",
    "format": "float"
  },
  {
    "name": "current_org",
    "baseName": "current_org",
    "type": "Org",
    "format": ""
  },
  {
    "name": "deleted",
    "baseName": "deleted",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "deprecated",
    "baseName": "deprecated",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "account_type",
    "baseName": "account_type",
    "type": "UserAccountTypeEnum",
    "format": ""
  },
  {
    "name": "account_status",
    "baseName": "account_status",
    "type": "UserAccountStatusEnum",
    "format": ""
  },
  {
    "name": "email",
    "baseName": "email",
    "type": "string",
    "format": ""
  },
  {
    "name": "expiration_time_in_millis",
    "baseName": "expiration_time_in_millis",
    "type": "number",
    "format": "float"
  },
  {
    "name": "external",
    "baseName": "external",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "favorite_metadata",
    "baseName": "favorite_metadata",
    "type": "Array<FavoriteMetadataItem>",
    "format": ""
  },
  {
    "name": "first_login_time_in_millis",
    "baseName": "first_login_time_in_millis",
    "type": "number",
    "format": "float"
  },
  {
    "name": "group_mask",
    "baseName": "group_mask",
    "type": "number",
    "format": "int32"
  },
  {
    "name": "hidden",
    "baseName": "hidden",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "home_liveboard",
    "baseName": "home_liveboard",
    "type": "ObjectIDAndName",
    "format": ""
  },
  {
    "name": "incomplete_details",
    "baseName": "incomplete_details",
    "type": "any",
    "format": ""
  },
  {
    "name": "is_first_login",
    "baseName": "is_first_login",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "modification_time_in_millis",
    "baseName": "modification_time_in_millis",
    "type": "number",
    "format": "float"
  },
  {
    "name": "modifier_id",
    "baseName": "modifier_id",
    "type": "string",
    "format": ""
  },
  {
    "name": "notify_on_share",
    "baseName": "notify_on_share",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "onboarding_experience_completed",
    "baseName": "onboarding_experience_completed",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "orgs",
    "baseName": "orgs",
    "type": "Array<Org>",
    "format": ""
  },
  {
    "name": "owner_id",
    "baseName": "owner_id",
    "type": "string",
    "format": ""
  },
  {
    "name": "parent_type",
    "baseName": "parent_type",
    "type": "UserParentTypeEnum",
    "format": ""
  },
  {
    "name": "privileges",
    "baseName": "privileges",
    "type": "Array<string>",
    "format": ""
  },
  {
    "name": "show_onboarding_experience",
    "baseName": "show_onboarding_experience",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "super_user",
    "baseName": "super_user",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "system_user",
    "baseName": "system_user",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "tags",
    "baseName": "tags",
    "type": "Array<ObjectIDAndName>",
    "format": ""
  },
  {
    "name": "tenant_id",
    "baseName": "tenant_id",
    "type": "string",
    "format": ""
  },
  {
    "name": "user_groups",
    "baseName": "user_groups",
    "type": "Array<ObjectIDAndName>",
    "format": ""
  },
  {
    "name": "user_inherited_groups",
    "baseName": "user_inherited_groups",
    "type": "Array<ObjectIDAndName>",
    "format": ""
  },
  {
    "name": "welcome_email_sent",
    "baseName": "welcome_email_sent",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "org_privileges",
    "baseName": "org_privileges",
    "type": "any",
    "format": ""
  },
  {
    "name": "preferred_locale",
    "baseName": "preferred_locale",
    "type": "string",
    "format": ""
  },
  {
    "name": "extended_properties",
    "baseName": "extended_properties",
    "type": "any",
    "format": ""
  },
  {
    "name": "extended_preferences",
    "baseName": "extended_preferences",
    "type": "any",
    "format": ""
  },
  {
    "name": "user_parameters",
    "baseName": "user_parameters",
    "type": "any",
    "format": ""
  },
  {
    "name": "access_control_properties",
    "baseName": "access_control_properties",
    "type": "any",
    "format": ""
  }
];
var User = _User;

// models/UserGroup.ts
var _UserGroup = class _UserGroup {
  static getAttributeTypeMap() {
    return _UserGroup.attributeTypeMap;
  }
  constructor() {
  }
};
_UserGroup.discriminator = void 0;
_UserGroup.attributeTypeMap = [
  {
    "name": "id",
    "baseName": "id",
    "type": "string",
    "format": ""
  },
  {
    "name": "name",
    "baseName": "name",
    "type": "string",
    "format": ""
  }
];
var UserGroup = _UserGroup;

// models/UserGroupResponse.ts
var _UserGroupResponse = class _UserGroupResponse {
  static getAttributeTypeMap() {
    return _UserGroupResponse.attributeTypeMap;
  }
  constructor() {
  }
};
_UserGroupResponse.discriminator = void 0;
_UserGroupResponse.attributeTypeMap = [
  {
    "name": "author_id",
    "baseName": "author_id",
    "type": "string",
    "format": ""
  },
  {
    "name": "complete_detail",
    "baseName": "complete_detail",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "content",
    "baseName": "content",
    "type": "any",
    "format": ""
  },
  {
    "name": "creation_time_in_millis",
    "baseName": "creation_time_in_millis",
    "type": "number",
    "format": "float"
  },
  {
    "name": "default_liveboards",
    "baseName": "default_liveboards",
    "type": "Array<UserGroup>",
    "format": ""
  },
  {
    "name": "deleted",
    "baseName": "deleted",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "deprecated",
    "baseName": "deprecated",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "description",
    "baseName": "description",
    "type": "string",
    "format": ""
  },
  {
    "name": "display_name",
    "baseName": "display_name",
    "type": "string",
    "format": ""
  },
  {
    "name": "external",
    "baseName": "external",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "generation_number",
    "baseName": "generation_number",
    "type": "number",
    "format": "int32"
  },
  {
    "name": "hidden",
    "baseName": "hidden",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "id",
    "baseName": "id",
    "type": "string",
    "format": ""
  },
  {
    "name": "index",
    "baseName": "index",
    "type": "number",
    "format": "int32"
  },
  {
    "name": "index_version",
    "baseName": "index_version",
    "type": "number",
    "format": "int32"
  },
  {
    "name": "metadata_version",
    "baseName": "metadata_version",
    "type": "number",
    "format": "int32"
  },
  {
    "name": "modification_time_in_millis",
    "baseName": "modification_time_in_millis",
    "type": "number",
    "format": "float"
  },
  {
    "name": "modifier_id",
    "baseName": "modifier_id",
    "type": "string",
    "format": ""
  },
  {
    "name": "name",
    "baseName": "name",
    "type": "string",
    "format": ""
  },
  {
    "name": "orgs",
    "baseName": "orgs",
    "type": "Array<UserGroup>",
    "format": ""
  },
  {
    "name": "owner_id",
    "baseName": "owner_id",
    "type": "string",
    "format": ""
  },
  {
    "name": "parent_type",
    "baseName": "parent_type",
    "type": "UserGroupResponseParentTypeEnum",
    "format": ""
  },
  {
    "name": "privileges",
    "baseName": "privileges",
    "type": "Array<string>",
    "format": ""
  },
  {
    "name": "sub_groups",
    "baseName": "sub_groups",
    "type": "Array<UserGroup>",
    "format": ""
  },
  {
    "name": "system_group",
    "baseName": "system_group",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "tags",
    "baseName": "tags",
    "type": "Array<UserGroup>",
    "format": ""
  },
  {
    "name": "type",
    "baseName": "type",
    "type": "UserGroupResponseTypeEnum",
    "format": ""
  },
  {
    "name": "users",
    "baseName": "users",
    "type": "Array<UserGroup>",
    "format": ""
  },
  {
    "name": "visibility",
    "baseName": "visibility",
    "type": "UserGroupResponseVisibilityEnum",
    "format": ""
  },
  {
    "name": "roles",
    "baseName": "roles",
    "type": "Array<Role>",
    "format": ""
  }
];
var UserGroupResponse = _UserGroupResponse;

// models/UserInfo.ts
var _UserInfo = class _UserInfo {
  static getAttributeTypeMap() {
    return _UserInfo.attributeTypeMap;
  }
  constructor() {
  }
};
_UserInfo.discriminator = void 0;
_UserInfo.attributeTypeMap = [
  {
    "name": "id",
    "baseName": "id",
    "type": "string",
    "format": ""
  },
  {
    "name": "name",
    "baseName": "name",
    "type": "string",
    "format": ""
  }
];
var UserInfo = _UserInfo;

// models/UserObject.ts
var _UserObject = class _UserObject {
  static getAttributeTypeMap() {
    return _UserObject.attributeTypeMap;
  }
  constructor() {
  }
};
_UserObject.discriminator = void 0;
_UserObject.attributeTypeMap = [
  {
    "name": "type",
    "baseName": "type",
    "type": "UserObjectTypeEnum",
    "format": ""
  },
  {
    "name": "identifier",
    "baseName": "identifier",
    "type": "string",
    "format": ""
  }
];
var UserObject = _UserObject;

// models/UserParameterOptions.ts
var _UserParameterOptions = class _UserParameterOptions {
  static getAttributeTypeMap() {
    return _UserParameterOptions.attributeTypeMap;
  }
  constructor() {
  }
};
_UserParameterOptions.discriminator = void 0;
_UserParameterOptions.attributeTypeMap = [
  {
    "name": "objects",
    "baseName": "objects",
    "type": "Array<UserObject>",
    "format": ""
  },
  {
    "name": "runtime_filters",
    "baseName": "runtime_filters",
    "type": "Array<RuntimeFilters>",
    "format": ""
  },
  {
    "name": "runtime_sorts",
    "baseName": "runtime_sorts",
    "type": "Array<RuntimeSorts>",
    "format": ""
  },
  {
    "name": "parameters",
    "baseName": "parameters",
    "type": "Array<RuntimeParameters>",
    "format": ""
  }
];
var UserParameterOptions = _UserParameterOptions;

// models/ValidateMergeRequest.ts
var _ValidateMergeRequest = class _ValidateMergeRequest {
  static getAttributeTypeMap() {
    return _ValidateMergeRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_ValidateMergeRequest.discriminator = void 0;
_ValidateMergeRequest.attributeTypeMap = [
  {
    "name": "source_branch_name",
    "baseName": "source_branch_name",
    "type": "string",
    "format": ""
  },
  {
    "name": "target_branch_name",
    "baseName": "target_branch_name",
    "type": "string",
    "format": ""
  }
];
var ValidateMergeRequest = _ValidateMergeRequest;

// models/ValidateTokenRequest.ts
var _ValidateTokenRequest = class _ValidateTokenRequest {
  static getAttributeTypeMap() {
    return _ValidateTokenRequest.attributeTypeMap;
  }
  constructor() {
  }
};
_ValidateTokenRequest.discriminator = void 0;
_ValidateTokenRequest.attributeTypeMap = [
  {
    "name": "token",
    "baseName": "token",
    "type": "string",
    "format": ""
  }
];
var ValidateTokenRequest = _ValidateTokenRequest;

// models/Variable.ts
var _Variable = class _Variable {
  static getAttributeTypeMap() {
    return _Variable.attributeTypeMap;
  }
  constructor() {
  }
};
_Variable.discriminator = void 0;
_Variable.attributeTypeMap = [
  {
    "name": "id",
    "baseName": "id",
    "type": "string",
    "format": ""
  },
  {
    "name": "name",
    "baseName": "name",
    "type": "string",
    "format": ""
  },
  {
    "name": "variable_type",
    "baseName": "variable_type",
    "type": "VariableVariableTypeEnum",
    "format": ""
  },
  {
    "name": "sensitive",
    "baseName": "sensitive",
    "type": "boolean",
    "format": ""
  },
  {
    "name": "values",
    "baseName": "values",
    "type": "Array<VariableValue>",
    "format": ""
  }
];
var Variable = _Variable;

// models/VariableDetailInput.ts
var _VariableDetailInput = class _VariableDetailInput {
  static getAttributeTypeMap() {
    return _VariableDetailInput.attributeTypeMap;
  }
  constructor() {
  }
};
_VariableDetailInput.discriminator = void 0;
_VariableDetailInput.attributeTypeMap = [
  {
    "name": "identifier",
    "baseName": "identifier",
    "type": "string",
    "format": ""
  },
  {
    "name": "type",
    "baseName": "type",
    "type": "VariableDetailInputTypeEnum",
    "format": ""
  },
  {
    "name": "name_pattern",
    "baseName": "name_pattern",
    "type": "string",
    "format": ""
  }
];
var VariableDetailInput = _VariableDetailInput;

// models/VariableValue.ts
var _VariableValue = class _VariableValue {
  static getAttributeTypeMap() {
    return _VariableValue.attributeTypeMap;
  }
  constructor() {
  }
};
_VariableValue.discriminator = void 0;
_VariableValue.attributeTypeMap = [
  {
    "name": "value",
    "baseName": "value",
    "type": "string",
    "format": ""
  },
  {
    "name": "org_identifier",
    "baseName": "org_identifier",
    "type": "string",
    "format": ""
  },
  {
    "name": "principal_type",
    "baseName": "principal_type",
    "type": "VariableValuePrincipalTypeEnum",
    "format": ""
  },
  {
    "name": "principal_identifier",
    "baseName": "principal_identifier",
    "type": "string",
    "format": ""
  },
  {
    "name": "priority",
    "baseName": "priority",
    "type": "number",
    "format": "int32"
  }
];
var VariableValue = _VariableValue;

// models/VariableValueInput.ts
var _VariableValueInput = class _VariableValueInput {
  static getAttributeTypeMap() {
    return _VariableValueInput.attributeTypeMap;
  }
  constructor() {
  }
};
_VariableValueInput.discriminator = void 0;
_VariableValueInput.attributeTypeMap = [
  {
    "name": "variable_identifier",
    "baseName": "variable_identifier",
    "type": "string",
    "format": ""
  },
  {
    "name": "variable_values",
    "baseName": "variable_values",
    "type": "Array<InputVariableValue>",
    "format": ""
  }
];
var VariableValueInput = _VariableValueInput;

// middleware.ts
var PromiseMiddlewareWrapper = class {
  constructor(middleware) {
    this.middleware = middleware;
  }
  pre(context) {
    return from(this.middleware.pre(context));
  }
  post(context) {
    return from(this.middleware.post(context));
  }
};

// servers.ts
var ServerConfiguration = class {
  constructor(url, variableConfiguration) {
    this.url = url;
    this.variableConfiguration = variableConfiguration;
  }
  /**
   * Sets the value of the variables of this server. Variables are included in 
   * the `url` of this ServerConfiguration in the form `{variableName}`
   *
   * @param variableConfiguration a partial variable configuration for the 
   * variables contained in the url
   */
  setVariables(variableConfiguration) {
    Object.assign(this.variableConfiguration, variableConfiguration);
  }
  getConfiguration() {
    return this.variableConfiguration;
  }
  getUrl() {
    let replacedUrl = this.url;
    for (const key in this.variableConfiguration) {
      var re = new RegExp("{" + key + "}", "g");
      replacedUrl = replacedUrl.replace(re, this.variableConfiguration[key]);
    }
    return replacedUrl;
  }
  /**
   * Creates a new request context for this server using the url with variables
   * replaced with their respective values and the endpoint of the request appended.
   *
   * @param endpoint the endpoint to be queried on the server
   * @param httpMethod httpMethod to be used
   *
   */
  makeRequestContext(endpoint, httpMethod) {
    return new RequestContext2(this.getUrl() + endpoint, httpMethod);
  }
};
var server1 = new ServerConfiguration("{base-url}", { "base-url": "https://localhost:443" });
var servers = [server1];

// configuration.ts
function createConfiguration(conf = {}) {
  const configuration = {
    baseServer: conf.baseServer !== void 0 ? conf.baseServer : server1,
    httpApi: conf.httpApi || new IsomorphicFetchHttpLibrary(),
    middleware: conf.middleware || [],
    authMethods: configureAuthMethods(conf.authMethods)
  };
  if (conf.promiseMiddleware) {
    conf.promiseMiddleware.forEach(
      (m) => configuration.middleware.push(new PromiseMiddlewareWrapper(m))
    );
  }
  return configuration;
}

// apis/exception.ts
var ApiException = class extends Error {
  constructor(code, message, body, headers) {
    super("HTTP-Code: " + code + "\nMessage: " + message + "\nBody: " + JSON.stringify(body) + "\nHeaders: " + JSON.stringify(headers));
    this.code = code;
    this.body = body;
    this.headers = headers;
  }
};

// apis/baseapi.ts
var BaseAPIRequestFactory = class {
  constructor(configuration) {
    this.configuration = configuration;
  }
};
var RequiredError = class extends Error {
  constructor(api, method, field) {
    super("Required parameter " + field + " was null or undefined when calling " + api + "." + method + ".");
    this.api = api;
    this.method = method;
    this.field = field;
    this.name = "RequiredError";
  }
};

// models/ObjectSerializer.ts
var primitives = [
  "string",
  "boolean",
  "double",
  "integer",
  "long",
  "float",
  "number",
  "any"
];
var supportedMediaTypes = {
  "application/json": Infinity,
  "application/octet-stream": 0,
  "application/x-www-form-urlencoded": 0
};
var enumsMap = /* @__PURE__ */ new Set([
  "ActionConfigInputPositionEnum",
  "ActionConfigInputCreatePositionEnum",
  "AssociateMetadataInputTypeEnum",
  "AssociateMetadataInputCreateTypeEnum",
  "AuthorMetadataTypeInputTypeEnum",
  "CopyObjectRequestTypeEnum",
  "CreateConnectionRequestDataWarehouseTypeEnum",
  "CreateConnectionResponseDataWarehouseTypeEnum",
  "CreateRoleRequestPrivilegesEnum",
  "CreateScheduleRequestMetadataTypeEnum",
  "CreateScheduleRequestFileFormatEnum",
  "CreateScheduleRequestTimeZoneEnum",
  "CreateScheduleRequestPdfOptionsPageSizeEnum",
  "CreateUserGroupRequestPrivilegesEnum",
  "CreateUserGroupRequestTypeEnum",
  "CreateUserGroupRequestVisibilityEnum",
  "CreateUserRequestAccountTypeEnum",
  "CreateUserRequestAccountStatusEnum",
  "CreateUserRequestVisibilityEnum",
  "CreateUserRequestPreferredLocaleEnum",
  "CreateVariableRequestTypeEnum",
  "CustomActionMetadataTypeInputTypeEnum",
  "DbtConnectionRequestImportTypeEnum",
  "DbtGenerateTmlRequestImportWorksheetsEnum",
  "DeleteMetadataTypeInputTypeEnum",
  "DeployCommitRequestDeployTypeEnum",
  "DeployCommitRequestDeployPolicyEnum",
  "ExcludeMetadataListItemInputTypeEnum",
  "ExportAnswerReportRequestFileFormatEnum",
  "ExportAnswerReportRequestRegionalSettingsCurrencyFormatEnum",
  "ExportAnswerReportRequestRegionalSettingsUserLocaleEnum",
  "ExportAnswerReportRequestRegionalSettingsNumberFormatLocaleEnum",
  "ExportAnswerReportRequestRegionalSettingsDateFormatLocaleEnum",
  "ExportLiveboardReportRequestFileFormatEnum",
  "ExportLiveboardReportRequestPdfOptionsPageOrientationEnum",
  "ExportMetadataTMLBatchedRequestMetadataTypeEnum",
  "ExportMetadataTMLBatchedRequestEdocFormatEnum",
  "ExportMetadataTMLRequestEdocFormatEnum",
  "ExportMetadataTMLRequestExportSchemaVersionEnum",
  "ExportMetadataTypeInputTypeEnum",
  "FavoriteMetadataInputTypeEnum",
  "FavoriteMetadataItemTypeEnum",
  "FetchAnswerDataRequestDataFormatEnum",
  "FetchAsyncImportTaskStatusRequestTaskStatusEnum",
  "FetchLiveboardDataRequestDataFormatEnum",
  "FetchLogsRequestLogTypeEnum",
  "FetchPermissionsOfPrincipalsRequestDefaultMetadataTypeEnum",
  "FilterRulesOperatorEnum",
  "GetCustomAccessTokenRequestPersistOptionEnum",
  "GroupsImportListInputPrivilegesEnum",
  "GroupsImportListInputTypeEnum",
  "GroupsImportListInputVisibilityEnum",
  "HeaderUpdateInputTypeEnum",
  "ImportEPackAsyncTaskStatusTaskStatusEnum",
  "ImportEPackAsyncTaskStatusImportPolicyEnum",
  "ImportMetadataTMLAsyncRequestImportPolicyEnum",
  "ImportMetadataTMLRequestImportPolicyEnum",
  "ImportUserAccountTypeEnum",
  "ImportUserAccountStatusEnum",
  "ImportUserVisibilityEnum",
  "InputVariableValuePrincipalTypeEnum",
  "JWTMetadataObjectTypeEnum",
  "MetadataInputTypeEnum",
  "MetadataListItemInputTypeEnum",
  "MetadataObjectTypeEnum",
  "MetadataResponseTypeEnum",
  "MetadataSearchResponseMetadataTypeEnum",
  "MetadataSearchSortOptionsFieldNameEnum",
  "MetadataSearchSortOptionsOrderEnum",
  "OrgResponseStatusEnum",
  "OrgResponseVisibilityEnum",
  "ParameterizeMetadataRequestMetadataTypeEnum",
  "ParameterizeMetadataRequestFieldTypeEnum",
  "PdfOptionsPageSizeEnum",
  "PdfOptionsInputPageOrientationEnum",
  "PermissionInputShareModeEnum",
  "PermissionsMetadataTypeInputTypeEnum",
  "PrincipalsInputTypeEnum",
  "PublishMetadataListItemTypeEnum",
  "RegionalSettingsInputCurrencyFormatEnum",
  "RegionalSettingsInputUserLocaleEnum",
  "RegionalSettingsInputNumberFormatLocaleEnum",
  "RegionalSettingsInputDateFormatLocaleEnum",
  "ResponseMessageMessageTypeEnum",
  "ResponseMessageVisualizationTypeEnum",
  "RevertCommitRequestRevertPolicyEnum",
  "RoleResponsePrivilegesEnum",
  "RoleResponsePermissionEnum",
  "RuntimeFiltersOperatorEnum",
  "RuntimeSortsOrderEnum",
  "SchedulesPdfOptionsInputPageSizeEnum",
  "SearchCommitsRequestMetadataTypeEnum",
  "SearchConnectionRequestDataWarehouseTypesEnum",
  "SearchConnectionRequestDataWarehouseObjectTypeEnum",
  "SearchConnectionRequestAuthenticationTypeEnum",
  "SearchConnectionRequestSortOptionsFieldNameEnum",
  "SearchConnectionRequestSortOptionsOrderEnum",
  "SearchConnectionResponseDataWarehouseTypeEnum",
  "SearchCustomActionsRequestTypeEnum",
  "SearchDataRequestDataFormatEnum",
  "SearchMetadataRequestDependentObjectVersionEnum",
  "SearchMetadataRequestSortOptionsFieldNameEnum",
  "SearchMetadataRequestSortOptionsOrderEnum",
  "SearchOrgsRequestVisibilityEnum",
  "SearchOrgsRequestStatusEnum",
  "SearchRoleResponsePrivilegesEnum",
  "SearchRoleResponsePermissionEnum",
  "SearchRolesRequestPrivilegesEnum",
  "SearchRolesRequestPermissionsEnum",
  "SearchUserGroupsRequestPrivilegesEnum",
  "SearchUserGroupsRequestTypeEnum",
  "SearchUserGroupsRequestVisibilityEnum",
  "SearchUserGroupsRequestSortOptionsFieldNameEnum",
  "SearchUserGroupsRequestSortOptionsOrderEnum",
  "SearchUsersRequestVisibilityEnum",
  "SearchUsersRequestPrivilegesEnum",
  "SearchUsersRequestAccountTypeEnum",
  "SearchUsersRequestAccountStatusEnum",
  "SearchUsersRequestSortOptionsFieldNameEnum",
  "SearchUsersRequestSortOptionsOrderEnum",
  "SearchVariablesRequestOutputFormatEnum",
  "ShareMetadataRequestMetadataTypeEnum",
  "ShareMetadataTypeInputTypeEnum",
  "SharePermissionsInputShareModeEnum",
  "SortOptionInputFieldNameEnum",
  "SortOptionInputOrderEnum",
  "SortOptionsFieldNameEnum",
  "SortOptionsOrderEnum",
  "SqlQueryResponseMetadataTypeEnum",
  "TagMetadataTypeInputTypeEnum",
  "TokenAccessScopeObjectTypeEnum",
  "UnparameterizeMetadataRequestMetadataTypeEnum",
  "UnparameterizeMetadataRequestFieldTypeEnum",
  "UpdateCustomActionRequestOperationEnum",
  "UpdateDbtConnectionRequestImportTypeEnum",
  "UpdateObjIdInputTypeEnum",
  "UpdateOrgRequestOperationEnum",
  "UpdateRoleRequestPrivilegesEnum",
  "UpdateScheduleRequestMetadataTypeEnum",
  "UpdateScheduleRequestFileFormatEnum",
  "UpdateScheduleRequestTimeZoneEnum",
  "UpdateScheduleRequestStatusEnum",
  "UpdateScheduleRequestPdfOptionsPageSizeEnum",
  "UpdateUserGroupRequestPrivilegesEnum",
  "UpdateUserGroupRequestTypeEnum",
  "UpdateUserGroupRequestVisibilityEnum",
  "UpdateUserGroupRequestOperationEnum",
  "UpdateUserRequestVisibilityEnum",
  "UpdateUserRequestAccountStatusEnum",
  "UpdateUserRequestAccountTypeEnum",
  "UpdateUserRequestOperationEnum",
  "UpdateUserRequestPreferredLocaleEnum",
  "UpdateVariableRequestOperationEnum",
  "UpdateVariableValuesRequestOperationEnum",
  "UserVisibilityEnum",
  "UserAccountTypeEnum",
  "UserAccountStatusEnum",
  "UserParentTypeEnum",
  "UserGroupResponseParentTypeEnum",
  "UserGroupResponseTypeEnum",
  "UserGroupResponseVisibilityEnum",
  "UserObjectTypeEnum",
  "VariableVariableTypeEnum",
  "VariableDetailInputTypeEnum",
  "VariableValuePrincipalTypeEnum"
]);
var typeMap = {
  "APIKey": APIKey,
  "APIKeyInput": APIKeyInput,
  "AccessToken": AccessToken,
  "ActionConfig": ActionConfig,
  "ActionConfigInput": ActionConfigInput,
  "ActionConfigInputCreate": ActionConfigInputCreate,
  "ActionDetails": ActionDetails,
  "ActionDetailsInput": ActionDetailsInput,
  "ActionDetailsInputCreate": ActionDetailsInputCreate,
  "ActivateUserRequest": ActivateUserRequest,
  "AnswerContent": AnswerContent,
  "AnswerDataResponse": AnswerDataResponse,
  "AssignChangeAuthorRequest": AssignChangeAuthorRequest,
  "AssignTagRequest": AssignTagRequest,
  "AssociateMetadataInput": AssociateMetadataInput,
  "AssociateMetadataInputCreate": AssociateMetadataInputCreate,
  "Authentication": Authentication,
  "AuthenticationInput": AuthenticationInput,
  "Author": Author,
  "AuthorMetadataTypeInput": AuthorMetadataTypeInput,
  "AuthorType": AuthorType,
  "BasicAuth": BasicAuth,
  "BasicAuthInput": BasicAuthInput,
  "CALLBACK": CALLBACK,
  "CALLBACKInput": CALLBACKInput,
  "CALLBACKInputMandatory": CALLBACKInputMandatory,
  "ChangeUserPasswordRequest": ChangeUserPasswordRequest,
  "Column": Column,
  "CommitBranchRequest": CommitBranchRequest,
  "CommitFileType": CommitFileType,
  "CommitHistoryResponse": CommitHistoryResponse,
  "CommitResponse": CommitResponse,
  "CommiterType": CommiterType,
  "ConnectionInput": ConnectionInput,
  "Conversation": Conversation,
  "ConvertWorksheetToModelRequest": ConvertWorksheetToModelRequest,
  "CopyObjectRequest": CopyObjectRequest,
  "CreateConfigRequest": CreateConfigRequest,
  "CreateConnectionRequest": CreateConnectionRequest,
  "CreateConnectionResponse": CreateConnectionResponse,
  "CreateConversationRequest": CreateConversationRequest,
  "CreateCustomActionRequest": CreateCustomActionRequest,
  "CreateCustomActionRequestActionDetails": CreateCustomActionRequestActionDetails,
  "CreateCustomActionRequestDefaultActionConfig": CreateCustomActionRequestDefaultActionConfig,
  "CreateEmailCustomisationRequest": CreateEmailCustomisationRequest,
  "CreateEmailCustomisationResponse": CreateEmailCustomisationResponse,
  "CreateOrgRequest": CreateOrgRequest,
  "CreateRoleRequest": CreateRoleRequest,
  "CreateScheduleRequest": CreateScheduleRequest,
  "CreateScheduleRequestFrequency": CreateScheduleRequestFrequency,
  "CreateScheduleRequestLiveboardOptions": CreateScheduleRequestLiveboardOptions,
  "CreateScheduleRequestPdfOptions": CreateScheduleRequestPdfOptions,
  "CreateScheduleRequestRecipientDetails": CreateScheduleRequestRecipientDetails,
  "CreateTagRequest": CreateTagRequest,
  "CreateUserGroupRequest": CreateUserGroupRequest,
  "CreateUserRequest": CreateUserRequest,
  "CreateVariableRequest": CreateVariableRequest,
  "CronExpression": CronExpression,
  "CronExpressionInput": CronExpressionInput,
  "CustomActionMetadataTypeInput": CustomActionMetadataTypeInput,
  "DataWarehouseObjectInput": DataWarehouseObjectInput,
  "DataWarehouseObjects": DataWarehouseObjects,
  "Database": Database,
  "DbtConnectionRequest": DbtConnectionRequest,
  "DbtGenerateSyncTmlRequest": DbtGenerateSyncTmlRequest,
  "DbtGenerateTmlRequest": DbtGenerateTmlRequest,
  "DbtSearchResponse": DbtSearchResponse,
  "DeactivateUserRequest": DeactivateUserRequest,
  "DefaultActionConfig": DefaultActionConfig,
  "DefaultActionConfigInput": DefaultActionConfigInput,
  "DefaultActionConfigInputCreate": DefaultActionConfigInputCreate,
  "DefaultActionConfigSearchInput": DefaultActionConfigSearchInput,
  "DeleteConfigRequest": DeleteConfigRequest,
  "DeleteConnectionRequest": DeleteConnectionRequest,
  "DeleteMetadataRequest": DeleteMetadataRequest,
  "DeleteMetadataTypeInput": DeleteMetadataTypeInput,
  "DeployCommitRequest": DeployCommitRequest,
  "DeployResponse": DeployResponse,
  "ErrorResponse": ErrorResponse,
  "EurekaDecomposeQueryResponse": EurekaDecomposeQueryResponse,
  "EurekaLLMDecomposeQueryResponse": EurekaLLMDecomposeQueryResponse,
  "EurekaLLMSuggestedQuery": EurekaLLMSuggestedQuery,
  "ExcludeMetadataListItemInput": ExcludeMetadataListItemInput,
  "ExportAnswerReportRequest": ExportAnswerReportRequest,
  "ExportAnswerReportRequestRegionalSettings": ExportAnswerReportRequestRegionalSettings,
  "ExportLiveboardReportRequest": ExportLiveboardReportRequest,
  "ExportLiveboardReportRequestPdfOptions": ExportLiveboardReportRequestPdfOptions,
  "ExportLiveboardReportRequestPngOptions": ExportLiveboardReportRequestPngOptions,
  "ExportMetadataTMLBatchedRequest": ExportMetadataTMLBatchedRequest,
  "ExportMetadataTMLRequest": ExportMetadataTMLRequest,
  "ExportMetadataTMLRequestExportOptions": ExportMetadataTMLRequestExportOptions,
  "ExportMetadataTypeInput": ExportMetadataTypeInput,
  "ExportOptions": ExportOptions,
  "FavoriteMetadataInput": FavoriteMetadataInput,
  "FavoriteMetadataItem": FavoriteMetadataItem,
  "FavoriteObjectOptionsInput": FavoriteObjectOptionsInput,
  "FetchAnswerDataRequest": FetchAnswerDataRequest,
  "FetchAnswerSqlQueryRequest": FetchAnswerSqlQueryRequest,
  "FetchAsyncImportTaskStatusRequest": FetchAsyncImportTaskStatusRequest,
  "FetchConnectionDiffStatusResponse": FetchConnectionDiffStatusResponse,
  "FetchLiveboardDataRequest": FetchLiveboardDataRequest,
  "FetchLiveboardSqlQueryRequest": FetchLiveboardSqlQueryRequest,
  "FetchLogsRequest": FetchLogsRequest,
  "FetchPermissionsOfPrincipalsRequest": FetchPermissionsOfPrincipalsRequest,
  "FetchPermissionsOnMetadataRequest": FetchPermissionsOnMetadataRequest,
  "FilterRules": FilterRules,
  "ForceLogoutUsersRequest": ForceLogoutUsersRequest,
  "Frequency": Frequency,
  "FrequencyInput": FrequencyInput,
  "GenericInfo": GenericInfo,
  "GetAsyncImportStatusResponse": GetAsyncImportStatusResponse,
  "GetCustomAccessTokenRequest": GetCustomAccessTokenRequest,
  "GetFullAccessTokenRequest": GetFullAccessTokenRequest,
  "GetObjectAccessTokenRequest": GetObjectAccessTokenRequest,
  "GetTokenResponse": GetTokenResponse,
  "GroupObject": GroupObject,
  "GroupsImportListInput": GroupsImportListInput,
  "HeaderAttributeInput": HeaderAttributeInput,
  "HeaderUpdateInput": HeaderUpdateInput,
  "ImportEPackAsyncTaskStatus": ImportEPackAsyncTaskStatus,
  "ImportMetadataTMLAsyncRequest": ImportMetadataTMLAsyncRequest,
  "ImportMetadataTMLRequest": ImportMetadataTMLRequest,
  "ImportUser": ImportUser,
  "ImportUserGroupsRequest": ImportUserGroupsRequest,
  "ImportUserGroupsResponse": ImportUserGroupsResponse,
  "ImportUserType": ImportUserType,
  "ImportUsersRequest": ImportUsersRequest,
  "ImportUsersResponse": ImportUsersResponse,
  "InputEurekaNLSRequest": InputEurekaNLSRequest,
  "InputVariableValue": InputVariableValue,
  "JWTMetadataObject": JWTMetadataObject,
  "JWTParameter": JWTParameter,
  "JWTUserOptions": JWTUserOptions,
  "JWTUserOptionsFull": JWTUserOptionsFull,
  "LiveboardContent": LiveboardContent,
  "LiveboardDataResponse": LiveboardDataResponse,
  "LiveboardOptions": LiveboardOptions,
  "LiveboardOptionsInput": LiveboardOptionsInput,
  "LogResponse": LogResponse,
  "LoginRequest": LoginRequest,
  "MetadataAssociationItem": MetadataAssociationItem,
  "MetadataInput": MetadataInput,
  "MetadataListItemInput": MetadataListItemInput,
  "MetadataObject": MetadataObject,
  "MetadataResponse": MetadataResponse,
  "MetadataSearchResponse": MetadataSearchResponse,
  "MetadataSearchSortOptions": MetadataSearchSortOptions,
  "ModelTableList": ModelTableList,
  "ObjectIDAndName": ObjectIDAndName,
  "Org": Org,
  "OrgInfo": OrgInfo,
  "OrgResponse": OrgResponse,
  "OrgType": OrgType,
  "ParameterValues": ParameterValues,
  "ParameterizeMetadataRequest": ParameterizeMetadataRequest,
  "ParametersListItem": ParametersListItem,
  "ParametersListItemInput": ParametersListItemInput,
  "PdfOptions": PdfOptions,
  "PdfOptionsInput": PdfOptionsInput,
  "PermissionInput": PermissionInput,
  "PermissionOfMetadataResponse": PermissionOfMetadataResponse,
  "PermissionOfPrincipalsResponse": PermissionOfPrincipalsResponse,
  "PermissionsMetadataTypeInput": PermissionsMetadataTypeInput,
  "PngOptionsInput": PngOptionsInput,
  "PrincipalsInput": PrincipalsInput,
  "PrincipalsListItem": PrincipalsListItem,
  "PrincipalsListItemInput": PrincipalsListItemInput,
  "PublishMetadataListItem": PublishMetadataListItem,
  "PublishMetadataRequest": PublishMetadataRequest,
  "QueryGetDecomposedQueryRequest": QueryGetDecomposedQueryRequest,
  "QueryGetDecomposedQueryRequestNlsRequest": QueryGetDecomposedQueryRequestNlsRequest,
  "RecipientDetails": RecipientDetails,
  "RecipientDetailsInput": RecipientDetailsInput,
  "RegionalSettingsInput": RegionalSettingsInput,
  "RepoConfigObject": RepoConfigObject,
  "ResetUserPasswordRequest": ResetUserPasswordRequest,
  "ResponseActivationURL": ResponseActivationURL,
  "ResponseCopyObject": ResponseCopyObject,
  "ResponseCustomAction": ResponseCustomAction,
  "ResponseFailedEntities": ResponseFailedEntities,
  "ResponseFailedEntity": ResponseFailedEntity,
  "ResponseIncompleteEntities": ResponseIncompleteEntities,
  "ResponseIncompleteEntity": ResponseIncompleteEntity,
  "ResponseMessage": ResponseMessage,
  "ResponsePostUpgradeFailedEntities": ResponsePostUpgradeFailedEntities,
  "ResponsePostUpgradeFailedEntity": ResponsePostUpgradeFailedEntity,
  "ResponseSchedule": ResponseSchedule,
  "ResponseScheduleRun": ResponseScheduleRun,
  "ResponseSuccessfulEntities": ResponseSuccessfulEntities,
  "ResponseSuccessfulEntity": ResponseSuccessfulEntity,
  "ResponseWorksheetToModelConversion": ResponseWorksheetToModelConversion,
  "RevertCommitRequest": RevertCommitRequest,
  "RevertResponse": RevertResponse,
  "RevertedMetadata": RevertedMetadata,
  "RevokeTokenRequest": RevokeTokenRequest,
  "RiseGQLArgWrapper": RiseGQLArgWrapper,
  "RiseSetter": RiseSetter,
  "Role": Role,
  "RoleResponse": RoleResponse,
  "RuntimeFilter": RuntimeFilter,
  "RuntimeFilters": RuntimeFilters,
  "RuntimeParamOverride": RuntimeParamOverride,
  "RuntimeParameters": RuntimeParameters,
  "RuntimeSort": RuntimeSort,
  "RuntimeSorts": RuntimeSorts,
  "ScheduleHistoryRunsOptionsInput": ScheduleHistoryRunsOptionsInput,
  "SchedulesPdfOptionsInput": SchedulesPdfOptionsInput,
  "SchemaObject": SchemaObject,
  "Scope": Scope,
  "SearchCommitsRequest": SearchCommitsRequest,
  "SearchConfigRequest": SearchConfigRequest,
  "SearchConnectionRequest": SearchConnectionRequest,
  "SearchConnectionRequestSortOptions": SearchConnectionRequestSortOptions,
  "SearchConnectionResponse": SearchConnectionResponse,
  "SearchCustomActionsRequest": SearchCustomActionsRequest,
  "SearchCustomActionsRequestDefaultActionConfig": SearchCustomActionsRequestDefaultActionConfig,
  "SearchDataRequest": SearchDataRequest,
  "SearchDataResponse": SearchDataResponse,
  "SearchMetadataRequest": SearchMetadataRequest,
  "SearchMetadataRequestFavoriteObjectOptions": SearchMetadataRequestFavoriteObjectOptions,
  "SearchMetadataRequestSortOptions": SearchMetadataRequestSortOptions,
  "SearchOrgsRequest": SearchOrgsRequest,
  "SearchRoleResponse": SearchRoleResponse,
  "SearchRolesRequest": SearchRolesRequest,
  "SearchSchedulesRequest": SearchSchedulesRequest,
  "SearchSchedulesRequestHistoryRunsOptions": SearchSchedulesRequestHistoryRunsOptions,
  "SearchSchedulesRequestSortOptions": SearchSchedulesRequestSortOptions,
  "SearchTagsRequest": SearchTagsRequest,
  "SearchUserGroupsRequest": SearchUserGroupsRequest,
  "SearchUserGroupsRequestSortOptions": SearchUserGroupsRequestSortOptions,
  "SearchUsersRequest": SearchUsersRequest,
  "SearchUsersRequestSortOptions": SearchUsersRequestSortOptions,
  "SearchVariablesRequest": SearchVariablesRequest,
  "SendMessageRequest": SendMessageRequest,
  "ShareMetadataRequest": ShareMetadataRequest,
  "ShareMetadataTypeInput": ShareMetadataTypeInput,
  "SharePermissionsInput": SharePermissionsInput,
  "SingleAnswerRequest": SingleAnswerRequest,
  "SortOptionInput": SortOptionInput,
  "SortOptions": SortOptions,
  "SortingOptions": SortingOptions,
  "SqlQuery": SqlQuery,
  "SqlQueryResponse": SqlQueryResponse,
  "SystemConfig": SystemConfig,
  "SystemInfo": SystemInfo,
  "Table": Table,
  "Tag": Tag,
  "TagMetadataTypeInput": TagMetadataTypeInput,
  "Token": Token,
  "TokenAccessScopeObject": TokenAccessScopeObject,
  "TokenValidationResponse": TokenValidationResponse,
  "URL": URL2,
  "URLInput": URLInput,
  "URLInputMandatory": URLInputMandatory,
  "UnparameterizeMetadataRequest": UnparameterizeMetadataRequest,
  "UnpublishMetadataRequest": UnpublishMetadataRequest,
  "UpdateConfigRequest": UpdateConfigRequest,
  "UpdateConnectionRequest": UpdateConnectionRequest,
  "UpdateConnectionV2Request": UpdateConnectionV2Request,
  "UpdateCustomActionRequest": UpdateCustomActionRequest,
  "UpdateCustomActionRequestActionDetails": UpdateCustomActionRequestActionDetails,
  "UpdateCustomActionRequestDefaultActionConfig": UpdateCustomActionRequestDefaultActionConfig,
  "UpdateDbtConnectionRequest": UpdateDbtConnectionRequest,
  "UpdateMetadataHeaderRequest": UpdateMetadataHeaderRequest,
  "UpdateMetadataObjIdRequest": UpdateMetadataObjIdRequest,
  "UpdateObjIdInput": UpdateObjIdInput,
  "UpdateOrgRequest": UpdateOrgRequest,
  "UpdateRoleRequest": UpdateRoleRequest,
  "UpdateScheduleRequest": UpdateScheduleRequest,
  "UpdateScheduleRequestFrequency": UpdateScheduleRequestFrequency,
  "UpdateScheduleRequestLiveboardOptions": UpdateScheduleRequestLiveboardOptions,
  "UpdateScheduleRequestPdfOptions": UpdateScheduleRequestPdfOptions,
  "UpdateScheduleRequestRecipientDetails": UpdateScheduleRequestRecipientDetails,
  "UpdateSystemConfigRequest": UpdateSystemConfigRequest,
  "UpdateTagRequest": UpdateTagRequest,
  "UpdateUserGroupRequest": UpdateUserGroupRequest,
  "UpdateUserRequest": UpdateUserRequest,
  "UpdateVariableRequest": UpdateVariableRequest,
  "UpdateVariableValuesRequest": UpdateVariableValuesRequest,
  "User": User,
  "UserGroup": UserGroup,
  "UserGroupResponse": UserGroupResponse,
  "UserInfo": UserInfo,
  "UserObject": UserObject,
  "UserParameterOptions": UserParameterOptions,
  "ValidateMergeRequest": ValidateMergeRequest,
  "ValidateTokenRequest": ValidateTokenRequest,
  "Variable": Variable,
  "VariableDetailInput": VariableDetailInput,
  "VariableValue": VariableValue,
  "VariableValueInput": VariableValueInput
};
var ObjectSerializer = class _ObjectSerializer {
  static findCorrectType(data, expectedType) {
    if (data == void 0) {
      return expectedType;
    } else if (primitives.indexOf(expectedType.toLowerCase()) !== -1) {
      return expectedType;
    } else if (expectedType === "Date") {
      return expectedType;
    } else {
      if (enumsMap.has(expectedType)) {
        return expectedType;
      }
      if (!typeMap[expectedType]) {
        return expectedType;
      }
      let discriminatorProperty = typeMap[expectedType].discriminator;
      if (discriminatorProperty == null) {
        return expectedType;
      } else {
        if (data[discriminatorProperty]) {
          var discriminatorType = data[discriminatorProperty];
          if (typeMap[discriminatorType]) {
            return discriminatorType;
          } else {
            return expectedType;
          }
        } else {
          return expectedType;
        }
      }
    }
  }
  static serialize(data, type, format) {
    if (data == void 0) {
      return data;
    } else if (primitives.indexOf(type.toLowerCase()) !== -1) {
      return data;
    } else if (type.lastIndexOf("Array<", 0) === 0) {
      let subType = type.replace("Array<", "");
      subType = subType.substring(0, subType.length - 1);
      let transformedData = [];
      for (let date of data) {
        transformedData.push(_ObjectSerializer.serialize(date, subType, format));
      }
      return transformedData;
    } else if (type === "Date") {
      if (format == "date") {
        let month = data.getMonth() + 1;
        month = month < 10 ? "0" + month.toString() : month.toString();
        let day = data.getDate();
        day = day < 10 ? "0" + day.toString() : day.toString();
        return data.getFullYear() + "-" + month + "-" + day;
      } else {
        return data.toISOString();
      }
    } else {
      if (enumsMap.has(type)) {
        return data;
      }
      if (!typeMap[type]) {
        return data;
      }
      type = this.findCorrectType(data, type);
      let attributeTypes = typeMap[type].getAttributeTypeMap();
      let instance = {};
      for (let attributeType of attributeTypes) {
        instance[attributeType.baseName] = _ObjectSerializer.serialize(data[attributeType.name], attributeType.type, attributeType.format);
      }
      return instance;
    }
  }
  static deserialize(data, type, format) {
    type = _ObjectSerializer.findCorrectType(data, type);
    if (data == void 0) {
      return data;
    } else if (primitives.indexOf(type.toLowerCase()) !== -1) {
      return data;
    } else if (type.lastIndexOf("Array<", 0) === 0) {
      let subType = type.replace("Array<", "");
      subType = subType.substring(0, subType.length - 1);
      let transformedData = [];
      for (let date of data) {
        transformedData.push(_ObjectSerializer.deserialize(date, subType, format));
      }
      return transformedData;
    } else if (type === "Date") {
      return new Date(data);
    } else {
      if (enumsMap.has(type)) {
        return data;
      }
      if (!typeMap[type]) {
        return data;
      }
      let instance = new typeMap[type]();
      let attributeTypes = typeMap[type].getAttributeTypeMap();
      for (let attributeType of attributeTypes) {
        let value = _ObjectSerializer.deserialize(data[attributeType.baseName], attributeType.type, attributeType.format);
        if (value !== void 0) {
          instance[attributeType.name] = value;
        }
      }
      return instance;
    }
  }
  /**
   * Normalize media type
   *
   * We currently do not handle any media types attributes, i.e. anything
   * after a semicolon. All content is assumed to be UTF-8 compatible.
   */
  static normalizeMediaType(mediaType) {
    if (mediaType === void 0) {
      return void 0;
    }
    return mediaType.split(";")[0].trim().toLowerCase();
  }
  /**
   * From a list of possible media types, choose the one we can handle best.
   *
   * The order of the given media types does not have any impact on the choice
   * made.
   */
  static getPreferredMediaType(mediaTypes) {
    if (!mediaTypes) {
      return "application/json";
    }
    const normalMediaTypes = mediaTypes.map(this.normalizeMediaType);
    let selectedMediaType = void 0;
    let selectedRank = -Infinity;
    for (const mediaType of normalMediaTypes) {
      if (supportedMediaTypes[mediaType] > selectedRank) {
        selectedMediaType = mediaType;
        selectedRank = supportedMediaTypes[mediaType];
      }
    }
    if (selectedMediaType === void 0) {
      throw new Error("None of the given media types are supported: " + mediaTypes.join(", "));
    }
    return selectedMediaType;
  }
  /**
   * Convert data to a string according the given media type
   */
  static stringify(data, mediaType) {
    if (mediaType === "text/plain") {
      return String(data);
    }
    if (mediaType === "application/json") {
      return JSON.stringify(data);
    }
    throw new Error("The mediaType " + mediaType + " is not supported by ObjectSerializer.stringify.");
  }
  /**
   * Parse data from a string according to the given media type
   */
  static parse(rawData, mediaType) {
    if (mediaType === void 0) {
      throw new Error("Cannot parse content. No Content-Type defined.");
    }
    if (mediaType === "text/plain") {
      return rawData;
    }
    if (mediaType === "application/json") {
      return JSON.parse(rawData);
    }
    if (mediaType === "text/html") {
      return rawData;
    }
    throw new Error("The mediaType " + mediaType + " is not supported by ObjectSerializer.parse.");
  }
};

// util.ts
function isCodeInRange(codeRange, code) {
  if (codeRange === "0") {
    return true;
  }
  if (codeRange == code.toString()) {
    return true;
  } else {
    const codeString = code.toString();
    if (codeString.length != codeRange.length) {
      return false;
    }
    for (let i = 0; i < codeString.length; i++) {
      if (codeRange.charAt(i) != "X" && codeRange.charAt(i) != codeString.charAt(i)) {
        return false;
      }
    }
    return true;
  }
}

// apis/AIApi.ts
var AIApiRequestFactory = class extends BaseAPIRequestFactory {
  /**
   *  Version: 10.4.0.cl or later   Creates a Conversation object to start an AI-driven conversation based on a specific data model.  Requires at least view access to the metadata object specified in the request.  #### Usage guidelines  This API requires the `metadata_identifier` parameter to define the context for the conversation.  You can also specify the tokens to initiate the conversation as shown in this example:  `\"tokens\": \"[tea],[sales],[type]\"`  If the API request is successful, ThoughtSpot returns the ID of the conversation.  > ###### Note: > * This endpoint is currently in Beta. Breaking changes may be introduced before the endpoint is made Generally Available. > * This endpoint requires Spotter - please contact ThoughtSpot support to enable Spotter on your cluster.      
   * @param createConversationRequest 
   */
  createConversation(createConversationRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (createConversationRequest === null || createConversationRequest === void 0) {
        throw new RequiredError("AIApi", "createConversation", "createConversationRequest");
      }
      const localVarPath = "/api/rest/2.0/ai/conversation/create";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(createConversationRequest, "CreateConversationRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   * Version: 10.7.0.cl or later 
   * @param queryGetDecomposedQueryRequest 
   */
  queryGetDecomposedQuery(queryGetDecomposedQueryRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (queryGetDecomposedQueryRequest === null || queryGetDecomposedQueryRequest === void 0) {
        throw new RequiredError("AIApi", "queryGetDecomposedQuery", "queryGetDecomposedQueryRequest");
      }
      const localVarPath = "/api/rest/2.0/ai/analytical-questions";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(queryGetDecomposedQueryRequest, "QueryGetDecomposedQueryRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *  Version: 10.4.0.cl or later   Allows sending a follow-up message to an ongoing conversation within the context of the metadata model.  Requires at least view access to the metadata object specified in the request.  #### Usage guidelines  The API requires you to specify the `conversation_identifier` in the request path, and a `metadata_identifier` and `message` string in the request body.  If the API request is successful, ThoughtSpot returns the session ID, tokens used in the conversation, and visualization type.  > ###### Note: > * This endpoint is currently in Beta. Breaking changes may be introduced before the endpoint is made Generally Available. > * This endpoint requires Spotter - please contact ThoughtSpot support to enable Spotter on your cluster.      
   * @param conversationIdentifier Unique identifier of the conversation.
   * @param sendMessageRequest 
   */
  sendMessage(conversationIdentifier, sendMessageRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (conversationIdentifier === null || conversationIdentifier === void 0) {
        throw new RequiredError("AIApi", "sendMessage", "conversationIdentifier");
      }
      if (sendMessageRequest === null || sendMessageRequest === void 0) {
        throw new RequiredError("AIApi", "sendMessage", "sendMessageRequest");
      }
      const localVarPath = "/api/rest/2.0/ai/conversation/{conversation_identifier}/converse".replace("{conversation_identifier}", encodeURIComponent(String(conversationIdentifier)));
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(sendMessageRequest, "SendMessageRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *  Version: 10.4.0.cl or later   Processes a natural language query and returns an AI-generated response based on a specified data model.  Requires at least view access to the metadata object specified in the request.  > ###### Note: > * This endpoint is currently in Beta. Breaking changes may be introduced before the endpoint is made Generally Available. > * This endpoint requires Spotter - please contact ThoughtSpot support to enable Spotter on your cluster.      
   * @param singleAnswerRequest 
   */
  singleAnswer(singleAnswerRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (singleAnswerRequest === null || singleAnswerRequest === void 0) {
        throw new RequiredError("AIApi", "singleAnswer", "singleAnswerRequest");
      }
      const localVarPath = "/api/rest/2.0/ai/answer/create";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(singleAnswerRequest, "SingleAnswerRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
};
var AIApiResponseProcessor = class {
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to createConversation
   * @throws ApiException if the response code was not in [200, 299]
   */
  createConversation(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Conversation",
          ""
        );
        return body;
      }
      if (isCodeInRange("201", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Conversation",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Operation failed", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Operation failed", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Conversation",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to queryGetDecomposedQuery
   * @throws ApiException if the response code was not in [200, 299]
   */
  queryGetDecomposedQuery(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "EurekaDecomposeQueryResponse",
          ""
        );
        return body;
      }
      if (isCodeInRange("201", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "EurekaDecomposeQueryResponse",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Operation failed", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Operation failed", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "EurekaDecomposeQueryResponse",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to sendMessage
   * @throws ApiException if the response code was not in [200, 299]
   */
  sendMessage(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Array<ResponseMessage>",
          ""
        );
        return body;
      }
      if (isCodeInRange("201", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Array<ResponseMessage>",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Operation failed", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Operation failed", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Array<ResponseMessage>",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to singleAnswer
   * @throws ApiException if the response code was not in [200, 299]
   */
  singleAnswer(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ResponseMessage",
          ""
        );
        return body;
      }
      if (isCodeInRange("201", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ResponseMessage",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Operation failed", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Operation failed", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ResponseMessage",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
};

// apis/AuthenticationApi.ts
var AuthenticationApiRequestFactory = class extends BaseAPIRequestFactory {
  /**
   *   Version: 9.0.0.cl or later    Gets session information for the currently logged-in user.  This API does not require any parameters to be passed in the request.    Any ThoughtSpot user can access this endpoint and send an API request. The data returned in the API response varies according to user\'s privilege and object access permissions.      
   */
  getCurrentUserInfo(_options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      const localVarPath = "/api/rest/2.0/auth/session/user";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "GET" /* GET */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *  Get token for the currently logged-in user.    Version: 9.4.0.cl or later   Gets token details for the currently logged-in user.  You can use this endpoint to obtain the token associated with the user\'s session.  This API does not require any parameters to be passed in the request.    Any ThoughtSpot user can access this endpoint and send an API request.      
   */
  getCurrentUserToken(_options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      const localVarPath = "/api/rest/2.0/auth/session/token";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "GET" /* GET */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 10.4.0.cl or later   Gets an authentication token with custom rules and security attributes and creates a full session in ThoughtSpot for a given user. By default, the token obtained from ThoughtSpot remains valid for 5 mins.  To add a new user and assign privileges during auto creation, you need `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled, the `CONTROL_TRUSTED_AUTH`(**Can Enable or Disable Trusted Authentication**) privilege and edit access to the data source is required.  To assign security attributes with filter rules and Parameters to the JWT token, you\'ll need administrator privileges and edit access to the data source (Worksheet or Model). If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled, the `CONTROL_TRUSTED_AUTH`(**Can Enable or Disable Trusted Authentication**) privilege and edit access to the data source is required.  #### Usage guidelines  You can generate the token for a user by providing a `username` and `password`, or by using the cluster’s `secret_key`.  To generate a `secret_key` on your cluster, the administrator must enable [Trusted authentication](https://developers.thoughtspot.com/docs/?pageid=trusted-auth#trusted-auth-enable) in the **Develop** > **Customizations** > **Security Settings** page.  **Note**: When both `password` and `secret_key` are included in the API request, `password` takes precedence.  If Multi-Factor Authentication (MFA) is enabled on your instance, the API login request with basic authentication (`username`  and `password` ) returns an error. You can switch to token-based authentication with  `secret_key`  or contact ThoughtSpot Support for assistance.  ##### Attribute-Based Access Control (ABAC) with tokens  To implement Attribute-Based Access Control (ABAC) and assign security entitlements to users during session creation, you can generate a token with custom filtering rules and Parameters in the `filter_rules` and `parameter_values` array respectively. These attributes can be configured to persist on a specific set of objects for user sessions initiated using the token. Once defined, the rules are added to the user\'s `access_control_properties` object, after which all sessions will use the persisted values.  Specify the object type as `LOGICAL_TABLE`.  The `LIVEBOARD` and `ANSWER` object types are not supported.  For more information, see [ABAC via tokens Documentation](https://developers.thoughtspot.com/docs/api-authv2#_get_tokens_with_custom_rules_and_filter_conditions).  ##### Just-in-time provisioning  For just-in-time user creation and provisioning, define the following attributes:  * `auto_create` * `username` * `display_name` * `email` * `groups`  Set `auto_create` to `true` if the user is not available in ThoughtSpot. If the user already exists in ThoughtSpot and the `auto_create` parameter is set to `true` in the API request, the user properties such as the display name, email, Org and group assignment will not be updated with new values.  For more information, see [Just-in-time provisioning](https://developers.thoughtspot.com/docs/just-in-time-provisioning).  ##### Important point to note All options in the token creation APIs that define access to the content in ThoughtSpot will do so during the token creation and not when the token is being used for authentication. For example, `auto_create:true` will create the user when the authentication token is created. Persist options such as  `APPEND`, `REPLACE`, `RESET` will persist security parameters on the user profile when the token is created, while Persist option `NONE` will not persist anything but will be honoured in the session.      
   * @param getCustomAccessTokenRequest 
   */
  getCustomAccessToken(getCustomAccessTokenRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (getCustomAccessTokenRequest === null || getCustomAccessTokenRequest === void 0) {
        throw new RequiredError("AuthenticationApi", "getCustomAccessToken", "getCustomAccessTokenRequest");
      }
      const localVarPath = "/api/rest/2.0/auth/token/custom";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(getCustomAccessTokenRequest, "GetCustomAccessTokenRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.0.0.cl or later   Gets an authentication token and creates a full session in ThoughtSpot for a given user. By default, the token obtained from ThoughtSpot remains valid for 5 mins.  You can generate the token for a user by providing a `username` and `password`, or by using the cluster’s `secret_key` (for [Trusted authentication](https://developers.thoughtspot.com/docs/?pageid=trusted-auth#trusted-auth-enable)).  To generate a `secret_key` on your cluster, the administrator must enable **Trusted authentication** in the **Develop** > **Customizations** > **Security Settings** page. For more information, see [Trusted authentication](https://developers.thoughtspot.com/docs/?pageid=trusted-auth#trusted-auth-enable).  **Note**: When both `password` and `secret_key` are included in the API request, `password` takes precedence.  If Multi-Factor Authentication (MFA) is enabled on your instance, the API login request with basic authentication (`username`  and `password` ) returns an error. You can switch to token-based authentication with  `secret_key`  or contact ThoughtSpot Support for assistance.  #### Just-in-time provisioning  For just-in-time user creation and provisioning, define the following attributes:  * `auto_create` * `username` * `display_name` * `email` * `group_identifiers`  Set `auto_create` to `True` if the user is not available in ThoughtSpot. If the user already exists in ThoughtSpot and the `auto_create` parameter is set to `true`, the API call will update user properties like display name, email and group assignment.  For more information, see [Just-in-time provisioning](https://developers.thoughtspot.com/docs/just-in-time-provisioning).  To add a new user and assign privileges, you need `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled, the `CONTROL_TRUSTED_AUTH`(**Can Enable or Disable Trusted Authentication**) privilege is required.  #### Important point to note All options in the token creation APIs changing the content in ThoughtSpot will do so during the token creation and not when the token is being used for authentication. For example, `auto_create:true` will create the user when the authentication token is created.      
   * @param getFullAccessTokenRequest 
   */
  getFullAccessToken(getFullAccessTokenRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (getFullAccessTokenRequest === null || getFullAccessTokenRequest === void 0) {
        throw new RequiredError("AuthenticationApi", "getFullAccessToken", "getFullAccessTokenRequest");
      }
      const localVarPath = "/api/rest/2.0/auth/token/full";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(getFullAccessTokenRequest, "GetFullAccessTokenRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.0.0.cl or later   Gets an authentication token that provides access to a specific metadata object. By default, the token obtained from ThoughtSpot remains valid for 5 mins.  You can generate the token for a user by providing a `username` and `password`, or by using the cluster’s `secret key` (for [Trusted authentication](https://developers.thoughtspot.com/docs/?pageid=trusted-auth#trusted-auth-enable)).  To generate a `secret_key` on your cluster, the administrator must enable **Trusted authentication** in the **Develop** > **Customizations** > **Security Settings** page.  **Note**: When both `password` and `secret_key` are included in the API request,  `password` takes precedence.  If Multi-Factor Authentication (MFA) is enabled on your instance, the API login request with basic authentication (`username`  and `password` ) returns an error. You can switch to token-based authentication with  `secret_key`  or contact ThoughtSpot Support for assistance.  #### Just-in-time provisioning  For just-in-time user creation and provisioning, define the following attributes:  * `auto_create` * `username` * `display_name` * `email` * `group_identifiers`  Set `auto_create` to `True` if the user is not available in ThoughtSpot. If the user already exists in ThoughtSpot and the `auto_create` parameter is set to `true`, the API call will update user properties like display name, email and group assignment.  For more information, see [Just-in-time provisioning](https://developers.thoughtspot.com/docs/just-in-time-provisioning).  To add a new user and assign privileges, you need `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled, the `CONTROL_TRUSTED_AUTH`(**Can Enable or Disable Trusted Authentication**) privilege is required.  #### Important point to note All options in the token creation APIs changing the content in ThoughtSpot will do so during the token creation and not when the token is being used for authentication. For example, `auto_create:true` will create the user when the authentication token is created.      
   * @param getObjectAccessTokenRequest 
   */
  getObjectAccessToken(getObjectAccessTokenRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (getObjectAccessTokenRequest === null || getObjectAccessTokenRequest === void 0) {
        throw new RequiredError("AuthenticationApi", "getObjectAccessToken", "getObjectAccessTokenRequest");
      }
      const localVarPath = "/api/rest/2.0/auth/token/object";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(getObjectAccessTokenRequest, "GetObjectAccessTokenRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.0.0.cl or later   Creates a login session for a ThoughtSpot user with Basic authentication.  In Basic authentication method, REST clients log in to ThoughtSpot using `username` and `password` attributes. On a multi-tenant cluster with Orgs, users can pass the ID of the Org in the API request to log in to a specific Org context.  **Note**: If Multi-Factor Authentication (MFA) is enabled on your instance, the API login request with basic authentication (`username`  and `password` ) returns an error. Contact ThoughtSpot Support for assistance.  A successful login returns a session cookie that can be used in your subsequent API requests.     
   * @param loginRequest 
   */
  login(loginRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (loginRequest === null || loginRequest === void 0) {
        throw new RequiredError("AuthenticationApi", "login", "loginRequest");
      }
      const localVarPath = "/api/rest/2.0/auth/session/login";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(loginRequest, "LoginRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.0.0.cl or later    Logs out a user from their current session.      
   */
  logout(_options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      const localVarPath = "/api/rest/2.0/auth/session/logout";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.0.0.cl or later    Revokes the authentication token issued for current user session.  The token of your current session expires when you make a call to the `/api/rest/2.0/auth/token/revoke` endpoint. the users will not be able to access ThoughtSpot objects until a new token is obtained.  To restart your session, request for a new token from ThoughtSpot. See [Get Full Access Token](#/http/api-endpoints/authentication/get-full-access-token).      
   * @param revokeTokenRequest 
   */
  revokeToken(revokeTokenRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (revokeTokenRequest === null || revokeTokenRequest === void 0) {
        throw new RequiredError("AuthenticationApi", "revokeToken", "revokeTokenRequest");
      }
      const localVarPath = "/api/rest/2.0/auth/token/revoke";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(revokeTokenRequest, "RevokeTokenRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.12.0.cl or later    Validates the authentication token specified in the API request.  If your token is not valid, [Get a new token](#/http/api-endpoints/authentication/get-full-access-token).      
   * @param validateTokenRequest 
   */
  validateToken(validateTokenRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (validateTokenRequest === null || validateTokenRequest === void 0) {
        throw new RequiredError("AuthenticationApi", "validateToken", "validateTokenRequest");
      }
      const localVarPath = "/api/rest/2.0/auth/token/validate";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(validateTokenRequest, "ValidateTokenRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
};
var AuthenticationApiResponseProcessor = class {
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to getCurrentUserInfo
   * @throws ApiException if the response code was not in [200, 299]
   */
  getCurrentUserInfo(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "User",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "User",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to getCurrentUserToken
   * @throws ApiException if the response code was not in [200, 299]
   */
  getCurrentUserToken(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "GetTokenResponse",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "GetTokenResponse",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to getCustomAccessToken
   * @throws ApiException if the response code was not in [200, 299]
   */
  getCustomAccessToken(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "AccessToken",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request. This could be due to missing or incorrect parameters.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access. The request could not be authenticated.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access. The user does not have permission to access this resource.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "An unexpected error occurred on the server.", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "AccessToken",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to getFullAccessToken
   * @throws ApiException if the response code was not in [200, 299]
   */
  getFullAccessToken(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Token",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Token",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to getObjectAccessToken
   * @throws ApiException if the response code was not in [200, 299]
   */
  getObjectAccessToken(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Token",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Token",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to login
   * @throws ApiException if the response code was not in [200, 299]
   */
  login(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("204", response.httpStatusCode)) {
        return;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "void",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to logout
   * @throws ApiException if the response code was not in [200, 299]
   */
  logout(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("204", response.httpStatusCode)) {
        return;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "void",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to revokeToken
   * @throws ApiException if the response code was not in [200, 299]
   */
  revokeToken(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("204", response.httpStatusCode)) {
        return;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "void",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to validateToken
   * @throws ApiException if the response code was not in [200, 299]
   */
  validateToken(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "TokenValidationResponse",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "TokenValidationResponse",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
};

// apis/ConnectionsApi.ts
var ConnectionsApiRequestFactory = class extends BaseAPIRequestFactory {
  /**
   *   Version: 9.2.0.cl or later   Creates a connection to a data warehouse for live query services.    Requires `DATAMANAGEMENT` (**Can manage data**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) privilege is required.  #### Create a connection without tables  To create a connection without tables:  1. Pass these parameters in your API request.  * Name of the connection.  * Type of the data warehouse to connect to.  * A JSON map of configuration attributes in `data_warehouse_config`. The following example shows the configuration attributes for a SnowFlake connection:   ```   {      \"configuration\":{         \"accountName\":\"thoughtspot_partner\",         \"user\":\"tsadmin\",         \"password\":\"TestConn123\",         \"role\":\"sysadmin\",         \"warehouse\":\"MEDIUM_WH\"      },      \"externalDatabases\":[       ]   }   ``` 2. Set `validate` to `false`.  #### Create a connection with tables  To create a connection with tables:  1. Pass these parameters in your API request.  * Name of the connection.  * Type of the data warehouse to connect to.  * A JSON map of configuration attributes, database details, and table properties in `data_warehouse_config` as shown in the following example:   ```   {      \"configuration\":{         \"accountName\":\"thoughtspot_partner\",         \"user\":\"tsadmin\",         \"password\":\"TestConn123\",         \"role\":\"sysadmin\",         \"warehouse\":\"MEDIUM_WH\"      },      \"externalDatabases\":[         {            \"name\":\"AllDatatypes\",            \"isAutoCreated\":false,            \"schemas\":[               {                  \"name\":\"alldatatypes\",                  \"tables\":[                     {                        \"name\":\"allDatatypes\",                        \"type\":\"TABLE\",                        \"description\":\"\",                        \"selected\":true,                        \"linked\":true,                        \"columns\":[                           {                              \"name\":\"CNUMBER\",                              \"type\":\"INT64\",                              \"canImport\":true,                              \"selected\":true,                              \"isLinkedActive\":true,                              \"isImported\":false,                              \"tableName\":\"allDatatypes\",                              \"schemaName\":\"alldatatypes\",                              \"dbName\":\"AllDatatypes\"                           },                           {                              \"name\":\"CDECIMAL\",                              \"type\":\"INT64\",                              \"canImport\":true,                              \"selected\":true,                              \"isLinkedActive\":true,                              \"isImported\":false,                              \"tableName\":\"allDatatypes\",                              \"schemaName\":\"alldatatypes\",                              \"dbName\":\"AllDatatypes\"                           }                        ]                     }                  ]               }            ]         }      ]   }   ``` 2. Set `validate` to `true`.      
   * @param createConnectionRequest 
   */
  createConnection(createConnectionRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (createConnectionRequest === null || createConnectionRequest === void 0) {
        throw new RequiredError("ConnectionsApi", "createConnection", "createConnectionRequest");
      }
      const localVarPath = "/api/rest/2.0/connection/create";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(createConnectionRequest, "CreateConnectionRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.2.0.cl or later    **Important**: This endpoint is deprecated and will be removed from ThoughtSpot in September 2025. ThoughtSpot strongly recommends using the [Delete Connection V2](#/http/api-endpoints/connections/delete-connection-v2) endpoint to delete your connection objects.    #### Usage guidelines  Deletes a connection object.  Requires `DATAMANAGEMENT` (**Can manage data**) and edit permissions to the connection object, or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) privilege is required.  **Note**: If a connection has dependent objects, make sure you remove its associations before the delete operation.     
   * @param deleteConnectionRequest 
   */
  deleteConnection(deleteConnectionRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (deleteConnectionRequest === null || deleteConnectionRequest === void 0) {
        throw new RequiredError("ConnectionsApi", "deleteConnection", "deleteConnectionRequest");
      }
      const localVarPath = "/api/rest/2.0/connection/delete";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(deleteConnectionRequest, "DeleteConnectionRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 10.4.0.cl or later   Deletes a connection object.  **Note**: If a connection has dependent objects, make sure you remove its associations before the delete operation.  Requires `DATAMANAGEMENT` (**Can manage data**) and edit permissions to the connection object, or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) privilege is required.      
   * @param connectionIdentifier Unique ID or name of the connection.
   */
  deleteConnectionV2(connectionIdentifier, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (connectionIdentifier === null || connectionIdentifier === void 0) {
        throw new RequiredError("ConnectionsApi", "deleteConnectionV2", "connectionIdentifier");
      }
      const localVarPath = "/api/rest/2.0/connections/{connection_identifier}/delete".replace("{connection_identifier}", encodeURIComponent(String(connectionIdentifier)));
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.9.0.cl or later   Exports the difference in connection metadata between CDW and ThoughtSpot  Requires `DATAMANAGEMENT` (**Can manage data**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the following Data control privileges may be required:   - `CAN_MANAGE_CUSTOM_CALENDAR`(**Can manage custom calendars**) - `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) - `CAN_MANAGE_WORKSHEET_VIEWS_TABLES` (**Can manage data models**)  To download the connection metadata difference between ThoughtSpot and CDW, pass the connection GUID as `connection_identifier` in the API request.      
   * @param connectionIdentifier GUID of the connection
   */
  downloadConnectionMetadataChanges(connectionIdentifier, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (connectionIdentifier === null || connectionIdentifier === void 0) {
        throw new RequiredError("ConnectionsApi", "downloadConnectionMetadataChanges", "connectionIdentifier");
      }
      const localVarPath = "/api/rest/2.0/connections/download-connection-metadata-changes/{connection_identifier}".replace("{connection_identifier}", encodeURIComponent(String(connectionIdentifier)));
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.9.0.cl or later   Validates the difference in connection metadata between CDW and ThoughtSpot.  Requires `DATAMANAGEMENT` (**Can manage data**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the following Data control privileges may be required:  - `CAN_MANAGE_CUSTOM_CALENDAR`(**Can manage custom calendars**) - `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) - `CAN_MANAGE_WORKSHEET_VIEWS_TABLES` (**Can manage data models**)  Returns a boolean indicating whether there is any difference between the connection metadata at ThoughtSpot and CDW.  To get the connection metadata difference status, pass the connection GUID as `connection_identifier` in the API request.      
   * @param connectionIdentifier GUID of the connection
   */
  fetchConnectionDiffStatus(connectionIdentifier, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (connectionIdentifier === null || connectionIdentifier === void 0) {
        throw new RequiredError("ConnectionsApi", "fetchConnectionDiffStatus", "connectionIdentifier");
      }
      const localVarPath = "/api/rest/2.0/connections/fetch-connection-diff-status/{connection_identifier}".replace("{connection_identifier}", encodeURIComponent(String(connectionIdentifier)));
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.2.0.cl or later   Gets connection objects. Requires `DATAMANAGEMENT` (**Can manage data**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) privilege is required.  - To get a list of all connections available in the ThoughtSpot system, send the API request without any attributes in the request body. - To get the connection objects for a specific type of data warehouse, specify the type in `data_warehouse_types`. - To fetch details of a connection object, specify the connection object GUID or name. The `name_pattern` attribute allows passing partial text with `%` for a wildcard match. - To get details of the database, schemas, tables, or columns from a data connection object, specify `data_warehouse_object_type`. - To get a specific database, schema, table, or column from a connection object, define the object type in `data_warehouse_object_type` and object properties in the `data_warehouse_objects` array. For example, to search for a column, you must pass the database, schema, and table names in the API request.   Note that in the following example, object properties are set in a hierarchical order (`database` > `schema` > `table` > `column`).  ``` {   \"connections\": [     {       \"identifier\": \"b9d1f2ef-fa65-4a4b-994e-30fa2d57b0c2\",       \"data_warehouse_objects\": [         {           \"database\": \"NEBULADEV\",           \"schema\": \"INFORMATION_SCHEMA\",           \"table\": \"APPLICABLE_ROLES\",           \"column\": \"ROLE_NAME\"         }       ]     }   ],   \"data_warehouse_object_type\": \"COLUMN\" } ```  - To fetch data by `configuration`, specify `data_warehouse_object_type`. For example, to fetch columns from the `DEVELOPMENT` database, specify the `data_warehouse_object_type` as `DATABASE` and define the `configuration` string as `{\"database\":\"DEVELOPMENT\"}`. To get column data for a specific table, specify the table, for example,`{\"database\":\"RETAILAPPAREL\",\"table\":\"PIPES\"}`. - To query connections by `authentication_type`, specify `data_warehouse_object_type`. Supported values for `authentication_type` are:   - `SERVICE_ACCOUNT`: For connections that require service account credentials to authenticate to the Cloud Data Warehouse and fetch data.   - `OAUTH`: For connections that require OAuth credentials to authenticate to the Cloud Data Warehouse and fetch data. Teradata, Oracle, and Presto Cloud Data Warehouses do not support the OAuth authentication type.   - `IAM`: For connections that have the IAM OAuth set up. This authentication type is supported on Amazon Redshift connections only.   - `EXTOAUTH`: For connections that have external OAuth set up. ThoughtSpot supports external [OAuth with Microsoft Azure Active Directory (AD)](https://docs.thoughtspot.com/cloud/latest/ connections-snowflake-azure-ad-oauth) and [Okta for Snowflake data connections](https://docs.thoughtspot.com/cloud/latest/connections-snowflake-okta-oauth). - To include more details about connection objects in the API response, set `include_details` to `true`. - You can also sort the output by field names and filter connections by tags.  **NOTE**: When filtering connection records by parameters other than `data_warehouse_types` or `tag_identifiers`, ensure that you set `record_size` to `-1` and `record_offset` to `0` for precise results.      
   * @param searchConnectionRequest 
   */
  searchConnection(searchConnectionRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (searchConnectionRequest === null || searchConnectionRequest === void 0) {
        throw new RequiredError("ConnectionsApi", "searchConnection", "searchConnectionRequest");
      }
      const localVarPath = "/api/rest/2.0/connection/search";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(searchConnectionRequest, "SearchConnectionRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.2.0.cl or later   **Important**: This endpoint is deprecated and will be removed from ThoughtSpot in September 2025. ThoughtSpot strongly recommends using the [Update connection V2](#/http/api-endpoints/connections/update-connection-v2) endpoint to update your connection objects.  #### Usage guidelines  Updates a connection object.    Requires `DATAMANAGEMENT` (**Can manage data**) and edit permissions to the connection object, or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) privilege is required.  To update a connection object, pass these parameters in your API request:  1. GUID of the connection object. 2. If you are updating tables or database schema of a connection object:    a. Add the updated JSON map of metadata with database, schema, and tables in `data_warehouse_config`.    b. Set `validate` to `true`. 3. If you are updating a configuration attribute, connection name, or description, you can set `validate` to `false`.      
   * @param updateConnectionRequest 
   */
  updateConnection(updateConnectionRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (updateConnectionRequest === null || updateConnectionRequest === void 0) {
        throw new RequiredError("ConnectionsApi", "updateConnection", "updateConnectionRequest");
      }
      const localVarPath = "/api/rest/2.0/connection/update";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(updateConnectionRequest, "UpdateConnectionRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 10.4.0.cl or later   Updates a connection object.  Requires `DATAMANAGEMENT` (**Can manage data**) and edit permissions to the connection object, or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) privilege is required.  To update a connection object, pass these parameters in your API request:  1. GUID of the connection object. 2. If you are updating tables or database schema of a connection object:    a. Add the updated JSON map of metadata with database, schema, and tables in `data_warehouse_config`.    b. Set `validate` to `true`. 3. If you are updating a configuration attribute, connection name, or description, you can set `validate` to `false`.      
   * @param connectionIdentifier Unique ID or name of the connection.
   * @param updateConnectionV2Request 
   */
  updateConnectionV2(connectionIdentifier, updateConnectionV2Request, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (connectionIdentifier === null || connectionIdentifier === void 0) {
        throw new RequiredError("ConnectionsApi", "updateConnectionV2", "connectionIdentifier");
      }
      if (updateConnectionV2Request === null || updateConnectionV2Request === void 0) {
        throw new RequiredError("ConnectionsApi", "updateConnectionV2", "updateConnectionV2Request");
      }
      const localVarPath = "/api/rest/2.0/connections/{connection_identifier}/update".replace("{connection_identifier}", encodeURIComponent(String(connectionIdentifier)));
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(updateConnectionV2Request, "UpdateConnectionV2Request", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
};
var ConnectionsApiResponseProcessor = class {
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to createConnection
   * @throws ApiException if the response code was not in [200, 299]
   */
  createConnection(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "CreateConnectionResponse",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "CreateConnectionResponse",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to deleteConnection
   * @throws ApiException if the response code was not in [200, 299]
   */
  deleteConnection(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("204", response.httpStatusCode)) {
        return;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "void",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to deleteConnectionV2
   * @throws ApiException if the response code was not in [200, 299]
   */
  deleteConnectionV2(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("204", response.httpStatusCode)) {
        return;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "void",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to downloadConnectionMetadataChanges
   * @throws ApiException if the response code was not in [200, 299]
   */
  downloadConnectionMetadataChanges(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = yield response.getBodyAsFile();
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          "binary"
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          "binary"
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          "binary"
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          "binary"
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "HttpFile",
          "binary"
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to fetchConnectionDiffStatus
   * @throws ApiException if the response code was not in [200, 299]
   */
  fetchConnectionDiffStatus(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "FetchConnectionDiffStatusResponse",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "FetchConnectionDiffStatusResponse",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to searchConnection
   * @throws ApiException if the response code was not in [200, 299]
   */
  searchConnection(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Array<SearchConnectionResponse>",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Array<SearchConnectionResponse>",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to updateConnection
   * @throws ApiException if the response code was not in [200, 299]
   */
  updateConnection(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("204", response.httpStatusCode)) {
        return;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "void",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to updateConnectionV2
   * @throws ApiException if the response code was not in [200, 299]
   */
  updateConnectionV2(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("204", response.httpStatusCode)) {
        return;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "void",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
};

// apis/CustomActionApi.ts
var CustomActionApiRequestFactory = class extends BaseAPIRequestFactory {
  /**
   *   Version: 9.6.0.cl or later   Creates a custom action that appears as a menu action on a saved Answer or Liveboard visualization.  Requires `DEVELOPER` (**Has Developer privilege**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `DEVELOPER` (**Has developer privilege**) privilege is required.  #### Usage Guidelines  The API lets you create the following types of custom actions:  * URL-based action        Allows pushing data to an external URL. * Callback action           Triggers a callback to the host application and initiates a response payload on an embedded ThoughtSpot instance.  By default, custom actions are visible to only administrator or developer users. To make a custom action available to other users, and specify the groups in `group_identifiers`.  By default, the custom action is set as a _global_ action on all visualizations and saved Answers. To assign a custom action to specific Liveboard visualization, saved Answer, or Worksheet, set `visibility` to `false` in `default_action_config` property and specify the GUID or name of the object in `associate_metadata`.  For more information, see [Custom actions](https://developers.thoughtspot.com/docs/custom-action-intro).      
   * @param createCustomActionRequest 
   */
  createCustomAction(createCustomActionRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (createCustomActionRequest === null || createCustomActionRequest === void 0) {
        throw new RequiredError("CustomActionApi", "createCustomAction", "createCustomActionRequest");
      }
      const localVarPath = "/api/rest/2.0/customization/custom-actions";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(createCustomActionRequest, "CreateCustomActionRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.6.0.cl or later   Removes the custom action specified in the API request.  Requires `DEVELOPER` (**Has Developer privilege**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `DEVELOPER` (**Has developer privilege**) privilege is required.      
   * @param customActionIdentifier Unique ID or name of the custom action.
   */
  deleteCustomAction(customActionIdentifier, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (customActionIdentifier === null || customActionIdentifier === void 0) {
        throw new RequiredError("CustomActionApi", "deleteCustomAction", "customActionIdentifier");
      }
      const localVarPath = "/api/rest/2.0/customization/custom-actions/{custom_action_identifier}/delete".replace("{custom_action_identifier}", encodeURIComponent(String(customActionIdentifier)));
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.6.0.cl or later   Gets custom actions configured on the cluster.  Requires `DEVELOPER` (**Has Developer privilege**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `DEVELOPER` (**Has developer privilege**) privilege is required.      
   * @param searchCustomActionsRequest 
   */
  searchCustomActions(searchCustomActionsRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (searchCustomActionsRequest === null || searchCustomActionsRequest === void 0) {
        throw new RequiredError("CustomActionApi", "searchCustomActions", "searchCustomActionsRequest");
      }
      const localVarPath = "/api/rest/2.0/customization/custom-actions/search";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(searchCustomActionsRequest, "SearchCustomActionsRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.6.0.cl or later   Updates a custom action.  Requires `DEVELOPER` (**Has Developer privilege**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `DEVELOPER` (**Has developer privilege**) privilege is required.  #### Usage Guidelines  The API allows you to modify the following properties:  * Name of the custom action * Action availability to groups * Association to metadata objects * Authentication settings for a URL-based action  For more information, see [Custom actions](https://developers.thoughtspot.com/docs/custom-action-intro).      
   * @param customActionIdentifier Unique ID or name of the custom action.
   * @param updateCustomActionRequest 
   */
  updateCustomAction(customActionIdentifier, updateCustomActionRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (customActionIdentifier === null || customActionIdentifier === void 0) {
        throw new RequiredError("CustomActionApi", "updateCustomAction", "customActionIdentifier");
      }
      if (updateCustomActionRequest === null || updateCustomActionRequest === void 0) {
        throw new RequiredError("CustomActionApi", "updateCustomAction", "updateCustomActionRequest");
      }
      const localVarPath = "/api/rest/2.0/customization/custom-actions/{custom_action_identifier}/update".replace("{custom_action_identifier}", encodeURIComponent(String(customActionIdentifier)));
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(updateCustomActionRequest, "UpdateCustomActionRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
};
var CustomActionApiResponseProcessor = class {
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to createCustomAction
   * @throws ApiException if the response code was not in [200, 299]
   */
  createCustomAction(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ResponseCustomAction",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ResponseCustomAction",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to deleteCustomAction
   * @throws ApiException if the response code was not in [200, 299]
   */
  deleteCustomAction(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("204", response.httpStatusCode)) {
        return;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "void",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to searchCustomActions
   * @throws ApiException if the response code was not in [200, 299]
   */
  searchCustomActions(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Array<ResponseCustomAction>",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Array<ResponseCustomAction>",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to updateCustomAction
   * @throws ApiException if the response code was not in [200, 299]
   */
  updateCustomAction(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("204", response.httpStatusCode)) {
        return;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "void",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
};

// apis/DBTApi.ts
var DBTApiRequestFactory = class extends BaseAPIRequestFactory {
  /**
   *   Version: 9.9.0.cl or later   Creates a DBT connection object in ThoughtSpot.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege or `DATAMANAGEMENT` (**Can manage data**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the following Data control privileges may be required:  - `CAN_MANAGE_CUSTOM_CALENDAR`(**Can manage custom calendars**) - `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) - `CAN_MANAGE_WORKSHEET_VIEWS_TABLES` (**Can manage data models**)  #### About create DBT connection DBT connection in ThoughtSpot is used by the user to define DBT credentials for cloud . The API needs  embrace connection, embrace database name, DBT url, import type, DBT account identifier, DBT project identifier, DBT access token and environment details (or) embrace connection, embrace database name, import type, file_content to create a connection object. To know more about DBT, see ThoughtSpot Product Documentation.      
   * @param dbtConnectionRequest 
   */
  dbtConnection(dbtConnectionRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (dbtConnectionRequest === null || dbtConnectionRequest === void 0) {
        throw new RequiredError("DBTApi", "dbtConnection", "dbtConnectionRequest");
      }
      const localVarPath = "/api/rest/2.0/dbt/dbt-connection";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(dbtConnectionRequest, "DbtConnectionRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.9.0.cl or later   Resynchronize the existing list of models, tables, worksheet tml’s and import them to Thoughtspot based on the DBT connection object.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege or `DATAMANAGEMENT` (**Can manage data**) privilege, along with an existing DBT connection. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the following data control privileges may be required:  - `CAN_MANAGE_CUSTOM_CALENDAR`(**Can manage custom calendars**) - `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) - `CAN_MANAGE_WORKSHEET_VIEWS_TABLES` (**Can manage data models**)      
   * @param dbtGenerateSyncTmlRequest 
   */
  dbtGenerateSyncTml(dbtGenerateSyncTmlRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (dbtGenerateSyncTmlRequest === null || dbtGenerateSyncTmlRequest === void 0) {
        throw new RequiredError("DBTApi", "dbtGenerateSyncTml", "dbtGenerateSyncTmlRequest");
      }
      const localVarPath = "/api/rest/2.0/dbt/generate-sync-tml";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(dbtGenerateSyncTmlRequest, "DbtGenerateSyncTmlRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.9.0.cl or later   Generate required table and worksheet and import them.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege or `DATAMANAGEMENT` (**Can manage data**) privilege, along with an existing DBT connection. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the following data control privileges may be required:  - `CAN_MANAGE_CUSTOM_CALENDAR`(**Can manage custom calendars**) - `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) - `CAN_MANAGE_WORKSHEET_VIEWS_TABLES` (**Can manage data models**)  #### About generate TML Models and Worksheets to be imported can be selected by the user as part of the API.      
   * @param dbtGenerateTmlRequest 
   */
  dbtGenerateTml(dbtGenerateTmlRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (dbtGenerateTmlRequest === null || dbtGenerateTmlRequest === void 0) {
        throw new RequiredError("DBTApi", "dbtGenerateTml", "dbtGenerateTmlRequest");
      }
      const localVarPath = "/api/rest/2.0/dbt/generate-tml";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(dbtGenerateTmlRequest, "DbtGenerateTmlRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.9.0.cl or later   Gets a list of DBT connection objects by user and organization, available on the ThoughtSpot system.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege or `DATAMANAGEMENT` (**Can manage data**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the following Data control privileges may be required:  - `CAN_MANAGE_CUSTOM_CALENDAR`(**Can manage custom calendars**) - `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) - `CAN_MANAGE_WORKSHEET_VIEWS_TABLES` (**Can manage data models**)  #### About search DBT connection To get details of a specific DBT connection identifier, database connection identifier, database connection name, database name, project name, project identifier, environment identifier , import type and author.      
   */
  dbtSearch(_options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      const localVarPath = "/api/rest/2.0/dbt/search";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.9.0.cl or later   Removes the specified DBT connection object from the ThoughtSpot system.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) or `DATAMANAGEMENT` (**Can manage data ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the following Data control privileges may be required:  - `CAN_MANAGE_CUSTOM_CALENDAR`(**Can manage custom calendars**) - `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) - `CAN_MANAGE_WORKSHEET_VIEWS_TABLES` (**Can manage data models**)      
   * @param dbtConnectionIdentifier Unique ID of the DBT Connection.
   */
  deleteDbtConnection(dbtConnectionIdentifier, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (dbtConnectionIdentifier === null || dbtConnectionIdentifier === void 0) {
        throw new RequiredError("DBTApi", "deleteDbtConnection", "dbtConnectionIdentifier");
      }
      const localVarPath = "/api/rest/2.0/dbt/{dbt_connection_identifier}/delete".replace("{dbt_connection_identifier}", encodeURIComponent(String(dbtConnectionIdentifier)));
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.9.0.cl or later   Updates a DBT connection object.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege or `DATAMANAGEMENT` (**Can manage data ThoughtSpot**) privilege, along with an existing DBT connection. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the following data control privileges may be required:  - `CAN_MANAGE_CUSTOM_CALENDAR`(**Can manage custom calendars**) - `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) - `CAN_MANAGE_WORKSHEET_VIEWS_TABLES` (**Can manage data models**)  #### About update DBT connection You can modify DBT connection object properties such as embrace connection name, embrace database name, import type, account identifier, access token, project identifier and environment (or) embrace connection, embrace database name, import type, file_content settings.      
   * @param updateDbtConnectionRequest 
   */
  updateDbtConnection(updateDbtConnectionRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (updateDbtConnectionRequest === null || updateDbtConnectionRequest === void 0) {
        throw new RequiredError("DBTApi", "updateDbtConnection", "updateDbtConnectionRequest");
      }
      const localVarPath = "/api/rest/2.0/dbt/update-dbt-connection";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(updateDbtConnectionRequest, "UpdateDbtConnectionRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
};
var DBTApiResponseProcessor = class {
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to dbtConnection
   * @throws ApiException if the response code was not in [200, 299]
   */
  dbtConnection(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "any",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "any",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to dbtGenerateSyncTml
   * @throws ApiException if the response code was not in [200, 299]
   */
  dbtGenerateSyncTml(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "any",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "any",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to dbtGenerateTml
   * @throws ApiException if the response code was not in [200, 299]
   */
  dbtGenerateTml(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "any",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "any",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to dbtSearch
   * @throws ApiException if the response code was not in [200, 299]
   */
  dbtSearch(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Array<DbtSearchResponse>",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Array<DbtSearchResponse>",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to deleteDbtConnection
   * @throws ApiException if the response code was not in [200, 299]
   */
  deleteDbtConnection(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("204", response.httpStatusCode)) {
        return;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "void",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to updateDbtConnection
   * @throws ApiException if the response code was not in [200, 299]
   */
  updateDbtConnection(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "any",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "any",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
};

// apis/DataApi.ts
var DataApiRequestFactory = class extends BaseAPIRequestFactory {
  /**
   *   Version: 9.0.0.cl or later   Fetches data from a saved Answer.  Requires at least view access to the saved Answer.  The `record_size` attribute determines the number of records to retrieve in an API call. For more information about pagination, record size, and maximum row limit, see [Pagination and record size settings](https://developers.thoughtspot.com/docs/fetch-data-and-report-apis#_pagination_settings_for_data_and_report_apis).     
   * @param fetchAnswerDataRequest 
   */
  fetchAnswerData(fetchAnswerDataRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (fetchAnswerDataRequest === null || fetchAnswerDataRequest === void 0) {
        throw new RequiredError("DataApi", "fetchAnswerData", "fetchAnswerDataRequest");
      }
      const localVarPath = "/api/rest/2.0/metadata/answer/data";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(fetchAnswerDataRequest, "FetchAnswerDataRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.0.0.cl or later   Gets data from a Liveboard object and its visualization.    Requires at least view access to the Liveboard.  #### Usage guidelines  In the request body, specify the GUID or name of the Liveboard. To get data for specific visualizations, add the GUIDs or names of the visualizations in the API request.  To include unsaved changes in the report, pass the `transient_pinboard_content` script generated from the `getExportRequestForCurrentPinboard` method in the Visual Embed SDK. Upon successful execution, the API returns the report with unsaved changes. If the new Liveboard experience mode, the transient content includes ad hoc changes to visualizations such as sorting, toggling of legends, and data drill down.  For more information, and see [Liveboard data API](https://developers.thoughtspot.com/docs/fetch-data-and-report-apis#_fetch_liveboard_data_api).     
   * @param fetchLiveboardDataRequest 
   */
  fetchLiveboardData(fetchLiveboardDataRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (fetchLiveboardDataRequest === null || fetchLiveboardDataRequest === void 0) {
        throw new RequiredError("DataApi", "fetchLiveboardData", "fetchLiveboardDataRequest");
      }
      const localVarPath = "/api/rest/2.0/metadata/liveboard/data";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(fetchLiveboardDataRequest, "FetchLiveboardDataRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.0.0.cl or later   Generates an Answer from a given data source.  Requires at least view access to the data source object (Worksheet or View).  #### Usage guidelines  To search data, specify the data source GUID in `logical_table_identifier`. The data source can be a Worksheet, View, Table, or SQL view.  Pass search tokens in the `query_string` attribute in the API request as shown in the following example:  ``` {   \"query_string\": \"[sales] by [store]\",   \"logical_table_identifier\": \"cd252e5c-b552-49a8-821d-3eadaa049cca\", } ```  For more information about the `query_string` format and data source attribute, see [Search data API](https://developers.thoughtspot.com/docs/fetch-data-and-report-apis#_search_data_api).    The `record_size` attribute determines the number of records to retrieve in an API call. For more information about pagination, record size, and maximum row limit, see [Pagination and record size settings](https://developers.thoughtspot.com/docs/fetch-data-and-report-apis#_pagination_settings_for_data_and_report_api).       
   * @param searchDataRequest 
   */
  searchData(searchDataRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (searchDataRequest === null || searchDataRequest === void 0) {
        throw new RequiredError("DataApi", "searchData", "searchDataRequest");
      }
      const localVarPath = "/api/rest/2.0/searchdata";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(searchDataRequest, "SearchDataRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
};
var DataApiResponseProcessor = class {
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to fetchAnswerData
   * @throws ApiException if the response code was not in [200, 299]
   */
  fetchAnswerData(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "AnswerDataResponse",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "AnswerDataResponse",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to fetchLiveboardData
   * @throws ApiException if the response code was not in [200, 299]
   */
  fetchLiveboardData(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "LiveboardDataResponse",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "LiveboardDataResponse",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to searchData
   * @throws ApiException if the response code was not in [200, 299]
   */
  searchData(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "SearchDataResponse",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "SearchDataResponse",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
};

// apis/EmailCustomisationApi.ts
var EmailCustomisationApiRequestFactory = class extends BaseAPIRequestFactory {
  /**
   *  Version: 10.10.0.cl or later   Creates a custom configuration for the email customisation  #### Pre-requisites  Requires `DEVELOPER` (**has developer privilege**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `_Has developer privilege` privilege is required. Coms should be enabled on the cluster.  #### Usage guidelines  To create a custom confuguration:  1. Pass these parameters in your API request.  - A JSON map of configuration attributes `template_properties`. The following example shows the configuration attribures for a csutom configuration:  ``` {     {     \"logoUrl\": \"<logo_url>\",     \"homeUrl\": \"<home_url>\",     \"productName\": \"<Company Name in the Mail>\",     \"footerAddress\": \"<address to be visible in the footer>\",     \"ctaButtonBgColor\": \"#444DEA\",     \"ctaTextFontColor\": \"#FFFFFF\",     \"primaryBgColor\": \"#D3DEF0\",     \"hideMobileAppNudge\": <true/false>,     \"hideTsVocabularyDefinitions\": <true/false>e,     \"hideProductName\": <true/false>,     \"hideFooterPhone\": <true/false>,     \"hideFooterAddress\": <true/false>,     \"hidePrivacyPolicy\": <true/false>,     \"hideManageNotification\": <true/false>,     \"fontfamily\": \"<to maintain a single font in the entire email>\"   } } ```      
   * @param createEmailCustomisationRequest 
   */
  createEmailCustomisation(createEmailCustomisationRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (createEmailCustomisationRequest === null || createEmailCustomisationRequest === void 0) {
        throw new RequiredError("EmailCustomisationApi", "createEmailCustomisation", "createEmailCustomisationRequest");
      }
      const localVarPath = "/api/rest/2.0/customization/email";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(createEmailCustomisationRequest, "CreateEmailCustomisationRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *  Version: 10.10.0.cl or later   Deletes the configuration for the email customisation.  #### Pre-requisites  Requires `DEVELOPER` (**has developer privilege**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `_Has developer privilege` privilege is required. Coms should be enabled on the cluster.  #### Usage guidelines  Deletes the configuration available for the cluster/org. Pass the `template_identifier` in the API request.  Note: `template_identifier` can be fetched from search API request.      
   * @param templateIdentifier Unique ID or name of the email customization.
   */
  deleteEmailCustomisation(templateIdentifier, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (templateIdentifier === null || templateIdentifier === void 0) {
        throw new RequiredError("EmailCustomisationApi", "deleteEmailCustomisation", "templateIdentifier");
      }
      const localVarPath = "/api/rest/2.0/customization/email/{template_identifier}/delete".replace("{template_identifier}", encodeURIComponent(String(templateIdentifier)));
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *  Version: 10.10.0.cl or later   Search the email customisation configuration if any set for the ThoughtSpot system.  #### Pre-requisites  Requires `DEVELOPER` (**has developer privilege**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `_Has developer privilege` privilege is required. Coms should be enabled on the cluster.  #### Usage guidelines  To get the list of configurations set in the cluster/org.      
   */
  searchEmailCustomisation(_options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      const localVarPath = "/api/rest/2.0/customization/email/search";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *  Version: 10.10.0.cl or later   Validates the email customisation configuration if any set for the ThoughtSpot system.  #### Pre-requisites  Requires `DEVELOPER` (**has developer privilege**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `_Has developer privilege` privilege is required. Coms should be enabled on the cluster.      
   */
  validateEmailCustomisation(_options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      const localVarPath = "/api/rest/2.0/customization/email/validate";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
};
var EmailCustomisationApiResponseProcessor = class {
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to createEmailCustomisation
   * @throws ApiException if the response code was not in [200, 299]
   */
  createEmailCustomisation(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "CreateEmailCustomisationResponse",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "CreateEmailCustomisationResponse",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to deleteEmailCustomisation
   * @throws ApiException if the response code was not in [200, 299]
   */
  deleteEmailCustomisation(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("204", response.httpStatusCode)) {
        return;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "void",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to searchEmailCustomisation
   * @throws ApiException if the response code was not in [200, 299]
   */
  searchEmailCustomisation(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Array<CreateEmailCustomisationResponse>",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Array<CreateEmailCustomisationResponse>",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to validateEmailCustomisation
   * @throws ApiException if the response code was not in [200, 299]
   */
  validateEmailCustomisation(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("204", response.httpStatusCode)) {
        return;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "void",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
};

// apis/GroupsApi.ts
var GroupsApiRequestFactory = class extends BaseAPIRequestFactory {
  /**
   *   Version: 9.0.0.cl or later   Creates a group object in ThoughtSpot.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `GROUP_ADMINISTRATION` (**Can manage groups**) privilege is required.  #### About groups Groups in ThoughtSpot are used by the administrators to define privileges and organize users based on their roles and access requirements. To know more about groups and privileges, see [ThoughtSpot Product Documentation](https://docs.thoughtspot.com/cloud/latest/groups-privileges).  #### Supported operations  The API endpoint lets you perform the following operations:  * Assign privileges * Add users * Define sharing visibility * Add sub-groups * Assign a default Liveboard      
   * @param createUserGroupRequest 
   */
  createUserGroup(createUserGroupRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (createUserGroupRequest === null || createUserGroupRequest === void 0) {
        throw new RequiredError("GroupsApi", "createUserGroup", "createUserGroupRequest");
      }
      const localVarPath = "/api/rest/2.0/groups/create";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(createUserGroupRequest, "CreateUserGroupRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.0.0.cl or later   Removes the specified group object from the ThoughtSpot system.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `GROUP_ADMINISTRATION` (**Can manage groups**) privilege is required.      
   * @param groupIdentifier GUID or name of the group.
   */
  deleteUserGroup(groupIdentifier, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (groupIdentifier === null || groupIdentifier === void 0) {
        throw new RequiredError("GroupsApi", "deleteUserGroup", "groupIdentifier");
      }
      const localVarPath = "/api/rest/2.0/groups/{group_identifier}/delete".replace("{group_identifier}", encodeURIComponent(String(groupIdentifier)));
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.0.0.cl or later   Imports group objects from external databases into ThoughtSpot.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `GROUP_ADMINISTRATION` (**Can manage groups**) privilege is required.  During the import operation:  * If the specified group is not available in ThoughtSpot, it will be added to ThoughtSpot. * If `delete_unspecified_groups` is set to `true`, the groups not specified in the API request, excluding administrator and system user groups, are deleted. * If the specified groups are already available in ThoughtSpot, the object properties of these groups are modified and synchronized as per the input data in the API request.  A successful API call returns the object that represents the changes made in the ThoughtSpot system.      
   * @param importUserGroupsRequest 
   */
  importUserGroups(importUserGroupsRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (importUserGroupsRequest === null || importUserGroupsRequest === void 0) {
        throw new RequiredError("GroupsApi", "importUserGroups", "importUserGroupsRequest");
      }
      const localVarPath = "/api/rest/2.0/groups/import";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(importUserGroupsRequest, "ImportUserGroupsRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.0.0.cl or later   Gets a list of user group objects from the ThoughtSpot system.  To get details of a specific user group, specify the user group GUID or name. You can also filter the API response based on User ID, Org ID, Role ID, type of group, sharing visibility, privileges assigned to the group, and the Liveboard IDs assigned to the users in the group.  Available to all users. Users with `ADMINISTRATION` (**Can administer ThoughtSpot**) privileges can view all users properties.  If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `GROUP_ADMINISTRATION` (**Can manage groups**) privilege is required.  **NOTE**: If you do not get precise results, try setting `record_size` to `-1` and `record_offset` to `0`.      
   * @param searchUserGroupsRequest 
   */
  searchUserGroups(searchUserGroupsRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (searchUserGroupsRequest === null || searchUserGroupsRequest === void 0) {
        throw new RequiredError("GroupsApi", "searchUserGroups", "searchUserGroupsRequest");
      }
      const localVarPath = "/api/rest/2.0/groups/search";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(searchUserGroupsRequest, "SearchUserGroupsRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.0.0.cl or later   Updates the properties of a group object in ThoughtSpot.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `GROUP_ADMINISTRATION` (**Can manage groups**) privilege is required.  #### Supported operations  This API endpoint lets you perform the following operations in a single API request:  * Edit [privileges](https://developers.thoughtspot.com/docs/?pageid=api-user-management#group-privileges) * Add or remove users * Change sharing visibility settings * Add or remove sub-groups * Assign a default Liveboard  or update the existing settings      
   * @param groupIdentifier GUID or name of the group.
   * @param updateUserGroupRequest 
   */
  updateUserGroup(groupIdentifier, updateUserGroupRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (groupIdentifier === null || groupIdentifier === void 0) {
        throw new RequiredError("GroupsApi", "updateUserGroup", "groupIdentifier");
      }
      if (updateUserGroupRequest === null || updateUserGroupRequest === void 0) {
        throw new RequiredError("GroupsApi", "updateUserGroup", "updateUserGroupRequest");
      }
      const localVarPath = "/api/rest/2.0/groups/{group_identifier}/update".replace("{group_identifier}", encodeURIComponent(String(groupIdentifier)));
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(updateUserGroupRequest, "UpdateUserGroupRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
};
var GroupsApiResponseProcessor = class {
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to createUserGroup
   * @throws ApiException if the response code was not in [200, 299]
   */
  createUserGroup(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "UserGroupResponse",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "UserGroupResponse",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to deleteUserGroup
   * @throws ApiException if the response code was not in [200, 299]
   */
  deleteUserGroup(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("204", response.httpStatusCode)) {
        return;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "void",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to importUserGroups
   * @throws ApiException if the response code was not in [200, 299]
   */
  importUserGroups(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ImportUserGroupsResponse",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ImportUserGroupsResponse",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to searchUserGroups
   * @throws ApiException if the response code was not in [200, 299]
   */
  searchUserGroups(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Array<UserGroupResponse>",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Array<UserGroupResponse>",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to updateUserGroup
   * @throws ApiException if the response code was not in [200, 299]
   */
  updateUserGroup(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("204", response.httpStatusCode)) {
        return;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "void",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
};

// apis/LogApi.ts
var LogApiRequestFactory = class extends BaseAPIRequestFactory {
  /**
   *   Version: 9.0.0.cl or later   Fetches security audit logs.    Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the [Admin Control](https://developers.thoughtspot.com/docs/rbac#_admin_control) privileges are required.   #### Usage guidelines  By default, the API retrieves logs for the last 24 hours. You can set a custom duration in EPOCH time. Make sure the log duration specified in your API request doesn’t exceed 24 hours. If you must fetch logs for a longer time range, modify the duration and make multiple sequential API requests.  Upon successful execution, the API returns logs with the following information: * timestamp of the event * event ID * event type * name and GUID of the user * IP address of ThoughtSpot instance  For more information see [Audit logs Documentation](https://developers.thoughtspot.com/docs/audit-logs).      
   * @param fetchLogsRequest 
   */
  fetchLogs(fetchLogsRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (fetchLogsRequest === null || fetchLogsRequest === void 0) {
        throw new RequiredError("LogApi", "fetchLogs", "fetchLogsRequest");
      }
      const localVarPath = "/api/rest/2.0/logs/fetch";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(fetchLogsRequest, "FetchLogsRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
};
var LogApiResponseProcessor = class {
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to fetchLogs
   * @throws ApiException if the response code was not in [200, 299]
   */
  fetchLogs(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Array<LogResponse>",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Array<LogResponse>",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
};

// apis/MetadataApi.ts
var MetadataApiRequestFactory = class extends BaseAPIRequestFactory {
  /**
   *  Convert worksheets to models    Version: 10.6.0.cl or later   ## Prerequisites - **Privileges Required:**   - `DATAMANAGEMENT` (Can manage data) or `ADMINISTRATION` (Can administer ThoughtSpot). - **Additional Privileges (if RBAC is enabled):**   - `CAN_MANAGE_WORKSHEET_VIEWS_TABLES` (Can manage data models).  ---  ## Usage Guidelines  ### Parameters  1. **worksheet_ids**      - **Description:** A comma-separated list of GUIDs (Globally Unique Identifiers) specifying the Worksheets to be converted.      - **Usage:**        - Used only when `convert_all` is set to `false`.        - Leave empty or omit when `convert_all` is set to `true`.  2. **exclude_worksheet_ids**      - **Description:** A comma-separated list of GUIDs specifying Worksheets to be excluded from conversion.      - **Usage:**        - Useful when `convert_all` is set to `true` and specific Worksheets should not be converted.  3. **convert_all**      - **Description:** Sets the scope of conversion.    - **Options:**        - `true`: Converts all Worksheets in the system, except those specified in `exclude_worksheet_ids`.        - `false`: Converts only the Worksheets listed in `worksheet_ids`.  4. **apply_changes**      - **Description:** Specifies whether to apply changes directly to ThoughtSpot or to generate a preview before applying any changes.Used for validation of conversion.    - **Options:**        - `true`: Applies conversion changes directly to ThoughtSpot.      - `false`: Generates only a preview of the changes and does not apply any changes to ThoughtSpot  ---  ## Best Practices  1. **Backup Before Conversion:**      Always export metadata as a backup before initiating the conversion process  2. **Partial Conversion for Testing:**      Test the conversion process by setting `convert_all` to `false` and specifying a small number of `worksheet_ids`.  3. **Verify Dependencies:**      Check for dependent objects, such as Tables and Connections, to avoid invalid references.  4. **Review Changes:**      Use `apply_changes: false` to preview the impact of the conversion before applying changes.  ---  ## Examples  ### Convert Specific Worksheets ```json {   \"worksheet_ids\": [\"guid1\", \"guid2\", \"guid3\"],   \"exclude_worksheet_ids\": [],   \"convert_all\": false,   \"apply_changes\": true } ```  ### Convert All Accessible Worksheets ```json {   \"worksheet_ids\": [],   \"exclude_worksheet_ids\": [],   \"convert_all\": true,   \"apply_changes\": true } ```  ### Exclude Specific Worksheets While Converting All Accessible Worksheets ```json {   \"worksheet_ids\": [],   \"exclude_worksheet_ids\": [\"abc\"],   \"convert_all\": true,   \"apply_changes\": true } ```     
   * @param convertWorksheetToModelRequest 
   */
  convertWorksheetToModel(convertWorksheetToModelRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (convertWorksheetToModelRequest === null || convertWorksheetToModelRequest === void 0) {
        throw new RequiredError("MetadataApi", "convertWorksheetToModel", "convertWorksheetToModelRequest");
      }
      const localVarPath = "/api/rest/2.0/metadata/worksheets/convert";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(convertWorksheetToModelRequest, "ConvertWorksheetToModelRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *  Makes a copy of an Answer or Liveboard saved in Atlas    Version: 10.3.0.cl or later   Creates a copy of a metadata object.  Requires at least view access to the metadata object being copied.  Upon successful execution, the API creates a copy of the metadata object specified in the API request and returns the ID of the new object.      
   * @param copyObjectRequest 
   */
  copyObject(copyObjectRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (copyObjectRequest === null || copyObjectRequest === void 0) {
        throw new RequiredError("MetadataApi", "copyObject", "copyObjectRequest");
      }
      const localVarPath = "/api/rest/2.0/metadata/copyobject";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(copyObjectRequest, "CopyObjectRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.0.0.cl or later   Removes the specified metadata object from the ThoughtSpot system.  Requires edit access to the metadata object.       
   * @param deleteMetadataRequest 
   */
  deleteMetadata(deleteMetadataRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (deleteMetadataRequest === null || deleteMetadataRequest === void 0) {
        throw new RequiredError("MetadataApi", "deleteMetadata", "deleteMetadataRequest");
      }
      const localVarPath = "/api/rest/2.0/metadata/delete";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(deleteMetadataRequest, "DeleteMetadataRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.0.0.cl or later   Exports the [TML](https://docs.thoughtspot.com/cloud/latest/tml) representation of metadata objects in JSON or YAML format.  Requires `DATADOWNLOADING` (**Can download Data**) and at least view access to the metadata object.  #### Usage guidelines  * You can export one or several objects by passing metadata object GUIDs in the `metadata` array. * When exporting TML content for a Liveboard or Answer object, you can set `export_associated` to `true` to retrieve TML content for underlying Worksheets, Tables, or Views, including the GUID of each object within the headers. When   `export_associated` is set to `true`, consider retrieving one metadata object at a time. * Set `export_fqns` to `true` to add FQNs of the referenced objects in the TML content. For example, if you send an API request to retrieve TML for a Liveboard and its associated objects, the API returns the TML content with FQNs of the referenced Worksheet. Exporting TML with FQNs is useful if ThoughtSpot has multiple objects with the same name and you want to eliminate ambiguity when importing TML files into ThoughtSpot. It eliminates the need for adding FQNs of the referenced objects manually during the import operation. * To export only the TML of feedbacks associated with an object, set the GUID of the object as `identifier`, and set the `type` as `FEEDBACK` in the `metadata` array. * To export the TML of an object along with the feedbacks associated with it, set the GUID of the object as `identifier`, set the `type` as `LOGIAL_TABLE` in the `metadata` array, and set `export_with_associated_feedbacks` in `export_options` to true.  For more information, see [TML Documentation](https://developers.thoughtspot.com/docs/tml#_export_a_tml).  For more information on feedbacks, see [Feedback Documentation](https://docs.thoughtspot.com/cloud/latest/sage-feedback).     
   * @param exportMetadataTMLRequest 
   */
  exportMetadataTML(exportMetadataTMLRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (exportMetadataTMLRequest === null || exportMetadataTMLRequest === void 0) {
        throw new RequiredError("MetadataApi", "exportMetadataTML", "exportMetadataTMLRequest");
      }
      const localVarPath = "/api/rest/2.0/metadata/tml/export";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(exportMetadataTMLRequest, "ExportMetadataTMLRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 10.1.0.cl or later   Exports the [TML](https://docs.thoughtspot.com/cloud/latest/tml) representation of metadata objects in JSON or YAML format.  ### **Permissions Required**  Requires `DATAMANAGEMENT` (**Can manage data**) and `USERMANAGEMENT` (**Can manage users**) privileges.  #### **Usage Guidelines**  This API is only applicable for `USER`, `GROUP`, and `ROLES` metadata types.  - `batch_offset` Indicates the starting position within the complete dataset from which the API should begin returning objects. Useful for paginating results efficiently. - `batch_size` Specifies the number of objects or items to retrieve in a single request. Helps control response size for better performance. - `edoc_format` Defines the format of the TML content. The exported metadata can be in JSON or YAML format. - `export_dependent` Specifies whether to include dependent metadata objects in the export. Ensures related objects are also retrieved if needed. - `all_orgs_override` Indicates whether the export operation applies across all organizations. Useful for multi-tenant environments where cross-org exports are required.      
   * @param exportMetadataTMLBatchedRequest 
   */
  exportMetadataTMLBatched(exportMetadataTMLBatchedRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (exportMetadataTMLBatchedRequest === null || exportMetadataTMLBatchedRequest === void 0) {
        throw new RequiredError("MetadataApi", "exportMetadataTMLBatched", "exportMetadataTMLBatchedRequest");
      }
      const localVarPath = "/api/rest/2.0/metadata/tml/export/batch";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(exportMetadataTMLBatchedRequest, "ExportMetadataTMLBatchedRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.0.0.cl or later   Fetches the underlying SQL query data for an Answer object.  Requires at least view access to the Answer object.  Upon successful execution, the API returns the SQL queries for the specified object as shown in this example: ``` {    \"metadata_id\":\"8fbe44a8-46ad-4b16-8d39-184b2fada490\",    \"metadata_name\":\"Total sales\",    \"metadata_type\":\"ANSWER\",    \"sql_queries\":[       {          \"metadata_id\":\"8fbe44a8-46ad-4b16-8d39-184b2fada490\",          \"metadata_name\":\"Total sales -test\",          \"sql_query\":\"SELECT \\n  \\\"ta_1\\\".\\\"REGION\\\" \\\"ca_1\\\", \\n  \\\"ta_2\\\".\\\"PRODUCTNAME\\\" \\\"ca_2\\\", \\n  \\\"ta_1\\\".\\\"STORENAME\\\" \\\"ca_3\\\", \\n  CASE\\n    WHEN sum(\\\"ta_3\\\".\\\"SALES\\\") IS NOT NULL THEN sum(\\\"ta_3\\\".\\\"SALES\\\")\\n    ELSE 0\\n  END \\\"ca_4\\\", \\n  CASE\\n    WHEN sum(\\\"ta_3\\\".\\\"QUANTITYPURCHASED\\\") IS NOT NULL THEN sum(\\\"ta_3\\\".\\\"QUANTITYPURCHASED\\\")\\n    ELSE 0\\n  END \\\"ca_5\\\"\\nFROM \\\"RETAILAPPAREL\\\".\\\"PUBLIC\\\".\\\"FACT_RETAPP_SALES\\\" \\\"ta_3\\\"\\n  JOIN \\\"RETAILAPPAREL\\\".\\\"PUBLIC\\\".\\\"DIM_RETAPP_STORES\\\" \\\"ta_1\\\"\\n    ON \\\"ta_3\\\".\\\"STOREID\\\" = \\\"ta_1\\\".\\\"STOREID\\\"\\n  JOIN \\\"RETAILAPPAREL\\\".\\\"PUBLIC\\\".\\\"DIM_RETAPP_PRODUCTS\\\" \\\"ta_2\\\"\\n    ON \\\"ta_3\\\".\\\"PRODUCTID\\\" = \\\"ta_2\\\".\\\"PRODUCTID\\\"\\nGROUP BY \\n  \\\"ca_1\\\", \\n  \\\"ca_2\\\", \\n  \\\"ca_3\\\"\\n\"       }    ] } ```      
   * @param fetchAnswerSqlQueryRequest 
   */
  fetchAnswerSqlQuery(fetchAnswerSqlQueryRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (fetchAnswerSqlQueryRequest === null || fetchAnswerSqlQueryRequest === void 0) {
        throw new RequiredError("MetadataApi", "fetchAnswerSqlQuery", "fetchAnswerSqlQueryRequest");
      }
      const localVarPath = "/api/rest/2.0/metadata/answer/sql";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(fetchAnswerSqlQueryRequest, "FetchAnswerSqlQueryRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 10.4.0.cl or later   Gets information about the status of the TML async import task scheduled using the `/api/rest/2.0/metadata/tml/async/import` API call.  To fetch the task details, specify the ID of the TML async import task.    Requires access to the task ID. The API allows users who initiated the asynchronous TML import via `/api/rest/2.0/metadata/tml/async/import` to view the status of their tasks.  Users with administration privilege can view the status of all import tasks initiated by the users in their Org.  #### Usage guidelines  See [TML API Documentation](https://developers.thoughtspot.com/docs/tml#_fetch_status_of_the_tml_import_task) for usage guidelines.     
   * @param fetchAsyncImportTaskStatusRequest 
   */
  fetchAsyncImportTaskStatus(fetchAsyncImportTaskStatusRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (fetchAsyncImportTaskStatusRequest === null || fetchAsyncImportTaskStatusRequest === void 0) {
        throw new RequiredError("MetadataApi", "fetchAsyncImportTaskStatus", "fetchAsyncImportTaskStatusRequest");
      }
      const localVarPath = "/api/rest/2.0/metadata/tml/async/status";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(fetchAsyncImportTaskStatusRequest, "FetchAsyncImportTaskStatusRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.0.0.cl or later   Fetches the underlying SQL query data for a Liveboard object and its visualizations.  Requires at least view access to the Liveboard object.  To get SQL query data for a Liveboard, specify the GUID of the Liveboard. Optionally, you can add an array of visualization GUIDs to retrieve the SQL query data for visualizations in the Liveboard.  Upon successful execution, the API returns the SQL queries for the specified object as shown in this example: ``` {   \"metadata_id\": \"fa68ae91-7588-4136-bacd-d71fb12dda69\",   \"metadata_name\": \"Total Sales\",   \"metadata_type\": \"LIVEBOARD\",   \"sql_queries\": [     {       \"metadata_id\": \"b3b6d2b9-089a-490c-8e16-b144650b7843\",       \"metadata_name\": \"Total quantity purchased, Total sales by region\",       \"sql_query\": \"SELECT \\n  \\\"ta_1\\\".\\\"REGION\\\" \\\"ca_1\\\", \\n  CASE\\n    WHEN sum(\\\"ta_2\\\".\\\"QUANTITYPURCHASED\\\") IS NOT NULL THEN sum(\\\"ta_2\\\".\\\"QUANTITYPURCHASED\\\")\\n    ELSE 0\\n  END \\\"ca_2\\\", \\n  CASE\\n    WHEN sum(\\\"ta_2\\\".\\\"SALES\\\") IS NOT NULL THEN sum(\\\"ta_2\\\".\\\"SALES\\\")\\n    ELSE 0\\n  END \\\"ca_3\\\"\\nFROM \\\"RETAILAPPAREL\\\".\\\"PUBLIC\\\".\\\"FACT_RETAPP_SALES\\\" \\\"ta_2\\\"\\n  JOIN \\\"RETAILAPPAREL\\\".\\\"PUBLIC\\\".\\\"DIM_RETAPP_STORES\\\" \\\"ta_1\\\"\\n    ON \\\"ta_2\\\".\\\"STOREID\\\" = \\\"ta_1\\\".\\\"STOREID\\\"\\nGROUP BY \\\"ca_1\\\"\"     }   ] } ```      
   * @param fetchLiveboardSqlQueryRequest 
   */
  fetchLiveboardSqlQuery(fetchLiveboardSqlQueryRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (fetchLiveboardSqlQueryRequest === null || fetchLiveboardSqlQueryRequest === void 0) {
        throw new RequiredError("MetadataApi", "fetchLiveboardSqlQuery", "fetchLiveboardSqlQueryRequest");
      }
      const localVarPath = "/api/rest/2.0/metadata/liveboard/sql";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(fetchLiveboardSqlQueryRequest, "FetchLiveboardSqlQueryRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.0.0.cl or later   Imports [TML](https://docs.thoughtspot.com/cloud/latest/tml) files into ThoughtSpot.  Requires `DATAMANAGEMENT` (**Can manage data**) or `ADMINISTRATION` (**Can administer ThoughtsSpot**) privilege.  If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the following Data control privileges may be required: - `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) - `CAN_MANAGE_WORKSHEET_VIEWS_TABLES` (**Can manage data models**)  #### Usage guidelines  *  Import all related objects in a single TML Import API call. For example, Tables that use the same Connection object and Worksheets connected to these Tables. * Include the `fqn` property to distinguish objects that have the same name.   For example, if you have multiple Connections or Worksheets with the same name on ThoughtSpot and the Connection or Worksheet referenced in your TML file does not have a unique name to distinguish, it may result in invalid object references.   Adding `fqn` helps ThoughtSpot differentiate a Table from another with the same name.   We recommend [exporting TML with FQNs](#/http/api-endpoints/metadata/export-metadata-tml) and using these during the import operation. * You can upload multiple TML files at a time.   If you import a Worksheet along with Liveboards, Answers, and other dependent objects in a single API call, the imported objects will be immediately available for use.   When you import only a Worksheet object, it may take some time for the Worksheet to become available in the ThoughtSpot system. Please wait for a few minutes, and then proceed to create an Answer and Liveboard from the newly imported Worksheet.  For more information, see [TML Documentation](https://developers.thoughtspot.com/docs/tml#_import_a_tml).      
   * @param importMetadataTMLRequest 
   */
  importMetadataTML(importMetadataTMLRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (importMetadataTMLRequest === null || importMetadataTMLRequest === void 0) {
        throw new RequiredError("MetadataApi", "importMetadataTML", "importMetadataTMLRequest");
      }
      const localVarPath = "/api/rest/2.0/metadata/tml/import";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(importMetadataTMLRequest, "ImportMetadataTMLRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 10.4.0.cl or later   Schedules a task to import [TML](https://docs.thoughtspot.com/cloud/latest/tml) files into ThoughtSpot. You can use this API endpoint to process TML objects asynchronously when importing TMLs of large and complex metadata objects into ThoughtSpot. Unlike the synchronous import TML operation, the API processes TML data in the background and returns a task ID, which can be used to check the status of the import task via `/api/rest/2.0/metadata/tml/async/status` API endpoint.  Requires `DATAMANAGEMENT` (**Can manage data**) or `ADMINISTRATION` (**Can administer ThoughtsSpot**) privilege, and edit access to the TML objects.  If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the following Data control privileges may be required: - `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) - `CAN_MANAGE_WORKSHEET_VIEWS_TABLES` (**Can manage data models**)  #### Usage guidelines  See [Async TML API Documentation](https://developers.thoughtspot.com/docs/tml#_import_tml_objects_asynchronously) for usage guidelines.      
   * @param importMetadataTMLAsyncRequest 
   */
  importMetadataTMLAsync(importMetadataTMLAsyncRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (importMetadataTMLAsyncRequest === null || importMetadataTMLAsyncRequest === void 0) {
        throw new RequiredError("MetadataApi", "importMetadataTMLAsync", "importMetadataTMLAsyncRequest");
      }
      const localVarPath = "/api/rest/2.0/metadata/tml/async/import";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(importMetadataTMLAsyncRequest, "ImportMetadataTMLAsyncRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *  Parameterize fields in metadata objects.   Version: 10.9.0.cl or later   Allows parameterizing fields in metadata objects in ThoughtSpot.  Requires appropriate permissions to modify the metadata object.  The API endpoint allows parameterizing the following types of metadata objects: * Logical Tables * Connections  For a Logical Table the field type must be `ATTRIBUTE` and field name can be one of: * databaseName * schemaName * tableName  For a Connection the field type is always `CONNECTION_PROPERTY`. We use the field_name in this case to specify the exact property of a connection which needs to be parameterized.      
   * @param parameterizeMetadataRequest 
   */
  parameterizeMetadata(parameterizeMetadataRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (parameterizeMetadataRequest === null || parameterizeMetadataRequest === void 0) {
        throw new RequiredError("MetadataApi", "parameterizeMetadata", "parameterizeMetadataRequest");
      }
      const localVarPath = "/api/rest/2.0/metadata/parameterize";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(parameterizeMetadataRequest, "ParameterizeMetadataRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.0.0.cl or later   Gets a list of metadata objects available on the ThoughtSpot system.  This API endpoint is available to all users who have view access to the object. Users with `ADMINISTRATION` (**Can administer ThoughtSpot**) privileges can view data for all metadata objects, including users and groups.  #### Usage guidelines  - To get all metadata objects, send the API request without any attributes. - To get metadata objects of a specific type, set the `type` attribute. For example, to fetch a Worksheet, set the type as `LOGICAL_TABLE`. - To filter metadata objects within type `LOGICAL_TABLE`, set the `subtypes` attribute. For example, to fetch a Worksheet, set the type as `LOGICAL_TABLE` & subtypes as `[WORKSHEET]`. - To get a specific metadata object, specify the GUID. - To customize your search and filter the API response, you can use several parameters.   You can search for objects created or modified by specific users, by tags applied to the objects, or by using the include parameters like `include_auto_created_objects`, `include_dependent_objects`, `include_headers`, `include_incomplete_objects`, and so on.   You can also define sorting options to sort the data retrieved in the API response. - To get discoverable objects when linientmodel is enabled you can use `include_discoverable_objects` as true else false. Default value is true. - For liveboard metadata type, to get the newer format, set the `liveboard_response_format` as V2. Default value is V1.  **NOTE**: The following parameters support pagination of metadata records:  - `tag_identifiers` - `type` - `subtypes` - `created_by_user_identifiers` - `modified_by_user_identifiers` - `owned_by_user_identifiers` - `exclude_objects` - `include_auto_created_objects` - `favorite_object_options` If you are using other parameters to search metadata, set `record_size` to `-1` and `record_offset` to `0`.      
   * @param searchMetadataRequest 
   */
  searchMetadata(searchMetadataRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (searchMetadataRequest === null || searchMetadataRequest === void 0) {
        throw new RequiredError("MetadataApi", "searchMetadata", "searchMetadataRequest");
      }
      const localVarPath = "/api/rest/2.0/metadata/search";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(searchMetadataRequest, "SearchMetadataRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *  Remove parameterization from fields in metadata objects.   Version: 10.9.0.cl or later   Allows removing parameterization from fields in metadata objects in ThoughtSpot.  Requires appropriate permissions to modify the metadata object.  The API endpoint allows unparameterizing the following types of metadata objects: * Logical Tables * Connections  For a Logical Table the field type must be `ATTRIBUTE` and field name can be one of: * databaseName * schemaName * tableName  For a Connection the field type is always `CONNECTION_PROPERTY`. We use the field_name in this case to specify the exact property of a connection which needs to be unparameterized.      
   * @param unparameterizeMetadataRequest 
   */
  unparameterizeMetadata(unparameterizeMetadataRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (unparameterizeMetadataRequest === null || unparameterizeMetadataRequest === void 0) {
        throw new RequiredError("MetadataApi", "unparameterizeMetadata", "unparameterizeMetadataRequest");
      }
      const localVarPath = "/api/rest/2.0/metadata/unparameterize";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(unparameterizeMetadataRequest, "UnparameterizeMetadataRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *  Update header attributes for a given list of header objects.   Version: 10.6.0.cl or later   ## Prerequisites - **Privileges Required:**   - `DATAMANAGEMENT` (Can manage data) or `ADMINISTRATION` (Can administer ThoughtSpot). - **Additional Privileges (if RBAC is enabled):**   - `ORG_ADMINISTRATION` (Can manage orgs).  ---  ## Usage Guidelines  ### Parameters  1. **headers_update**      - **Description:** List of header objects with their attributes to be updated. Each object contains a list of attributes to be updated in the header.    - **Usage:**       - You must provide either `identifier` or `obj_identifier`, but not both. Both fields cannot be empty.       - When `org_identifier` is set to `-1`, only the `identifier` value is accepted; `obj_identifier` is not allowed.  2. **org_identifier**      - **Description:** GUID (Globally Unique Identifier) or name of the organization.      - **Usage:**      - Leaving this field empty assumes that the changes should be applied to the current organization       - Provide `org_guid` or `org_name` to uniquely identify the organization where changes need to be applied. .      - Provide `-1` if changes have to be applied across all the org.  ---  ## Note Currently, this API is enabled only for updating the `obj_identifier` attribute. Only `text` will be allowed in attribute\'s value.  ## Best Practices  1. **Backup Before Conversion:**      Always export metadata as a backup before initiating the update process  ---  ## Examples  ### Only `identifier` is given  ```json {   \"headers_update\":   [     {       \"identifier\": \"guid_1\",       \"obj_identifier\": \"\",       \"type\": \"LOGICAL_COLUMN\",       \"attributes\":       [         {           \"name\": \"obj_id\",           \"value\": \"custom_object_id\"         }       ]     }   ],   \"org_identifier\": \"orgGuid\" } ```  ### Only `obj_identifier` is given ```json {   \"headers_update\":   [     {       \"obj_identifier\": \"custom_object_id\",       \"type\": \"ANSWER\",       \"attributes\":       [         {           \"name\": \"obj_id\",           \"value\": \"custom_object_id\"         }       ]     }   ],   \"org_identifier\": \"orgName\" } ```  ### Executing update for all org `-1` ```json {   \"headers_update\":   [     {       \"identifier\": \"guid_1\",       \"type\": \"ANSWER\",       \"attributes\":       [         {           \"name\": \"obj_id\",           \"value\": \"custom_object_id\"         }       ]     }   ],   \"org_identifier\": -1 } ```  ### Optional `type` is not provided ```json {   \"headers_update\":   [     {       \"identifier\": \"guid_1\",       \"attributes\":       [         {           \"name\": \"obj_id\",           \"value\": \"custom_object_id\"         }       ]     }   ],   \"org_identifier\": -1 } ```     
   * @param updateMetadataHeaderRequest 
   */
  updateMetadataHeader(updateMetadataHeaderRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (updateMetadataHeaderRequest === null || updateMetadataHeaderRequest === void 0) {
        throw new RequiredError("MetadataApi", "updateMetadataHeader", "updateMetadataHeaderRequest");
      }
      const localVarPath = "/api/rest/2.0/metadata/headers/update";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(updateMetadataHeaderRequest, "UpdateMetadataHeaderRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *  Update object IDs for given metadata objects.   Version: 10.8.0.cl or later   ## Prerequisites - **Privileges Required:**   - `DATAMANAGEMENT` (Can manage data) or `ADMINISTRATION` (Can administer ThoughtSpot). - **Additional Privileges (if RBAC is enabled):**   - `ORG_ADMINISTRATION` (Can manage orgs).  ---  ## Usage Guidelines  ### Parameters  1. **metadata**      - **Description:** List of metadata objects to update their object IDs.    - **Usage:**       - Use either `current_obj_id` alone OR use `metadata_identifier` with `type` (when needed).       - When using `metadata_identifier`, the `type` field is required if using a name instead of a GUID.       - The `new_obj_id` field is always required.  ---  ## Note This API is specifically designed for updating object IDs of metadata objects. It internally uses the header update mechanism to perform the changes.  ## Best Practices  1. **Backup Before Update:**      Always export metadata as a backup before initiating the update process.  2. **Validation:**    - When using `current_obj_id`, ensure it matches the existing object ID exactly.    - When using `metadata_identifier` with a name, ensure the `type` is specified correctly.    - Verify that the `new_obj_id` follows your naming conventions and is unique within your system.  ---  ## Examples  ### Using current_obj_id ```json {   \"metadata\": [     {       \"current_obj_id\": \"existing_object_id\",       \"new_obj_id\": \"new_object_id\"     }   ] } ```  ### Using metadata_identifier with GUID ```json {   \"metadata\": [     {       \"metadata_identifier\": \"01234567-89ab-cdef-0123-456789abcdef\",       \"new_obj_id\": \"new_object_id\"     }   ] } ```  ### Using metadata_identifier with name and type ```json {   \"metadata\": [     {       \"metadata_identifier\": \"My Answer\",       \"type\": \"ANSWER\",       \"new_obj_id\": \"new_object_id\"     }   ] } ```  ### Multiple objects update ```json {   \"metadata\": [     {       \"current_obj_id\": \"existing_object_id_1\",       \"new_obj_id\": \"new_object_id_1\"     },     {       \"metadata_identifier\": \"My Worksheet\",       \"type\": \"LOGICAL_TABLE\",       \"new_obj_id\": \"new_object_id_2\"     }   ] } ```      
   * @param updateMetadataObjIdRequest 
   */
  updateMetadataObjId(updateMetadataObjIdRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (updateMetadataObjIdRequest === null || updateMetadataObjIdRequest === void 0) {
        throw new RequiredError("MetadataApi", "updateMetadataObjId", "updateMetadataObjIdRequest");
      }
      const localVarPath = "/api/rest/2.0/metadata/update-obj-id";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(updateMetadataObjIdRequest, "UpdateMetadataObjIdRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
};
var MetadataApiResponseProcessor = class {
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to convertWorksheetToModel
   * @throws ApiException if the response code was not in [200, 299]
   */
  convertWorksheetToModel(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ResponseWorksheetToModelConversion",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ResponseWorksheetToModelConversion",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to copyObject
   * @throws ApiException if the response code was not in [200, 299]
   */
  copyObject(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ResponseCopyObject",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("404", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Object not found", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ResponseCopyObject",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to deleteMetadata
   * @throws ApiException if the response code was not in [200, 299]
   */
  deleteMetadata(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("204", response.httpStatusCode)) {
        return;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "void",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to exportMetadataTML
   * @throws ApiException if the response code was not in [200, 299]
   */
  exportMetadataTML(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Array<any>",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Array<any>",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to exportMetadataTMLBatched
   * @throws ApiException if the response code was not in [200, 299]
   */
  exportMetadataTMLBatched(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "any",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "any",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to fetchAnswerSqlQuery
   * @throws ApiException if the response code was not in [200, 299]
   */
  fetchAnswerSqlQuery(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "SqlQueryResponse",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "SqlQueryResponse",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to fetchAsyncImportTaskStatus
   * @throws ApiException if the response code was not in [200, 299]
   */
  fetchAsyncImportTaskStatus(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "GetAsyncImportStatusResponse",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "GetAsyncImportStatusResponse",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to fetchLiveboardSqlQuery
   * @throws ApiException if the response code was not in [200, 299]
   */
  fetchLiveboardSqlQuery(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "SqlQueryResponse",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "SqlQueryResponse",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to importMetadataTML
   * @throws ApiException if the response code was not in [200, 299]
   */
  importMetadataTML(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Array<any>",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Array<any>",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to importMetadataTMLAsync
   * @throws ApiException if the response code was not in [200, 299]
   */
  importMetadataTMLAsync(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ImportEPackAsyncTaskStatus",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ImportEPackAsyncTaskStatus",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to parameterizeMetadata
   * @throws ApiException if the response code was not in [200, 299]
   */
  parameterizeMetadata(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("204", response.httpStatusCode)) {
        return;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "void",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to searchMetadata
   * @throws ApiException if the response code was not in [200, 299]
   */
  searchMetadata(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Array<MetadataSearchResponse>",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Array<MetadataSearchResponse>",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to unparameterizeMetadata
   * @throws ApiException if the response code was not in [200, 299]
   */
  unparameterizeMetadata(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("204", response.httpStatusCode)) {
        return;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "void",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to updateMetadataHeader
   * @throws ApiException if the response code was not in [200, 299]
   */
  updateMetadataHeader(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("204", response.httpStatusCode)) {
        return;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "void",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to updateMetadataObjId
   * @throws ApiException if the response code was not in [200, 299]
   */
  updateMetadataObjId(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("204", response.httpStatusCode)) {
        return;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "void",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
};

// apis/OrgsApi.ts
var OrgsApiRequestFactory = class extends BaseAPIRequestFactory {
  /**
   *   Version: 9.0.0.cl or later   Creates an Org object.  To use this API, the [Orgs](https://docs.thoughtspot.com/cloud/latest/orgs-overview) feature must be enabled in your cluster.  Requires cluster administration (**Can administer Org**) privileges. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `ORG_ADMINISTRATION` (**Can manage Orgs**) privilege is required.      
   * @param createOrgRequest 
   */
  createOrg(createOrgRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (createOrgRequest === null || createOrgRequest === void 0) {
        throw new RequiredError("OrgsApi", "createOrg", "createOrgRequest");
      }
      const localVarPath = "/api/rest/2.0/orgs/create";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(createOrgRequest, "CreateOrgRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.0.0.cl or later   Deletes an Org object from the ThoughtSpot system.  Requires cluster administration (**Can administer Org**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `ORG_ADMINISTRATION` (**Can manage Orgs**) privilege is required.  When you delete an Org, all its users and objects created in that Org context are removed. However, if the users in the deleted Org also exists in other Orgs, they are removed only from the deleted Org.      
   * @param orgIdentifier ID or name of the Org
   */
  deleteOrg(orgIdentifier, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (orgIdentifier === null || orgIdentifier === void 0) {
        throw new RequiredError("OrgsApi", "deleteOrg", "orgIdentifier");
      }
      const localVarPath = "/api/rest/2.0/orgs/{org_identifier}/delete".replace("{org_identifier}", encodeURIComponent(String(orgIdentifier)));
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.0.0.cl or later   Gets a list of Orgs configured on the ThoughtSpot system. To get details of a specific Org, specify the Org ID or name. You can also pass parameters such as status, visibility, and user identifiers to get a specific list of Orgs.  Requires cluster administration (**Can administer Org**) privileges. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `ORG_ADMINISTRATION` (**Can manage Orgs**) privilege is required.      
   * @param searchOrgsRequest 
   */
  searchOrgs(searchOrgsRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (searchOrgsRequest === null || searchOrgsRequest === void 0) {
        throw new RequiredError("OrgsApi", "searchOrgs", "searchOrgsRequest");
      }
      const localVarPath = "/api/rest/2.0/orgs/search";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(searchOrgsRequest, "SearchOrgsRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.0.0.cl or later   Updates an Org object. You can modify Org properties such as name, description, and user associations.  Requires cluster administration (**Can administer Org**) privileges. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `ORG_ADMINISTRATION` (**Can manage Orgs**) privilege is required.      
   * @param orgIdentifier ID or name of the Org
   * @param updateOrgRequest 
   */
  updateOrg(orgIdentifier, updateOrgRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (orgIdentifier === null || orgIdentifier === void 0) {
        throw new RequiredError("OrgsApi", "updateOrg", "orgIdentifier");
      }
      if (updateOrgRequest === null || updateOrgRequest === void 0) {
        throw new RequiredError("OrgsApi", "updateOrg", "updateOrgRequest");
      }
      const localVarPath = "/api/rest/2.0/orgs/{org_identifier}/update".replace("{org_identifier}", encodeURIComponent(String(orgIdentifier)));
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(updateOrgRequest, "UpdateOrgRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
};
var OrgsApiResponseProcessor = class {
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to createOrg
   * @throws ApiException if the response code was not in [200, 299]
   */
  createOrg(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "OrgResponse",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "OrgResponse",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to deleteOrg
   * @throws ApiException if the response code was not in [200, 299]
   */
  deleteOrg(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("204", response.httpStatusCode)) {
        return;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "void",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to searchOrgs
   * @throws ApiException if the response code was not in [200, 299]
   */
  searchOrgs(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Array<OrgResponse>",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Array<OrgResponse>",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to updateOrg
   * @throws ApiException if the response code was not in [200, 299]
   */
  updateOrg(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("204", response.httpStatusCode)) {
        return;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "void",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
};

// apis/ReportsApi.ts
var ReportsApiRequestFactory = class extends BaseAPIRequestFactory {
  /**
   *   Version: 9.0.0.cl or later   Exports an Answer in the given file format. You can download the Answer data as a PDF, PNG, CSV, or XLSX file.  Requires at least view access to the Answer.  #### Usage guidelines  In the request body, the GUID or name of the Answer and set `file_format`. The default file format is CSV.  **NOTE**: * The downloadable file returned in API response file is extensionless. Please rename the downloaded file by typing in the relevant extension. * HTML rendering is not supported for PDF exports of Answers with tables.  Optionally, you can define [runtime overrides](https://developers.thoughtspot.com/docs/fetch-data-and-report-apis#_runtime_overrides) to apply to the Answer data.  The `record_size` attribute determines the number of records to retrieve in an API call. For more information about pagination, record size, and maximum row limit, see [Pagination and record size settings](https://developers.thoughtspot.com/docs/fetch-data-and-report-apis#_pagination_settings_for_data_and_report_api).       
   * @param exportAnswerReportRequest 
   */
  exportAnswerReport(exportAnswerReportRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (exportAnswerReportRequest === null || exportAnswerReportRequest === void 0) {
        throw new RequiredError("ReportsApi", "exportAnswerReport", "exportAnswerReportRequest");
      }
      const localVarPath = "/api/rest/2.0/report/answer";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(exportAnswerReportRequest, "ExportAnswerReportRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.0.0.cl or later   Exports a Liveboard and its visualizations in PDF or PNG file format.  Requires at least view access to the Liveboard.  #### Usage guidelines  In the request body, specify the GUID or name of the Liveboard. To generate a Liveboard report with specific visualizations, add GUIDs or names of the visualizations.  The default `file_format` is PDF. For PDF downloads, you can specify additional parameters to customize the page orientation and include or exclude the cover page, logo, footer text, and page numbers. Similar customization options are also available for PNG output.  **NOTE**: The downloadable file returned in API response file is extensionless. Please rename the downloaded file by typing in the relevant extension.  Optionally, you can define [runtime overrides](https://developers.thoughtspot.com/docs/fetch-data-and-report-apis#_runtime_overrides) to apply to the Answer data.  To include unsaved changes in the report, pass the `transient_pinboard_content` script generated from the `getExportRequestForCurrentPinboard` method in the Visual Embed SDK. Upon successful execution, the API returns the report with unsaved changes, including ad hoc changes to visualizations. For more information, see [Liveboard Report API](https://developers.thoughtspot.com/docs/fetch-data-and-report-apis#_liveboard_report_api).       
   * @param exportLiveboardReportRequest 
   */
  exportLiveboardReport(exportLiveboardReportRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (exportLiveboardReportRequest === null || exportLiveboardReportRequest === void 0) {
        throw new RequiredError("ReportsApi", "exportLiveboardReport", "exportLiveboardReportRequest");
      }
      const localVarPath = "/api/rest/2.0/report/liveboard";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(exportLiveboardReportRequest, "ExportLiveboardReportRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
};
var ReportsApiResponseProcessor = class {
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to exportAnswerReport
   * @throws ApiException if the response code was not in [200, 299]
   */
  exportAnswerReport(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = yield response.getBodyAsFile();
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          "binary"
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          "binary"
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          "binary"
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          "binary"
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "HttpFile",
          "binary"
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to exportLiveboardReport
   * @throws ApiException if the response code was not in [200, 299]
   */
  exportLiveboardReport(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = yield response.getBodyAsFile();
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          "binary"
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          "binary"
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          "binary"
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          "binary"
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "HttpFile",
          "binary"
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
};

// apis/RolesApi.ts
var RolesApiRequestFactory = class extends BaseAPIRequestFactory {
  /**
   *   Version: 9.5.0.cl or later   Creates a Role object in ThoughtSpot.  Available only if [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance. To create a Role, the `ROLE_ADMINISTRATION` (**Can manage roles**) privilege is required.      
   * @param createRoleRequest 
   */
  createRole(createRoleRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (createRoleRequest === null || createRoleRequest === void 0) {
        throw new RequiredError("RolesApi", "createRole", "createRoleRequest");
      }
      const localVarPath = "/api/rest/2.0/roles/create";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(createRoleRequest, "CreateRoleRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.5.0.cl or later   Deletes a Role object from the ThoughtSpot system.  Available only if [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance. To delete a Role, the `ROLE_ADMINISTRATION` (**Can manage roles**) privilege is required.      
   * @param roleIdentifier Unique ID or name of the Role. ReadOnly roles cannot be deleted.
   */
  deleteRole(roleIdentifier, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (roleIdentifier === null || roleIdentifier === void 0) {
        throw new RequiredError("RolesApi", "deleteRole", "roleIdentifier");
      }
      const localVarPath = "/api/rest/2.0/roles/{role_identifier}/delete".replace("{role_identifier}", encodeURIComponent(String(roleIdentifier)));
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.5.0.cl or later   Gets a list of Role objects from the ThoughtSpot system.  Available if [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance. To search for Roles, the `ROLE_ADMINISTRATION` (**Can manage roles**) privilege is required.  To get details of a specific Role object, specify the GUID or name. You can also filter the API response based on user group and Org identifiers, privileges assigned to the Role, and deprecation status.      
   * @param searchRolesRequest 
   */
  searchRoles(searchRolesRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (searchRolesRequest === null || searchRolesRequest === void 0) {
        throw new RequiredError("RolesApi", "searchRoles", "searchRolesRequest");
      }
      const localVarPath = "/api/rest/2.0/roles/search";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(searchRolesRequest, "SearchRolesRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.5.0.cl or later   Updates the properties of a Role object.  Available only if [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance. To update a Role, the `ROLE_ADMINISTRATION` (**Can manage roles**) privilege is required.      
   * @param roleIdentifier Unique ID or name of the Role.
   * @param updateRoleRequest 
   */
  updateRole(roleIdentifier, updateRoleRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (roleIdentifier === null || roleIdentifier === void 0) {
        throw new RequiredError("RolesApi", "updateRole", "roleIdentifier");
      }
      if (updateRoleRequest === null || updateRoleRequest === void 0) {
        throw new RequiredError("RolesApi", "updateRole", "updateRoleRequest");
      }
      const localVarPath = "/api/rest/2.0/roles/{role_identifier}/update".replace("{role_identifier}", encodeURIComponent(String(roleIdentifier)));
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(updateRoleRequest, "UpdateRoleRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
};
var RolesApiResponseProcessor = class {
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to createRole
   * @throws ApiException if the response code was not in [200, 299]
   */
  createRole(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "RoleResponse",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid parameters.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Internal error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "RoleResponse",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to deleteRole
   * @throws ApiException if the response code was not in [200, 299]
   */
  deleteRole(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("204", response.httpStatusCode)) {
        return;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Internal error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "void",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to searchRoles
   * @throws ApiException if the response code was not in [200, 299]
   */
  searchRoles(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Array<SearchRoleResponse>",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Internal error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Array<SearchRoleResponse>",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to updateRole
   * @throws ApiException if the response code was not in [200, 299]
   */
  updateRole(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "RoleResponse",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "RoleResponse",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
};

// apis/SchedulesApi.ts
var SchedulesApiRequestFactory = class extends BaseAPIRequestFactory {
  /**
   *  Create schedule.    Version: 9.4.0.cl or later   Creates a Liveboard schedule job.  Requires at least edit access to Liveboards. To create a schedule on behalf of another user, you need  `ADMINISTRATION` (**Can administer Org**) or `JOBSCHEDULING` (**Can schedule for others**) privilege and edit access to the Liveboard. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `JOBSCHEDULING` (**Can schedule for others**) privilege is required.  #### Usage guidelines  * The description text is mandatory.  The description text appears as **Description: <your content>** in the Liveboard schedule email notifications. * For Liveboards with both charts and tables, schedule creation is only supported in PDF and XLS formats. Schedules created in CSV formats for such Liveboards will fail to run. If `PDF` is set as the `file_format`, enable `pdf_options` to get the correct attachment. Not doing so may cause the attachment to be rendered empty. * To include only specific visualizations, specify the visualization GUIDs in the `visualization_identifiers` array. * You can schedule a Liveboard job to run periodically by setting frequency parameters. You can set the schedule to run daily, weekly, monthly or every n minutes or hours. The scheduled job can also be configured to run at a specific time of the day or on specific days of the week or month. Please ensure that when setting the schedule frequency for _minute of the object_, only values that are multiples of 5 are included. * If the `frequency` parameters are defined, you can set the time zone to a value that matches your server\'s time zone. For example, `US/Central`, `Etc/UTC`, `CET`. The default time zone is `America/Los_Angeles`.  For more information about Liveboard jobs, see [ThoughtSpot Product Documentation](https://docs.thoughtspot.com/cloud/latest/liveboard-schedule).     
   * @param createScheduleRequest 
   */
  createSchedule(createScheduleRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (createScheduleRequest === null || createScheduleRequest === void 0) {
        throw new RequiredError("SchedulesApi", "createSchedule", "createScheduleRequest");
      }
      const localVarPath = "/api/rest/2.0/schedules/create";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(createScheduleRequest, "CreateScheduleRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *  Deletes a scheduled job.    Version: 9.4.0.cl or later   Deletes a scheduled Liveboard job.  Requires at least edit access to Liveboard or `ADMINISTRATION` (**Can administer Org**) privilege.    If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `JOBSCHEDULING` (**Can schedule for others**) privilege is required.      
   * @param scheduleIdentifier Unique ID or name of the scheduled job.
   */
  deleteSchedule(scheduleIdentifier, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (scheduleIdentifier === null || scheduleIdentifier === void 0) {
        throw new RequiredError("SchedulesApi", "deleteSchedule", "scheduleIdentifier");
      }
      const localVarPath = "/api/rest/2.0/schedules/{schedule_identifier}/delete".replace("{schedule_identifier}", encodeURIComponent(String(scheduleIdentifier)));
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *  Search Schedules    Version: 9.4.0.cl or later   Gets a list of scheduled jobs configured for a Liveboard.  To get details of a specific scheduled job, specify the name or GUID of the scheduled job.  Requires at least view access to Liveboards.  **NOTE**: When filtering schedules by parameters other than `metadata`, set `record_size` to `-1` and `record_offset` to `0` for accurate results.      
   * @param searchSchedulesRequest 
   */
  searchSchedules(searchSchedulesRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (searchSchedulesRequest === null || searchSchedulesRequest === void 0) {
        throw new RequiredError("SchedulesApi", "searchSchedules", "searchSchedulesRequest");
      }
      const localVarPath = "/api/rest/2.0/schedules/search";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(searchSchedulesRequest, "SearchSchedulesRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *  Update schedule.    Version: 9.4.0.cl or later   Updates a scheduled Liveboard job.  Requires at least edit access to Liveboards. To update a schedule on behalf of another user, you need `ADMINISTRATION` (**Can administer Org**) or `JOBSCHEDULING` (**Can schedule for others**) privilege and edit access to the Liveboard. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `JOBSCHEDULING` (**Can schedule for others**) privilege is required.  The API endpoint allows you to pause a scheduled job, change the status of a paused job. You can also edit the recipients list, frequency of the job, format of the file to send to the recipients in email notifications, PDF options, and time zone setting.      
   * @param scheduleIdentifier Unique ID or name of the schedule.
   * @param updateScheduleRequest 
   */
  updateSchedule(scheduleIdentifier, updateScheduleRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (scheduleIdentifier === null || scheduleIdentifier === void 0) {
        throw new RequiredError("SchedulesApi", "updateSchedule", "scheduleIdentifier");
      }
      if (updateScheduleRequest === null || updateScheduleRequest === void 0) {
        throw new RequiredError("SchedulesApi", "updateSchedule", "updateScheduleRequest");
      }
      const localVarPath = "/api/rest/2.0/schedules/{schedule_identifier}/update".replace("{schedule_identifier}", encodeURIComponent(String(scheduleIdentifier)));
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(updateScheduleRequest, "UpdateScheduleRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
};
var SchedulesApiResponseProcessor = class {
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to createSchedule
   * @throws ApiException if the response code was not in [200, 299]
   */
  createSchedule(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ResponseSchedule",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ResponseSchedule",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to deleteSchedule
   * @throws ApiException if the response code was not in [200, 299]
   */
  deleteSchedule(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("204", response.httpStatusCode)) {
        return;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "void",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to searchSchedules
   * @throws ApiException if the response code was not in [200, 299]
   */
  searchSchedules(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Array<ResponseSchedule>",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Array<ResponseSchedule>",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to updateSchedule
   * @throws ApiException if the response code was not in [200, 299]
   */
  updateSchedule(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("204", response.httpStatusCode)) {
        return;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "void",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
};

// apis/SecurityApi.ts
var SecurityApiRequestFactory = class extends BaseAPIRequestFactory {
  /**
   *   Version: 9.0.0.cl or later   Transfers the ownership of one or several objects from one user to another.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `USER_ADMINISTRATION` (**Can manage users**) privilege and edit access to the objects are required.      
   * @param assignChangeAuthorRequest 
   */
  assignChangeAuthor(assignChangeAuthorRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (assignChangeAuthorRequest === null || assignChangeAuthorRequest === void 0) {
        throw new RequiredError("SecurityApi", "assignChangeAuthor", "assignChangeAuthorRequest");
      }
      const localVarPath = "/api/rest/2.0/security/metadata/assign";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(assignChangeAuthorRequest, "AssignChangeAuthorRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.0.0.cl or later   Fetches object permission details for a given principal object such as a user and group.  Requires view access to the metadata object.   #### Usage guidelines  * To get a list of all metadata objects that a user or group can access, specify the `type` and GUID or name of the principal. * To get permission details for a specific object, add the `type` and GUID or name of the metadata object to your API request.  Upon successful execution, the API returns a list of metadata objects and permission details for each object.        
   * @param fetchPermissionsOfPrincipalsRequest 
   */
  fetchPermissionsOfPrincipals(fetchPermissionsOfPrincipalsRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (fetchPermissionsOfPrincipalsRequest === null || fetchPermissionsOfPrincipalsRequest === void 0) {
        throw new RequiredError("SecurityApi", "fetchPermissionsOfPrincipals", "fetchPermissionsOfPrincipalsRequest");
      }
      const localVarPath = "/api/rest/2.0/security/principals/fetch-permissions";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(fetchPermissionsOfPrincipalsRequest, "FetchPermissionsOfPrincipalsRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.0.0.cl or later   Fetches permission details for a given metadata object.  Requires view access to the metadata object.  #### Usage guidelines  * To fetch a list of users and groups for a metadata object, specify `type` and GUID or name of the metadata object. * To get permission details for a specific user or group, add `type` and GUID or name of the principal object to your API request.  Upon successful execution, the API returns permission details and principal information for the object specified in the API request.      
   * @param fetchPermissionsOnMetadataRequest 
   */
  fetchPermissionsOnMetadata(fetchPermissionsOnMetadataRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (fetchPermissionsOnMetadataRequest === null || fetchPermissionsOnMetadataRequest === void 0) {
        throw new RequiredError("SecurityApi", "fetchPermissionsOnMetadata", "fetchPermissionsOnMetadataRequest");
      }
      const localVarPath = "/api/rest/2.0/security/metadata/fetch-permissions";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(fetchPermissionsOnMetadataRequest, "FetchPermissionsOnMetadataRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *  Version: 10.9.0.cl or later   Allows publishing metadata objects across organizations in ThoughtSpot.  Requires ADMINISTRATION role and TENANT scope.  The API endpoint allows publishing the following types of metadata objects: * Liveboards * Answers * Logical Tables  This API will essentially share the objects along with it\'s dependencies to the org admins of the orgs to which it is being published.      
   * @param publishMetadataRequest 
   */
  publishMetadata(publishMetadataRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (publishMetadataRequest === null || publishMetadataRequest === void 0) {
        throw new RequiredError("SecurityApi", "publishMetadata", "publishMetadataRequest");
      }
      const localVarPath = "/api/rest/2.0/security/metadata/publish";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(publishMetadataRequest, "PublishMetadataRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.0.0.cl or later   Allows sharing one or several metadata objects with users and groups in ThoughtSpot.  Requires edit access to the metadata object.  The API endpoint allows sharing only the following types of metadata objects: * Liveboards * Visualizations * Answers * Worksheets * Views * Connections  You can provide `READ_ONLY` or `MODIFY` access when sharing an object with another user or group. With `READ_ONLY` access grants view access to the shared object, whereas `MODIFY` provides edit access.  To prevent a user or group from accessing the shared object, specify the GUID or name of the principal and set `shareMode` to `NO_ACCESS`.      
   * @param shareMetadataRequest 
   */
  shareMetadata(shareMetadataRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (shareMetadataRequest === null || shareMetadataRequest === void 0) {
        throw new RequiredError("SecurityApi", "shareMetadata", "shareMetadataRequest");
      }
      const localVarPath = "/api/rest/2.0/security/metadata/share";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(shareMetadataRequest, "ShareMetadataRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *  Version: 10.9.0.cl or later   Allows unpublishing metadata objects from organizations in ThoughtSpot.  Requires ADMINISTRATION role and TENANT scope.  The API endpoint allows unpublishing the following types of metadata objects: * Liveboards * Answers * Logical Tables  When unpublishing objects, you can: * Include dependencies by setting `include_dependencies` to true - this will unpublish all dependent objects if no other published object is using them * Force unpublish by setting `force` to true - this will break all dependent objects in the unpublished organizations      
   * @param unpublishMetadataRequest 
   */
  unpublishMetadata(unpublishMetadataRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (unpublishMetadataRequest === null || unpublishMetadataRequest === void 0) {
        throw new RequiredError("SecurityApi", "unpublishMetadata", "unpublishMetadataRequest");
      }
      const localVarPath = "/api/rest/2.0/security/metadata/unpublish";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(unpublishMetadataRequest, "UnpublishMetadataRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
};
var SecurityApiResponseProcessor = class {
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to assignChangeAuthor
   * @throws ApiException if the response code was not in [200, 299]
   */
  assignChangeAuthor(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("204", response.httpStatusCode)) {
        return;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "void",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to fetchPermissionsOfPrincipals
   * @throws ApiException if the response code was not in [200, 299]
   */
  fetchPermissionsOfPrincipals(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "PermissionOfPrincipalsResponse",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "PermissionOfPrincipalsResponse",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to fetchPermissionsOnMetadata
   * @throws ApiException if the response code was not in [200, 299]
   */
  fetchPermissionsOnMetadata(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "PermissionOfMetadataResponse",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "PermissionOfMetadataResponse",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to publishMetadata
   * @throws ApiException if the response code was not in [200, 299]
   */
  publishMetadata(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("204", response.httpStatusCode)) {
        return;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "void",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to shareMetadata
   * @throws ApiException if the response code was not in [200, 299]
   */
  shareMetadata(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("204", response.httpStatusCode)) {
        return;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "void",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to unpublishMetadata
   * @throws ApiException if the response code was not in [200, 299]
   */
  unpublishMetadata(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("204", response.httpStatusCode)) {
        return;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "void",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
};

// apis/SystemApi.ts
var SystemApiRequestFactory = class extends BaseAPIRequestFactory {
  /**
   *   Version: 9.0.0.cl or later   Retrieves the current configuration details of the cluster. If the request is successful, the API returns a list configuration settings applied on the cluster.  Requires `ADMINISTRATION`(**Can administer ThoughtSpot**) privilege to view these complete configuration settings of the cluster. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `SYSTEM_INFO_ADMINISTRATION` (**Can view system activities**) privilege is required.  This API does not require any parameters to be passed in the request.      
   */
  getSystemConfig(_options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      const localVarPath = "/api/rest/2.0/system/config";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "GET" /* GET */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.0.0.cl or later   Gets system information such as the release version, locale, time zone, deployment environment, date format, and date time format of the cluster.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privileges. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `SYSTEM_INFO_ADMINISTRATION` (**Can view system activities**) privilege is required.  This API does not require any parameters to be passed in the request.        
   */
  getSystemInformation(_options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      const localVarPath = "/api/rest/2.0/system";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "GET" /* GET */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.2.0.cl or later   Gets a list of configuration overrides applied on the cluster.    Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `APPLICATION_ADMINISTRATION` (**Can manage application settings**) privilege is required.  This API does not require any parameters to be passed in the request.        
   */
  getSystemOverrideInfo(_options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      const localVarPath = "/api/rest/2.0/system/config-overrides";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "GET" /* GET */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.2.0.cl or later   Updates the current configuration of the cluster. You must send the configuration data in JSON format.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privileges. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `APPLICATION_ADMINISTRATION` (**Can manage application settings**) privilege is required.      
   * @param updateSystemConfigRequest 
   */
  updateSystemConfig(updateSystemConfigRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (updateSystemConfigRequest === null || updateSystemConfigRequest === void 0) {
        throw new RequiredError("SystemApi", "updateSystemConfig", "updateSystemConfigRequest");
      }
      const localVarPath = "/api/rest/2.0/system/config-update";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(updateSystemConfigRequest, "UpdateSystemConfigRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
};
var SystemApiResponseProcessor = class {
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to getSystemConfig
   * @throws ApiException if the response code was not in [200, 299]
   */
  getSystemConfig(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "SystemConfig",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "SystemConfig",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to getSystemInformation
   * @throws ApiException if the response code was not in [200, 299]
   */
  getSystemInformation(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "SystemInfo",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "SystemInfo",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to getSystemOverrideInfo
   * @throws ApiException if the response code was not in [200, 299]
   */
  getSystemOverrideInfo(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "any",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "any",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to updateSystemConfig
   * @throws ApiException if the response code was not in [200, 299]
   */
  updateSystemConfig(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("204", response.httpStatusCode)) {
        return;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "void",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
};

// apis/TagsApi.ts
var TagsApiRequestFactory = class extends BaseAPIRequestFactory {
  /**
   *   Version: 9.0.0.cl or later   Assigns tags to Liveboards, Answers, Tables, and Worksheets.  Requires edit access to the metadata object.      
   * @param assignTagRequest 
   */
  assignTag(assignTagRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (assignTagRequest === null || assignTagRequest === void 0) {
        throw new RequiredError("TagsApi", "assignTag", "assignTagRequest");
      }
      const localVarPath = "/api/rest/2.0/tags/assign";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(assignTagRequest, "AssignTagRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.0.0.cl or later   Creates a tag object.  Tags are labels that identify a metadata object. For example, you can create a tag to designate subject areas, such as sales, HR, marketing, and finance.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `TAGMANAGEMENT` (**Can manage tags**) privilege is required to create, edit, and delete tags.      
   * @param createTagRequest 
   */
  createTag(createTagRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (createTagRequest === null || createTagRequest === void 0) {
        throw new RequiredError("TagsApi", "createTag", "createTagRequest");
      }
      const localVarPath = "/api/rest/2.0/tags/create";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(createTagRequest, "CreateTagRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.0.0.cl or later   Deletes a tag object from the ThoughtSpot system  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `TAGMANAGEMENT` (**Can manage tags**) privilege is required to create, edit, and delete tags.      
   * @param tagIdentifier Tag identifier Tag name or Tag id.
   */
  deleteTag(tagIdentifier, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (tagIdentifier === null || tagIdentifier === void 0) {
        throw new RequiredError("TagsApi", "deleteTag", "tagIdentifier");
      }
      const localVarPath = "/api/rest/2.0/tags/{tag_identifier}/delete".replace("{tag_identifier}", encodeURIComponent(String(tagIdentifier)));
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.0.0.cl or later   Gets a list of tag objects available on the ThoughtSpot system. To get details of a specific tag object, specify the GUID or name.  Any authenticated user can search for tag objects.      
   * @param searchTagsRequest 
   */
  searchTags(searchTagsRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (searchTagsRequest === null || searchTagsRequest === void 0) {
        throw new RequiredError("TagsApi", "searchTags", "searchTagsRequest");
      }
      const localVarPath = "/api/rest/2.0/tags/search";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(searchTagsRequest, "SearchTagsRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.0.0.cl or later   Removes the tags applied to a Liveboard, Answer, Table, or Worksheet.  Requires edit access to the metadata object.      
   * @param assignTagRequest 
   */
  unassignTag(assignTagRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (assignTagRequest === null || assignTagRequest === void 0) {
        throw new RequiredError("TagsApi", "unassignTag", "assignTagRequest");
      }
      const localVarPath = "/api/rest/2.0/tags/unassign";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(assignTagRequest, "AssignTagRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.0.0.cl or later   Updates a tag object.  You can modify the `name` and `color` properties of a tag object.    Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `TAGMANAGEMENT` (**Can manage tags**) privilege is required to create, edit, and delete tags.      
   * @param tagIdentifier Name or Id of the tag.
   * @param updateTagRequest 
   */
  updateTag(tagIdentifier, updateTagRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (tagIdentifier === null || tagIdentifier === void 0) {
        throw new RequiredError("TagsApi", "updateTag", "tagIdentifier");
      }
      if (updateTagRequest === null || updateTagRequest === void 0) {
        throw new RequiredError("TagsApi", "updateTag", "updateTagRequest");
      }
      const localVarPath = "/api/rest/2.0/tags/{tag_identifier}/update".replace("{tag_identifier}", encodeURIComponent(String(tagIdentifier)));
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(updateTagRequest, "UpdateTagRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
};
var TagsApiResponseProcessor = class {
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to assignTag
   * @throws ApiException if the response code was not in [200, 299]
   */
  assignTag(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("204", response.httpStatusCode)) {
        return;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "void",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to createTag
   * @throws ApiException if the response code was not in [200, 299]
   */
  createTag(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Tag",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Tag",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to deleteTag
   * @throws ApiException if the response code was not in [200, 299]
   */
  deleteTag(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("204", response.httpStatusCode)) {
        return;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "void",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to searchTags
   * @throws ApiException if the response code was not in [200, 299]
   */
  searchTags(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Array<Tag>",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Array<Tag>",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to unassignTag
   * @throws ApiException if the response code was not in [200, 299]
   */
  unassignTag(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("204", response.httpStatusCode)) {
        return;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "void",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to updateTag
   * @throws ApiException if the response code was not in [200, 299]
   */
  updateTag(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("204", response.httpStatusCode)) {
        return;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "void",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
};

// apis/ThoughtSpotRestApi.ts
var ThoughtSpotRestApiRequestFactory = class extends BaseAPIRequestFactory {
  /**
   *   Version: 9.7.0.cl or later   Activates a deactivated user account.  Requires `ADMINISTRATION` (**Can administer Thoughtspot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `USER_ADMINISTRATION` (**Can manage users**) privilege is required.  To activate an inactive user account, the API request body must include the following information:  - Username or the GUID of the user account. - Auth token generated for the deactivated user. The auth token is sent in the API response when a user is deactivated. - Password for the user account.      
   * @param activateUserRequest 
   */
  activateUser(activateUserRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (activateUserRequest === null || activateUserRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "activateUser", "activateUserRequest");
      }
      const localVarPath = "/api/rest/2.0/users/activate";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(activateUserRequest, "ActivateUserRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.0.0.cl or later   Transfers the ownership of one or several objects from one user to another.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `USER_ADMINISTRATION` (**Can manage users**) privilege and edit access to the objects are required.      
   * @param assignChangeAuthorRequest 
   */
  assignChangeAuthor(assignChangeAuthorRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (assignChangeAuthorRequest === null || assignChangeAuthorRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "assignChangeAuthor", "assignChangeAuthorRequest");
      }
      const localVarPath = "/api/rest/2.0/security/metadata/assign";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(assignChangeAuthorRequest, "AssignChangeAuthorRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.0.0.cl or later   Assigns tags to Liveboards, Answers, Tables, and Worksheets.  Requires edit access to the metadata object.      
   * @param assignTagRequest 
   */
  assignTag(assignTagRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (assignTagRequest === null || assignTagRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "assignTag", "assignTagRequest");
      }
      const localVarPath = "/api/rest/2.0/tags/assign";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(assignTagRequest, "AssignTagRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.0.0.cl or later   Updates the current password of the user.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `USER_ADMINISTRATION` (**Can manage users**) privilege is required.      
   * @param changeUserPasswordRequest 
   */
  changeUserPassword(changeUserPasswordRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (changeUserPasswordRequest === null || changeUserPasswordRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "changeUserPassword", "changeUserPasswordRequest");
      }
      const localVarPath = "/api/rest/2.0/users/change-password";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(changeUserPasswordRequest, "ChangeUserPasswordRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.2.0.cl or later   Commits TML files of metadata objects to the Git branch configured on your instance.  Requires at least edit access to objects used in the commit operation.  Before using this endpoint to push your commits:  * Enable Git integration on your instance. * Make sure the Git repository and branch details are configured on your instance.  For more information, see [Git integration documentation](https://developers.thoughtspot.com/docs/git-integration).      
   * @param commitBranchRequest 
   */
  commitBranch(commitBranchRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (commitBranchRequest === null || commitBranchRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "commitBranch", "commitBranchRequest");
      }
      const localVarPath = "/api/rest/2.0/vcs/git/branches/commit";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(commitBranchRequest, "CommitBranchRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *  Convert worksheets to models    Version: 10.6.0.cl or later   ## Prerequisites - **Privileges Required:**   - `DATAMANAGEMENT` (Can manage data) or `ADMINISTRATION` (Can administer ThoughtSpot). - **Additional Privileges (if RBAC is enabled):**   - `CAN_MANAGE_WORKSHEET_VIEWS_TABLES` (Can manage data models).  ---  ## Usage Guidelines  ### Parameters  1. **worksheet_ids**      - **Description:** A comma-separated list of GUIDs (Globally Unique Identifiers) specifying the Worksheets to be converted.      - **Usage:**        - Used only when `convert_all` is set to `false`.        - Leave empty or omit when `convert_all` is set to `true`.  2. **exclude_worksheet_ids**      - **Description:** A comma-separated list of GUIDs specifying Worksheets to be excluded from conversion.      - **Usage:**        - Useful when `convert_all` is set to `true` and specific Worksheets should not be converted.  3. **convert_all**      - **Description:** Sets the scope of conversion.    - **Options:**        - `true`: Converts all Worksheets in the system, except those specified in `exclude_worksheet_ids`.        - `false`: Converts only the Worksheets listed in `worksheet_ids`.  4. **apply_changes**      - **Description:** Specifies whether to apply changes directly to ThoughtSpot or to generate a preview before applying any changes.Used for validation of conversion.    - **Options:**        - `true`: Applies conversion changes directly to ThoughtSpot.      - `false`: Generates only a preview of the changes and does not apply any changes to ThoughtSpot  ---  ## Best Practices  1. **Backup Before Conversion:**      Always export metadata as a backup before initiating the conversion process  2. **Partial Conversion for Testing:**      Test the conversion process by setting `convert_all` to `false` and specifying a small number of `worksheet_ids`.  3. **Verify Dependencies:**      Check for dependent objects, such as Tables and Connections, to avoid invalid references.  4. **Review Changes:**      Use `apply_changes: false` to preview the impact of the conversion before applying changes.  ---  ## Examples  ### Convert Specific Worksheets ```json {   \"worksheet_ids\": [\"guid1\", \"guid2\", \"guid3\"],   \"exclude_worksheet_ids\": [],   \"convert_all\": false,   \"apply_changes\": true } ```  ### Convert All Accessible Worksheets ```json {   \"worksheet_ids\": [],   \"exclude_worksheet_ids\": [],   \"convert_all\": true,   \"apply_changes\": true } ```  ### Exclude Specific Worksheets While Converting All Accessible Worksheets ```json {   \"worksheet_ids\": [],   \"exclude_worksheet_ids\": [\"abc\"],   \"convert_all\": true,   \"apply_changes\": true } ```     
   * @param convertWorksheetToModelRequest 
   */
  convertWorksheetToModel(convertWorksheetToModelRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (convertWorksheetToModelRequest === null || convertWorksheetToModelRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "convertWorksheetToModel", "convertWorksheetToModelRequest");
      }
      const localVarPath = "/api/rest/2.0/metadata/worksheets/convert";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(convertWorksheetToModelRequest, "ConvertWorksheetToModelRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *  Makes a copy of an Answer or Liveboard saved in Atlas    Version: 10.3.0.cl or later   Creates a copy of a metadata object.  Requires at least view access to the metadata object being copied.  Upon successful execution, the API creates a copy of the metadata object specified in the API request and returns the ID of the new object.      
   * @param copyObjectRequest 
   */
  copyObject(copyObjectRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (copyObjectRequest === null || copyObjectRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "copyObject", "copyObjectRequest");
      }
      const localVarPath = "/api/rest/2.0/metadata/copyobject";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(copyObjectRequest, "CopyObjectRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.2.0.cl or later   Allows you to connect a ThoughtSpot instance to a Git repository.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance on your instance, the `CAN_MANAGE_VERSION_CONTROL` (**Can toggle version control for objects**) privilege.  You can use this API endpoint to connect your ThoughtSpot development and production environments to the development and production branches of a Git repository.  Before using this endpoint to connect your ThoughtSpot instance to a Git repository, check the following prerequisites:  * You have a Git repository. If you are using GitHub, make sure you have a valid account and an access token to connect ThoughtSpot to GitHub. For information about generating a token, see [GitHub Documentation](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens).  * Your access token has `repo` scope that grants full access to public and private repositories. * Your Git repository has a branch that can be configured as a default branch in ThoughtSpot.  For more information, see [Git integration documentation](https://developers.thoughtspot.com/docs/?pageid=git-integration).  **Note**: ThoughtSpot supports only GitHub / GitHub Enterprise for CI/CD.      
   * @param createConfigRequest 
   */
  createConfig(createConfigRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (createConfigRequest === null || createConfigRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "createConfig", "createConfigRequest");
      }
      const localVarPath = "/api/rest/2.0/vcs/git/config/create";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(createConfigRequest, "CreateConfigRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.2.0.cl or later   Creates a connection to a data warehouse for live query services.    Requires `DATAMANAGEMENT` (**Can manage data**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) privilege is required.  #### Create a connection without tables  To create a connection without tables:  1. Pass these parameters in your API request.  * Name of the connection.  * Type of the data warehouse to connect to.  * A JSON map of configuration attributes in `data_warehouse_config`. The following example shows the configuration attributes for a SnowFlake connection:   ```   {      \"configuration\":{         \"accountName\":\"thoughtspot_partner\",         \"user\":\"tsadmin\",         \"password\":\"TestConn123\",         \"role\":\"sysadmin\",         \"warehouse\":\"MEDIUM_WH\"      },      \"externalDatabases\":[       ]   }   ``` 2. Set `validate` to `false`.  #### Create a connection with tables  To create a connection with tables:  1. Pass these parameters in your API request.  * Name of the connection.  * Type of the data warehouse to connect to.  * A JSON map of configuration attributes, database details, and table properties in `data_warehouse_config` as shown in the following example:   ```   {      \"configuration\":{         \"accountName\":\"thoughtspot_partner\",         \"user\":\"tsadmin\",         \"password\":\"TestConn123\",         \"role\":\"sysadmin\",         \"warehouse\":\"MEDIUM_WH\"      },      \"externalDatabases\":[         {            \"name\":\"AllDatatypes\",            \"isAutoCreated\":false,            \"schemas\":[               {                  \"name\":\"alldatatypes\",                  \"tables\":[                     {                        \"name\":\"allDatatypes\",                        \"type\":\"TABLE\",                        \"description\":\"\",                        \"selected\":true,                        \"linked\":true,                        \"columns\":[                           {                              \"name\":\"CNUMBER\",                              \"type\":\"INT64\",                              \"canImport\":true,                              \"selected\":true,                              \"isLinkedActive\":true,                              \"isImported\":false,                              \"tableName\":\"allDatatypes\",                              \"schemaName\":\"alldatatypes\",                              \"dbName\":\"AllDatatypes\"                           },                           {                              \"name\":\"CDECIMAL\",                              \"type\":\"INT64\",                              \"canImport\":true,                              \"selected\":true,                              \"isLinkedActive\":true,                              \"isImported\":false,                              \"tableName\":\"allDatatypes\",                              \"schemaName\":\"alldatatypes\",                              \"dbName\":\"AllDatatypes\"                           }                        ]                     }                  ]               }            ]         }      ]   }   ``` 2. Set `validate` to `true`.      
   * @param createConnectionRequest 
   */
  createConnection(createConnectionRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (createConnectionRequest === null || createConnectionRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "createConnection", "createConnectionRequest");
      }
      const localVarPath = "/api/rest/2.0/connection/create";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(createConnectionRequest, "CreateConnectionRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *  Version: 10.4.0.cl or later   Creates a Conversation object to start an AI-driven conversation based on a specific data model.  Requires at least view access to the metadata object specified in the request.  #### Usage guidelines  This API requires the `metadata_identifier` parameter to define the context for the conversation.  You can also specify the tokens to initiate the conversation as shown in this example:  `\"tokens\": \"[tea],[sales],[type]\"`  If the API request is successful, ThoughtSpot returns the ID of the conversation.  > ###### Note: > * This endpoint is currently in Beta. Breaking changes may be introduced before the endpoint is made Generally Available. > * This endpoint requires Spotter - please contact ThoughtSpot support to enable Spotter on your cluster.      
   * @param createConversationRequest 
   */
  createConversation(createConversationRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (createConversationRequest === null || createConversationRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "createConversation", "createConversationRequest");
      }
      const localVarPath = "/api/rest/2.0/ai/conversation/create";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(createConversationRequest, "CreateConversationRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.6.0.cl or later   Creates a custom action that appears as a menu action on a saved Answer or Liveboard visualization.  Requires `DEVELOPER` (**Has Developer privilege**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `DEVELOPER` (**Has developer privilege**) privilege is required.  #### Usage Guidelines  The API lets you create the following types of custom actions:  * URL-based action        Allows pushing data to an external URL. * Callback action           Triggers a callback to the host application and initiates a response payload on an embedded ThoughtSpot instance.  By default, custom actions are visible to only administrator or developer users. To make a custom action available to other users, and specify the groups in `group_identifiers`.  By default, the custom action is set as a _global_ action on all visualizations and saved Answers. To assign a custom action to specific Liveboard visualization, saved Answer, or Worksheet, set `visibility` to `false` in `default_action_config` property and specify the GUID or name of the object in `associate_metadata`.  For more information, see [Custom actions](https://developers.thoughtspot.com/docs/custom-action-intro).      
   * @param createCustomActionRequest 
   */
  createCustomAction(createCustomActionRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (createCustomActionRequest === null || createCustomActionRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "createCustomAction", "createCustomActionRequest");
      }
      const localVarPath = "/api/rest/2.0/customization/custom-actions";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(createCustomActionRequest, "CreateCustomActionRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *  Version: 10.10.0.cl or later   Creates a custom configuration for the email customisation  #### Pre-requisites  Requires `DEVELOPER` (**has developer privilege**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `_Has developer privilege` privilege is required. Coms should be enabled on the cluster.  #### Usage guidelines  To create a custom confuguration:  1. Pass these parameters in your API request.  - A JSON map of configuration attributes `template_properties`. The following example shows the configuration attribures for a csutom configuration:  ``` {     {     \"logoUrl\": \"<logo_url>\",     \"homeUrl\": \"<home_url>\",     \"productName\": \"<Company Name in the Mail>\",     \"footerAddress\": \"<address to be visible in the footer>\",     \"ctaButtonBgColor\": \"#444DEA\",     \"ctaTextFontColor\": \"#FFFFFF\",     \"primaryBgColor\": \"#D3DEF0\",     \"hideMobileAppNudge\": <true/false>,     \"hideTsVocabularyDefinitions\": <true/false>e,     \"hideProductName\": <true/false>,     \"hideFooterPhone\": <true/false>,     \"hideFooterAddress\": <true/false>,     \"hidePrivacyPolicy\": <true/false>,     \"hideManageNotification\": <true/false>,     \"fontfamily\": \"<to maintain a single font in the entire email>\"   } } ```      
   * @param createEmailCustomisationRequest 
   */
  createEmailCustomisation(createEmailCustomisationRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (createEmailCustomisationRequest === null || createEmailCustomisationRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "createEmailCustomisation", "createEmailCustomisationRequest");
      }
      const localVarPath = "/api/rest/2.0/customization/email";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(createEmailCustomisationRequest, "CreateEmailCustomisationRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.0.0.cl or later   Creates an Org object.  To use this API, the [Orgs](https://docs.thoughtspot.com/cloud/latest/orgs-overview) feature must be enabled in your cluster.  Requires cluster administration (**Can administer Org**) privileges. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `ORG_ADMINISTRATION` (**Can manage Orgs**) privilege is required.      
   * @param createOrgRequest 
   */
  createOrg(createOrgRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (createOrgRequest === null || createOrgRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "createOrg", "createOrgRequest");
      }
      const localVarPath = "/api/rest/2.0/orgs/create";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(createOrgRequest, "CreateOrgRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.5.0.cl or later   Creates a Role object in ThoughtSpot.  Available only if [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance. To create a Role, the `ROLE_ADMINISTRATION` (**Can manage roles**) privilege is required.      
   * @param createRoleRequest 
   */
  createRole(createRoleRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (createRoleRequest === null || createRoleRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "createRole", "createRoleRequest");
      }
      const localVarPath = "/api/rest/2.0/roles/create";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(createRoleRequest, "CreateRoleRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *  Create schedule.    Version: 9.4.0.cl or later   Creates a Liveboard schedule job.  Requires at least edit access to Liveboards. To create a schedule on behalf of another user, you need  `ADMINISTRATION` (**Can administer Org**) or `JOBSCHEDULING` (**Can schedule for others**) privilege and edit access to the Liveboard. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `JOBSCHEDULING` (**Can schedule for others**) privilege is required.  #### Usage guidelines  * The description text is mandatory.  The description text appears as **Description: <your content>** in the Liveboard schedule email notifications. * For Liveboards with both charts and tables, schedule creation is only supported in PDF and XLS formats. Schedules created in CSV formats for such Liveboards will fail to run. If `PDF` is set as the `file_format`, enable `pdf_options` to get the correct attachment. Not doing so may cause the attachment to be rendered empty. * To include only specific visualizations, specify the visualization GUIDs in the `visualization_identifiers` array. * You can schedule a Liveboard job to run periodically by setting frequency parameters. You can set the schedule to run daily, weekly, monthly or every n minutes or hours. The scheduled job can also be configured to run at a specific time of the day or on specific days of the week or month. Please ensure that when setting the schedule frequency for _minute of the object_, only values that are multiples of 5 are included. * If the `frequency` parameters are defined, you can set the time zone to a value that matches your server\'s time zone. For example, `US/Central`, `Etc/UTC`, `CET`. The default time zone is `America/Los_Angeles`.  For more information about Liveboard jobs, see [ThoughtSpot Product Documentation](https://docs.thoughtspot.com/cloud/latest/liveboard-schedule).     
   * @param createScheduleRequest 
   */
  createSchedule(createScheduleRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (createScheduleRequest === null || createScheduleRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "createSchedule", "createScheduleRequest");
      }
      const localVarPath = "/api/rest/2.0/schedules/create";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(createScheduleRequest, "CreateScheduleRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.0.0.cl or later   Creates a tag object.  Tags are labels that identify a metadata object. For example, you can create a tag to designate subject areas, such as sales, HR, marketing, and finance.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `TAGMANAGEMENT` (**Can manage tags**) privilege is required to create, edit, and delete tags.      
   * @param createTagRequest 
   */
  createTag(createTagRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (createTagRequest === null || createTagRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "createTag", "createTagRequest");
      }
      const localVarPath = "/api/rest/2.0/tags/create";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(createTagRequest, "CreateTagRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.0.0.cl or later   Creates a user in ThoughtSpot.  The API endpoint allows you to configure several user properties such as email address, account status, share notification preferences, and sharing visibility. You can provision the user to [groups](https://docs.thoughtspot.com/cloud/latest/groups-privileges) and [Orgs](https://docs.thoughtspot.com/cloud/latest/orgs-overview). You can also add Liveboard, Answer, and Worksheet objects to the user’s favorites list, assign a default Liveboard for the user, and set user preferences.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `USER_ADMINISTRATION` (**Can manage users**) privilege is required.      
   * @param createUserRequest 
   */
  createUser(createUserRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (createUserRequest === null || createUserRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "createUser", "createUserRequest");
      }
      const localVarPath = "/api/rest/2.0/users/create";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(createUserRequest, "CreateUserRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.0.0.cl or later   Creates a group object in ThoughtSpot.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `GROUP_ADMINISTRATION` (**Can manage groups**) privilege is required.  #### About groups Groups in ThoughtSpot are used by the administrators to define privileges and organize users based on their roles and access requirements. To know more about groups and privileges, see [ThoughtSpot Product Documentation](https://docs.thoughtspot.com/cloud/latest/groups-privileges).  #### Supported operations  The API endpoint lets you perform the following operations:  * Assign privileges * Add users * Define sharing visibility * Add sub-groups * Assign a default Liveboard      
   * @param createUserGroupRequest 
   */
  createUserGroup(createUserGroupRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (createUserGroupRequest === null || createUserGroupRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "createUserGroup", "createUserGroupRequest");
      }
      const localVarPath = "/api/rest/2.0/groups/create";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(createUserGroupRequest, "CreateUserGroupRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *  Create a variable which can be used for parameterizing metadata objects   Version: 10.9.0.cl or later   Allows creating a variable which can be used for parameterizing metadata objects in ThoughtSpot.  Requires ADMINISTRATION role and TENANT scope.  The API endpoint supports the following types of variables: * CONNECTION_PROPERTY - For connection properties * TABLE_MAPPING - For table mappings * CONNECTION_PROPERTY_PER_PRINCIPAL - For connection properties per principal. In order to use this please contact support to enable this.  When creating a variable, you need to specify: * The variable type * A unique name for the variable * Whether the variable contains sensitive values (defaults to false) * The variable values (optional)  The operation will fail if: * The user lacks required permissions * The variable name already exists * The variable type is invalid * The variable values are invalid for the specified type       
   * @param createVariableRequest 
   */
  createVariable(createVariableRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (createVariableRequest === null || createVariableRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "createVariable", "createVariableRequest");
      }
      const localVarPath = "/api/rest/2.0/template/variables/create";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(createVariableRequest, "CreateVariableRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.9.0.cl or later   Creates a DBT connection object in ThoughtSpot.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege or `DATAMANAGEMENT` (**Can manage data**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the following Data control privileges may be required:  - `CAN_MANAGE_CUSTOM_CALENDAR`(**Can manage custom calendars**) - `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) - `CAN_MANAGE_WORKSHEET_VIEWS_TABLES` (**Can manage data models**)  #### About create DBT connection DBT connection in ThoughtSpot is used by the user to define DBT credentials for cloud . The API needs  embrace connection, embrace database name, DBT url, import type, DBT account identifier, DBT project identifier, DBT access token and environment details (or) embrace connection, embrace database name, import type, file_content to create a connection object. To know more about DBT, see ThoughtSpot Product Documentation.      
   * @param dbtConnectionRequest 
   */
  dbtConnection(dbtConnectionRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (dbtConnectionRequest === null || dbtConnectionRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "dbtConnection", "dbtConnectionRequest");
      }
      const localVarPath = "/api/rest/2.0/dbt/dbt-connection";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(dbtConnectionRequest, "DbtConnectionRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.9.0.cl or later   Resynchronize the existing list of models, tables, worksheet tml’s and import them to Thoughtspot based on the DBT connection object.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege or `DATAMANAGEMENT` (**Can manage data**) privilege, along with an existing DBT connection. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the following data control privileges may be required:  - `CAN_MANAGE_CUSTOM_CALENDAR`(**Can manage custom calendars**) - `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) - `CAN_MANAGE_WORKSHEET_VIEWS_TABLES` (**Can manage data models**)      
   * @param dbtGenerateSyncTmlRequest 
   */
  dbtGenerateSyncTml(dbtGenerateSyncTmlRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (dbtGenerateSyncTmlRequest === null || dbtGenerateSyncTmlRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "dbtGenerateSyncTml", "dbtGenerateSyncTmlRequest");
      }
      const localVarPath = "/api/rest/2.0/dbt/generate-sync-tml";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(dbtGenerateSyncTmlRequest, "DbtGenerateSyncTmlRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.9.0.cl or later   Generate required table and worksheet and import them.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege or `DATAMANAGEMENT` (**Can manage data**) privilege, along with an existing DBT connection. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the following data control privileges may be required:  - `CAN_MANAGE_CUSTOM_CALENDAR`(**Can manage custom calendars**) - `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) - `CAN_MANAGE_WORKSHEET_VIEWS_TABLES` (**Can manage data models**)  #### About generate TML Models and Worksheets to be imported can be selected by the user as part of the API.      
   * @param dbtGenerateTmlRequest 
   */
  dbtGenerateTml(dbtGenerateTmlRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (dbtGenerateTmlRequest === null || dbtGenerateTmlRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "dbtGenerateTml", "dbtGenerateTmlRequest");
      }
      const localVarPath = "/api/rest/2.0/dbt/generate-tml";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(dbtGenerateTmlRequest, "DbtGenerateTmlRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.9.0.cl or later   Gets a list of DBT connection objects by user and organization, available on the ThoughtSpot system.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege or `DATAMANAGEMENT` (**Can manage data**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the following Data control privileges may be required:  - `CAN_MANAGE_CUSTOM_CALENDAR`(**Can manage custom calendars**) - `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) - `CAN_MANAGE_WORKSHEET_VIEWS_TABLES` (**Can manage data models**)  #### About search DBT connection To get details of a specific DBT connection identifier, database connection identifier, database connection name, database name, project name, project identifier, environment identifier , import type and author.      
   */
  dbtSearch(_options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      const localVarPath = "/api/rest/2.0/dbt/search";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.7.0.cl or later   Deactivates a user account.  Requires `ADMINISTRATION` (**Can administer Thoughtspot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `USER_ADMINISTRATION` (**Can manage users**) privilege is required.  To deactivate a user account, the API request body must include the following information:  - Username or the GUID of the user account - Base URL of the ThoughtSpot instance  If the API request is successful, ThoughtSpot returns the activation URL in the response. The activation URL is valid for 14 days and can be used to re-activate the account and reset the password of the deactivated account.      
   * @param deactivateUserRequest 
   */
  deactivateUser(deactivateUserRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (deactivateUserRequest === null || deactivateUserRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "deactivateUser", "deactivateUserRequest");
      }
      const localVarPath = "/api/rest/2.0/users/deactivate";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(deactivateUserRequest, "DeactivateUserRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.2.0.cl or later   Deletes Git repository configuration from your ThoughtSpot instance.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance on your instance, the `CAN_MANAGE_VERSION_CONTROL` (**Can toggle version control for objects**) privilege.      
   * @param deleteConfigRequest 
   */
  deleteConfig(deleteConfigRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (deleteConfigRequest === null || deleteConfigRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "deleteConfig", "deleteConfigRequest");
      }
      const localVarPath = "/api/rest/2.0/vcs/git/config/delete";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(deleteConfigRequest, "DeleteConfigRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.2.0.cl or later    **Important**: This endpoint is deprecated and will be removed from ThoughtSpot in September 2025. ThoughtSpot strongly recommends using the [Delete Connection V2](#/http/api-endpoints/connections/delete-connection-v2) endpoint to delete your connection objects.    #### Usage guidelines  Deletes a connection object.  Requires `DATAMANAGEMENT` (**Can manage data**) and edit permissions to the connection object, or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) privilege is required.  **Note**: If a connection has dependent objects, make sure you remove its associations before the delete operation.     
   * @param deleteConnectionRequest 
   */
  deleteConnection(deleteConnectionRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (deleteConnectionRequest === null || deleteConnectionRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "deleteConnection", "deleteConnectionRequest");
      }
      const localVarPath = "/api/rest/2.0/connection/delete";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(deleteConnectionRequest, "DeleteConnectionRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 10.4.0.cl or later   Deletes a connection object.  **Note**: If a connection has dependent objects, make sure you remove its associations before the delete operation.  Requires `DATAMANAGEMENT` (**Can manage data**) and edit permissions to the connection object, or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) privilege is required.      
   * @param connectionIdentifier Unique ID or name of the connection.
   */
  deleteConnectionV2(connectionIdentifier, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (connectionIdentifier === null || connectionIdentifier === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "deleteConnectionV2", "connectionIdentifier");
      }
      const localVarPath = "/api/rest/2.0/connections/{connection_identifier}/delete".replace("{connection_identifier}", encodeURIComponent(String(connectionIdentifier)));
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.6.0.cl or later   Removes the custom action specified in the API request.  Requires `DEVELOPER` (**Has Developer privilege**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `DEVELOPER` (**Has developer privilege**) privilege is required.      
   * @param customActionIdentifier Unique ID or name of the custom action.
   */
  deleteCustomAction(customActionIdentifier, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (customActionIdentifier === null || customActionIdentifier === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "deleteCustomAction", "customActionIdentifier");
      }
      const localVarPath = "/api/rest/2.0/customization/custom-actions/{custom_action_identifier}/delete".replace("{custom_action_identifier}", encodeURIComponent(String(customActionIdentifier)));
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.9.0.cl or later   Removes the specified DBT connection object from the ThoughtSpot system.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) or `DATAMANAGEMENT` (**Can manage data ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the following Data control privileges may be required:  - `CAN_MANAGE_CUSTOM_CALENDAR`(**Can manage custom calendars**) - `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) - `CAN_MANAGE_WORKSHEET_VIEWS_TABLES` (**Can manage data models**)      
   * @param dbtConnectionIdentifier Unique ID of the DBT Connection.
   */
  deleteDbtConnection(dbtConnectionIdentifier, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (dbtConnectionIdentifier === null || dbtConnectionIdentifier === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "deleteDbtConnection", "dbtConnectionIdentifier");
      }
      const localVarPath = "/api/rest/2.0/dbt/{dbt_connection_identifier}/delete".replace("{dbt_connection_identifier}", encodeURIComponent(String(dbtConnectionIdentifier)));
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *  Version: 10.10.0.cl or later   Deletes the configuration for the email customisation.  #### Pre-requisites  Requires `DEVELOPER` (**has developer privilege**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `_Has developer privilege` privilege is required. Coms should be enabled on the cluster.  #### Usage guidelines  Deletes the configuration available for the cluster/org. Pass the `template_identifier` in the API request.  Note: `template_identifier` can be fetched from search API request.      
   * @param templateIdentifier Unique ID or name of the email customization.
   */
  deleteEmailCustomisation(templateIdentifier, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (templateIdentifier === null || templateIdentifier === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "deleteEmailCustomisation", "templateIdentifier");
      }
      const localVarPath = "/api/rest/2.0/customization/email/{template_identifier}/delete".replace("{template_identifier}", encodeURIComponent(String(templateIdentifier)));
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.0.0.cl or later   Removes the specified metadata object from the ThoughtSpot system.  Requires edit access to the metadata object.       
   * @param deleteMetadataRequest 
   */
  deleteMetadata(deleteMetadataRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (deleteMetadataRequest === null || deleteMetadataRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "deleteMetadata", "deleteMetadataRequest");
      }
      const localVarPath = "/api/rest/2.0/metadata/delete";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(deleteMetadataRequest, "DeleteMetadataRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.0.0.cl or later   Deletes an Org object from the ThoughtSpot system.  Requires cluster administration (**Can administer Org**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `ORG_ADMINISTRATION` (**Can manage Orgs**) privilege is required.  When you delete an Org, all its users and objects created in that Org context are removed. However, if the users in the deleted Org also exists in other Orgs, they are removed only from the deleted Org.      
   * @param orgIdentifier ID or name of the Org
   */
  deleteOrg(orgIdentifier, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (orgIdentifier === null || orgIdentifier === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "deleteOrg", "orgIdentifier");
      }
      const localVarPath = "/api/rest/2.0/orgs/{org_identifier}/delete".replace("{org_identifier}", encodeURIComponent(String(orgIdentifier)));
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.5.0.cl or later   Deletes a Role object from the ThoughtSpot system.  Available only if [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance. To delete a Role, the `ROLE_ADMINISTRATION` (**Can manage roles**) privilege is required.      
   * @param roleIdentifier Unique ID or name of the Role. ReadOnly roles cannot be deleted.
   */
  deleteRole(roleIdentifier, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (roleIdentifier === null || roleIdentifier === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "deleteRole", "roleIdentifier");
      }
      const localVarPath = "/api/rest/2.0/roles/{role_identifier}/delete".replace("{role_identifier}", encodeURIComponent(String(roleIdentifier)));
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *  Deletes a scheduled job.    Version: 9.4.0.cl or later   Deletes a scheduled Liveboard job.  Requires at least edit access to Liveboard or `ADMINISTRATION` (**Can administer Org**) privilege.    If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `JOBSCHEDULING` (**Can schedule for others**) privilege is required.      
   * @param scheduleIdentifier Unique ID or name of the scheduled job.
   */
  deleteSchedule(scheduleIdentifier, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (scheduleIdentifier === null || scheduleIdentifier === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "deleteSchedule", "scheduleIdentifier");
      }
      const localVarPath = "/api/rest/2.0/schedules/{schedule_identifier}/delete".replace("{schedule_identifier}", encodeURIComponent(String(scheduleIdentifier)));
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.0.0.cl or later   Deletes a tag object from the ThoughtSpot system  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `TAGMANAGEMENT` (**Can manage tags**) privilege is required to create, edit, and delete tags.      
   * @param tagIdentifier Tag identifier Tag name or Tag id.
   */
  deleteTag(tagIdentifier, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (tagIdentifier === null || tagIdentifier === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "deleteTag", "tagIdentifier");
      }
      const localVarPath = "/api/rest/2.0/tags/{tag_identifier}/delete".replace("{tag_identifier}", encodeURIComponent(String(tagIdentifier)));
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.0.0.cl or later   Deletes a user from the ThoughtSpot system.  If you want to remove a user from a specific Org but not from ThoughtSpot, update the group and Org mapping properties of the user object via a POST API call to the [/api/rest/2.0/users/{user_identifier}/update](#/http/api-endpoints/users/update-user) endpoint.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `USER_ADMINISTRATION` (**Can manage users**) privilege is required.      
   * @param userIdentifier GUID / name of the user
   */
  deleteUser(userIdentifier, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (userIdentifier === null || userIdentifier === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "deleteUser", "userIdentifier");
      }
      const localVarPath = "/api/rest/2.0/users/{user_identifier}/delete".replace("{user_identifier}", encodeURIComponent(String(userIdentifier)));
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.0.0.cl or later   Removes the specified group object from the ThoughtSpot system.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `GROUP_ADMINISTRATION` (**Can manage groups**) privilege is required.      
   * @param groupIdentifier GUID or name of the group.
   */
  deleteUserGroup(groupIdentifier, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (groupIdentifier === null || groupIdentifier === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "deleteUserGroup", "groupIdentifier");
      }
      const localVarPath = "/api/rest/2.0/groups/{group_identifier}/delete".replace("{group_identifier}", encodeURIComponent(String(groupIdentifier)));
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *  Delete a variable   Version: 10.9.0.cl or later   Allows deleting a variable from ThoughtSpot.  Requires ADMINISTRATION role and TENANT scope.  The API endpoint requires: * The variable identifier (ID or name)  The operation will fail if: * The user lacks required permissions * The variable doesn\'t exist * The variable is being used by other objects      
   * @param identifier Unique id or name of the variable
   */
  deleteVariable(identifier, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (identifier === null || identifier === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "deleteVariable", "identifier");
      }
      const localVarPath = "/api/rest/2.0/template/variables/{identifier}/delete".replace("{identifier}", encodeURIComponent(String(identifier)));
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.2.0.cl or later   Allows you to deploy a commit and publish TML content to your ThoughtSpot instance.  Requires at least edit access to the objects used in the deploy operation.  The API deploys the head of the branch unless a `commit_id` is specified in the API request. If the branch name is not defined in the request, the default branch is considered for deploying commits.  For more information, see [Git integration documentation](https://developers.thoughtspot.com/docs/git-integration).      
   * @param deployCommitRequest 
   */
  deployCommit(deployCommitRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (deployCommitRequest === null || deployCommitRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "deployCommit", "deployCommitRequest");
      }
      const localVarPath = "/api/rest/2.0/vcs/git/commits/deploy";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(deployCommitRequest, "DeployCommitRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.9.0.cl or later   Exports the difference in connection metadata between CDW and ThoughtSpot  Requires `DATAMANAGEMENT` (**Can manage data**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the following Data control privileges may be required:   - `CAN_MANAGE_CUSTOM_CALENDAR`(**Can manage custom calendars**) - `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) - `CAN_MANAGE_WORKSHEET_VIEWS_TABLES` (**Can manage data models**)  To download the connection metadata difference between ThoughtSpot and CDW, pass the connection GUID as `connection_identifier` in the API request.      
   * @param connectionIdentifier GUID of the connection
   */
  downloadConnectionMetadataChanges(connectionIdentifier, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (connectionIdentifier === null || connectionIdentifier === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "downloadConnectionMetadataChanges", "connectionIdentifier");
      }
      const localVarPath = "/api/rest/2.0/connections/download-connection-metadata-changes/{connection_identifier}".replace("{connection_identifier}", encodeURIComponent(String(connectionIdentifier)));
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.0.0.cl or later   Exports an Answer in the given file format. You can download the Answer data as a PDF, PNG, CSV, or XLSX file.  Requires at least view access to the Answer.  #### Usage guidelines  In the request body, the GUID or name of the Answer and set `file_format`. The default file format is CSV.  **NOTE**: * The downloadable file returned in API response file is extensionless. Please rename the downloaded file by typing in the relevant extension. * HTML rendering is not supported for PDF exports of Answers with tables.  Optionally, you can define [runtime overrides](https://developers.thoughtspot.com/docs/fetch-data-and-report-apis#_runtime_overrides) to apply to the Answer data.  The `record_size` attribute determines the number of records to retrieve in an API call. For more information about pagination, record size, and maximum row limit, see [Pagination and record size settings](https://developers.thoughtspot.com/docs/fetch-data-and-report-apis#_pagination_settings_for_data_and_report_api).       
   * @param exportAnswerReportRequest 
   */
  exportAnswerReport(exportAnswerReportRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (exportAnswerReportRequest === null || exportAnswerReportRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "exportAnswerReport", "exportAnswerReportRequest");
      }
      const localVarPath = "/api/rest/2.0/report/answer";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(exportAnswerReportRequest, "ExportAnswerReportRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.0.0.cl or later   Exports a Liveboard and its visualizations in PDF or PNG file format.  Requires at least view access to the Liveboard.  #### Usage guidelines  In the request body, specify the GUID or name of the Liveboard. To generate a Liveboard report with specific visualizations, add GUIDs or names of the visualizations.  The default `file_format` is PDF. For PDF downloads, you can specify additional parameters to customize the page orientation and include or exclude the cover page, logo, footer text, and page numbers. Similar customization options are also available for PNG output.  **NOTE**: The downloadable file returned in API response file is extensionless. Please rename the downloaded file by typing in the relevant extension.  Optionally, you can define [runtime overrides](https://developers.thoughtspot.com/docs/fetch-data-and-report-apis#_runtime_overrides) to apply to the Answer data.  To include unsaved changes in the report, pass the `transient_pinboard_content` script generated from the `getExportRequestForCurrentPinboard` method in the Visual Embed SDK. Upon successful execution, the API returns the report with unsaved changes, including ad hoc changes to visualizations. For more information, see [Liveboard Report API](https://developers.thoughtspot.com/docs/fetch-data-and-report-apis#_liveboard_report_api).       
   * @param exportLiveboardReportRequest 
   */
  exportLiveboardReport(exportLiveboardReportRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (exportLiveboardReportRequest === null || exportLiveboardReportRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "exportLiveboardReport", "exportLiveboardReportRequest");
      }
      const localVarPath = "/api/rest/2.0/report/liveboard";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(exportLiveboardReportRequest, "ExportLiveboardReportRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.0.0.cl or later   Exports the [TML](https://docs.thoughtspot.com/cloud/latest/tml) representation of metadata objects in JSON or YAML format.  Requires `DATADOWNLOADING` (**Can download Data**) and at least view access to the metadata object.  #### Usage guidelines  * You can export one or several objects by passing metadata object GUIDs in the `metadata` array. * When exporting TML content for a Liveboard or Answer object, you can set `export_associated` to `true` to retrieve TML content for underlying Worksheets, Tables, or Views, including the GUID of each object within the headers. When   `export_associated` is set to `true`, consider retrieving one metadata object at a time. * Set `export_fqns` to `true` to add FQNs of the referenced objects in the TML content. For example, if you send an API request to retrieve TML for a Liveboard and its associated objects, the API returns the TML content with FQNs of the referenced Worksheet. Exporting TML with FQNs is useful if ThoughtSpot has multiple objects with the same name and you want to eliminate ambiguity when importing TML files into ThoughtSpot. It eliminates the need for adding FQNs of the referenced objects manually during the import operation. * To export only the TML of feedbacks associated with an object, set the GUID of the object as `identifier`, and set the `type` as `FEEDBACK` in the `metadata` array. * To export the TML of an object along with the feedbacks associated with it, set the GUID of the object as `identifier`, set the `type` as `LOGIAL_TABLE` in the `metadata` array, and set `export_with_associated_feedbacks` in `export_options` to true.  For more information, see [TML Documentation](https://developers.thoughtspot.com/docs/tml#_export_a_tml).  For more information on feedbacks, see [Feedback Documentation](https://docs.thoughtspot.com/cloud/latest/sage-feedback).     
   * @param exportMetadataTMLRequest 
   */
  exportMetadataTML(exportMetadataTMLRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (exportMetadataTMLRequest === null || exportMetadataTMLRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "exportMetadataTML", "exportMetadataTMLRequest");
      }
      const localVarPath = "/api/rest/2.0/metadata/tml/export";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(exportMetadataTMLRequest, "ExportMetadataTMLRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 10.1.0.cl or later   Exports the [TML](https://docs.thoughtspot.com/cloud/latest/tml) representation of metadata objects in JSON or YAML format.  ### **Permissions Required**  Requires `DATAMANAGEMENT` (**Can manage data**) and `USERMANAGEMENT` (**Can manage users**) privileges.  #### **Usage Guidelines**  This API is only applicable for `USER`, `GROUP`, and `ROLES` metadata types.  - `batch_offset` Indicates the starting position within the complete dataset from which the API should begin returning objects. Useful for paginating results efficiently. - `batch_size` Specifies the number of objects or items to retrieve in a single request. Helps control response size for better performance. - `edoc_format` Defines the format of the TML content. The exported metadata can be in JSON or YAML format. - `export_dependent` Specifies whether to include dependent metadata objects in the export. Ensures related objects are also retrieved if needed. - `all_orgs_override` Indicates whether the export operation applies across all organizations. Useful for multi-tenant environments where cross-org exports are required.      
   * @param exportMetadataTMLBatchedRequest 
   */
  exportMetadataTMLBatched(exportMetadataTMLBatchedRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (exportMetadataTMLBatchedRequest === null || exportMetadataTMLBatchedRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "exportMetadataTMLBatched", "exportMetadataTMLBatchedRequest");
      }
      const localVarPath = "/api/rest/2.0/metadata/tml/export/batch";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(exportMetadataTMLBatchedRequest, "ExportMetadataTMLBatchedRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.0.0.cl or later   Fetches data from a saved Answer.  Requires at least view access to the saved Answer.  The `record_size` attribute determines the number of records to retrieve in an API call. For more information about pagination, record size, and maximum row limit, see [Pagination and record size settings](https://developers.thoughtspot.com/docs/fetch-data-and-report-apis#_pagination_settings_for_data_and_report_apis).     
   * @param fetchAnswerDataRequest 
   */
  fetchAnswerData(fetchAnswerDataRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (fetchAnswerDataRequest === null || fetchAnswerDataRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "fetchAnswerData", "fetchAnswerDataRequest");
      }
      const localVarPath = "/api/rest/2.0/metadata/answer/data";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(fetchAnswerDataRequest, "FetchAnswerDataRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.0.0.cl or later   Fetches the underlying SQL query data for an Answer object.  Requires at least view access to the Answer object.  Upon successful execution, the API returns the SQL queries for the specified object as shown in this example: ``` {    \"metadata_id\":\"8fbe44a8-46ad-4b16-8d39-184b2fada490\",    \"metadata_name\":\"Total sales\",    \"metadata_type\":\"ANSWER\",    \"sql_queries\":[       {          \"metadata_id\":\"8fbe44a8-46ad-4b16-8d39-184b2fada490\",          \"metadata_name\":\"Total sales -test\",          \"sql_query\":\"SELECT \\n  \\\"ta_1\\\".\\\"REGION\\\" \\\"ca_1\\\", \\n  \\\"ta_2\\\".\\\"PRODUCTNAME\\\" \\\"ca_2\\\", \\n  \\\"ta_1\\\".\\\"STORENAME\\\" \\\"ca_3\\\", \\n  CASE\\n    WHEN sum(\\\"ta_3\\\".\\\"SALES\\\") IS NOT NULL THEN sum(\\\"ta_3\\\".\\\"SALES\\\")\\n    ELSE 0\\n  END \\\"ca_4\\\", \\n  CASE\\n    WHEN sum(\\\"ta_3\\\".\\\"QUANTITYPURCHASED\\\") IS NOT NULL THEN sum(\\\"ta_3\\\".\\\"QUANTITYPURCHASED\\\")\\n    ELSE 0\\n  END \\\"ca_5\\\"\\nFROM \\\"RETAILAPPAREL\\\".\\\"PUBLIC\\\".\\\"FACT_RETAPP_SALES\\\" \\\"ta_3\\\"\\n  JOIN \\\"RETAILAPPAREL\\\".\\\"PUBLIC\\\".\\\"DIM_RETAPP_STORES\\\" \\\"ta_1\\\"\\n    ON \\\"ta_3\\\".\\\"STOREID\\\" = \\\"ta_1\\\".\\\"STOREID\\\"\\n  JOIN \\\"RETAILAPPAREL\\\".\\\"PUBLIC\\\".\\\"DIM_RETAPP_PRODUCTS\\\" \\\"ta_2\\\"\\n    ON \\\"ta_3\\\".\\\"PRODUCTID\\\" = \\\"ta_2\\\".\\\"PRODUCTID\\\"\\nGROUP BY \\n  \\\"ca_1\\\", \\n  \\\"ca_2\\\", \\n  \\\"ca_3\\\"\\n\"       }    ] } ```      
   * @param fetchAnswerSqlQueryRequest 
   */
  fetchAnswerSqlQuery(fetchAnswerSqlQueryRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (fetchAnswerSqlQueryRequest === null || fetchAnswerSqlQueryRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "fetchAnswerSqlQuery", "fetchAnswerSqlQueryRequest");
      }
      const localVarPath = "/api/rest/2.0/metadata/answer/sql";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(fetchAnswerSqlQueryRequest, "FetchAnswerSqlQueryRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 10.4.0.cl or later   Gets information about the status of the TML async import task scheduled using the `/api/rest/2.0/metadata/tml/async/import` API call.  To fetch the task details, specify the ID of the TML async import task.    Requires access to the task ID. The API allows users who initiated the asynchronous TML import via `/api/rest/2.0/metadata/tml/async/import` to view the status of their tasks.  Users with administration privilege can view the status of all import tasks initiated by the users in their Org.  #### Usage guidelines  See [TML API Documentation](https://developers.thoughtspot.com/docs/tml#_fetch_status_of_the_tml_import_task) for usage guidelines.     
   * @param fetchAsyncImportTaskStatusRequest 
   */
  fetchAsyncImportTaskStatus(fetchAsyncImportTaskStatusRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (fetchAsyncImportTaskStatusRequest === null || fetchAsyncImportTaskStatusRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "fetchAsyncImportTaskStatus", "fetchAsyncImportTaskStatusRequest");
      }
      const localVarPath = "/api/rest/2.0/metadata/tml/async/status";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(fetchAsyncImportTaskStatusRequest, "FetchAsyncImportTaskStatusRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.9.0.cl or later   Validates the difference in connection metadata between CDW and ThoughtSpot.  Requires `DATAMANAGEMENT` (**Can manage data**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the following Data control privileges may be required:  - `CAN_MANAGE_CUSTOM_CALENDAR`(**Can manage custom calendars**) - `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) - `CAN_MANAGE_WORKSHEET_VIEWS_TABLES` (**Can manage data models**)  Returns a boolean indicating whether there is any difference between the connection metadata at ThoughtSpot and CDW.  To get the connection metadata difference status, pass the connection GUID as `connection_identifier` in the API request.      
   * @param connectionIdentifier GUID of the connection
   */
  fetchConnectionDiffStatus(connectionIdentifier, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (connectionIdentifier === null || connectionIdentifier === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "fetchConnectionDiffStatus", "connectionIdentifier");
      }
      const localVarPath = "/api/rest/2.0/connections/fetch-connection-diff-status/{connection_identifier}".replace("{connection_identifier}", encodeURIComponent(String(connectionIdentifier)));
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.0.0.cl or later   Gets data from a Liveboard object and its visualization.    Requires at least view access to the Liveboard.  #### Usage guidelines  In the request body, specify the GUID or name of the Liveboard. To get data for specific visualizations, add the GUIDs or names of the visualizations in the API request.  To include unsaved changes in the report, pass the `transient_pinboard_content` script generated from the `getExportRequestForCurrentPinboard` method in the Visual Embed SDK. Upon successful execution, the API returns the report with unsaved changes. If the new Liveboard experience mode, the transient content includes ad hoc changes to visualizations such as sorting, toggling of legends, and data drill down.  For more information, and see [Liveboard data API](https://developers.thoughtspot.com/docs/fetch-data-and-report-apis#_fetch_liveboard_data_api).     
   * @param fetchLiveboardDataRequest 
   */
  fetchLiveboardData(fetchLiveboardDataRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (fetchLiveboardDataRequest === null || fetchLiveboardDataRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "fetchLiveboardData", "fetchLiveboardDataRequest");
      }
      const localVarPath = "/api/rest/2.0/metadata/liveboard/data";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(fetchLiveboardDataRequest, "FetchLiveboardDataRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.0.0.cl or later   Fetches the underlying SQL query data for a Liveboard object and its visualizations.  Requires at least view access to the Liveboard object.  To get SQL query data for a Liveboard, specify the GUID of the Liveboard. Optionally, you can add an array of visualization GUIDs to retrieve the SQL query data for visualizations in the Liveboard.  Upon successful execution, the API returns the SQL queries for the specified object as shown in this example: ``` {   \"metadata_id\": \"fa68ae91-7588-4136-bacd-d71fb12dda69\",   \"metadata_name\": \"Total Sales\",   \"metadata_type\": \"LIVEBOARD\",   \"sql_queries\": [     {       \"metadata_id\": \"b3b6d2b9-089a-490c-8e16-b144650b7843\",       \"metadata_name\": \"Total quantity purchased, Total sales by region\",       \"sql_query\": \"SELECT \\n  \\\"ta_1\\\".\\\"REGION\\\" \\\"ca_1\\\", \\n  CASE\\n    WHEN sum(\\\"ta_2\\\".\\\"QUANTITYPURCHASED\\\") IS NOT NULL THEN sum(\\\"ta_2\\\".\\\"QUANTITYPURCHASED\\\")\\n    ELSE 0\\n  END \\\"ca_2\\\", \\n  CASE\\n    WHEN sum(\\\"ta_2\\\".\\\"SALES\\\") IS NOT NULL THEN sum(\\\"ta_2\\\".\\\"SALES\\\")\\n    ELSE 0\\n  END \\\"ca_3\\\"\\nFROM \\\"RETAILAPPAREL\\\".\\\"PUBLIC\\\".\\\"FACT_RETAPP_SALES\\\" \\\"ta_2\\\"\\n  JOIN \\\"RETAILAPPAREL\\\".\\\"PUBLIC\\\".\\\"DIM_RETAPP_STORES\\\" \\\"ta_1\\\"\\n    ON \\\"ta_2\\\".\\\"STOREID\\\" = \\\"ta_1\\\".\\\"STOREID\\\"\\nGROUP BY \\\"ca_1\\\"\"     }   ] } ```      
   * @param fetchLiveboardSqlQueryRequest 
   */
  fetchLiveboardSqlQuery(fetchLiveboardSqlQueryRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (fetchLiveboardSqlQueryRequest === null || fetchLiveboardSqlQueryRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "fetchLiveboardSqlQuery", "fetchLiveboardSqlQueryRequest");
      }
      const localVarPath = "/api/rest/2.0/metadata/liveboard/sql";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(fetchLiveboardSqlQueryRequest, "FetchLiveboardSqlQueryRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.0.0.cl or later   Fetches security audit logs.    Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the [Admin Control](https://developers.thoughtspot.com/docs/rbac#_admin_control) privileges are required.   #### Usage guidelines  By default, the API retrieves logs for the last 24 hours. You can set a custom duration in EPOCH time. Make sure the log duration specified in your API request doesn’t exceed 24 hours. If you must fetch logs for a longer time range, modify the duration and make multiple sequential API requests.  Upon successful execution, the API returns logs with the following information: * timestamp of the event * event ID * event type * name and GUID of the user * IP address of ThoughtSpot instance  For more information see [Audit logs Documentation](https://developers.thoughtspot.com/docs/audit-logs).      
   * @param fetchLogsRequest 
   */
  fetchLogs(fetchLogsRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (fetchLogsRequest === null || fetchLogsRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "fetchLogs", "fetchLogsRequest");
      }
      const localVarPath = "/api/rest/2.0/logs/fetch";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(fetchLogsRequest, "FetchLogsRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.0.0.cl or later   Fetches object permission details for a given principal object such as a user and group.  Requires view access to the metadata object.   #### Usage guidelines  * To get a list of all metadata objects that a user or group can access, specify the `type` and GUID or name of the principal. * To get permission details for a specific object, add the `type` and GUID or name of the metadata object to your API request.  Upon successful execution, the API returns a list of metadata objects and permission details for each object.        
   * @param fetchPermissionsOfPrincipalsRequest 
   */
  fetchPermissionsOfPrincipals(fetchPermissionsOfPrincipalsRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (fetchPermissionsOfPrincipalsRequest === null || fetchPermissionsOfPrincipalsRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "fetchPermissionsOfPrincipals", "fetchPermissionsOfPrincipalsRequest");
      }
      const localVarPath = "/api/rest/2.0/security/principals/fetch-permissions";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(fetchPermissionsOfPrincipalsRequest, "FetchPermissionsOfPrincipalsRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.0.0.cl or later   Fetches permission details for a given metadata object.  Requires view access to the metadata object.  #### Usage guidelines  * To fetch a list of users and groups for a metadata object, specify `type` and GUID or name of the metadata object. * To get permission details for a specific user or group, add `type` and GUID or name of the principal object to your API request.  Upon successful execution, the API returns permission details and principal information for the object specified in the API request.      
   * @param fetchPermissionsOnMetadataRequest 
   */
  fetchPermissionsOnMetadata(fetchPermissionsOnMetadataRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (fetchPermissionsOnMetadataRequest === null || fetchPermissionsOnMetadataRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "fetchPermissionsOnMetadata", "fetchPermissionsOnMetadataRequest");
      }
      const localVarPath = "/api/rest/2.0/security/metadata/fetch-permissions";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(fetchPermissionsOnMetadataRequest, "FetchPermissionsOnMetadataRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.0.0.cl or later   Enforces logout on current user sessions.    Use this API with caution as it may invalidate active user sessions and force users to re-login. Make sure you specify the usernames or GUIDs. If you pass null values in the API call, all user sessions on your cluster become invalid, and the users are forced to re-login.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `USER_ADMINISTRATION` (**Can manage users**) privilege is required.      
   * @param forceLogoutUsersRequest 
   */
  forceLogoutUsers(forceLogoutUsersRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (forceLogoutUsersRequest === null || forceLogoutUsersRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "forceLogoutUsers", "forceLogoutUsersRequest");
      }
      const localVarPath = "/api/rest/2.0/users/force-logout";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(forceLogoutUsersRequest, "ForceLogoutUsersRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.0.0.cl or later    Gets session information for the currently logged-in user.  This API does not require any parameters to be passed in the request.    Any ThoughtSpot user can access this endpoint and send an API request. The data returned in the API response varies according to user\'s privilege and object access permissions.      
   */
  getCurrentUserInfo(_options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      const localVarPath = "/api/rest/2.0/auth/session/user";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "GET" /* GET */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *  Get token for the currently logged-in user.    Version: 9.4.0.cl or later   Gets token details for the currently logged-in user.  You can use this endpoint to obtain the token associated with the user\'s session.  This API does not require any parameters to be passed in the request.    Any ThoughtSpot user can access this endpoint and send an API request.      
   */
  getCurrentUserToken(_options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      const localVarPath = "/api/rest/2.0/auth/session/token";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "GET" /* GET */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 10.4.0.cl or later   Gets an authentication token with custom rules and security attributes and creates a full session in ThoughtSpot for a given user. By default, the token obtained from ThoughtSpot remains valid for 5 mins.  To add a new user and assign privileges during auto creation, you need `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled, the `CONTROL_TRUSTED_AUTH`(**Can Enable or Disable Trusted Authentication**) privilege and edit access to the data source is required.  To assign security attributes with filter rules and Parameters to the JWT token, you\'ll need administrator privileges and edit access to the data source (Worksheet or Model). If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled, the `CONTROL_TRUSTED_AUTH`(**Can Enable or Disable Trusted Authentication**) privilege and edit access to the data source is required.  #### Usage guidelines  You can generate the token for a user by providing a `username` and `password`, or by using the cluster’s `secret_key`.  To generate a `secret_key` on your cluster, the administrator must enable [Trusted authentication](https://developers.thoughtspot.com/docs/?pageid=trusted-auth#trusted-auth-enable) in the **Develop** > **Customizations** > **Security Settings** page.  **Note**: When both `password` and `secret_key` are included in the API request, `password` takes precedence.  If Multi-Factor Authentication (MFA) is enabled on your instance, the API login request with basic authentication (`username`  and `password` ) returns an error. You can switch to token-based authentication with  `secret_key`  or contact ThoughtSpot Support for assistance.  ##### Attribute-Based Access Control (ABAC) with tokens  To implement Attribute-Based Access Control (ABAC) and assign security entitlements to users during session creation, you can generate a token with custom filtering rules and Parameters in the `filter_rules` and `parameter_values` array respectively. These attributes can be configured to persist on a specific set of objects for user sessions initiated using the token. Once defined, the rules are added to the user\'s `access_control_properties` object, after which all sessions will use the persisted values.  Specify the object type as `LOGICAL_TABLE`.  The `LIVEBOARD` and `ANSWER` object types are not supported.  For more information, see [ABAC via tokens Documentation](https://developers.thoughtspot.com/docs/api-authv2#_get_tokens_with_custom_rules_and_filter_conditions).  ##### Just-in-time provisioning  For just-in-time user creation and provisioning, define the following attributes:  * `auto_create` * `username` * `display_name` * `email` * `groups`  Set `auto_create` to `true` if the user is not available in ThoughtSpot. If the user already exists in ThoughtSpot and the `auto_create` parameter is set to `true` in the API request, the user properties such as the display name, email, Org and group assignment will not be updated with new values.  For more information, see [Just-in-time provisioning](https://developers.thoughtspot.com/docs/just-in-time-provisioning).  ##### Important point to note All options in the token creation APIs that define access to the content in ThoughtSpot will do so during the token creation and not when the token is being used for authentication. For example, `auto_create:true` will create the user when the authentication token is created. Persist options such as  `APPEND`, `REPLACE`, `RESET` will persist security parameters on the user profile when the token is created, while Persist option `NONE` will not persist anything but will be honoured in the session.      
   * @param getCustomAccessTokenRequest 
   */
  getCustomAccessToken(getCustomAccessTokenRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (getCustomAccessTokenRequest === null || getCustomAccessTokenRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "getCustomAccessToken", "getCustomAccessTokenRequest");
      }
      const localVarPath = "/api/rest/2.0/auth/token/custom";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(getCustomAccessTokenRequest, "GetCustomAccessTokenRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.0.0.cl or later   Gets an authentication token and creates a full session in ThoughtSpot for a given user. By default, the token obtained from ThoughtSpot remains valid for 5 mins.  You can generate the token for a user by providing a `username` and `password`, or by using the cluster’s `secret_key` (for [Trusted authentication](https://developers.thoughtspot.com/docs/?pageid=trusted-auth#trusted-auth-enable)).  To generate a `secret_key` on your cluster, the administrator must enable **Trusted authentication** in the **Develop** > **Customizations** > **Security Settings** page. For more information, see [Trusted authentication](https://developers.thoughtspot.com/docs/?pageid=trusted-auth#trusted-auth-enable).  **Note**: When both `password` and `secret_key` are included in the API request, `password` takes precedence.  If Multi-Factor Authentication (MFA) is enabled on your instance, the API login request with basic authentication (`username`  and `password` ) returns an error. You can switch to token-based authentication with  `secret_key`  or contact ThoughtSpot Support for assistance.  #### Just-in-time provisioning  For just-in-time user creation and provisioning, define the following attributes:  * `auto_create` * `username` * `display_name` * `email` * `group_identifiers`  Set `auto_create` to `True` if the user is not available in ThoughtSpot. If the user already exists in ThoughtSpot and the `auto_create` parameter is set to `true`, the API call will update user properties like display name, email and group assignment.  For more information, see [Just-in-time provisioning](https://developers.thoughtspot.com/docs/just-in-time-provisioning).  To add a new user and assign privileges, you need `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled, the `CONTROL_TRUSTED_AUTH`(**Can Enable or Disable Trusted Authentication**) privilege is required.  #### Important point to note All options in the token creation APIs changing the content in ThoughtSpot will do so during the token creation and not when the token is being used for authentication. For example, `auto_create:true` will create the user when the authentication token is created.      
   * @param getFullAccessTokenRequest 
   */
  getFullAccessToken(getFullAccessTokenRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (getFullAccessTokenRequest === null || getFullAccessTokenRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "getFullAccessToken", "getFullAccessTokenRequest");
      }
      const localVarPath = "/api/rest/2.0/auth/token/full";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(getFullAccessTokenRequest, "GetFullAccessTokenRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.0.0.cl or later   Gets an authentication token that provides access to a specific metadata object. By default, the token obtained from ThoughtSpot remains valid for 5 mins.  You can generate the token for a user by providing a `username` and `password`, or by using the cluster’s `secret key` (for [Trusted authentication](https://developers.thoughtspot.com/docs/?pageid=trusted-auth#trusted-auth-enable)).  To generate a `secret_key` on your cluster, the administrator must enable **Trusted authentication** in the **Develop** > **Customizations** > **Security Settings** page.  **Note**: When both `password` and `secret_key` are included in the API request,  `password` takes precedence.  If Multi-Factor Authentication (MFA) is enabled on your instance, the API login request with basic authentication (`username`  and `password` ) returns an error. You can switch to token-based authentication with  `secret_key`  or contact ThoughtSpot Support for assistance.  #### Just-in-time provisioning  For just-in-time user creation and provisioning, define the following attributes:  * `auto_create` * `username` * `display_name` * `email` * `group_identifiers`  Set `auto_create` to `True` if the user is not available in ThoughtSpot. If the user already exists in ThoughtSpot and the `auto_create` parameter is set to `true`, the API call will update user properties like display name, email and group assignment.  For more information, see [Just-in-time provisioning](https://developers.thoughtspot.com/docs/just-in-time-provisioning).  To add a new user and assign privileges, you need `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled, the `CONTROL_TRUSTED_AUTH`(**Can Enable or Disable Trusted Authentication**) privilege is required.  #### Important point to note All options in the token creation APIs changing the content in ThoughtSpot will do so during the token creation and not when the token is being used for authentication. For example, `auto_create:true` will create the user when the authentication token is created.      
   * @param getObjectAccessTokenRequest 
   */
  getObjectAccessToken(getObjectAccessTokenRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (getObjectAccessTokenRequest === null || getObjectAccessTokenRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "getObjectAccessToken", "getObjectAccessTokenRequest");
      }
      const localVarPath = "/api/rest/2.0/auth/token/object";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(getObjectAccessTokenRequest, "GetObjectAccessTokenRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.0.0.cl or later   Retrieves the current configuration details of the cluster. If the request is successful, the API returns a list configuration settings applied on the cluster.  Requires `ADMINISTRATION`(**Can administer ThoughtSpot**) privilege to view these complete configuration settings of the cluster. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `SYSTEM_INFO_ADMINISTRATION` (**Can view system activities**) privilege is required.  This API does not require any parameters to be passed in the request.      
   */
  getSystemConfig(_options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      const localVarPath = "/api/rest/2.0/system/config";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "GET" /* GET */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.0.0.cl or later   Gets system information such as the release version, locale, time zone, deployment environment, date format, and date time format of the cluster.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privileges. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `SYSTEM_INFO_ADMINISTRATION` (**Can view system activities**) privilege is required.  This API does not require any parameters to be passed in the request.        
   */
  getSystemInformation(_options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      const localVarPath = "/api/rest/2.0/system";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "GET" /* GET */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.2.0.cl or later   Gets a list of configuration overrides applied on the cluster.    Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `APPLICATION_ADMINISTRATION` (**Can manage application settings**) privilege is required.  This API does not require any parameters to be passed in the request.        
   */
  getSystemOverrideInfo(_options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      const localVarPath = "/api/rest/2.0/system/config-overrides";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "GET" /* GET */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.0.0.cl or later   Imports [TML](https://docs.thoughtspot.com/cloud/latest/tml) files into ThoughtSpot.  Requires `DATAMANAGEMENT` (**Can manage data**) or `ADMINISTRATION` (**Can administer ThoughtsSpot**) privilege.  If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the following Data control privileges may be required: - `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) - `CAN_MANAGE_WORKSHEET_VIEWS_TABLES` (**Can manage data models**)  #### Usage guidelines  *  Import all related objects in a single TML Import API call. For example, Tables that use the same Connection object and Worksheets connected to these Tables. * Include the `fqn` property to distinguish objects that have the same name.   For example, if you have multiple Connections or Worksheets with the same name on ThoughtSpot and the Connection or Worksheet referenced in your TML file does not have a unique name to distinguish, it may result in invalid object references.   Adding `fqn` helps ThoughtSpot differentiate a Table from another with the same name.   We recommend [exporting TML with FQNs](#/http/api-endpoints/metadata/export-metadata-tml) and using these during the import operation. * You can upload multiple TML files at a time.   If you import a Worksheet along with Liveboards, Answers, and other dependent objects in a single API call, the imported objects will be immediately available for use.   When you import only a Worksheet object, it may take some time for the Worksheet to become available in the ThoughtSpot system. Please wait for a few minutes, and then proceed to create an Answer and Liveboard from the newly imported Worksheet.  For more information, see [TML Documentation](https://developers.thoughtspot.com/docs/tml#_import_a_tml).      
   * @param importMetadataTMLRequest 
   */
  importMetadataTML(importMetadataTMLRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (importMetadataTMLRequest === null || importMetadataTMLRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "importMetadataTML", "importMetadataTMLRequest");
      }
      const localVarPath = "/api/rest/2.0/metadata/tml/import";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(importMetadataTMLRequest, "ImportMetadataTMLRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 10.4.0.cl or later   Schedules a task to import [TML](https://docs.thoughtspot.com/cloud/latest/tml) files into ThoughtSpot. You can use this API endpoint to process TML objects asynchronously when importing TMLs of large and complex metadata objects into ThoughtSpot. Unlike the synchronous import TML operation, the API processes TML data in the background and returns a task ID, which can be used to check the status of the import task via `/api/rest/2.0/metadata/tml/async/status` API endpoint.  Requires `DATAMANAGEMENT` (**Can manage data**) or `ADMINISTRATION` (**Can administer ThoughtsSpot**) privilege, and edit access to the TML objects.  If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the following Data control privileges may be required: - `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) - `CAN_MANAGE_WORKSHEET_VIEWS_TABLES` (**Can manage data models**)  #### Usage guidelines  See [Async TML API Documentation](https://developers.thoughtspot.com/docs/tml#_import_tml_objects_asynchronously) for usage guidelines.      
   * @param importMetadataTMLAsyncRequest 
   */
  importMetadataTMLAsync(importMetadataTMLAsyncRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (importMetadataTMLAsyncRequest === null || importMetadataTMLAsyncRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "importMetadataTMLAsync", "importMetadataTMLAsyncRequest");
      }
      const localVarPath = "/api/rest/2.0/metadata/tml/async/import";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(importMetadataTMLAsyncRequest, "ImportMetadataTMLAsyncRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.0.0.cl or later   Imports group objects from external databases into ThoughtSpot.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `GROUP_ADMINISTRATION` (**Can manage groups**) privilege is required.  During the import operation:  * If the specified group is not available in ThoughtSpot, it will be added to ThoughtSpot. * If `delete_unspecified_groups` is set to `true`, the groups not specified in the API request, excluding administrator and system user groups, are deleted. * If the specified groups are already available in ThoughtSpot, the object properties of these groups are modified and synchronized as per the input data in the API request.  A successful API call returns the object that represents the changes made in the ThoughtSpot system.      
   * @param importUserGroupsRequest 
   */
  importUserGroups(importUserGroupsRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (importUserGroupsRequest === null || importUserGroupsRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "importUserGroups", "importUserGroupsRequest");
      }
      const localVarPath = "/api/rest/2.0/groups/import";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(importUserGroupsRequest, "ImportUserGroupsRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.0.0.cl or later   Imports user data from external databases into ThoughtSpot. During the user import operation:  * If the specified users are not available in ThoughtSpot, the users are created and assigned a default password. Defining a `default_password` in the API request is optional. * If `delete_unspecified_users` is set to `true`, the users not specified in the API request, excluding the `tsadmin`, `guest`, `system` and `su` users, are deleted. * If the specified user objects are already available in ThoughtSpot, the object properties are updated and synchronized as per the input data in the API request.  A successful API call returns the object that represents the changes made in the ThoughtSpot system.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `USER_ADMINISTRATION` (**Can manage users**) privilege is required.      
   * @param importUsersRequest 
   */
  importUsers(importUsersRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (importUsersRequest === null || importUsersRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "importUsers", "importUsersRequest");
      }
      const localVarPath = "/api/rest/2.0/users/import";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(importUsersRequest, "ImportUsersRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.0.0.cl or later   Creates a login session for a ThoughtSpot user with Basic authentication.  In Basic authentication method, REST clients log in to ThoughtSpot using `username` and `password` attributes. On a multi-tenant cluster with Orgs, users can pass the ID of the Org in the API request to log in to a specific Org context.  **Note**: If Multi-Factor Authentication (MFA) is enabled on your instance, the API login request with basic authentication (`username`  and `password` ) returns an error. Contact ThoughtSpot Support for assistance.  A successful login returns a session cookie that can be used in your subsequent API requests.     
   * @param loginRequest 
   */
  login(loginRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (loginRequest === null || loginRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "login", "loginRequest");
      }
      const localVarPath = "/api/rest/2.0/auth/session/login";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(loginRequest, "LoginRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.0.0.cl or later    Logs out a user from their current session.      
   */
  logout(_options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      const localVarPath = "/api/rest/2.0/auth/session/logout";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *  Parameterize fields in metadata objects.   Version: 10.9.0.cl or later   Allows parameterizing fields in metadata objects in ThoughtSpot.  Requires appropriate permissions to modify the metadata object.  The API endpoint allows parameterizing the following types of metadata objects: * Logical Tables * Connections  For a Logical Table the field type must be `ATTRIBUTE` and field name can be one of: * databaseName * schemaName * tableName  For a Connection the field type is always `CONNECTION_PROPERTY`. We use the field_name in this case to specify the exact property of a connection which needs to be parameterized.      
   * @param parameterizeMetadataRequest 
   */
  parameterizeMetadata(parameterizeMetadataRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (parameterizeMetadataRequest === null || parameterizeMetadataRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "parameterizeMetadata", "parameterizeMetadataRequest");
      }
      const localVarPath = "/api/rest/2.0/metadata/parameterize";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(parameterizeMetadataRequest, "ParameterizeMetadataRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *  Version: 10.9.0.cl or later   Allows publishing metadata objects across organizations in ThoughtSpot.  Requires ADMINISTRATION role and TENANT scope.  The API endpoint allows publishing the following types of metadata objects: * Liveboards * Answers * Logical Tables  This API will essentially share the objects along with it\'s dependencies to the org admins of the orgs to which it is being published.      
   * @param publishMetadataRequest 
   */
  publishMetadata(publishMetadataRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (publishMetadataRequest === null || publishMetadataRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "publishMetadata", "publishMetadataRequest");
      }
      const localVarPath = "/api/rest/2.0/security/metadata/publish";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(publishMetadataRequest, "PublishMetadataRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   * Version: 10.7.0.cl or later 
   * @param queryGetDecomposedQueryRequest 
   */
  queryGetDecomposedQuery(queryGetDecomposedQueryRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (queryGetDecomposedQueryRequest === null || queryGetDecomposedQueryRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "queryGetDecomposedQuery", "queryGetDecomposedQueryRequest");
      }
      const localVarPath = "/api/rest/2.0/ai/analytical-questions";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(queryGetDecomposedQueryRequest, "QueryGetDecomposedQueryRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.0.0.cl or later   Resets the password of a user account. Administrators can reset password on behalf of a user.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `USER_ADMINISTRATION` (**Can manage users**) privilege is required.      
   * @param resetUserPasswordRequest 
   */
  resetUserPassword(resetUserPasswordRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (resetUserPasswordRequest === null || resetUserPasswordRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "resetUserPassword", "resetUserPasswordRequest");
      }
      const localVarPath = "/api/rest/2.0/users/reset-password";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(resetUserPasswordRequest, "ResetUserPasswordRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.2.0.cl or later   Reverts TML objects to a previous commit specified in the API request.  Requires at least edit access to objects.  In the API request, specify the `commit_id`. If the branch name is not specified in the request, the API will consider the default branch configured on your instance.  By default, the API reverts all objects. If the revert operation fails for one of the objects provided in the commit, the API returns an error and does not revert any object.  For more information, see [Git integration documentation](https://developers.thoughtspot.com/docs/git-integration).      
   * @param commitId Commit id to which the object should be reverted
   * @param revertCommitRequest 
   */
  revertCommit(commitId, revertCommitRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (commitId === null || commitId === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "revertCommit", "commitId");
      }
      if (revertCommitRequest === null || revertCommitRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "revertCommit", "revertCommitRequest");
      }
      const localVarPath = "/api/rest/2.0/vcs/git/commits/{commit_id}/revert".replace("{commit_id}", encodeURIComponent(String(commitId)));
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(revertCommitRequest, "RevertCommitRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.0.0.cl or later    Revokes the authentication token issued for current user session.  The token of your current session expires when you make a call to the `/api/rest/2.0/auth/token/revoke` endpoint. the users will not be able to access ThoughtSpot objects until a new token is obtained.  To restart your session, request for a new token from ThoughtSpot. See [Get Full Access Token](#/http/api-endpoints/authentication/get-full-access-token).      
   * @param revokeTokenRequest 
   */
  revokeToken(revokeTokenRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (revokeTokenRequest === null || revokeTokenRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "revokeToken", "revokeTokenRequest");
      }
      const localVarPath = "/api/rest/2.0/auth/token/revoke";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(revokeTokenRequest, "RevokeTokenRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.2.0.cl or later   Gets a list of commits for a given metadata object.  Requires `DATAMANAGEMENT` (**Can manage data**) privilege.  If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance on your instance, the `CAN_MANAGE_WORKSHEET_VIEWS_TABLES` (**Can manage data models**) privilege and edit access to the metadata objects.      
   * @param searchCommitsRequest 
   */
  searchCommits(searchCommitsRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (searchCommitsRequest === null || searchCommitsRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "searchCommits", "searchCommitsRequest");
      }
      const localVarPath = "/api/rest/2.0/vcs/git/commits/search";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(searchCommitsRequest, "SearchCommitsRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.2.0.cl or later   Gets Git repository connections configured on the ThoughtSpot instance.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance on your instance, the `CAN_MANAGE_VERSION_CONTROL` (**Can toggle version control for objects**) privilege.      
   * @param searchConfigRequest 
   */
  searchConfig(searchConfigRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (searchConfigRequest === null || searchConfigRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "searchConfig", "searchConfigRequest");
      }
      const localVarPath = "/api/rest/2.0/vcs/git/config/search";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(searchConfigRequest, "SearchConfigRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.2.0.cl or later   Gets connection objects. Requires `DATAMANAGEMENT` (**Can manage data**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) privilege is required.  - To get a list of all connections available in the ThoughtSpot system, send the API request without any attributes in the request body. - To get the connection objects for a specific type of data warehouse, specify the type in `data_warehouse_types`. - To fetch details of a connection object, specify the connection object GUID or name. The `name_pattern` attribute allows passing partial text with `%` for a wildcard match. - To get details of the database, schemas, tables, or columns from a data connection object, specify `data_warehouse_object_type`. - To get a specific database, schema, table, or column from a connection object, define the object type in `data_warehouse_object_type` and object properties in the `data_warehouse_objects` array. For example, to search for a column, you must pass the database, schema, and table names in the API request.   Note that in the following example, object properties are set in a hierarchical order (`database` > `schema` > `table` > `column`).  ``` {   \"connections\": [     {       \"identifier\": \"b9d1f2ef-fa65-4a4b-994e-30fa2d57b0c2\",       \"data_warehouse_objects\": [         {           \"database\": \"NEBULADEV\",           \"schema\": \"INFORMATION_SCHEMA\",           \"table\": \"APPLICABLE_ROLES\",           \"column\": \"ROLE_NAME\"         }       ]     }   ],   \"data_warehouse_object_type\": \"COLUMN\" } ```  - To fetch data by `configuration`, specify `data_warehouse_object_type`. For example, to fetch columns from the `DEVELOPMENT` database, specify the `data_warehouse_object_type` as `DATABASE` and define the `configuration` string as `{\"database\":\"DEVELOPMENT\"}`. To get column data for a specific table, specify the table, for example,`{\"database\":\"RETAILAPPAREL\",\"table\":\"PIPES\"}`. - To query connections by `authentication_type`, specify `data_warehouse_object_type`. Supported values for `authentication_type` are:   - `SERVICE_ACCOUNT`: For connections that require service account credentials to authenticate to the Cloud Data Warehouse and fetch data.   - `OAUTH`: For connections that require OAuth credentials to authenticate to the Cloud Data Warehouse and fetch data. Teradata, Oracle, and Presto Cloud Data Warehouses do not support the OAuth authentication type.   - `IAM`: For connections that have the IAM OAuth set up. This authentication type is supported on Amazon Redshift connections only.   - `EXTOAUTH`: For connections that have external OAuth set up. ThoughtSpot supports external [OAuth with Microsoft Azure Active Directory (AD)](https://docs.thoughtspot.com/cloud/latest/ connections-snowflake-azure-ad-oauth) and [Okta for Snowflake data connections](https://docs.thoughtspot.com/cloud/latest/connections-snowflake-okta-oauth). - To include more details about connection objects in the API response, set `include_details` to `true`. - You can also sort the output by field names and filter connections by tags.  **NOTE**: When filtering connection records by parameters other than `data_warehouse_types` or `tag_identifiers`, ensure that you set `record_size` to `-1` and `record_offset` to `0` for precise results.      
   * @param searchConnectionRequest 
   */
  searchConnection(searchConnectionRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (searchConnectionRequest === null || searchConnectionRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "searchConnection", "searchConnectionRequest");
      }
      const localVarPath = "/api/rest/2.0/connection/search";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(searchConnectionRequest, "SearchConnectionRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.6.0.cl or later   Gets custom actions configured on the cluster.  Requires `DEVELOPER` (**Has Developer privilege**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `DEVELOPER` (**Has developer privilege**) privilege is required.      
   * @param searchCustomActionsRequest 
   */
  searchCustomActions(searchCustomActionsRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (searchCustomActionsRequest === null || searchCustomActionsRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "searchCustomActions", "searchCustomActionsRequest");
      }
      const localVarPath = "/api/rest/2.0/customization/custom-actions/search";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(searchCustomActionsRequest, "SearchCustomActionsRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.0.0.cl or later   Generates an Answer from a given data source.  Requires at least view access to the data source object (Worksheet or View).  #### Usage guidelines  To search data, specify the data source GUID in `logical_table_identifier`. The data source can be a Worksheet, View, Table, or SQL view.  Pass search tokens in the `query_string` attribute in the API request as shown in the following example:  ``` {   \"query_string\": \"[sales] by [store]\",   \"logical_table_identifier\": \"cd252e5c-b552-49a8-821d-3eadaa049cca\", } ```  For more information about the `query_string` format and data source attribute, see [Search data API](https://developers.thoughtspot.com/docs/fetch-data-and-report-apis#_search_data_api).    The `record_size` attribute determines the number of records to retrieve in an API call. For more information about pagination, record size, and maximum row limit, see [Pagination and record size settings](https://developers.thoughtspot.com/docs/fetch-data-and-report-apis#_pagination_settings_for_data_and_report_api).       
   * @param searchDataRequest 
   */
  searchData(searchDataRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (searchDataRequest === null || searchDataRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "searchData", "searchDataRequest");
      }
      const localVarPath = "/api/rest/2.0/searchdata";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(searchDataRequest, "SearchDataRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *  Version: 10.10.0.cl or later   Search the email customisation configuration if any set for the ThoughtSpot system.  #### Pre-requisites  Requires `DEVELOPER` (**has developer privilege**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `_Has developer privilege` privilege is required. Coms should be enabled on the cluster.  #### Usage guidelines  To get the list of configurations set in the cluster/org.      
   */
  searchEmailCustomisation(_options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      const localVarPath = "/api/rest/2.0/customization/email/search";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.0.0.cl or later   Gets a list of metadata objects available on the ThoughtSpot system.  This API endpoint is available to all users who have view access to the object. Users with `ADMINISTRATION` (**Can administer ThoughtSpot**) privileges can view data for all metadata objects, including users and groups.  #### Usage guidelines  - To get all metadata objects, send the API request without any attributes. - To get metadata objects of a specific type, set the `type` attribute. For example, to fetch a Worksheet, set the type as `LOGICAL_TABLE`. - To filter metadata objects within type `LOGICAL_TABLE`, set the `subtypes` attribute. For example, to fetch a Worksheet, set the type as `LOGICAL_TABLE` & subtypes as `[WORKSHEET]`. - To get a specific metadata object, specify the GUID. - To customize your search and filter the API response, you can use several parameters.   You can search for objects created or modified by specific users, by tags applied to the objects, or by using the include parameters like `include_auto_created_objects`, `include_dependent_objects`, `include_headers`, `include_incomplete_objects`, and so on.   You can also define sorting options to sort the data retrieved in the API response. - To get discoverable objects when linientmodel is enabled you can use `include_discoverable_objects` as true else false. Default value is true. - For liveboard metadata type, to get the newer format, set the `liveboard_response_format` as V2. Default value is V1.  **NOTE**: The following parameters support pagination of metadata records:  - `tag_identifiers` - `type` - `subtypes` - `created_by_user_identifiers` - `modified_by_user_identifiers` - `owned_by_user_identifiers` - `exclude_objects` - `include_auto_created_objects` - `favorite_object_options` If you are using other parameters to search metadata, set `record_size` to `-1` and `record_offset` to `0`.      
   * @param searchMetadataRequest 
   */
  searchMetadata(searchMetadataRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (searchMetadataRequest === null || searchMetadataRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "searchMetadata", "searchMetadataRequest");
      }
      const localVarPath = "/api/rest/2.0/metadata/search";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(searchMetadataRequest, "SearchMetadataRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.0.0.cl or later   Gets a list of Orgs configured on the ThoughtSpot system. To get details of a specific Org, specify the Org ID or name. You can also pass parameters such as status, visibility, and user identifiers to get a specific list of Orgs.  Requires cluster administration (**Can administer Org**) privileges. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `ORG_ADMINISTRATION` (**Can manage Orgs**) privilege is required.      
   * @param searchOrgsRequest 
   */
  searchOrgs(searchOrgsRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (searchOrgsRequest === null || searchOrgsRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "searchOrgs", "searchOrgsRequest");
      }
      const localVarPath = "/api/rest/2.0/orgs/search";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(searchOrgsRequest, "SearchOrgsRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.5.0.cl or later   Gets a list of Role objects from the ThoughtSpot system.  Available if [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance. To search for Roles, the `ROLE_ADMINISTRATION` (**Can manage roles**) privilege is required.  To get details of a specific Role object, specify the GUID or name. You can also filter the API response based on user group and Org identifiers, privileges assigned to the Role, and deprecation status.      
   * @param searchRolesRequest 
   */
  searchRoles(searchRolesRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (searchRolesRequest === null || searchRolesRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "searchRoles", "searchRolesRequest");
      }
      const localVarPath = "/api/rest/2.0/roles/search";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(searchRolesRequest, "SearchRolesRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *  Search Schedules    Version: 9.4.0.cl or later   Gets a list of scheduled jobs configured for a Liveboard.  To get details of a specific scheduled job, specify the name or GUID of the scheduled job.  Requires at least view access to Liveboards.  **NOTE**: When filtering schedules by parameters other than `metadata`, set `record_size` to `-1` and `record_offset` to `0` for accurate results.      
   * @param searchSchedulesRequest 
   */
  searchSchedules(searchSchedulesRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (searchSchedulesRequest === null || searchSchedulesRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "searchSchedules", "searchSchedulesRequest");
      }
      const localVarPath = "/api/rest/2.0/schedules/search";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(searchSchedulesRequest, "SearchSchedulesRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.0.0.cl or later   Gets a list of tag objects available on the ThoughtSpot system. To get details of a specific tag object, specify the GUID or name.  Any authenticated user can search for tag objects.      
   * @param searchTagsRequest 
   */
  searchTags(searchTagsRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (searchTagsRequest === null || searchTagsRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "searchTags", "searchTagsRequest");
      }
      const localVarPath = "/api/rest/2.0/tags/search";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(searchTagsRequest, "SearchTagsRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.0.0.cl or later   Gets a list of user group objects from the ThoughtSpot system.  To get details of a specific user group, specify the user group GUID or name. You can also filter the API response based on User ID, Org ID, Role ID, type of group, sharing visibility, privileges assigned to the group, and the Liveboard IDs assigned to the users in the group.  Available to all users. Users with `ADMINISTRATION` (**Can administer ThoughtSpot**) privileges can view all users properties.  If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `GROUP_ADMINISTRATION` (**Can manage groups**) privilege is required.  **NOTE**: If you do not get precise results, try setting `record_size` to `-1` and `record_offset` to `0`.      
   * @param searchUserGroupsRequest 
   */
  searchUserGroups(searchUserGroupsRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (searchUserGroupsRequest === null || searchUserGroupsRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "searchUserGroups", "searchUserGroupsRequest");
      }
      const localVarPath = "/api/rest/2.0/groups/search";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(searchUserGroupsRequest, "SearchUserGroupsRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.0.0.cl or later   Gets a list of users available on the ThoughtSpot system.  To get details of a specific user, specify the user GUID or name. You can also filter the API response based on groups, Org ID, user visibility, account status, user type, and user preference settings and favorites.  Available to all users. Users with `ADMINISTRATION` (**Can administer ThoughtSpot**) privileges can view all users properties. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `USER_ADMINISTRATION` (**Can manage users**) privilege is required.  **NOTE**: If the API returns an empty list, consider increasing the value of the `record_size` parameter. To search across all available users, set `record_size` to `-1`.      
   * @param searchUsersRequest 
   */
  searchUsers(searchUsersRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (searchUsersRequest === null || searchUsersRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "searchUsers", "searchUsersRequest");
      }
      const localVarPath = "/api/rest/2.0/users/search";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(searchUsersRequest, "SearchUsersRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *  Search variables   Version: 10.9.0.cl or later   Allows searching for variables in ThoughtSpot.  Requires ADMINISTRATION role.  The API endpoint supports searching variables by: * Variable identifier (ID or name) * Variable type * Name pattern (case-insensitive, supports % for wildcard)  The search results can be formatted in three ways: * METADATA_ONLY - Returns only variable metadata (default) * METADATA_AND_VALUES - Returns variable metadata and values * EDITABLE_METADATA_AND_VALUES - Returns only editable variable metadata and values       
   * @param searchVariablesRequest 
   */
  searchVariables(searchVariablesRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (searchVariablesRequest === null || searchVariablesRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "searchVariables", "searchVariablesRequest");
      }
      const localVarPath = "/api/rest/2.0/template/variables/search";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(searchVariablesRequest, "SearchVariablesRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *  Version: 10.4.0.cl or later   Allows sending a follow-up message to an ongoing conversation within the context of the metadata model.  Requires at least view access to the metadata object specified in the request.  #### Usage guidelines  The API requires you to specify the `conversation_identifier` in the request path, and a `metadata_identifier` and `message` string in the request body.  If the API request is successful, ThoughtSpot returns the session ID, tokens used in the conversation, and visualization type.  > ###### Note: > * This endpoint is currently in Beta. Breaking changes may be introduced before the endpoint is made Generally Available. > * This endpoint requires Spotter - please contact ThoughtSpot support to enable Spotter on your cluster.      
   * @param conversationIdentifier Unique identifier of the conversation.
   * @param sendMessageRequest 
   */
  sendMessage(conversationIdentifier, sendMessageRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (conversationIdentifier === null || conversationIdentifier === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "sendMessage", "conversationIdentifier");
      }
      if (sendMessageRequest === null || sendMessageRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "sendMessage", "sendMessageRequest");
      }
      const localVarPath = "/api/rest/2.0/ai/conversation/{conversation_identifier}/converse".replace("{conversation_identifier}", encodeURIComponent(String(conversationIdentifier)));
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(sendMessageRequest, "SendMessageRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.0.0.cl or later   Allows sharing one or several metadata objects with users and groups in ThoughtSpot.  Requires edit access to the metadata object.  The API endpoint allows sharing only the following types of metadata objects: * Liveboards * Visualizations * Answers * Worksheets * Views * Connections  You can provide `READ_ONLY` or `MODIFY` access when sharing an object with another user or group. With `READ_ONLY` access grants view access to the shared object, whereas `MODIFY` provides edit access.  To prevent a user or group from accessing the shared object, specify the GUID or name of the principal and set `shareMode` to `NO_ACCESS`.      
   * @param shareMetadataRequest 
   */
  shareMetadata(shareMetadataRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (shareMetadataRequest === null || shareMetadataRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "shareMetadata", "shareMetadataRequest");
      }
      const localVarPath = "/api/rest/2.0/security/metadata/share";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(shareMetadataRequest, "ShareMetadataRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *  Version: 10.4.0.cl or later   Processes a natural language query and returns an AI-generated response based on a specified data model.  Requires at least view access to the metadata object specified in the request.  > ###### Note: > * This endpoint is currently in Beta. Breaking changes may be introduced before the endpoint is made Generally Available. > * This endpoint requires Spotter - please contact ThoughtSpot support to enable Spotter on your cluster.      
   * @param singleAnswerRequest 
   */
  singleAnswer(singleAnswerRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (singleAnswerRequest === null || singleAnswerRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "singleAnswer", "singleAnswerRequest");
      }
      const localVarPath = "/api/rest/2.0/ai/answer/create";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(singleAnswerRequest, "SingleAnswerRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.0.0.cl or later   Removes the tags applied to a Liveboard, Answer, Table, or Worksheet.  Requires edit access to the metadata object.      
   * @param assignTagRequest 
   */
  unassignTag(assignTagRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (assignTagRequest === null || assignTagRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "unassignTag", "assignTagRequest");
      }
      const localVarPath = "/api/rest/2.0/tags/unassign";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(assignTagRequest, "AssignTagRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *  Remove parameterization from fields in metadata objects.   Version: 10.9.0.cl or later   Allows removing parameterization from fields in metadata objects in ThoughtSpot.  Requires appropriate permissions to modify the metadata object.  The API endpoint allows unparameterizing the following types of metadata objects: * Logical Tables * Connections  For a Logical Table the field type must be `ATTRIBUTE` and field name can be one of: * databaseName * schemaName * tableName  For a Connection the field type is always `CONNECTION_PROPERTY`. We use the field_name in this case to specify the exact property of a connection which needs to be unparameterized.      
   * @param unparameterizeMetadataRequest 
   */
  unparameterizeMetadata(unparameterizeMetadataRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (unparameterizeMetadataRequest === null || unparameterizeMetadataRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "unparameterizeMetadata", "unparameterizeMetadataRequest");
      }
      const localVarPath = "/api/rest/2.0/metadata/unparameterize";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(unparameterizeMetadataRequest, "UnparameterizeMetadataRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *  Version: 10.9.0.cl or later   Allows unpublishing metadata objects from organizations in ThoughtSpot.  Requires ADMINISTRATION role and TENANT scope.  The API endpoint allows unpublishing the following types of metadata objects: * Liveboards * Answers * Logical Tables  When unpublishing objects, you can: * Include dependencies by setting `include_dependencies` to true - this will unpublish all dependent objects if no other published object is using them * Force unpublish by setting `force` to true - this will break all dependent objects in the unpublished organizations      
   * @param unpublishMetadataRequest 
   */
  unpublishMetadata(unpublishMetadataRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (unpublishMetadataRequest === null || unpublishMetadataRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "unpublishMetadata", "unpublishMetadataRequest");
      }
      const localVarPath = "/api/rest/2.0/security/metadata/unpublish";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(unpublishMetadataRequest, "UnpublishMetadataRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.2.0.cl or later   Updates Git repository configuration settings.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance on your instance, the `CAN_MANAGE_VERSION_CONTROL` (**Can toggle version control for objects**) privilege.      
   * @param updateConfigRequest 
   */
  updateConfig(updateConfigRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (updateConfigRequest === null || updateConfigRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "updateConfig", "updateConfigRequest");
      }
      const localVarPath = "/api/rest/2.0/vcs/git/config/update";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(updateConfigRequest, "UpdateConfigRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.2.0.cl or later   **Important**: This endpoint is deprecated and will be removed from ThoughtSpot in September 2025. ThoughtSpot strongly recommends using the [Update connection V2](#/http/api-endpoints/connections/update-connection-v2) endpoint to update your connection objects.  #### Usage guidelines  Updates a connection object.    Requires `DATAMANAGEMENT` (**Can manage data**) and edit permissions to the connection object, or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) privilege is required.  To update a connection object, pass these parameters in your API request:  1. GUID of the connection object. 2. If you are updating tables or database schema of a connection object:    a. Add the updated JSON map of metadata with database, schema, and tables in `data_warehouse_config`.    b. Set `validate` to `true`. 3. If you are updating a configuration attribute, connection name, or description, you can set `validate` to `false`.      
   * @param updateConnectionRequest 
   */
  updateConnection(updateConnectionRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (updateConnectionRequest === null || updateConnectionRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "updateConnection", "updateConnectionRequest");
      }
      const localVarPath = "/api/rest/2.0/connection/update";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(updateConnectionRequest, "UpdateConnectionRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 10.4.0.cl or later   Updates a connection object.  Requires `DATAMANAGEMENT` (**Can manage data**) and edit permissions to the connection object, or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) privilege is required.  To update a connection object, pass these parameters in your API request:  1. GUID of the connection object. 2. If you are updating tables or database schema of a connection object:    a. Add the updated JSON map of metadata with database, schema, and tables in `data_warehouse_config`.    b. Set `validate` to `true`. 3. If you are updating a configuration attribute, connection name, or description, you can set `validate` to `false`.      
   * @param connectionIdentifier Unique ID or name of the connection.
   * @param updateConnectionV2Request 
   */
  updateConnectionV2(connectionIdentifier, updateConnectionV2Request, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (connectionIdentifier === null || connectionIdentifier === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "updateConnectionV2", "connectionIdentifier");
      }
      if (updateConnectionV2Request === null || updateConnectionV2Request === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "updateConnectionV2", "updateConnectionV2Request");
      }
      const localVarPath = "/api/rest/2.0/connections/{connection_identifier}/update".replace("{connection_identifier}", encodeURIComponent(String(connectionIdentifier)));
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(updateConnectionV2Request, "UpdateConnectionV2Request", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.6.0.cl or later   Updates a custom action.  Requires `DEVELOPER` (**Has Developer privilege**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `DEVELOPER` (**Has developer privilege**) privilege is required.  #### Usage Guidelines  The API allows you to modify the following properties:  * Name of the custom action * Action availability to groups * Association to metadata objects * Authentication settings for a URL-based action  For more information, see [Custom actions](https://developers.thoughtspot.com/docs/custom-action-intro).      
   * @param customActionIdentifier Unique ID or name of the custom action.
   * @param updateCustomActionRequest 
   */
  updateCustomAction(customActionIdentifier, updateCustomActionRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (customActionIdentifier === null || customActionIdentifier === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "updateCustomAction", "customActionIdentifier");
      }
      if (updateCustomActionRequest === null || updateCustomActionRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "updateCustomAction", "updateCustomActionRequest");
      }
      const localVarPath = "/api/rest/2.0/customization/custom-actions/{custom_action_identifier}/update".replace("{custom_action_identifier}", encodeURIComponent(String(customActionIdentifier)));
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(updateCustomActionRequest, "UpdateCustomActionRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.9.0.cl or later   Updates a DBT connection object.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege or `DATAMANAGEMENT` (**Can manage data ThoughtSpot**) privilege, along with an existing DBT connection. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the following data control privileges may be required:  - `CAN_MANAGE_CUSTOM_CALENDAR`(**Can manage custom calendars**) - `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) - `CAN_MANAGE_WORKSHEET_VIEWS_TABLES` (**Can manage data models**)  #### About update DBT connection You can modify DBT connection object properties such as embrace connection name, embrace database name, import type, account identifier, access token, project identifier and environment (or) embrace connection, embrace database name, import type, file_content settings.      
   * @param updateDbtConnectionRequest 
   */
  updateDbtConnection(updateDbtConnectionRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (updateDbtConnectionRequest === null || updateDbtConnectionRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "updateDbtConnection", "updateDbtConnectionRequest");
      }
      const localVarPath = "/api/rest/2.0/dbt/update-dbt-connection";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(updateDbtConnectionRequest, "UpdateDbtConnectionRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *  Update header attributes for a given list of header objects.   Version: 10.6.0.cl or later   ## Prerequisites - **Privileges Required:**   - `DATAMANAGEMENT` (Can manage data) or `ADMINISTRATION` (Can administer ThoughtSpot). - **Additional Privileges (if RBAC is enabled):**   - `ORG_ADMINISTRATION` (Can manage orgs).  ---  ## Usage Guidelines  ### Parameters  1. **headers_update**      - **Description:** List of header objects with their attributes to be updated. Each object contains a list of attributes to be updated in the header.    - **Usage:**       - You must provide either `identifier` or `obj_identifier`, but not both. Both fields cannot be empty.       - When `org_identifier` is set to `-1`, only the `identifier` value is accepted; `obj_identifier` is not allowed.  2. **org_identifier**      - **Description:** GUID (Globally Unique Identifier) or name of the organization.      - **Usage:**      - Leaving this field empty assumes that the changes should be applied to the current organization       - Provide `org_guid` or `org_name` to uniquely identify the organization where changes need to be applied. .      - Provide `-1` if changes have to be applied across all the org.  ---  ## Note Currently, this API is enabled only for updating the `obj_identifier` attribute. Only `text` will be allowed in attribute\'s value.  ## Best Practices  1. **Backup Before Conversion:**      Always export metadata as a backup before initiating the update process  ---  ## Examples  ### Only `identifier` is given  ```json {   \"headers_update\":   [     {       \"identifier\": \"guid_1\",       \"obj_identifier\": \"\",       \"type\": \"LOGICAL_COLUMN\",       \"attributes\":       [         {           \"name\": \"obj_id\",           \"value\": \"custom_object_id\"         }       ]     }   ],   \"org_identifier\": \"orgGuid\" } ```  ### Only `obj_identifier` is given ```json {   \"headers_update\":   [     {       \"obj_identifier\": \"custom_object_id\",       \"type\": \"ANSWER\",       \"attributes\":       [         {           \"name\": \"obj_id\",           \"value\": \"custom_object_id\"         }       ]     }   ],   \"org_identifier\": \"orgName\" } ```  ### Executing update for all org `-1` ```json {   \"headers_update\":   [     {       \"identifier\": \"guid_1\",       \"type\": \"ANSWER\",       \"attributes\":       [         {           \"name\": \"obj_id\",           \"value\": \"custom_object_id\"         }       ]     }   ],   \"org_identifier\": -1 } ```  ### Optional `type` is not provided ```json {   \"headers_update\":   [     {       \"identifier\": \"guid_1\",       \"attributes\":       [         {           \"name\": \"obj_id\",           \"value\": \"custom_object_id\"         }       ]     }   ],   \"org_identifier\": -1 } ```     
   * @param updateMetadataHeaderRequest 
   */
  updateMetadataHeader(updateMetadataHeaderRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (updateMetadataHeaderRequest === null || updateMetadataHeaderRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "updateMetadataHeader", "updateMetadataHeaderRequest");
      }
      const localVarPath = "/api/rest/2.0/metadata/headers/update";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(updateMetadataHeaderRequest, "UpdateMetadataHeaderRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *  Update object IDs for given metadata objects.   Version: 10.8.0.cl or later   ## Prerequisites - **Privileges Required:**   - `DATAMANAGEMENT` (Can manage data) or `ADMINISTRATION` (Can administer ThoughtSpot). - **Additional Privileges (if RBAC is enabled):**   - `ORG_ADMINISTRATION` (Can manage orgs).  ---  ## Usage Guidelines  ### Parameters  1. **metadata**      - **Description:** List of metadata objects to update their object IDs.    - **Usage:**       - Use either `current_obj_id` alone OR use `metadata_identifier` with `type` (when needed).       - When using `metadata_identifier`, the `type` field is required if using a name instead of a GUID.       - The `new_obj_id` field is always required.  ---  ## Note This API is specifically designed for updating object IDs of metadata objects. It internally uses the header update mechanism to perform the changes.  ## Best Practices  1. **Backup Before Update:**      Always export metadata as a backup before initiating the update process.  2. **Validation:**    - When using `current_obj_id`, ensure it matches the existing object ID exactly.    - When using `metadata_identifier` with a name, ensure the `type` is specified correctly.    - Verify that the `new_obj_id` follows your naming conventions and is unique within your system.  ---  ## Examples  ### Using current_obj_id ```json {   \"metadata\": [     {       \"current_obj_id\": \"existing_object_id\",       \"new_obj_id\": \"new_object_id\"     }   ] } ```  ### Using metadata_identifier with GUID ```json {   \"metadata\": [     {       \"metadata_identifier\": \"01234567-89ab-cdef-0123-456789abcdef\",       \"new_obj_id\": \"new_object_id\"     }   ] } ```  ### Using metadata_identifier with name and type ```json {   \"metadata\": [     {       \"metadata_identifier\": \"My Answer\",       \"type\": \"ANSWER\",       \"new_obj_id\": \"new_object_id\"     }   ] } ```  ### Multiple objects update ```json {   \"metadata\": [     {       \"current_obj_id\": \"existing_object_id_1\",       \"new_obj_id\": \"new_object_id_1\"     },     {       \"metadata_identifier\": \"My Worksheet\",       \"type\": \"LOGICAL_TABLE\",       \"new_obj_id\": \"new_object_id_2\"     }   ] } ```      
   * @param updateMetadataObjIdRequest 
   */
  updateMetadataObjId(updateMetadataObjIdRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (updateMetadataObjIdRequest === null || updateMetadataObjIdRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "updateMetadataObjId", "updateMetadataObjIdRequest");
      }
      const localVarPath = "/api/rest/2.0/metadata/update-obj-id";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(updateMetadataObjIdRequest, "UpdateMetadataObjIdRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.0.0.cl or later   Updates an Org object. You can modify Org properties such as name, description, and user associations.  Requires cluster administration (**Can administer Org**) privileges. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `ORG_ADMINISTRATION` (**Can manage Orgs**) privilege is required.      
   * @param orgIdentifier ID or name of the Org
   * @param updateOrgRequest 
   */
  updateOrg(orgIdentifier, updateOrgRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (orgIdentifier === null || orgIdentifier === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "updateOrg", "orgIdentifier");
      }
      if (updateOrgRequest === null || updateOrgRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "updateOrg", "updateOrgRequest");
      }
      const localVarPath = "/api/rest/2.0/orgs/{org_identifier}/update".replace("{org_identifier}", encodeURIComponent(String(orgIdentifier)));
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(updateOrgRequest, "UpdateOrgRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.5.0.cl or later   Updates the properties of a Role object.  Available only if [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance. To update a Role, the `ROLE_ADMINISTRATION` (**Can manage roles**) privilege is required.      
   * @param roleIdentifier Unique ID or name of the Role.
   * @param updateRoleRequest 
   */
  updateRole(roleIdentifier, updateRoleRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (roleIdentifier === null || roleIdentifier === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "updateRole", "roleIdentifier");
      }
      if (updateRoleRequest === null || updateRoleRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "updateRole", "updateRoleRequest");
      }
      const localVarPath = "/api/rest/2.0/roles/{role_identifier}/update".replace("{role_identifier}", encodeURIComponent(String(roleIdentifier)));
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(updateRoleRequest, "UpdateRoleRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *  Update schedule.    Version: 9.4.0.cl or later   Updates a scheduled Liveboard job.  Requires at least edit access to Liveboards. To update a schedule on behalf of another user, you need `ADMINISTRATION` (**Can administer Org**) or `JOBSCHEDULING` (**Can schedule for others**) privilege and edit access to the Liveboard. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `JOBSCHEDULING` (**Can schedule for others**) privilege is required.  The API endpoint allows you to pause a scheduled job, change the status of a paused job. You can also edit the recipients list, frequency of the job, format of the file to send to the recipients in email notifications, PDF options, and time zone setting.      
   * @param scheduleIdentifier Unique ID or name of the schedule.
   * @param updateScheduleRequest 
   */
  updateSchedule(scheduleIdentifier, updateScheduleRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (scheduleIdentifier === null || scheduleIdentifier === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "updateSchedule", "scheduleIdentifier");
      }
      if (updateScheduleRequest === null || updateScheduleRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "updateSchedule", "updateScheduleRequest");
      }
      const localVarPath = "/api/rest/2.0/schedules/{schedule_identifier}/update".replace("{schedule_identifier}", encodeURIComponent(String(scheduleIdentifier)));
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(updateScheduleRequest, "UpdateScheduleRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.2.0.cl or later   Updates the current configuration of the cluster. You must send the configuration data in JSON format.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privileges. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `APPLICATION_ADMINISTRATION` (**Can manage application settings**) privilege is required.      
   * @param updateSystemConfigRequest 
   */
  updateSystemConfig(updateSystemConfigRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (updateSystemConfigRequest === null || updateSystemConfigRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "updateSystemConfig", "updateSystemConfigRequest");
      }
      const localVarPath = "/api/rest/2.0/system/config-update";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(updateSystemConfigRequest, "UpdateSystemConfigRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.0.0.cl or later   Updates a tag object.  You can modify the `name` and `color` properties of a tag object.    Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `TAGMANAGEMENT` (**Can manage tags**) privilege is required to create, edit, and delete tags.      
   * @param tagIdentifier Name or Id of the tag.
   * @param updateTagRequest 
   */
  updateTag(tagIdentifier, updateTagRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (tagIdentifier === null || tagIdentifier === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "updateTag", "tagIdentifier");
      }
      if (updateTagRequest === null || updateTagRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "updateTag", "updateTagRequest");
      }
      const localVarPath = "/api/rest/2.0/tags/{tag_identifier}/update".replace("{tag_identifier}", encodeURIComponent(String(tagIdentifier)));
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(updateTagRequest, "UpdateTagRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.0.0.cl or later   Updates the properties of a user object.  You can modify user properties such as username, email, and share notification settings. You can also assign new groups and Orgs, remove the user from a group or Org, reset password, and modify user preferences.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `USER_ADMINISTRATION` (**Can manage users**) privilege is required.      
   * @param userIdentifier GUID / name of the user
   * @param updateUserRequest 
   */
  updateUser(userIdentifier, updateUserRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (userIdentifier === null || userIdentifier === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "updateUser", "userIdentifier");
      }
      if (updateUserRequest === null || updateUserRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "updateUser", "updateUserRequest");
      }
      const localVarPath = "/api/rest/2.0/users/{user_identifier}/update".replace("{user_identifier}", encodeURIComponent(String(userIdentifier)));
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(updateUserRequest, "UpdateUserRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.0.0.cl or later   Updates the properties of a group object in ThoughtSpot.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `GROUP_ADMINISTRATION` (**Can manage groups**) privilege is required.  #### Supported operations  This API endpoint lets you perform the following operations in a single API request:  * Edit [privileges](https://developers.thoughtspot.com/docs/?pageid=api-user-management#group-privileges) * Add or remove users * Change sharing visibility settings * Add or remove sub-groups * Assign a default Liveboard  or update the existing settings      
   * @param groupIdentifier GUID or name of the group.
   * @param updateUserGroupRequest 
   */
  updateUserGroup(groupIdentifier, updateUserGroupRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (groupIdentifier === null || groupIdentifier === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "updateUserGroup", "groupIdentifier");
      }
      if (updateUserGroupRequest === null || updateUserGroupRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "updateUserGroup", "updateUserGroupRequest");
      }
      const localVarPath = "/api/rest/2.0/groups/{group_identifier}/update".replace("{group_identifier}", encodeURIComponent(String(groupIdentifier)));
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(updateUserGroupRequest, "UpdateUserGroupRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *  Update a variable\'s properties   Version: 10.9.0.cl or later   Allows updating a variable\'s properties in ThoughtSpot.  Requires ADMINISTRATION role and TENANT scope.  The API endpoint allows updating: * The variable name * The variable values  When updating variable values, you need to specify: * The operation to perform (ADD, REPLACE, REMOVE) * The new values to add/replace/remove  When the operation is ADD, a value any pre-existing value with the same set of constraints will be replaced. When the operation is REPLACE, all values of the variable are replaced with the values specified. When the operation is REMOVE, all values with the given set of conditions are removed.      
   * @param identifier Unique id or name of the variable to update.
   * @param updateVariableRequest 
   */
  updateVariable(identifier, updateVariableRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (identifier === null || identifier === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "updateVariable", "identifier");
      }
      if (updateVariableRequest === null || updateVariableRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "updateVariable", "updateVariableRequest");
      }
      const localVarPath = "/api/rest/2.0/template/variables/{identifier}/update".replace("{identifier}", encodeURIComponent(String(identifier)));
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(updateVariableRequest, "UpdateVariableRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *  Update values for multiple variables   Version: 10.9.0.cl or later   Allows updating values for multiple variables in ThoughtSpot.  Requires ADMINISTRATION role.  The API endpoint allows: * Adding new values to variables * Replacing existing values * Deleting values from variables  When updating variable values, you need to specify: * The variable identifiers * The values to add/replace/remove for each variable * The operation to perform (ADD, REPLACE, REMOVE)  Behaviour based on operation type: * ADD - Adds values to the variable. Any pre-existing values with the same conditions are replaced. * REPLACE - Replaces all values of a given org with the current set of values. * REMOVE - Removes any values which match the set of conditions of the variables.      
   * @param updateVariableValuesRequest 
   */
  updateVariableValues(updateVariableValuesRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (updateVariableValuesRequest === null || updateVariableValuesRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "updateVariableValues", "updateVariableValuesRequest");
      }
      const localVarPath = "/api/rest/2.0/template/variables/update";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(updateVariableValuesRequest, "UpdateVariableValuesRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *  Version: 10.10.0.cl or later   Validates the email customisation configuration if any set for the ThoughtSpot system.  #### Pre-requisites  Requires `DEVELOPER` (**has developer privilege**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `_Has developer privilege` privilege is required. Coms should be enabled on the cluster.      
   */
  validateEmailCustomisation(_options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      const localVarPath = "/api/rest/2.0/customization/email/validate";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.2.0.cl or later   Validates the content of your source branch against the objects in your destination environment.  Before merging content from your source branch to the destination branch, run this API operation from your destination environment and ensure that the changes from the source branch function in the destination environment.  Requires `DATAMANAGEMENT` (**Can manage data**) privilege.  If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance on your instance, the `CAN_MANAGE_WORKSHEET_VIEWS_TABLES` (**Can manage data models**) privilege and edit access to the metadata objects.      
   * @param validateMergeRequest 
   */
  validateMerge(validateMergeRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (validateMergeRequest === null || validateMergeRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "validateMerge", "validateMergeRequest");
      }
      const localVarPath = "/api/rest/2.0/vcs/git/branches/validate";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(validateMergeRequest, "ValidateMergeRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.12.0.cl or later    Validates the authentication token specified in the API request.  If your token is not valid, [Get a new token](#/http/api-endpoints/authentication/get-full-access-token).      
   * @param validateTokenRequest 
   */
  validateToken(validateTokenRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (validateTokenRequest === null || validateTokenRequest === void 0) {
        throw new RequiredError("ThoughtSpotRestApi", "validateToken", "validateTokenRequest");
      }
      const localVarPath = "/api/rest/2.0/auth/token/validate";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(validateTokenRequest, "ValidateTokenRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
};
var ThoughtSpotRestApiResponseProcessor = class {
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to activateUser
   * @throws ApiException if the response code was not in [200, 299]
   */
  activateUser(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "User",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "User",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to assignChangeAuthor
   * @throws ApiException if the response code was not in [200, 299]
   */
  assignChangeAuthor(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("204", response.httpStatusCode)) {
        return;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "void",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to assignTag
   * @throws ApiException if the response code was not in [200, 299]
   */
  assignTag(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("204", response.httpStatusCode)) {
        return;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "void",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to changeUserPassword
   * @throws ApiException if the response code was not in [200, 299]
   */
  changeUserPassword(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("204", response.httpStatusCode)) {
        return;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "void",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to commitBranch
   * @throws ApiException if the response code was not in [200, 299]
   */
  commitBranch(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "CommitResponse",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "CommitResponse",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to convertWorksheetToModel
   * @throws ApiException if the response code was not in [200, 299]
   */
  convertWorksheetToModel(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ResponseWorksheetToModelConversion",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ResponseWorksheetToModelConversion",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to copyObject
   * @throws ApiException if the response code was not in [200, 299]
   */
  copyObject(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ResponseCopyObject",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("404", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Object not found", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ResponseCopyObject",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to createConfig
   * @throws ApiException if the response code was not in [200, 299]
   */
  createConfig(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "RepoConfigObject",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "RepoConfigObject",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to createConnection
   * @throws ApiException if the response code was not in [200, 299]
   */
  createConnection(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "CreateConnectionResponse",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "CreateConnectionResponse",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to createConversation
   * @throws ApiException if the response code was not in [200, 299]
   */
  createConversation(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Conversation",
          ""
        );
        return body;
      }
      if (isCodeInRange("201", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Conversation",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Operation failed", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Operation failed", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Conversation",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to createCustomAction
   * @throws ApiException if the response code was not in [200, 299]
   */
  createCustomAction(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ResponseCustomAction",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ResponseCustomAction",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to createEmailCustomisation
   * @throws ApiException if the response code was not in [200, 299]
   */
  createEmailCustomisation(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "CreateEmailCustomisationResponse",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "CreateEmailCustomisationResponse",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to createOrg
   * @throws ApiException if the response code was not in [200, 299]
   */
  createOrg(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "OrgResponse",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "OrgResponse",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to createRole
   * @throws ApiException if the response code was not in [200, 299]
   */
  createRole(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "RoleResponse",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid parameters.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Internal error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "RoleResponse",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to createSchedule
   * @throws ApiException if the response code was not in [200, 299]
   */
  createSchedule(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ResponseSchedule",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ResponseSchedule",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to createTag
   * @throws ApiException if the response code was not in [200, 299]
   */
  createTag(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Tag",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Tag",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to createUser
   * @throws ApiException if the response code was not in [200, 299]
   */
  createUser(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "User",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "User",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to createUserGroup
   * @throws ApiException if the response code was not in [200, 299]
   */
  createUserGroup(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "UserGroupResponse",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "UserGroupResponse",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to createVariable
   * @throws ApiException if the response code was not in [200, 299]
   */
  createVariable(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Variable",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Variable",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to dbtConnection
   * @throws ApiException if the response code was not in [200, 299]
   */
  dbtConnection(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "any",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "any",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to dbtGenerateSyncTml
   * @throws ApiException if the response code was not in [200, 299]
   */
  dbtGenerateSyncTml(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "any",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "any",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to dbtGenerateTml
   * @throws ApiException if the response code was not in [200, 299]
   */
  dbtGenerateTml(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "any",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "any",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to dbtSearch
   * @throws ApiException if the response code was not in [200, 299]
   */
  dbtSearch(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Array<DbtSearchResponse>",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Array<DbtSearchResponse>",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to deactivateUser
   * @throws ApiException if the response code was not in [200, 299]
   */
  deactivateUser(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ResponseActivationURL",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ResponseActivationURL",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to deleteConfig
   * @throws ApiException if the response code was not in [200, 299]
   */
  deleteConfig(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("204", response.httpStatusCode)) {
        return;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "void",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to deleteConnection
   * @throws ApiException if the response code was not in [200, 299]
   */
  deleteConnection(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("204", response.httpStatusCode)) {
        return;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "void",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to deleteConnectionV2
   * @throws ApiException if the response code was not in [200, 299]
   */
  deleteConnectionV2(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("204", response.httpStatusCode)) {
        return;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "void",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to deleteCustomAction
   * @throws ApiException if the response code was not in [200, 299]
   */
  deleteCustomAction(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("204", response.httpStatusCode)) {
        return;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "void",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to deleteDbtConnection
   * @throws ApiException if the response code was not in [200, 299]
   */
  deleteDbtConnection(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("204", response.httpStatusCode)) {
        return;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "void",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to deleteEmailCustomisation
   * @throws ApiException if the response code was not in [200, 299]
   */
  deleteEmailCustomisation(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("204", response.httpStatusCode)) {
        return;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "void",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to deleteMetadata
   * @throws ApiException if the response code was not in [200, 299]
   */
  deleteMetadata(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("204", response.httpStatusCode)) {
        return;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "void",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to deleteOrg
   * @throws ApiException if the response code was not in [200, 299]
   */
  deleteOrg(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("204", response.httpStatusCode)) {
        return;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "void",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to deleteRole
   * @throws ApiException if the response code was not in [200, 299]
   */
  deleteRole(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("204", response.httpStatusCode)) {
        return;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Internal error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "void",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to deleteSchedule
   * @throws ApiException if the response code was not in [200, 299]
   */
  deleteSchedule(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("204", response.httpStatusCode)) {
        return;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "void",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to deleteTag
   * @throws ApiException if the response code was not in [200, 299]
   */
  deleteTag(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("204", response.httpStatusCode)) {
        return;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "void",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to deleteUser
   * @throws ApiException if the response code was not in [200, 299]
   */
  deleteUser(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("204", response.httpStatusCode)) {
        return;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "void",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to deleteUserGroup
   * @throws ApiException if the response code was not in [200, 299]
   */
  deleteUserGroup(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("204", response.httpStatusCode)) {
        return;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "void",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to deleteVariable
   * @throws ApiException if the response code was not in [200, 299]
   */
  deleteVariable(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("204", response.httpStatusCode)) {
        return;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "void",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to deployCommit
   * @throws ApiException if the response code was not in [200, 299]
   */
  deployCommit(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Array<DeployResponse>",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Array<DeployResponse>",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to downloadConnectionMetadataChanges
   * @throws ApiException if the response code was not in [200, 299]
   */
  downloadConnectionMetadataChanges(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = yield response.getBodyAsFile();
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          "binary"
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          "binary"
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          "binary"
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          "binary"
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "HttpFile",
          "binary"
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to exportAnswerReport
   * @throws ApiException if the response code was not in [200, 299]
   */
  exportAnswerReport(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = yield response.getBodyAsFile();
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          "binary"
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          "binary"
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          "binary"
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          "binary"
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "HttpFile",
          "binary"
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to exportLiveboardReport
   * @throws ApiException if the response code was not in [200, 299]
   */
  exportLiveboardReport(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = yield response.getBodyAsFile();
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          "binary"
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          "binary"
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          "binary"
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          "binary"
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "HttpFile",
          "binary"
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to exportMetadataTML
   * @throws ApiException if the response code was not in [200, 299]
   */
  exportMetadataTML(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Array<any>",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Array<any>",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to exportMetadataTMLBatched
   * @throws ApiException if the response code was not in [200, 299]
   */
  exportMetadataTMLBatched(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "any",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "any",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to fetchAnswerData
   * @throws ApiException if the response code was not in [200, 299]
   */
  fetchAnswerData(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "AnswerDataResponse",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "AnswerDataResponse",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to fetchAnswerSqlQuery
   * @throws ApiException if the response code was not in [200, 299]
   */
  fetchAnswerSqlQuery(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "SqlQueryResponse",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "SqlQueryResponse",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to fetchAsyncImportTaskStatus
   * @throws ApiException if the response code was not in [200, 299]
   */
  fetchAsyncImportTaskStatus(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "GetAsyncImportStatusResponse",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "GetAsyncImportStatusResponse",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to fetchConnectionDiffStatus
   * @throws ApiException if the response code was not in [200, 299]
   */
  fetchConnectionDiffStatus(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "FetchConnectionDiffStatusResponse",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "FetchConnectionDiffStatusResponse",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to fetchLiveboardData
   * @throws ApiException if the response code was not in [200, 299]
   */
  fetchLiveboardData(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "LiveboardDataResponse",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "LiveboardDataResponse",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to fetchLiveboardSqlQuery
   * @throws ApiException if the response code was not in [200, 299]
   */
  fetchLiveboardSqlQuery(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "SqlQueryResponse",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "SqlQueryResponse",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to fetchLogs
   * @throws ApiException if the response code was not in [200, 299]
   */
  fetchLogs(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Array<LogResponse>",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Array<LogResponse>",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to fetchPermissionsOfPrincipals
   * @throws ApiException if the response code was not in [200, 299]
   */
  fetchPermissionsOfPrincipals(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "PermissionOfPrincipalsResponse",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "PermissionOfPrincipalsResponse",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to fetchPermissionsOnMetadata
   * @throws ApiException if the response code was not in [200, 299]
   */
  fetchPermissionsOnMetadata(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "PermissionOfMetadataResponse",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "PermissionOfMetadataResponse",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to forceLogoutUsers
   * @throws ApiException if the response code was not in [200, 299]
   */
  forceLogoutUsers(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("204", response.httpStatusCode)) {
        return;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "void",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to getCurrentUserInfo
   * @throws ApiException if the response code was not in [200, 299]
   */
  getCurrentUserInfo(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "User",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "User",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to getCurrentUserToken
   * @throws ApiException if the response code was not in [200, 299]
   */
  getCurrentUserToken(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "GetTokenResponse",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "GetTokenResponse",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to getCustomAccessToken
   * @throws ApiException if the response code was not in [200, 299]
   */
  getCustomAccessToken(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "AccessToken",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request. This could be due to missing or incorrect parameters.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access. The request could not be authenticated.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access. The user does not have permission to access this resource.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "An unexpected error occurred on the server.", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "AccessToken",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to getFullAccessToken
   * @throws ApiException if the response code was not in [200, 299]
   */
  getFullAccessToken(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Token",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Token",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to getObjectAccessToken
   * @throws ApiException if the response code was not in [200, 299]
   */
  getObjectAccessToken(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Token",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Token",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to getSystemConfig
   * @throws ApiException if the response code was not in [200, 299]
   */
  getSystemConfig(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "SystemConfig",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "SystemConfig",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to getSystemInformation
   * @throws ApiException if the response code was not in [200, 299]
   */
  getSystemInformation(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "SystemInfo",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "SystemInfo",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to getSystemOverrideInfo
   * @throws ApiException if the response code was not in [200, 299]
   */
  getSystemOverrideInfo(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "any",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "any",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to importMetadataTML
   * @throws ApiException if the response code was not in [200, 299]
   */
  importMetadataTML(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Array<any>",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Array<any>",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to importMetadataTMLAsync
   * @throws ApiException if the response code was not in [200, 299]
   */
  importMetadataTMLAsync(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ImportEPackAsyncTaskStatus",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ImportEPackAsyncTaskStatus",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to importUserGroups
   * @throws ApiException if the response code was not in [200, 299]
   */
  importUserGroups(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ImportUserGroupsResponse",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ImportUserGroupsResponse",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to importUsers
   * @throws ApiException if the response code was not in [200, 299]
   */
  importUsers(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ImportUsersResponse",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ImportUsersResponse",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to login
   * @throws ApiException if the response code was not in [200, 299]
   */
  login(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("204", response.httpStatusCode)) {
        return;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "void",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to logout
   * @throws ApiException if the response code was not in [200, 299]
   */
  logout(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("204", response.httpStatusCode)) {
        return;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "void",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to parameterizeMetadata
   * @throws ApiException if the response code was not in [200, 299]
   */
  parameterizeMetadata(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("204", response.httpStatusCode)) {
        return;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "void",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to publishMetadata
   * @throws ApiException if the response code was not in [200, 299]
   */
  publishMetadata(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("204", response.httpStatusCode)) {
        return;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "void",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to queryGetDecomposedQuery
   * @throws ApiException if the response code was not in [200, 299]
   */
  queryGetDecomposedQuery(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "EurekaDecomposeQueryResponse",
          ""
        );
        return body;
      }
      if (isCodeInRange("201", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "EurekaDecomposeQueryResponse",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Operation failed", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Operation failed", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "EurekaDecomposeQueryResponse",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to resetUserPassword
   * @throws ApiException if the response code was not in [200, 299]
   */
  resetUserPassword(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("204", response.httpStatusCode)) {
        return;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "void",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to revertCommit
   * @throws ApiException if the response code was not in [200, 299]
   */
  revertCommit(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "RevertResponse",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "RevertResponse",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to revokeToken
   * @throws ApiException if the response code was not in [200, 299]
   */
  revokeToken(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("204", response.httpStatusCode)) {
        return;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "void",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to searchCommits
   * @throws ApiException if the response code was not in [200, 299]
   */
  searchCommits(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Array<CommitHistoryResponse>",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Array<CommitHistoryResponse>",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to searchConfig
   * @throws ApiException if the response code was not in [200, 299]
   */
  searchConfig(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Array<RepoConfigObject>",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Array<RepoConfigObject>",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to searchConnection
   * @throws ApiException if the response code was not in [200, 299]
   */
  searchConnection(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Array<SearchConnectionResponse>",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Array<SearchConnectionResponse>",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to searchCustomActions
   * @throws ApiException if the response code was not in [200, 299]
   */
  searchCustomActions(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Array<ResponseCustomAction>",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Array<ResponseCustomAction>",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to searchData
   * @throws ApiException if the response code was not in [200, 299]
   */
  searchData(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "SearchDataResponse",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "SearchDataResponse",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to searchEmailCustomisation
   * @throws ApiException if the response code was not in [200, 299]
   */
  searchEmailCustomisation(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Array<CreateEmailCustomisationResponse>",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Array<CreateEmailCustomisationResponse>",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to searchMetadata
   * @throws ApiException if the response code was not in [200, 299]
   */
  searchMetadata(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Array<MetadataSearchResponse>",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Array<MetadataSearchResponse>",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to searchOrgs
   * @throws ApiException if the response code was not in [200, 299]
   */
  searchOrgs(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Array<OrgResponse>",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Array<OrgResponse>",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to searchRoles
   * @throws ApiException if the response code was not in [200, 299]
   */
  searchRoles(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Array<SearchRoleResponse>",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Internal error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Array<SearchRoleResponse>",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to searchSchedules
   * @throws ApiException if the response code was not in [200, 299]
   */
  searchSchedules(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Array<ResponseSchedule>",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Array<ResponseSchedule>",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to searchTags
   * @throws ApiException if the response code was not in [200, 299]
   */
  searchTags(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Array<Tag>",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Array<Tag>",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to searchUserGroups
   * @throws ApiException if the response code was not in [200, 299]
   */
  searchUserGroups(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Array<UserGroupResponse>",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Array<UserGroupResponse>",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to searchUsers
   * @throws ApiException if the response code was not in [200, 299]
   */
  searchUsers(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Array<User>",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Array<User>",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to searchVariables
   * @throws ApiException if the response code was not in [200, 299]
   */
  searchVariables(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Array<Variable>",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Array<Variable>",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to sendMessage
   * @throws ApiException if the response code was not in [200, 299]
   */
  sendMessage(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Array<ResponseMessage>",
          ""
        );
        return body;
      }
      if (isCodeInRange("201", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Array<ResponseMessage>",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Operation failed", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Operation failed", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Array<ResponseMessage>",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to shareMetadata
   * @throws ApiException if the response code was not in [200, 299]
   */
  shareMetadata(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("204", response.httpStatusCode)) {
        return;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "void",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to singleAnswer
   * @throws ApiException if the response code was not in [200, 299]
   */
  singleAnswer(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ResponseMessage",
          ""
        );
        return body;
      }
      if (isCodeInRange("201", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ResponseMessage",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Operation failed", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Operation failed", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ResponseMessage",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to unassignTag
   * @throws ApiException if the response code was not in [200, 299]
   */
  unassignTag(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("204", response.httpStatusCode)) {
        return;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "void",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to unparameterizeMetadata
   * @throws ApiException if the response code was not in [200, 299]
   */
  unparameterizeMetadata(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("204", response.httpStatusCode)) {
        return;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "void",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to unpublishMetadata
   * @throws ApiException if the response code was not in [200, 299]
   */
  unpublishMetadata(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("204", response.httpStatusCode)) {
        return;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "void",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to updateConfig
   * @throws ApiException if the response code was not in [200, 299]
   */
  updateConfig(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "RepoConfigObject",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "RepoConfigObject",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to updateConnection
   * @throws ApiException if the response code was not in [200, 299]
   */
  updateConnection(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("204", response.httpStatusCode)) {
        return;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "void",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to updateConnectionV2
   * @throws ApiException if the response code was not in [200, 299]
   */
  updateConnectionV2(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("204", response.httpStatusCode)) {
        return;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "void",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to updateCustomAction
   * @throws ApiException if the response code was not in [200, 299]
   */
  updateCustomAction(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("204", response.httpStatusCode)) {
        return;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "void",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to updateDbtConnection
   * @throws ApiException if the response code was not in [200, 299]
   */
  updateDbtConnection(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "any",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "any",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to updateMetadataHeader
   * @throws ApiException if the response code was not in [200, 299]
   */
  updateMetadataHeader(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("204", response.httpStatusCode)) {
        return;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "void",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to updateMetadataObjId
   * @throws ApiException if the response code was not in [200, 299]
   */
  updateMetadataObjId(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("204", response.httpStatusCode)) {
        return;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "void",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to updateOrg
   * @throws ApiException if the response code was not in [200, 299]
   */
  updateOrg(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("204", response.httpStatusCode)) {
        return;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "void",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to updateRole
   * @throws ApiException if the response code was not in [200, 299]
   */
  updateRole(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "RoleResponse",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "RoleResponse",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to updateSchedule
   * @throws ApiException if the response code was not in [200, 299]
   */
  updateSchedule(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("204", response.httpStatusCode)) {
        return;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "void",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to updateSystemConfig
   * @throws ApiException if the response code was not in [200, 299]
   */
  updateSystemConfig(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("204", response.httpStatusCode)) {
        return;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "void",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to updateTag
   * @throws ApiException if the response code was not in [200, 299]
   */
  updateTag(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("204", response.httpStatusCode)) {
        return;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "void",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to updateUser
   * @throws ApiException if the response code was not in [200, 299]
   */
  updateUser(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("204", response.httpStatusCode)) {
        return;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "void",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to updateUserGroup
   * @throws ApiException if the response code was not in [200, 299]
   */
  updateUserGroup(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("204", response.httpStatusCode)) {
        return;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "void",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to updateVariable
   * @throws ApiException if the response code was not in [200, 299]
   */
  updateVariable(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("204", response.httpStatusCode)) {
        return;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "void",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to updateVariableValues
   * @throws ApiException if the response code was not in [200, 299]
   */
  updateVariableValues(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("204", response.httpStatusCode)) {
        return;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "void",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to validateEmailCustomisation
   * @throws ApiException if the response code was not in [200, 299]
   */
  validateEmailCustomisation(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("204", response.httpStatusCode)) {
        return;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "void",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to validateMerge
   * @throws ApiException if the response code was not in [200, 299]
   */
  validateMerge(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Array<DeployResponse>",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Array<DeployResponse>",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to validateToken
   * @throws ApiException if the response code was not in [200, 299]
   */
  validateToken(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "TokenValidationResponse",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "TokenValidationResponse",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
};

// apis/UsersApi.ts
var UsersApiRequestFactory = class extends BaseAPIRequestFactory {
  /**
   *   Version: 9.7.0.cl or later   Activates a deactivated user account.  Requires `ADMINISTRATION` (**Can administer Thoughtspot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `USER_ADMINISTRATION` (**Can manage users**) privilege is required.  To activate an inactive user account, the API request body must include the following information:  - Username or the GUID of the user account. - Auth token generated for the deactivated user. The auth token is sent in the API response when a user is deactivated. - Password for the user account.      
   * @param activateUserRequest 
   */
  activateUser(activateUserRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (activateUserRequest === null || activateUserRequest === void 0) {
        throw new RequiredError("UsersApi", "activateUser", "activateUserRequest");
      }
      const localVarPath = "/api/rest/2.0/users/activate";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(activateUserRequest, "ActivateUserRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.0.0.cl or later   Updates the current password of the user.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `USER_ADMINISTRATION` (**Can manage users**) privilege is required.      
   * @param changeUserPasswordRequest 
   */
  changeUserPassword(changeUserPasswordRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (changeUserPasswordRequest === null || changeUserPasswordRequest === void 0) {
        throw new RequiredError("UsersApi", "changeUserPassword", "changeUserPasswordRequest");
      }
      const localVarPath = "/api/rest/2.0/users/change-password";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(changeUserPasswordRequest, "ChangeUserPasswordRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.0.0.cl or later   Creates a user in ThoughtSpot.  The API endpoint allows you to configure several user properties such as email address, account status, share notification preferences, and sharing visibility. You can provision the user to [groups](https://docs.thoughtspot.com/cloud/latest/groups-privileges) and [Orgs](https://docs.thoughtspot.com/cloud/latest/orgs-overview). You can also add Liveboard, Answer, and Worksheet objects to the user’s favorites list, assign a default Liveboard for the user, and set user preferences.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `USER_ADMINISTRATION` (**Can manage users**) privilege is required.      
   * @param createUserRequest 
   */
  createUser(createUserRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (createUserRequest === null || createUserRequest === void 0) {
        throw new RequiredError("UsersApi", "createUser", "createUserRequest");
      }
      const localVarPath = "/api/rest/2.0/users/create";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(createUserRequest, "CreateUserRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.7.0.cl or later   Deactivates a user account.  Requires `ADMINISTRATION` (**Can administer Thoughtspot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `USER_ADMINISTRATION` (**Can manage users**) privilege is required.  To deactivate a user account, the API request body must include the following information:  - Username or the GUID of the user account - Base URL of the ThoughtSpot instance  If the API request is successful, ThoughtSpot returns the activation URL in the response. The activation URL is valid for 14 days and can be used to re-activate the account and reset the password of the deactivated account.      
   * @param deactivateUserRequest 
   */
  deactivateUser(deactivateUserRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (deactivateUserRequest === null || deactivateUserRequest === void 0) {
        throw new RequiredError("UsersApi", "deactivateUser", "deactivateUserRequest");
      }
      const localVarPath = "/api/rest/2.0/users/deactivate";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(deactivateUserRequest, "DeactivateUserRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.0.0.cl or later   Deletes a user from the ThoughtSpot system.  If you want to remove a user from a specific Org but not from ThoughtSpot, update the group and Org mapping properties of the user object via a POST API call to the [/api/rest/2.0/users/{user_identifier}/update](#/http/api-endpoints/users/update-user) endpoint.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `USER_ADMINISTRATION` (**Can manage users**) privilege is required.      
   * @param userIdentifier GUID / name of the user
   */
  deleteUser(userIdentifier, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (userIdentifier === null || userIdentifier === void 0) {
        throw new RequiredError("UsersApi", "deleteUser", "userIdentifier");
      }
      const localVarPath = "/api/rest/2.0/users/{user_identifier}/delete".replace("{user_identifier}", encodeURIComponent(String(userIdentifier)));
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.0.0.cl or later   Enforces logout on current user sessions.    Use this API with caution as it may invalidate active user sessions and force users to re-login. Make sure you specify the usernames or GUIDs. If you pass null values in the API call, all user sessions on your cluster become invalid, and the users are forced to re-login.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `USER_ADMINISTRATION` (**Can manage users**) privilege is required.      
   * @param forceLogoutUsersRequest 
   */
  forceLogoutUsers(forceLogoutUsersRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (forceLogoutUsersRequest === null || forceLogoutUsersRequest === void 0) {
        throw new RequiredError("UsersApi", "forceLogoutUsers", "forceLogoutUsersRequest");
      }
      const localVarPath = "/api/rest/2.0/users/force-logout";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(forceLogoutUsersRequest, "ForceLogoutUsersRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.0.0.cl or later   Imports user data from external databases into ThoughtSpot. During the user import operation:  * If the specified users are not available in ThoughtSpot, the users are created and assigned a default password. Defining a `default_password` in the API request is optional. * If `delete_unspecified_users` is set to `true`, the users not specified in the API request, excluding the `tsadmin`, `guest`, `system` and `su` users, are deleted. * If the specified user objects are already available in ThoughtSpot, the object properties are updated and synchronized as per the input data in the API request.  A successful API call returns the object that represents the changes made in the ThoughtSpot system.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `USER_ADMINISTRATION` (**Can manage users**) privilege is required.      
   * @param importUsersRequest 
   */
  importUsers(importUsersRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (importUsersRequest === null || importUsersRequest === void 0) {
        throw new RequiredError("UsersApi", "importUsers", "importUsersRequest");
      }
      const localVarPath = "/api/rest/2.0/users/import";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(importUsersRequest, "ImportUsersRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.0.0.cl or later   Resets the password of a user account. Administrators can reset password on behalf of a user.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `USER_ADMINISTRATION` (**Can manage users**) privilege is required.      
   * @param resetUserPasswordRequest 
   */
  resetUserPassword(resetUserPasswordRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (resetUserPasswordRequest === null || resetUserPasswordRequest === void 0) {
        throw new RequiredError("UsersApi", "resetUserPassword", "resetUserPasswordRequest");
      }
      const localVarPath = "/api/rest/2.0/users/reset-password";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(resetUserPasswordRequest, "ResetUserPasswordRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.0.0.cl or later   Gets a list of users available on the ThoughtSpot system.  To get details of a specific user, specify the user GUID or name. You can also filter the API response based on groups, Org ID, user visibility, account status, user type, and user preference settings and favorites.  Available to all users. Users with `ADMINISTRATION` (**Can administer ThoughtSpot**) privileges can view all users properties. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `USER_ADMINISTRATION` (**Can manage users**) privilege is required.  **NOTE**: If the API returns an empty list, consider increasing the value of the `record_size` parameter. To search across all available users, set `record_size` to `-1`.      
   * @param searchUsersRequest 
   */
  searchUsers(searchUsersRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (searchUsersRequest === null || searchUsersRequest === void 0) {
        throw new RequiredError("UsersApi", "searchUsers", "searchUsersRequest");
      }
      const localVarPath = "/api/rest/2.0/users/search";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(searchUsersRequest, "SearchUsersRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.0.0.cl or later   Updates the properties of a user object.  You can modify user properties such as username, email, and share notification settings. You can also assign new groups and Orgs, remove the user from a group or Org, reset password, and modify user preferences.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `USER_ADMINISTRATION` (**Can manage users**) privilege is required.      
   * @param userIdentifier GUID / name of the user
   * @param updateUserRequest 
   */
  updateUser(userIdentifier, updateUserRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (userIdentifier === null || userIdentifier === void 0) {
        throw new RequiredError("UsersApi", "updateUser", "userIdentifier");
      }
      if (updateUserRequest === null || updateUserRequest === void 0) {
        throw new RequiredError("UsersApi", "updateUser", "updateUserRequest");
      }
      const localVarPath = "/api/rest/2.0/users/{user_identifier}/update".replace("{user_identifier}", encodeURIComponent(String(userIdentifier)));
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(updateUserRequest, "UpdateUserRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
};
var UsersApiResponseProcessor = class {
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to activateUser
   * @throws ApiException if the response code was not in [200, 299]
   */
  activateUser(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "User",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "User",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to changeUserPassword
   * @throws ApiException if the response code was not in [200, 299]
   */
  changeUserPassword(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("204", response.httpStatusCode)) {
        return;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "void",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to createUser
   * @throws ApiException if the response code was not in [200, 299]
   */
  createUser(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "User",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "User",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to deactivateUser
   * @throws ApiException if the response code was not in [200, 299]
   */
  deactivateUser(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ResponseActivationURL",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ResponseActivationURL",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to deleteUser
   * @throws ApiException if the response code was not in [200, 299]
   */
  deleteUser(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("204", response.httpStatusCode)) {
        return;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "void",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to forceLogoutUsers
   * @throws ApiException if the response code was not in [200, 299]
   */
  forceLogoutUsers(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("204", response.httpStatusCode)) {
        return;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "void",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to importUsers
   * @throws ApiException if the response code was not in [200, 299]
   */
  importUsers(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ImportUsersResponse",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ImportUsersResponse",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to resetUserPassword
   * @throws ApiException if the response code was not in [200, 299]
   */
  resetUserPassword(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("204", response.httpStatusCode)) {
        return;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "void",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to searchUsers
   * @throws ApiException if the response code was not in [200, 299]
   */
  searchUsers(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Array<User>",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Array<User>",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to updateUser
   * @throws ApiException if the response code was not in [200, 299]
   */
  updateUser(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("204", response.httpStatusCode)) {
        return;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "void",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
};

// apis/VariableApi.ts
var VariableApiRequestFactory = class extends BaseAPIRequestFactory {
  /**
   *  Create a variable which can be used for parameterizing metadata objects   Version: 10.9.0.cl or later   Allows creating a variable which can be used for parameterizing metadata objects in ThoughtSpot.  Requires ADMINISTRATION role and TENANT scope.  The API endpoint supports the following types of variables: * CONNECTION_PROPERTY - For connection properties * TABLE_MAPPING - For table mappings * CONNECTION_PROPERTY_PER_PRINCIPAL - For connection properties per principal. In order to use this please contact support to enable this.  When creating a variable, you need to specify: * The variable type * A unique name for the variable * Whether the variable contains sensitive values (defaults to false) * The variable values (optional)  The operation will fail if: * The user lacks required permissions * The variable name already exists * The variable type is invalid * The variable values are invalid for the specified type       
   * @param createVariableRequest 
   */
  createVariable(createVariableRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (createVariableRequest === null || createVariableRequest === void 0) {
        throw new RequiredError("VariableApi", "createVariable", "createVariableRequest");
      }
      const localVarPath = "/api/rest/2.0/template/variables/create";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(createVariableRequest, "CreateVariableRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *  Delete a variable   Version: 10.9.0.cl or later   Allows deleting a variable from ThoughtSpot.  Requires ADMINISTRATION role and TENANT scope.  The API endpoint requires: * The variable identifier (ID or name)  The operation will fail if: * The user lacks required permissions * The variable doesn\'t exist * The variable is being used by other objects      
   * @param identifier Unique id or name of the variable
   */
  deleteVariable(identifier, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (identifier === null || identifier === void 0) {
        throw new RequiredError("VariableApi", "deleteVariable", "identifier");
      }
      const localVarPath = "/api/rest/2.0/template/variables/{identifier}/delete".replace("{identifier}", encodeURIComponent(String(identifier)));
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *  Search variables   Version: 10.9.0.cl or later   Allows searching for variables in ThoughtSpot.  Requires ADMINISTRATION role.  The API endpoint supports searching variables by: * Variable identifier (ID or name) * Variable type * Name pattern (case-insensitive, supports % for wildcard)  The search results can be formatted in three ways: * METADATA_ONLY - Returns only variable metadata (default) * METADATA_AND_VALUES - Returns variable metadata and values * EDITABLE_METADATA_AND_VALUES - Returns only editable variable metadata and values       
   * @param searchVariablesRequest 
   */
  searchVariables(searchVariablesRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (searchVariablesRequest === null || searchVariablesRequest === void 0) {
        throw new RequiredError("VariableApi", "searchVariables", "searchVariablesRequest");
      }
      const localVarPath = "/api/rest/2.0/template/variables/search";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(searchVariablesRequest, "SearchVariablesRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *  Update a variable\'s properties   Version: 10.9.0.cl or later   Allows updating a variable\'s properties in ThoughtSpot.  Requires ADMINISTRATION role and TENANT scope.  The API endpoint allows updating: * The variable name * The variable values  When updating variable values, you need to specify: * The operation to perform (ADD, REPLACE, REMOVE) * The new values to add/replace/remove  When the operation is ADD, a value any pre-existing value with the same set of constraints will be replaced. When the operation is REPLACE, all values of the variable are replaced with the values specified. When the operation is REMOVE, all values with the given set of conditions are removed.      
   * @param identifier Unique id or name of the variable to update.
   * @param updateVariableRequest 
   */
  updateVariable(identifier, updateVariableRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (identifier === null || identifier === void 0) {
        throw new RequiredError("VariableApi", "updateVariable", "identifier");
      }
      if (updateVariableRequest === null || updateVariableRequest === void 0) {
        throw new RequiredError("VariableApi", "updateVariable", "updateVariableRequest");
      }
      const localVarPath = "/api/rest/2.0/template/variables/{identifier}/update".replace("{identifier}", encodeURIComponent(String(identifier)));
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(updateVariableRequest, "UpdateVariableRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *  Update values for multiple variables   Version: 10.9.0.cl or later   Allows updating values for multiple variables in ThoughtSpot.  Requires ADMINISTRATION role.  The API endpoint allows: * Adding new values to variables * Replacing existing values * Deleting values from variables  When updating variable values, you need to specify: * The variable identifiers * The values to add/replace/remove for each variable * The operation to perform (ADD, REPLACE, REMOVE)  Behaviour based on operation type: * ADD - Adds values to the variable. Any pre-existing values with the same conditions are replaced. * REPLACE - Replaces all values of a given org with the current set of values. * REMOVE - Removes any values which match the set of conditions of the variables.      
   * @param updateVariableValuesRequest 
   */
  updateVariableValues(updateVariableValuesRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (updateVariableValuesRequest === null || updateVariableValuesRequest === void 0) {
        throw new RequiredError("VariableApi", "updateVariableValues", "updateVariableValuesRequest");
      }
      const localVarPath = "/api/rest/2.0/template/variables/update";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(updateVariableValuesRequest, "UpdateVariableValuesRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
};
var VariableApiResponseProcessor = class {
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to createVariable
   * @throws ApiException if the response code was not in [200, 299]
   */
  createVariable(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Variable",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Variable",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to deleteVariable
   * @throws ApiException if the response code was not in [200, 299]
   */
  deleteVariable(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("204", response.httpStatusCode)) {
        return;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "void",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to searchVariables
   * @throws ApiException if the response code was not in [200, 299]
   */
  searchVariables(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Array<Variable>",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Array<Variable>",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to updateVariable
   * @throws ApiException if the response code was not in [200, 299]
   */
  updateVariable(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("204", response.httpStatusCode)) {
        return;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "void",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to updateVariableValues
   * @throws ApiException if the response code was not in [200, 299]
   */
  updateVariableValues(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("204", response.httpStatusCode)) {
        return;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "void",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
};

// apis/VersionControlApi.ts
var VersionControlApiRequestFactory = class extends BaseAPIRequestFactory {
  /**
   *   Version: 9.2.0.cl or later   Commits TML files of metadata objects to the Git branch configured on your instance.  Requires at least edit access to objects used in the commit operation.  Before using this endpoint to push your commits:  * Enable Git integration on your instance. * Make sure the Git repository and branch details are configured on your instance.  For more information, see [Git integration documentation](https://developers.thoughtspot.com/docs/git-integration).      
   * @param commitBranchRequest 
   */
  commitBranch(commitBranchRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (commitBranchRequest === null || commitBranchRequest === void 0) {
        throw new RequiredError("VersionControlApi", "commitBranch", "commitBranchRequest");
      }
      const localVarPath = "/api/rest/2.0/vcs/git/branches/commit";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(commitBranchRequest, "CommitBranchRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.2.0.cl or later   Allows you to connect a ThoughtSpot instance to a Git repository.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance on your instance, the `CAN_MANAGE_VERSION_CONTROL` (**Can toggle version control for objects**) privilege.  You can use this API endpoint to connect your ThoughtSpot development and production environments to the development and production branches of a Git repository.  Before using this endpoint to connect your ThoughtSpot instance to a Git repository, check the following prerequisites:  * You have a Git repository. If you are using GitHub, make sure you have a valid account and an access token to connect ThoughtSpot to GitHub. For information about generating a token, see [GitHub Documentation](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens).  * Your access token has `repo` scope that grants full access to public and private repositories. * Your Git repository has a branch that can be configured as a default branch in ThoughtSpot.  For more information, see [Git integration documentation](https://developers.thoughtspot.com/docs/?pageid=git-integration).  **Note**: ThoughtSpot supports only GitHub / GitHub Enterprise for CI/CD.      
   * @param createConfigRequest 
   */
  createConfig(createConfigRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (createConfigRequest === null || createConfigRequest === void 0) {
        throw new RequiredError("VersionControlApi", "createConfig", "createConfigRequest");
      }
      const localVarPath = "/api/rest/2.0/vcs/git/config/create";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(createConfigRequest, "CreateConfigRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.2.0.cl or later   Deletes Git repository configuration from your ThoughtSpot instance.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance on your instance, the `CAN_MANAGE_VERSION_CONTROL` (**Can toggle version control for objects**) privilege.      
   * @param deleteConfigRequest 
   */
  deleteConfig(deleteConfigRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (deleteConfigRequest === null || deleteConfigRequest === void 0) {
        throw new RequiredError("VersionControlApi", "deleteConfig", "deleteConfigRequest");
      }
      const localVarPath = "/api/rest/2.0/vcs/git/config/delete";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(deleteConfigRequest, "DeleteConfigRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.2.0.cl or later   Allows you to deploy a commit and publish TML content to your ThoughtSpot instance.  Requires at least edit access to the objects used in the deploy operation.  The API deploys the head of the branch unless a `commit_id` is specified in the API request. If the branch name is not defined in the request, the default branch is considered for deploying commits.  For more information, see [Git integration documentation](https://developers.thoughtspot.com/docs/git-integration).      
   * @param deployCommitRequest 
   */
  deployCommit(deployCommitRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (deployCommitRequest === null || deployCommitRequest === void 0) {
        throw new RequiredError("VersionControlApi", "deployCommit", "deployCommitRequest");
      }
      const localVarPath = "/api/rest/2.0/vcs/git/commits/deploy";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(deployCommitRequest, "DeployCommitRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.2.0.cl or later   Reverts TML objects to a previous commit specified in the API request.  Requires at least edit access to objects.  In the API request, specify the `commit_id`. If the branch name is not specified in the request, the API will consider the default branch configured on your instance.  By default, the API reverts all objects. If the revert operation fails for one of the objects provided in the commit, the API returns an error and does not revert any object.  For more information, see [Git integration documentation](https://developers.thoughtspot.com/docs/git-integration).      
   * @param commitId Commit id to which the object should be reverted
   * @param revertCommitRequest 
   */
  revertCommit(commitId, revertCommitRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (commitId === null || commitId === void 0) {
        throw new RequiredError("VersionControlApi", "revertCommit", "commitId");
      }
      if (revertCommitRequest === null || revertCommitRequest === void 0) {
        throw new RequiredError("VersionControlApi", "revertCommit", "revertCommitRequest");
      }
      const localVarPath = "/api/rest/2.0/vcs/git/commits/{commit_id}/revert".replace("{commit_id}", encodeURIComponent(String(commitId)));
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(revertCommitRequest, "RevertCommitRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.2.0.cl or later   Gets a list of commits for a given metadata object.  Requires `DATAMANAGEMENT` (**Can manage data**) privilege.  If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance on your instance, the `CAN_MANAGE_WORKSHEET_VIEWS_TABLES` (**Can manage data models**) privilege and edit access to the metadata objects.      
   * @param searchCommitsRequest 
   */
  searchCommits(searchCommitsRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (searchCommitsRequest === null || searchCommitsRequest === void 0) {
        throw new RequiredError("VersionControlApi", "searchCommits", "searchCommitsRequest");
      }
      const localVarPath = "/api/rest/2.0/vcs/git/commits/search";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(searchCommitsRequest, "SearchCommitsRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.2.0.cl or later   Gets Git repository connections configured on the ThoughtSpot instance.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance on your instance, the `CAN_MANAGE_VERSION_CONTROL` (**Can toggle version control for objects**) privilege.      
   * @param searchConfigRequest 
   */
  searchConfig(searchConfigRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (searchConfigRequest === null || searchConfigRequest === void 0) {
        throw new RequiredError("VersionControlApi", "searchConfig", "searchConfigRequest");
      }
      const localVarPath = "/api/rest/2.0/vcs/git/config/search";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(searchConfigRequest, "SearchConfigRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.2.0.cl or later   Updates Git repository configuration settings.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance on your instance, the `CAN_MANAGE_VERSION_CONTROL` (**Can toggle version control for objects**) privilege.      
   * @param updateConfigRequest 
   */
  updateConfig(updateConfigRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (updateConfigRequest === null || updateConfigRequest === void 0) {
        throw new RequiredError("VersionControlApi", "updateConfig", "updateConfigRequest");
      }
      const localVarPath = "/api/rest/2.0/vcs/git/config/update";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(updateConfigRequest, "UpdateConfigRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
  /**
   *   Version: 9.2.0.cl or later   Validates the content of your source branch against the objects in your destination environment.  Before merging content from your source branch to the destination branch, run this API operation from your destination environment and ensure that the changes from the source branch function in the destination environment.  Requires `DATAMANAGEMENT` (**Can manage data**) privilege.  If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance on your instance, the `CAN_MANAGE_WORKSHEET_VIEWS_TABLES` (**Can manage data models**) privilege and edit access to the metadata objects.      
   * @param validateMergeRequest 
   */
  validateMerge(validateMergeRequest, _options) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      let _config = _options || this.configuration;
      if (validateMergeRequest === null || validateMergeRequest === void 0) {
        throw new RequiredError("VersionControlApi", "validateMerge", "validateMergeRequest");
      }
      const localVarPath = "/api/rest/2.0/vcs/git/branches/validate";
      const requestContext = _config.baseServer.makeRequestContext(localVarPath, "POST" /* POST */);
      requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
      requestContext.setHeaderParam("User-Agent", "ThoughtSpot-Client/typescript/2.13.2");
      const contentType = ObjectSerializer.getPreferredMediaType([
        "application/json"
      ]);
      requestContext.setHeaderParam("Content-Type", contentType);
      const serializedBody = ObjectSerializer.stringify(
        ObjectSerializer.serialize(validateMergeRequest, "ValidateMergeRequest", ""),
        contentType
      );
      requestContext.setBody(serializedBody);
      let authMethod;
      authMethod = _config.authMethods["bearerAuth"];
      if (authMethod == null ? void 0 : authMethod.applySecurityAuthentication) {
        yield authMethod == null ? void 0 : authMethod.applySecurityAuthentication(requestContext);
      }
      const defaultAuth = ((_a = _options == null ? void 0 : _options.authMethods) == null ? void 0 : _a.default) || ((_c = (_b = this.configuration) == null ? void 0 : _b.authMethods) == null ? void 0 : _c.default);
      if (defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication) {
        yield defaultAuth == null ? void 0 : defaultAuth.applySecurityAuthentication(requestContext);
      }
      return requestContext;
    });
  }
};
var VersionControlApiResponseProcessor = class {
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to commitBranch
   * @throws ApiException if the response code was not in [200, 299]
   */
  commitBranch(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "CommitResponse",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "CommitResponse",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to createConfig
   * @throws ApiException if the response code was not in [200, 299]
   */
  createConfig(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "RepoConfigObject",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "RepoConfigObject",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to deleteConfig
   * @throws ApiException if the response code was not in [200, 299]
   */
  deleteConfig(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("204", response.httpStatusCode)) {
        return;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "void",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to deployCommit
   * @throws ApiException if the response code was not in [200, 299]
   */
  deployCommit(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Array<DeployResponse>",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Array<DeployResponse>",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to revertCommit
   * @throws ApiException if the response code was not in [200, 299]
   */
  revertCommit(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "RevertResponse",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "RevertResponse",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to searchCommits
   * @throws ApiException if the response code was not in [200, 299]
   */
  searchCommits(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Array<CommitHistoryResponse>",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Array<CommitHistoryResponse>",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to searchConfig
   * @throws ApiException if the response code was not in [200, 299]
   */
  searchConfig(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Array<RepoConfigObject>",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Array<RepoConfigObject>",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to updateConfig
   * @throws ApiException if the response code was not in [200, 299]
   */
  updateConfig(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "RepoConfigObject",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "RepoConfigObject",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
  /**
   * Unwraps the actual response sent by the server from the response context and deserializes the response content
   * to the expected objects
   *
   * @params response Response returned by the server for a request to validateMerge
   * @throws ApiException if the response code was not in [200, 299]
   */
  validateMerge(response) {
    return __async(this, null, function* () {
      const contentType = ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
      if (isCodeInRange("200", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Array<DeployResponse>",
          ""
        );
        return body;
      }
      if (isCodeInRange("400", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Invalid request.", body, response.headers);
      }
      if (isCodeInRange("401", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unauthorized access.", body, response.headers);
      }
      if (isCodeInRange("403", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Forbidden access.", body, response.headers);
      }
      if (isCodeInRange("500", response.httpStatusCode)) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "ErrorResponse",
          ""
        );
        throw new ApiException(response.httpStatusCode, "Unexpected error", body, response.headers);
      }
      if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
        const body = ObjectSerializer.deserialize(
          ObjectSerializer.parse(yield response.body.text(), contentType),
          "Array<DeployResponse>",
          ""
        );
        return body;
      }
      throw new ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
    });
  }
};

// types/ObservableAPI.ts
var ObservableAIApi = class {
  constructor(configuration, requestFactory, responseProcessor) {
    this.configuration = configuration;
    this.requestFactory = requestFactory || new AIApiRequestFactory(configuration);
    this.responseProcessor = responseProcessor || new AIApiResponseProcessor();
  }
  /**
   *  Version: 10.4.0.cl or later   Creates a Conversation object to start an AI-driven conversation based on a specific data model.  Requires at least view access to the metadata object specified in the request.  #### Usage guidelines  This API requires the `metadata_identifier` parameter to define the context for the conversation.  You can also specify the tokens to initiate the conversation as shown in this example:  `\"tokens\": \"[tea],[sales],[type]\"`  If the API request is successful, ThoughtSpot returns the ID of the conversation.  > ###### Note: > * This endpoint is currently in Beta. Breaking changes may be introduced before the endpoint is made Generally Available. > * This endpoint requires Spotter - please contact ThoughtSpot support to enable Spotter on your cluster.      
   * @param createConversationRequest 
   */
  createConversation(createConversationRequest, _options) {
    const requestContextPromise = this.requestFactory.createConversation(createConversationRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.createConversation(rsp)));
    }));
  }
  /**
   * Version: 10.7.0.cl or later 
   * @param queryGetDecomposedQueryRequest 
   */
  queryGetDecomposedQuery(queryGetDecomposedQueryRequest, _options) {
    const requestContextPromise = this.requestFactory.queryGetDecomposedQuery(queryGetDecomposedQueryRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.queryGetDecomposedQuery(rsp)));
    }));
  }
  /**
   *  Version: 10.4.0.cl or later   Allows sending a follow-up message to an ongoing conversation within the context of the metadata model.  Requires at least view access to the metadata object specified in the request.  #### Usage guidelines  The API requires you to specify the `conversation_identifier` in the request path, and a `metadata_identifier` and `message` string in the request body.  If the API request is successful, ThoughtSpot returns the session ID, tokens used in the conversation, and visualization type.  > ###### Note: > * This endpoint is currently in Beta. Breaking changes may be introduced before the endpoint is made Generally Available. > * This endpoint requires Spotter - please contact ThoughtSpot support to enable Spotter on your cluster.      
   * @param conversationIdentifier Unique identifier of the conversation.
   * @param sendMessageRequest 
   */
  sendMessage(conversationIdentifier, sendMessageRequest, _options) {
    const requestContextPromise = this.requestFactory.sendMessage(conversationIdentifier, sendMessageRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.sendMessage(rsp)));
    }));
  }
  /**
   *  Version: 10.4.0.cl or later   Processes a natural language query and returns an AI-generated response based on a specified data model.  Requires at least view access to the metadata object specified in the request.  > ###### Note: > * This endpoint is currently in Beta. Breaking changes may be introduced before the endpoint is made Generally Available. > * This endpoint requires Spotter - please contact ThoughtSpot support to enable Spotter on your cluster.      
   * @param singleAnswerRequest 
   */
  singleAnswer(singleAnswerRequest, _options) {
    const requestContextPromise = this.requestFactory.singleAnswer(singleAnswerRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.singleAnswer(rsp)));
    }));
  }
};
var ObservableAuthenticationApi = class {
  constructor(configuration, requestFactory, responseProcessor) {
    this.configuration = configuration;
    this.requestFactory = requestFactory || new AuthenticationApiRequestFactory(configuration);
    this.responseProcessor = responseProcessor || new AuthenticationApiResponseProcessor();
  }
  /**
   *   Version: 9.0.0.cl or later    Gets session information for the currently logged-in user.  This API does not require any parameters to be passed in the request.    Any ThoughtSpot user can access this endpoint and send an API request. The data returned in the API response varies according to user\'s privilege and object access permissions.      
   */
  getCurrentUserInfo(_options) {
    const requestContextPromise = this.requestFactory.getCurrentUserInfo(_options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.getCurrentUserInfo(rsp)));
    }));
  }
  /**
   *  Get token for the currently logged-in user.    Version: 9.4.0.cl or later   Gets token details for the currently logged-in user.  You can use this endpoint to obtain the token associated with the user\'s session.  This API does not require any parameters to be passed in the request.    Any ThoughtSpot user can access this endpoint and send an API request.      
   */
  getCurrentUserToken(_options) {
    const requestContextPromise = this.requestFactory.getCurrentUserToken(_options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.getCurrentUserToken(rsp)));
    }));
  }
  /**
   *   Version: 10.4.0.cl or later   Gets an authentication token with custom rules and security attributes and creates a full session in ThoughtSpot for a given user. By default, the token obtained from ThoughtSpot remains valid for 5 mins.  To add a new user and assign privileges during auto creation, you need `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled, the `CONTROL_TRUSTED_AUTH`(**Can Enable or Disable Trusted Authentication**) privilege and edit access to the data source is required.  To assign security attributes with filter rules and Parameters to the JWT token, you\'ll need administrator privileges and edit access to the data source (Worksheet or Model). If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled, the `CONTROL_TRUSTED_AUTH`(**Can Enable or Disable Trusted Authentication**) privilege and edit access to the data source is required.  #### Usage guidelines  You can generate the token for a user by providing a `username` and `password`, or by using the cluster’s `secret_key`.  To generate a `secret_key` on your cluster, the administrator must enable [Trusted authentication](https://developers.thoughtspot.com/docs/?pageid=trusted-auth#trusted-auth-enable) in the **Develop** > **Customizations** > **Security Settings** page.  **Note**: When both `password` and `secret_key` are included in the API request, `password` takes precedence.  If Multi-Factor Authentication (MFA) is enabled on your instance, the API login request with basic authentication (`username`  and `password` ) returns an error. You can switch to token-based authentication with  `secret_key`  or contact ThoughtSpot Support for assistance.  ##### Attribute-Based Access Control (ABAC) with tokens  To implement Attribute-Based Access Control (ABAC) and assign security entitlements to users during session creation, you can generate a token with custom filtering rules and Parameters in the `filter_rules` and `parameter_values` array respectively. These attributes can be configured to persist on a specific set of objects for user sessions initiated using the token. Once defined, the rules are added to the user\'s `access_control_properties` object, after which all sessions will use the persisted values.  Specify the object type as `LOGICAL_TABLE`.  The `LIVEBOARD` and `ANSWER` object types are not supported.  For more information, see [ABAC via tokens Documentation](https://developers.thoughtspot.com/docs/api-authv2#_get_tokens_with_custom_rules_and_filter_conditions).  ##### Just-in-time provisioning  For just-in-time user creation and provisioning, define the following attributes:  * `auto_create` * `username` * `display_name` * `email` * `groups`  Set `auto_create` to `true` if the user is not available in ThoughtSpot. If the user already exists in ThoughtSpot and the `auto_create` parameter is set to `true` in the API request, the user properties such as the display name, email, Org and group assignment will not be updated with new values.  For more information, see [Just-in-time provisioning](https://developers.thoughtspot.com/docs/just-in-time-provisioning).  ##### Important point to note All options in the token creation APIs that define access to the content in ThoughtSpot will do so during the token creation and not when the token is being used for authentication. For example, `auto_create:true` will create the user when the authentication token is created. Persist options such as  `APPEND`, `REPLACE`, `RESET` will persist security parameters on the user profile when the token is created, while Persist option `NONE` will not persist anything but will be honoured in the session.      
   * @param getCustomAccessTokenRequest 
   */
  getCustomAccessToken(getCustomAccessTokenRequest, _options) {
    const requestContextPromise = this.requestFactory.getCustomAccessToken(getCustomAccessTokenRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.getCustomAccessToken(rsp)));
    }));
  }
  /**
   *   Version: 9.0.0.cl or later   Gets an authentication token and creates a full session in ThoughtSpot for a given user. By default, the token obtained from ThoughtSpot remains valid for 5 mins.  You can generate the token for a user by providing a `username` and `password`, or by using the cluster’s `secret_key` (for [Trusted authentication](https://developers.thoughtspot.com/docs/?pageid=trusted-auth#trusted-auth-enable)).  To generate a `secret_key` on your cluster, the administrator must enable **Trusted authentication** in the **Develop** > **Customizations** > **Security Settings** page. For more information, see [Trusted authentication](https://developers.thoughtspot.com/docs/?pageid=trusted-auth#trusted-auth-enable).  **Note**: When both `password` and `secret_key` are included in the API request, `password` takes precedence.  If Multi-Factor Authentication (MFA) is enabled on your instance, the API login request with basic authentication (`username`  and `password` ) returns an error. You can switch to token-based authentication with  `secret_key`  or contact ThoughtSpot Support for assistance.  #### Just-in-time provisioning  For just-in-time user creation and provisioning, define the following attributes:  * `auto_create` * `username` * `display_name` * `email` * `group_identifiers`  Set `auto_create` to `True` if the user is not available in ThoughtSpot. If the user already exists in ThoughtSpot and the `auto_create` parameter is set to `true`, the API call will update user properties like display name, email and group assignment.  For more information, see [Just-in-time provisioning](https://developers.thoughtspot.com/docs/just-in-time-provisioning).  To add a new user and assign privileges, you need `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled, the `CONTROL_TRUSTED_AUTH`(**Can Enable or Disable Trusted Authentication**) privilege is required.  #### Important point to note All options in the token creation APIs changing the content in ThoughtSpot will do so during the token creation and not when the token is being used for authentication. For example, `auto_create:true` will create the user when the authentication token is created.      
   * @param getFullAccessTokenRequest 
   */
  getFullAccessToken(getFullAccessTokenRequest, _options) {
    const requestContextPromise = this.requestFactory.getFullAccessToken(getFullAccessTokenRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.getFullAccessToken(rsp)));
    }));
  }
  /**
   *   Version: 9.0.0.cl or later   Gets an authentication token that provides access to a specific metadata object. By default, the token obtained from ThoughtSpot remains valid for 5 mins.  You can generate the token for a user by providing a `username` and `password`, or by using the cluster’s `secret key` (for [Trusted authentication](https://developers.thoughtspot.com/docs/?pageid=trusted-auth#trusted-auth-enable)).  To generate a `secret_key` on your cluster, the administrator must enable **Trusted authentication** in the **Develop** > **Customizations** > **Security Settings** page.  **Note**: When both `password` and `secret_key` are included in the API request,  `password` takes precedence.  If Multi-Factor Authentication (MFA) is enabled on your instance, the API login request with basic authentication (`username`  and `password` ) returns an error. You can switch to token-based authentication with  `secret_key`  or contact ThoughtSpot Support for assistance.  #### Just-in-time provisioning  For just-in-time user creation and provisioning, define the following attributes:  * `auto_create` * `username` * `display_name` * `email` * `group_identifiers`  Set `auto_create` to `True` if the user is not available in ThoughtSpot. If the user already exists in ThoughtSpot and the `auto_create` parameter is set to `true`, the API call will update user properties like display name, email and group assignment.  For more information, see [Just-in-time provisioning](https://developers.thoughtspot.com/docs/just-in-time-provisioning).  To add a new user and assign privileges, you need `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled, the `CONTROL_TRUSTED_AUTH`(**Can Enable or Disable Trusted Authentication**) privilege is required.  #### Important point to note All options in the token creation APIs changing the content in ThoughtSpot will do so during the token creation and not when the token is being used for authentication. For example, `auto_create:true` will create the user when the authentication token is created.      
   * @param getObjectAccessTokenRequest 
   */
  getObjectAccessToken(getObjectAccessTokenRequest, _options) {
    const requestContextPromise = this.requestFactory.getObjectAccessToken(getObjectAccessTokenRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.getObjectAccessToken(rsp)));
    }));
  }
  /**
   *   Version: 9.0.0.cl or later   Creates a login session for a ThoughtSpot user with Basic authentication.  In Basic authentication method, REST clients log in to ThoughtSpot using `username` and `password` attributes. On a multi-tenant cluster with Orgs, users can pass the ID of the Org in the API request to log in to a specific Org context.  **Note**: If Multi-Factor Authentication (MFA) is enabled on your instance, the API login request with basic authentication (`username`  and `password` ) returns an error. Contact ThoughtSpot Support for assistance.  A successful login returns a session cookie that can be used in your subsequent API requests.     
   * @param loginRequest 
   */
  login(loginRequest, _options) {
    const requestContextPromise = this.requestFactory.login(loginRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.login(rsp)));
    }));
  }
  /**
   *   Version: 9.0.0.cl or later    Logs out a user from their current session.      
   */
  logout(_options) {
    const requestContextPromise = this.requestFactory.logout(_options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.logout(rsp)));
    }));
  }
  /**
   *   Version: 9.0.0.cl or later    Revokes the authentication token issued for current user session.  The token of your current session expires when you make a call to the `/api/rest/2.0/auth/token/revoke` endpoint. the users will not be able to access ThoughtSpot objects until a new token is obtained.  To restart your session, request for a new token from ThoughtSpot. See [Get Full Access Token](#/http/api-endpoints/authentication/get-full-access-token).      
   * @param revokeTokenRequest 
   */
  revokeToken(revokeTokenRequest, _options) {
    const requestContextPromise = this.requestFactory.revokeToken(revokeTokenRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.revokeToken(rsp)));
    }));
  }
  /**
   *   Version: 9.12.0.cl or later    Validates the authentication token specified in the API request.  If your token is not valid, [Get a new token](#/http/api-endpoints/authentication/get-full-access-token).      
   * @param validateTokenRequest 
   */
  validateToken(validateTokenRequest, _options) {
    const requestContextPromise = this.requestFactory.validateToken(validateTokenRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.validateToken(rsp)));
    }));
  }
};
var ObservableConnectionsApi = class {
  constructor(configuration, requestFactory, responseProcessor) {
    this.configuration = configuration;
    this.requestFactory = requestFactory || new ConnectionsApiRequestFactory(configuration);
    this.responseProcessor = responseProcessor || new ConnectionsApiResponseProcessor();
  }
  /**
   *   Version: 9.2.0.cl or later   Creates a connection to a data warehouse for live query services.    Requires `DATAMANAGEMENT` (**Can manage data**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) privilege is required.  #### Create a connection without tables  To create a connection without tables:  1. Pass these parameters in your API request.  * Name of the connection.  * Type of the data warehouse to connect to.  * A JSON map of configuration attributes in `data_warehouse_config`. The following example shows the configuration attributes for a SnowFlake connection:   ```   {      \"configuration\":{         \"accountName\":\"thoughtspot_partner\",         \"user\":\"tsadmin\",         \"password\":\"TestConn123\",         \"role\":\"sysadmin\",         \"warehouse\":\"MEDIUM_WH\"      },      \"externalDatabases\":[       ]   }   ``` 2. Set `validate` to `false`.  #### Create a connection with tables  To create a connection with tables:  1. Pass these parameters in your API request.  * Name of the connection.  * Type of the data warehouse to connect to.  * A JSON map of configuration attributes, database details, and table properties in `data_warehouse_config` as shown in the following example:   ```   {      \"configuration\":{         \"accountName\":\"thoughtspot_partner\",         \"user\":\"tsadmin\",         \"password\":\"TestConn123\",         \"role\":\"sysadmin\",         \"warehouse\":\"MEDIUM_WH\"      },      \"externalDatabases\":[         {            \"name\":\"AllDatatypes\",            \"isAutoCreated\":false,            \"schemas\":[               {                  \"name\":\"alldatatypes\",                  \"tables\":[                     {                        \"name\":\"allDatatypes\",                        \"type\":\"TABLE\",                        \"description\":\"\",                        \"selected\":true,                        \"linked\":true,                        \"columns\":[                           {                              \"name\":\"CNUMBER\",                              \"type\":\"INT64\",                              \"canImport\":true,                              \"selected\":true,                              \"isLinkedActive\":true,                              \"isImported\":false,                              \"tableName\":\"allDatatypes\",                              \"schemaName\":\"alldatatypes\",                              \"dbName\":\"AllDatatypes\"                           },                           {                              \"name\":\"CDECIMAL\",                              \"type\":\"INT64\",                              \"canImport\":true,                              \"selected\":true,                              \"isLinkedActive\":true,                              \"isImported\":false,                              \"tableName\":\"allDatatypes\",                              \"schemaName\":\"alldatatypes\",                              \"dbName\":\"AllDatatypes\"                           }                        ]                     }                  ]               }            ]         }      ]   }   ``` 2. Set `validate` to `true`.      
   * @param createConnectionRequest 
   */
  createConnection(createConnectionRequest, _options) {
    const requestContextPromise = this.requestFactory.createConnection(createConnectionRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.createConnection(rsp)));
    }));
  }
  /**
   *   Version: 9.2.0.cl or later    **Important**: This endpoint is deprecated and will be removed from ThoughtSpot in September 2025. ThoughtSpot strongly recommends using the [Delete Connection V2](#/http/api-endpoints/connections/delete-connection-v2) endpoint to delete your connection objects.    #### Usage guidelines  Deletes a connection object.  Requires `DATAMANAGEMENT` (**Can manage data**) and edit permissions to the connection object, or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) privilege is required.  **Note**: If a connection has dependent objects, make sure you remove its associations before the delete operation.     
   * @param deleteConnectionRequest 
   */
  deleteConnection(deleteConnectionRequest, _options) {
    const requestContextPromise = this.requestFactory.deleteConnection(deleteConnectionRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.deleteConnection(rsp)));
    }));
  }
  /**
   *   Version: 10.4.0.cl or later   Deletes a connection object.  **Note**: If a connection has dependent objects, make sure you remove its associations before the delete operation.  Requires `DATAMANAGEMENT` (**Can manage data**) and edit permissions to the connection object, or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) privilege is required.      
   * @param connectionIdentifier Unique ID or name of the connection.
   */
  deleteConnectionV2(connectionIdentifier, _options) {
    const requestContextPromise = this.requestFactory.deleteConnectionV2(connectionIdentifier, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.deleteConnectionV2(rsp)));
    }));
  }
  /**
   *   Version: 9.9.0.cl or later   Exports the difference in connection metadata between CDW and ThoughtSpot  Requires `DATAMANAGEMENT` (**Can manage data**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the following Data control privileges may be required:   - `CAN_MANAGE_CUSTOM_CALENDAR`(**Can manage custom calendars**) - `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) - `CAN_MANAGE_WORKSHEET_VIEWS_TABLES` (**Can manage data models**)  To download the connection metadata difference between ThoughtSpot and CDW, pass the connection GUID as `connection_identifier` in the API request.      
   * @param connectionIdentifier GUID of the connection
   */
  downloadConnectionMetadataChanges(connectionIdentifier, _options) {
    const requestContextPromise = this.requestFactory.downloadConnectionMetadataChanges(connectionIdentifier, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.downloadConnectionMetadataChanges(rsp)));
    }));
  }
  /**
   *   Version: 9.9.0.cl or later   Validates the difference in connection metadata between CDW and ThoughtSpot.  Requires `DATAMANAGEMENT` (**Can manage data**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the following Data control privileges may be required:  - `CAN_MANAGE_CUSTOM_CALENDAR`(**Can manage custom calendars**) - `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) - `CAN_MANAGE_WORKSHEET_VIEWS_TABLES` (**Can manage data models**)  Returns a boolean indicating whether there is any difference between the connection metadata at ThoughtSpot and CDW.  To get the connection metadata difference status, pass the connection GUID as `connection_identifier` in the API request.      
   * @param connectionIdentifier GUID of the connection
   */
  fetchConnectionDiffStatus(connectionIdentifier, _options) {
    const requestContextPromise = this.requestFactory.fetchConnectionDiffStatus(connectionIdentifier, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.fetchConnectionDiffStatus(rsp)));
    }));
  }
  /**
   *   Version: 9.2.0.cl or later   Gets connection objects. Requires `DATAMANAGEMENT` (**Can manage data**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) privilege is required.  - To get a list of all connections available in the ThoughtSpot system, send the API request without any attributes in the request body. - To get the connection objects for a specific type of data warehouse, specify the type in `data_warehouse_types`. - To fetch details of a connection object, specify the connection object GUID or name. The `name_pattern` attribute allows passing partial text with `%` for a wildcard match. - To get details of the database, schemas, tables, or columns from a data connection object, specify `data_warehouse_object_type`. - To get a specific database, schema, table, or column from a connection object, define the object type in `data_warehouse_object_type` and object properties in the `data_warehouse_objects` array. For example, to search for a column, you must pass the database, schema, and table names in the API request.   Note that in the following example, object properties are set in a hierarchical order (`database` > `schema` > `table` > `column`).  ``` {   \"connections\": [     {       \"identifier\": \"b9d1f2ef-fa65-4a4b-994e-30fa2d57b0c2\",       \"data_warehouse_objects\": [         {           \"database\": \"NEBULADEV\",           \"schema\": \"INFORMATION_SCHEMA\",           \"table\": \"APPLICABLE_ROLES\",           \"column\": \"ROLE_NAME\"         }       ]     }   ],   \"data_warehouse_object_type\": \"COLUMN\" } ```  - To fetch data by `configuration`, specify `data_warehouse_object_type`. For example, to fetch columns from the `DEVELOPMENT` database, specify the `data_warehouse_object_type` as `DATABASE` and define the `configuration` string as `{\"database\":\"DEVELOPMENT\"}`. To get column data for a specific table, specify the table, for example,`{\"database\":\"RETAILAPPAREL\",\"table\":\"PIPES\"}`. - To query connections by `authentication_type`, specify `data_warehouse_object_type`. Supported values for `authentication_type` are:   - `SERVICE_ACCOUNT`: For connections that require service account credentials to authenticate to the Cloud Data Warehouse and fetch data.   - `OAUTH`: For connections that require OAuth credentials to authenticate to the Cloud Data Warehouse and fetch data. Teradata, Oracle, and Presto Cloud Data Warehouses do not support the OAuth authentication type.   - `IAM`: For connections that have the IAM OAuth set up. This authentication type is supported on Amazon Redshift connections only.   - `EXTOAUTH`: For connections that have external OAuth set up. ThoughtSpot supports external [OAuth with Microsoft Azure Active Directory (AD)](https://docs.thoughtspot.com/cloud/latest/ connections-snowflake-azure-ad-oauth) and [Okta for Snowflake data connections](https://docs.thoughtspot.com/cloud/latest/connections-snowflake-okta-oauth). - To include more details about connection objects in the API response, set `include_details` to `true`. - You can also sort the output by field names and filter connections by tags.  **NOTE**: When filtering connection records by parameters other than `data_warehouse_types` or `tag_identifiers`, ensure that you set `record_size` to `-1` and `record_offset` to `0` for precise results.      
   * @param searchConnectionRequest 
   */
  searchConnection(searchConnectionRequest, _options) {
    const requestContextPromise = this.requestFactory.searchConnection(searchConnectionRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.searchConnection(rsp)));
    }));
  }
  /**
   *   Version: 9.2.0.cl or later   **Important**: This endpoint is deprecated and will be removed from ThoughtSpot in September 2025. ThoughtSpot strongly recommends using the [Update connection V2](#/http/api-endpoints/connections/update-connection-v2) endpoint to update your connection objects.  #### Usage guidelines  Updates a connection object.    Requires `DATAMANAGEMENT` (**Can manage data**) and edit permissions to the connection object, or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) privilege is required.  To update a connection object, pass these parameters in your API request:  1. GUID of the connection object. 2. If you are updating tables or database schema of a connection object:    a. Add the updated JSON map of metadata with database, schema, and tables in `data_warehouse_config`.    b. Set `validate` to `true`. 3. If you are updating a configuration attribute, connection name, or description, you can set `validate` to `false`.      
   * @param updateConnectionRequest 
   */
  updateConnection(updateConnectionRequest, _options) {
    const requestContextPromise = this.requestFactory.updateConnection(updateConnectionRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.updateConnection(rsp)));
    }));
  }
  /**
   *   Version: 10.4.0.cl or later   Updates a connection object.  Requires `DATAMANAGEMENT` (**Can manage data**) and edit permissions to the connection object, or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) privilege is required.  To update a connection object, pass these parameters in your API request:  1. GUID of the connection object. 2. If you are updating tables or database schema of a connection object:    a. Add the updated JSON map of metadata with database, schema, and tables in `data_warehouse_config`.    b. Set `validate` to `true`. 3. If you are updating a configuration attribute, connection name, or description, you can set `validate` to `false`.      
   * @param connectionIdentifier Unique ID or name of the connection.
   * @param updateConnectionV2Request 
   */
  updateConnectionV2(connectionIdentifier, updateConnectionV2Request, _options) {
    const requestContextPromise = this.requestFactory.updateConnectionV2(connectionIdentifier, updateConnectionV2Request, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.updateConnectionV2(rsp)));
    }));
  }
};
var ObservableCustomActionApi = class {
  constructor(configuration, requestFactory, responseProcessor) {
    this.configuration = configuration;
    this.requestFactory = requestFactory || new CustomActionApiRequestFactory(configuration);
    this.responseProcessor = responseProcessor || new CustomActionApiResponseProcessor();
  }
  /**
   *   Version: 9.6.0.cl or later   Creates a custom action that appears as a menu action on a saved Answer or Liveboard visualization.  Requires `DEVELOPER` (**Has Developer privilege**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `DEVELOPER` (**Has developer privilege**) privilege is required.  #### Usage Guidelines  The API lets you create the following types of custom actions:  * URL-based action        Allows pushing data to an external URL. * Callback action           Triggers a callback to the host application and initiates a response payload on an embedded ThoughtSpot instance.  By default, custom actions are visible to only administrator or developer users. To make a custom action available to other users, and specify the groups in `group_identifiers`.  By default, the custom action is set as a _global_ action on all visualizations and saved Answers. To assign a custom action to specific Liveboard visualization, saved Answer, or Worksheet, set `visibility` to `false` in `default_action_config` property and specify the GUID or name of the object in `associate_metadata`.  For more information, see [Custom actions](https://developers.thoughtspot.com/docs/custom-action-intro).      
   * @param createCustomActionRequest 
   */
  createCustomAction(createCustomActionRequest, _options) {
    const requestContextPromise = this.requestFactory.createCustomAction(createCustomActionRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.createCustomAction(rsp)));
    }));
  }
  /**
   *   Version: 9.6.0.cl or later   Removes the custom action specified in the API request.  Requires `DEVELOPER` (**Has Developer privilege**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `DEVELOPER` (**Has developer privilege**) privilege is required.      
   * @param customActionIdentifier Unique ID or name of the custom action.
   */
  deleteCustomAction(customActionIdentifier, _options) {
    const requestContextPromise = this.requestFactory.deleteCustomAction(customActionIdentifier, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.deleteCustomAction(rsp)));
    }));
  }
  /**
   *   Version: 9.6.0.cl or later   Gets custom actions configured on the cluster.  Requires `DEVELOPER` (**Has Developer privilege**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `DEVELOPER` (**Has developer privilege**) privilege is required.      
   * @param searchCustomActionsRequest 
   */
  searchCustomActions(searchCustomActionsRequest, _options) {
    const requestContextPromise = this.requestFactory.searchCustomActions(searchCustomActionsRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.searchCustomActions(rsp)));
    }));
  }
  /**
   *   Version: 9.6.0.cl or later   Updates a custom action.  Requires `DEVELOPER` (**Has Developer privilege**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `DEVELOPER` (**Has developer privilege**) privilege is required.  #### Usage Guidelines  The API allows you to modify the following properties:  * Name of the custom action * Action availability to groups * Association to metadata objects * Authentication settings for a URL-based action  For more information, see [Custom actions](https://developers.thoughtspot.com/docs/custom-action-intro).      
   * @param customActionIdentifier Unique ID or name of the custom action.
   * @param updateCustomActionRequest 
   */
  updateCustomAction(customActionIdentifier, updateCustomActionRequest, _options) {
    const requestContextPromise = this.requestFactory.updateCustomAction(customActionIdentifier, updateCustomActionRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.updateCustomAction(rsp)));
    }));
  }
};
var ObservableDBTApi = class {
  constructor(configuration, requestFactory, responseProcessor) {
    this.configuration = configuration;
    this.requestFactory = requestFactory || new DBTApiRequestFactory(configuration);
    this.responseProcessor = responseProcessor || new DBTApiResponseProcessor();
  }
  /**
   *   Version: 9.9.0.cl or later   Creates a DBT connection object in ThoughtSpot.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege or `DATAMANAGEMENT` (**Can manage data**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the following Data control privileges may be required:  - `CAN_MANAGE_CUSTOM_CALENDAR`(**Can manage custom calendars**) - `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) - `CAN_MANAGE_WORKSHEET_VIEWS_TABLES` (**Can manage data models**)  #### About create DBT connection DBT connection in ThoughtSpot is used by the user to define DBT credentials for cloud . The API needs  embrace connection, embrace database name, DBT url, import type, DBT account identifier, DBT project identifier, DBT access token and environment details (or) embrace connection, embrace database name, import type, file_content to create a connection object. To know more about DBT, see ThoughtSpot Product Documentation.      
   * @param dbtConnectionRequest 
   */
  dbtConnection(dbtConnectionRequest, _options) {
    const requestContextPromise = this.requestFactory.dbtConnection(dbtConnectionRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.dbtConnection(rsp)));
    }));
  }
  /**
   *   Version: 9.9.0.cl or later   Resynchronize the existing list of models, tables, worksheet tml’s and import them to Thoughtspot based on the DBT connection object.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege or `DATAMANAGEMENT` (**Can manage data**) privilege, along with an existing DBT connection. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the following data control privileges may be required:  - `CAN_MANAGE_CUSTOM_CALENDAR`(**Can manage custom calendars**) - `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) - `CAN_MANAGE_WORKSHEET_VIEWS_TABLES` (**Can manage data models**)      
   * @param dbtGenerateSyncTmlRequest 
   */
  dbtGenerateSyncTml(dbtGenerateSyncTmlRequest, _options) {
    const requestContextPromise = this.requestFactory.dbtGenerateSyncTml(dbtGenerateSyncTmlRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.dbtGenerateSyncTml(rsp)));
    }));
  }
  /**
   *   Version: 9.9.0.cl or later   Generate required table and worksheet and import them.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege or `DATAMANAGEMENT` (**Can manage data**) privilege, along with an existing DBT connection. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the following data control privileges may be required:  - `CAN_MANAGE_CUSTOM_CALENDAR`(**Can manage custom calendars**) - `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) - `CAN_MANAGE_WORKSHEET_VIEWS_TABLES` (**Can manage data models**)  #### About generate TML Models and Worksheets to be imported can be selected by the user as part of the API.      
   * @param dbtGenerateTmlRequest 
   */
  dbtGenerateTml(dbtGenerateTmlRequest, _options) {
    const requestContextPromise = this.requestFactory.dbtGenerateTml(dbtGenerateTmlRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.dbtGenerateTml(rsp)));
    }));
  }
  /**
   *   Version: 9.9.0.cl or later   Gets a list of DBT connection objects by user and organization, available on the ThoughtSpot system.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege or `DATAMANAGEMENT` (**Can manage data**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the following Data control privileges may be required:  - `CAN_MANAGE_CUSTOM_CALENDAR`(**Can manage custom calendars**) - `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) - `CAN_MANAGE_WORKSHEET_VIEWS_TABLES` (**Can manage data models**)  #### About search DBT connection To get details of a specific DBT connection identifier, database connection identifier, database connection name, database name, project name, project identifier, environment identifier , import type and author.      
   */
  dbtSearch(_options) {
    const requestContextPromise = this.requestFactory.dbtSearch(_options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.dbtSearch(rsp)));
    }));
  }
  /**
   *   Version: 9.9.0.cl or later   Removes the specified DBT connection object from the ThoughtSpot system.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) or `DATAMANAGEMENT` (**Can manage data ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the following Data control privileges may be required:  - `CAN_MANAGE_CUSTOM_CALENDAR`(**Can manage custom calendars**) - `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) - `CAN_MANAGE_WORKSHEET_VIEWS_TABLES` (**Can manage data models**)      
   * @param dbtConnectionIdentifier Unique ID of the DBT Connection.
   */
  deleteDbtConnection(dbtConnectionIdentifier, _options) {
    const requestContextPromise = this.requestFactory.deleteDbtConnection(dbtConnectionIdentifier, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.deleteDbtConnection(rsp)));
    }));
  }
  /**
   *   Version: 9.9.0.cl or later   Updates a DBT connection object.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege or `DATAMANAGEMENT` (**Can manage data ThoughtSpot**) privilege, along with an existing DBT connection. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the following data control privileges may be required:  - `CAN_MANAGE_CUSTOM_CALENDAR`(**Can manage custom calendars**) - `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) - `CAN_MANAGE_WORKSHEET_VIEWS_TABLES` (**Can manage data models**)  #### About update DBT connection You can modify DBT connection object properties such as embrace connection name, embrace database name, import type, account identifier, access token, project identifier and environment (or) embrace connection, embrace database name, import type, file_content settings.      
   * @param updateDbtConnectionRequest 
   */
  updateDbtConnection(updateDbtConnectionRequest, _options) {
    const requestContextPromise = this.requestFactory.updateDbtConnection(updateDbtConnectionRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.updateDbtConnection(rsp)));
    }));
  }
};
var ObservableDataApi = class {
  constructor(configuration, requestFactory, responseProcessor) {
    this.configuration = configuration;
    this.requestFactory = requestFactory || new DataApiRequestFactory(configuration);
    this.responseProcessor = responseProcessor || new DataApiResponseProcessor();
  }
  /**
   *   Version: 9.0.0.cl or later   Fetches data from a saved Answer.  Requires at least view access to the saved Answer.  The `record_size` attribute determines the number of records to retrieve in an API call. For more information about pagination, record size, and maximum row limit, see [Pagination and record size settings](https://developers.thoughtspot.com/docs/fetch-data-and-report-apis#_pagination_settings_for_data_and_report_apis).     
   * @param fetchAnswerDataRequest 
   */
  fetchAnswerData(fetchAnswerDataRequest, _options) {
    const requestContextPromise = this.requestFactory.fetchAnswerData(fetchAnswerDataRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.fetchAnswerData(rsp)));
    }));
  }
  /**
   *   Version: 9.0.0.cl or later   Gets data from a Liveboard object and its visualization.    Requires at least view access to the Liveboard.  #### Usage guidelines  In the request body, specify the GUID or name of the Liveboard. To get data for specific visualizations, add the GUIDs or names of the visualizations in the API request.  To include unsaved changes in the report, pass the `transient_pinboard_content` script generated from the `getExportRequestForCurrentPinboard` method in the Visual Embed SDK. Upon successful execution, the API returns the report with unsaved changes. If the new Liveboard experience mode, the transient content includes ad hoc changes to visualizations such as sorting, toggling of legends, and data drill down.  For more information, and see [Liveboard data API](https://developers.thoughtspot.com/docs/fetch-data-and-report-apis#_fetch_liveboard_data_api).     
   * @param fetchLiveboardDataRequest 
   */
  fetchLiveboardData(fetchLiveboardDataRequest, _options) {
    const requestContextPromise = this.requestFactory.fetchLiveboardData(fetchLiveboardDataRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.fetchLiveboardData(rsp)));
    }));
  }
  /**
   *   Version: 9.0.0.cl or later   Generates an Answer from a given data source.  Requires at least view access to the data source object (Worksheet or View).  #### Usage guidelines  To search data, specify the data source GUID in `logical_table_identifier`. The data source can be a Worksheet, View, Table, or SQL view.  Pass search tokens in the `query_string` attribute in the API request as shown in the following example:  ``` {   \"query_string\": \"[sales] by [store]\",   \"logical_table_identifier\": \"cd252e5c-b552-49a8-821d-3eadaa049cca\", } ```  For more information about the `query_string` format and data source attribute, see [Search data API](https://developers.thoughtspot.com/docs/fetch-data-and-report-apis#_search_data_api).    The `record_size` attribute determines the number of records to retrieve in an API call. For more information about pagination, record size, and maximum row limit, see [Pagination and record size settings](https://developers.thoughtspot.com/docs/fetch-data-and-report-apis#_pagination_settings_for_data_and_report_api).       
   * @param searchDataRequest 
   */
  searchData(searchDataRequest, _options) {
    const requestContextPromise = this.requestFactory.searchData(searchDataRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.searchData(rsp)));
    }));
  }
};
var ObservableEmailCustomisationApi = class {
  constructor(configuration, requestFactory, responseProcessor) {
    this.configuration = configuration;
    this.requestFactory = requestFactory || new EmailCustomisationApiRequestFactory(configuration);
    this.responseProcessor = responseProcessor || new EmailCustomisationApiResponseProcessor();
  }
  /**
   *  Version: 10.10.0.cl or later   Creates a custom configuration for the email customisation  #### Pre-requisites  Requires `DEVELOPER` (**has developer privilege**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `_Has developer privilege` privilege is required. Coms should be enabled on the cluster.  #### Usage guidelines  To create a custom confuguration:  1. Pass these parameters in your API request.  - A JSON map of configuration attributes `template_properties`. The following example shows the configuration attribures for a csutom configuration:  ``` {     {     \"logoUrl\": \"<logo_url>\",     \"homeUrl\": \"<home_url>\",     \"productName\": \"<Company Name in the Mail>\",     \"footerAddress\": \"<address to be visible in the footer>\",     \"ctaButtonBgColor\": \"#444DEA\",     \"ctaTextFontColor\": \"#FFFFFF\",     \"primaryBgColor\": \"#D3DEF0\",     \"hideMobileAppNudge\": <true/false>,     \"hideTsVocabularyDefinitions\": <true/false>e,     \"hideProductName\": <true/false>,     \"hideFooterPhone\": <true/false>,     \"hideFooterAddress\": <true/false>,     \"hidePrivacyPolicy\": <true/false>,     \"hideManageNotification\": <true/false>,     \"fontfamily\": \"<to maintain a single font in the entire email>\"   } } ```      
   * @param createEmailCustomisationRequest 
   */
  createEmailCustomisation(createEmailCustomisationRequest, _options) {
    const requestContextPromise = this.requestFactory.createEmailCustomisation(createEmailCustomisationRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.createEmailCustomisation(rsp)));
    }));
  }
  /**
   *  Version: 10.10.0.cl or later   Deletes the configuration for the email customisation.  #### Pre-requisites  Requires `DEVELOPER` (**has developer privilege**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `_Has developer privilege` privilege is required. Coms should be enabled on the cluster.  #### Usage guidelines  Deletes the configuration available for the cluster/org. Pass the `template_identifier` in the API request.  Note: `template_identifier` can be fetched from search API request.      
   * @param templateIdentifier Unique ID or name of the email customization.
   */
  deleteEmailCustomisation(templateIdentifier, _options) {
    const requestContextPromise = this.requestFactory.deleteEmailCustomisation(templateIdentifier, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.deleteEmailCustomisation(rsp)));
    }));
  }
  /**
   *  Version: 10.10.0.cl or later   Search the email customisation configuration if any set for the ThoughtSpot system.  #### Pre-requisites  Requires `DEVELOPER` (**has developer privilege**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `_Has developer privilege` privilege is required. Coms should be enabled on the cluster.  #### Usage guidelines  To get the list of configurations set in the cluster/org.      
   */
  searchEmailCustomisation(_options) {
    const requestContextPromise = this.requestFactory.searchEmailCustomisation(_options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.searchEmailCustomisation(rsp)));
    }));
  }
  /**
   *  Version: 10.10.0.cl or later   Validates the email customisation configuration if any set for the ThoughtSpot system.  #### Pre-requisites  Requires `DEVELOPER` (**has developer privilege**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `_Has developer privilege` privilege is required. Coms should be enabled on the cluster.      
   */
  validateEmailCustomisation(_options) {
    const requestContextPromise = this.requestFactory.validateEmailCustomisation(_options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.validateEmailCustomisation(rsp)));
    }));
  }
};
var ObservableGroupsApi = class {
  constructor(configuration, requestFactory, responseProcessor) {
    this.configuration = configuration;
    this.requestFactory = requestFactory || new GroupsApiRequestFactory(configuration);
    this.responseProcessor = responseProcessor || new GroupsApiResponseProcessor();
  }
  /**
   *   Version: 9.0.0.cl or later   Creates a group object in ThoughtSpot.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `GROUP_ADMINISTRATION` (**Can manage groups**) privilege is required.  #### About groups Groups in ThoughtSpot are used by the administrators to define privileges and organize users based on their roles and access requirements. To know more about groups and privileges, see [ThoughtSpot Product Documentation](https://docs.thoughtspot.com/cloud/latest/groups-privileges).  #### Supported operations  The API endpoint lets you perform the following operations:  * Assign privileges * Add users * Define sharing visibility * Add sub-groups * Assign a default Liveboard      
   * @param createUserGroupRequest 
   */
  createUserGroup(createUserGroupRequest, _options) {
    const requestContextPromise = this.requestFactory.createUserGroup(createUserGroupRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.createUserGroup(rsp)));
    }));
  }
  /**
   *   Version: 9.0.0.cl or later   Removes the specified group object from the ThoughtSpot system.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `GROUP_ADMINISTRATION` (**Can manage groups**) privilege is required.      
   * @param groupIdentifier GUID or name of the group.
   */
  deleteUserGroup(groupIdentifier, _options) {
    const requestContextPromise = this.requestFactory.deleteUserGroup(groupIdentifier, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.deleteUserGroup(rsp)));
    }));
  }
  /**
   *   Version: 9.0.0.cl or later   Imports group objects from external databases into ThoughtSpot.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `GROUP_ADMINISTRATION` (**Can manage groups**) privilege is required.  During the import operation:  * If the specified group is not available in ThoughtSpot, it will be added to ThoughtSpot. * If `delete_unspecified_groups` is set to `true`, the groups not specified in the API request, excluding administrator and system user groups, are deleted. * If the specified groups are already available in ThoughtSpot, the object properties of these groups are modified and synchronized as per the input data in the API request.  A successful API call returns the object that represents the changes made in the ThoughtSpot system.      
   * @param importUserGroupsRequest 
   */
  importUserGroups(importUserGroupsRequest, _options) {
    const requestContextPromise = this.requestFactory.importUserGroups(importUserGroupsRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.importUserGroups(rsp)));
    }));
  }
  /**
   *   Version: 9.0.0.cl or later   Gets a list of user group objects from the ThoughtSpot system.  To get details of a specific user group, specify the user group GUID or name. You can also filter the API response based on User ID, Org ID, Role ID, type of group, sharing visibility, privileges assigned to the group, and the Liveboard IDs assigned to the users in the group.  Available to all users. Users with `ADMINISTRATION` (**Can administer ThoughtSpot**) privileges can view all users properties.  If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `GROUP_ADMINISTRATION` (**Can manage groups**) privilege is required.  **NOTE**: If you do not get precise results, try setting `record_size` to `-1` and `record_offset` to `0`.      
   * @param searchUserGroupsRequest 
   */
  searchUserGroups(searchUserGroupsRequest, _options) {
    const requestContextPromise = this.requestFactory.searchUserGroups(searchUserGroupsRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.searchUserGroups(rsp)));
    }));
  }
  /**
   *   Version: 9.0.0.cl or later   Updates the properties of a group object in ThoughtSpot.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `GROUP_ADMINISTRATION` (**Can manage groups**) privilege is required.  #### Supported operations  This API endpoint lets you perform the following operations in a single API request:  * Edit [privileges](https://developers.thoughtspot.com/docs/?pageid=api-user-management#group-privileges) * Add or remove users * Change sharing visibility settings * Add or remove sub-groups * Assign a default Liveboard  or update the existing settings      
   * @param groupIdentifier GUID or name of the group.
   * @param updateUserGroupRequest 
   */
  updateUserGroup(groupIdentifier, updateUserGroupRequest, _options) {
    const requestContextPromise = this.requestFactory.updateUserGroup(groupIdentifier, updateUserGroupRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.updateUserGroup(rsp)));
    }));
  }
};
var ObservableLogApi = class {
  constructor(configuration, requestFactory, responseProcessor) {
    this.configuration = configuration;
    this.requestFactory = requestFactory || new LogApiRequestFactory(configuration);
    this.responseProcessor = responseProcessor || new LogApiResponseProcessor();
  }
  /**
   *   Version: 9.0.0.cl or later   Fetches security audit logs.    Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the [Admin Control](https://developers.thoughtspot.com/docs/rbac#_admin_control) privileges are required.   #### Usage guidelines  By default, the API retrieves logs for the last 24 hours. You can set a custom duration in EPOCH time. Make sure the log duration specified in your API request doesn’t exceed 24 hours. If you must fetch logs for a longer time range, modify the duration and make multiple sequential API requests.  Upon successful execution, the API returns logs with the following information: * timestamp of the event * event ID * event type * name and GUID of the user * IP address of ThoughtSpot instance  For more information see [Audit logs Documentation](https://developers.thoughtspot.com/docs/audit-logs).      
   * @param fetchLogsRequest 
   */
  fetchLogs(fetchLogsRequest, _options) {
    const requestContextPromise = this.requestFactory.fetchLogs(fetchLogsRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.fetchLogs(rsp)));
    }));
  }
};
var ObservableMetadataApi = class {
  constructor(configuration, requestFactory, responseProcessor) {
    this.configuration = configuration;
    this.requestFactory = requestFactory || new MetadataApiRequestFactory(configuration);
    this.responseProcessor = responseProcessor || new MetadataApiResponseProcessor();
  }
  /**
   *  Convert worksheets to models    Version: 10.6.0.cl or later   ## Prerequisites - **Privileges Required:**   - `DATAMANAGEMENT` (Can manage data) or `ADMINISTRATION` (Can administer ThoughtSpot). - **Additional Privileges (if RBAC is enabled):**   - `CAN_MANAGE_WORKSHEET_VIEWS_TABLES` (Can manage data models).  ---  ## Usage Guidelines  ### Parameters  1. **worksheet_ids**      - **Description:** A comma-separated list of GUIDs (Globally Unique Identifiers) specifying the Worksheets to be converted.      - **Usage:**        - Used only when `convert_all` is set to `false`.        - Leave empty or omit when `convert_all` is set to `true`.  2. **exclude_worksheet_ids**      - **Description:** A comma-separated list of GUIDs specifying Worksheets to be excluded from conversion.      - **Usage:**        - Useful when `convert_all` is set to `true` and specific Worksheets should not be converted.  3. **convert_all**      - **Description:** Sets the scope of conversion.    - **Options:**        - `true`: Converts all Worksheets in the system, except those specified in `exclude_worksheet_ids`.        - `false`: Converts only the Worksheets listed in `worksheet_ids`.  4. **apply_changes**      - **Description:** Specifies whether to apply changes directly to ThoughtSpot or to generate a preview before applying any changes.Used for validation of conversion.    - **Options:**        - `true`: Applies conversion changes directly to ThoughtSpot.      - `false`: Generates only a preview of the changes and does not apply any changes to ThoughtSpot  ---  ## Best Practices  1. **Backup Before Conversion:**      Always export metadata as a backup before initiating the conversion process  2. **Partial Conversion for Testing:**      Test the conversion process by setting `convert_all` to `false` and specifying a small number of `worksheet_ids`.  3. **Verify Dependencies:**      Check for dependent objects, such as Tables and Connections, to avoid invalid references.  4. **Review Changes:**      Use `apply_changes: false` to preview the impact of the conversion before applying changes.  ---  ## Examples  ### Convert Specific Worksheets ```json {   \"worksheet_ids\": [\"guid1\", \"guid2\", \"guid3\"],   \"exclude_worksheet_ids\": [],   \"convert_all\": false,   \"apply_changes\": true } ```  ### Convert All Accessible Worksheets ```json {   \"worksheet_ids\": [],   \"exclude_worksheet_ids\": [],   \"convert_all\": true,   \"apply_changes\": true } ```  ### Exclude Specific Worksheets While Converting All Accessible Worksheets ```json {   \"worksheet_ids\": [],   \"exclude_worksheet_ids\": [\"abc\"],   \"convert_all\": true,   \"apply_changes\": true } ```     
   * @param convertWorksheetToModelRequest 
   */
  convertWorksheetToModel(convertWorksheetToModelRequest, _options) {
    const requestContextPromise = this.requestFactory.convertWorksheetToModel(convertWorksheetToModelRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.convertWorksheetToModel(rsp)));
    }));
  }
  /**
   *  Makes a copy of an Answer or Liveboard saved in Atlas    Version: 10.3.0.cl or later   Creates a copy of a metadata object.  Requires at least view access to the metadata object being copied.  Upon successful execution, the API creates a copy of the metadata object specified in the API request and returns the ID of the new object.      
   * @param copyObjectRequest 
   */
  copyObject(copyObjectRequest, _options) {
    const requestContextPromise = this.requestFactory.copyObject(copyObjectRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.copyObject(rsp)));
    }));
  }
  /**
   *   Version: 9.0.0.cl or later   Removes the specified metadata object from the ThoughtSpot system.  Requires edit access to the metadata object.       
   * @param deleteMetadataRequest 
   */
  deleteMetadata(deleteMetadataRequest, _options) {
    const requestContextPromise = this.requestFactory.deleteMetadata(deleteMetadataRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.deleteMetadata(rsp)));
    }));
  }
  /**
   *   Version: 9.0.0.cl or later   Exports the [TML](https://docs.thoughtspot.com/cloud/latest/tml) representation of metadata objects in JSON or YAML format.  Requires `DATADOWNLOADING` (**Can download Data**) and at least view access to the metadata object.  #### Usage guidelines  * You can export one or several objects by passing metadata object GUIDs in the `metadata` array. * When exporting TML content for a Liveboard or Answer object, you can set `export_associated` to `true` to retrieve TML content for underlying Worksheets, Tables, or Views, including the GUID of each object within the headers. When   `export_associated` is set to `true`, consider retrieving one metadata object at a time. * Set `export_fqns` to `true` to add FQNs of the referenced objects in the TML content. For example, if you send an API request to retrieve TML for a Liveboard and its associated objects, the API returns the TML content with FQNs of the referenced Worksheet. Exporting TML with FQNs is useful if ThoughtSpot has multiple objects with the same name and you want to eliminate ambiguity when importing TML files into ThoughtSpot. It eliminates the need for adding FQNs of the referenced objects manually during the import operation. * To export only the TML of feedbacks associated with an object, set the GUID of the object as `identifier`, and set the `type` as `FEEDBACK` in the `metadata` array. * To export the TML of an object along with the feedbacks associated with it, set the GUID of the object as `identifier`, set the `type` as `LOGIAL_TABLE` in the `metadata` array, and set `export_with_associated_feedbacks` in `export_options` to true.  For more information, see [TML Documentation](https://developers.thoughtspot.com/docs/tml#_export_a_tml).  For more information on feedbacks, see [Feedback Documentation](https://docs.thoughtspot.com/cloud/latest/sage-feedback).     
   * @param exportMetadataTMLRequest 
   */
  exportMetadataTML(exportMetadataTMLRequest, _options) {
    const requestContextPromise = this.requestFactory.exportMetadataTML(exportMetadataTMLRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.exportMetadataTML(rsp)));
    }));
  }
  /**
   *   Version: 10.1.0.cl or later   Exports the [TML](https://docs.thoughtspot.com/cloud/latest/tml) representation of metadata objects in JSON or YAML format.  ### **Permissions Required**  Requires `DATAMANAGEMENT` (**Can manage data**) and `USERMANAGEMENT` (**Can manage users**) privileges.  #### **Usage Guidelines**  This API is only applicable for `USER`, `GROUP`, and `ROLES` metadata types.  - `batch_offset` Indicates the starting position within the complete dataset from which the API should begin returning objects. Useful for paginating results efficiently. - `batch_size` Specifies the number of objects or items to retrieve in a single request. Helps control response size for better performance. - `edoc_format` Defines the format of the TML content. The exported metadata can be in JSON or YAML format. - `export_dependent` Specifies whether to include dependent metadata objects in the export. Ensures related objects are also retrieved if needed. - `all_orgs_override` Indicates whether the export operation applies across all organizations. Useful for multi-tenant environments where cross-org exports are required.      
   * @param exportMetadataTMLBatchedRequest 
   */
  exportMetadataTMLBatched(exportMetadataTMLBatchedRequest, _options) {
    const requestContextPromise = this.requestFactory.exportMetadataTMLBatched(exportMetadataTMLBatchedRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.exportMetadataTMLBatched(rsp)));
    }));
  }
  /**
   *   Version: 9.0.0.cl or later   Fetches the underlying SQL query data for an Answer object.  Requires at least view access to the Answer object.  Upon successful execution, the API returns the SQL queries for the specified object as shown in this example: ``` {    \"metadata_id\":\"8fbe44a8-46ad-4b16-8d39-184b2fada490\",    \"metadata_name\":\"Total sales\",    \"metadata_type\":\"ANSWER\",    \"sql_queries\":[       {          \"metadata_id\":\"8fbe44a8-46ad-4b16-8d39-184b2fada490\",          \"metadata_name\":\"Total sales -test\",          \"sql_query\":\"SELECT \\n  \\\"ta_1\\\".\\\"REGION\\\" \\\"ca_1\\\", \\n  \\\"ta_2\\\".\\\"PRODUCTNAME\\\" \\\"ca_2\\\", \\n  \\\"ta_1\\\".\\\"STORENAME\\\" \\\"ca_3\\\", \\n  CASE\\n    WHEN sum(\\\"ta_3\\\".\\\"SALES\\\") IS NOT NULL THEN sum(\\\"ta_3\\\".\\\"SALES\\\")\\n    ELSE 0\\n  END \\\"ca_4\\\", \\n  CASE\\n    WHEN sum(\\\"ta_3\\\".\\\"QUANTITYPURCHASED\\\") IS NOT NULL THEN sum(\\\"ta_3\\\".\\\"QUANTITYPURCHASED\\\")\\n    ELSE 0\\n  END \\\"ca_5\\\"\\nFROM \\\"RETAILAPPAREL\\\".\\\"PUBLIC\\\".\\\"FACT_RETAPP_SALES\\\" \\\"ta_3\\\"\\n  JOIN \\\"RETAILAPPAREL\\\".\\\"PUBLIC\\\".\\\"DIM_RETAPP_STORES\\\" \\\"ta_1\\\"\\n    ON \\\"ta_3\\\".\\\"STOREID\\\" = \\\"ta_1\\\".\\\"STOREID\\\"\\n  JOIN \\\"RETAILAPPAREL\\\".\\\"PUBLIC\\\".\\\"DIM_RETAPP_PRODUCTS\\\" \\\"ta_2\\\"\\n    ON \\\"ta_3\\\".\\\"PRODUCTID\\\" = \\\"ta_2\\\".\\\"PRODUCTID\\\"\\nGROUP BY \\n  \\\"ca_1\\\", \\n  \\\"ca_2\\\", \\n  \\\"ca_3\\\"\\n\"       }    ] } ```      
   * @param fetchAnswerSqlQueryRequest 
   */
  fetchAnswerSqlQuery(fetchAnswerSqlQueryRequest, _options) {
    const requestContextPromise = this.requestFactory.fetchAnswerSqlQuery(fetchAnswerSqlQueryRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.fetchAnswerSqlQuery(rsp)));
    }));
  }
  /**
   *   Version: 10.4.0.cl or later   Gets information about the status of the TML async import task scheduled using the `/api/rest/2.0/metadata/tml/async/import` API call.  To fetch the task details, specify the ID of the TML async import task.    Requires access to the task ID. The API allows users who initiated the asynchronous TML import via `/api/rest/2.0/metadata/tml/async/import` to view the status of their tasks.  Users with administration privilege can view the status of all import tasks initiated by the users in their Org.  #### Usage guidelines  See [TML API Documentation](https://developers.thoughtspot.com/docs/tml#_fetch_status_of_the_tml_import_task) for usage guidelines.     
   * @param fetchAsyncImportTaskStatusRequest 
   */
  fetchAsyncImportTaskStatus(fetchAsyncImportTaskStatusRequest, _options) {
    const requestContextPromise = this.requestFactory.fetchAsyncImportTaskStatus(fetchAsyncImportTaskStatusRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.fetchAsyncImportTaskStatus(rsp)));
    }));
  }
  /**
   *   Version: 9.0.0.cl or later   Fetches the underlying SQL query data for a Liveboard object and its visualizations.  Requires at least view access to the Liveboard object.  To get SQL query data for a Liveboard, specify the GUID of the Liveboard. Optionally, you can add an array of visualization GUIDs to retrieve the SQL query data for visualizations in the Liveboard.  Upon successful execution, the API returns the SQL queries for the specified object as shown in this example: ``` {   \"metadata_id\": \"fa68ae91-7588-4136-bacd-d71fb12dda69\",   \"metadata_name\": \"Total Sales\",   \"metadata_type\": \"LIVEBOARD\",   \"sql_queries\": [     {       \"metadata_id\": \"b3b6d2b9-089a-490c-8e16-b144650b7843\",       \"metadata_name\": \"Total quantity purchased, Total sales by region\",       \"sql_query\": \"SELECT \\n  \\\"ta_1\\\".\\\"REGION\\\" \\\"ca_1\\\", \\n  CASE\\n    WHEN sum(\\\"ta_2\\\".\\\"QUANTITYPURCHASED\\\") IS NOT NULL THEN sum(\\\"ta_2\\\".\\\"QUANTITYPURCHASED\\\")\\n    ELSE 0\\n  END \\\"ca_2\\\", \\n  CASE\\n    WHEN sum(\\\"ta_2\\\".\\\"SALES\\\") IS NOT NULL THEN sum(\\\"ta_2\\\".\\\"SALES\\\")\\n    ELSE 0\\n  END \\\"ca_3\\\"\\nFROM \\\"RETAILAPPAREL\\\".\\\"PUBLIC\\\".\\\"FACT_RETAPP_SALES\\\" \\\"ta_2\\\"\\n  JOIN \\\"RETAILAPPAREL\\\".\\\"PUBLIC\\\".\\\"DIM_RETAPP_STORES\\\" \\\"ta_1\\\"\\n    ON \\\"ta_2\\\".\\\"STOREID\\\" = \\\"ta_1\\\".\\\"STOREID\\\"\\nGROUP BY \\\"ca_1\\\"\"     }   ] } ```      
   * @param fetchLiveboardSqlQueryRequest 
   */
  fetchLiveboardSqlQuery(fetchLiveboardSqlQueryRequest, _options) {
    const requestContextPromise = this.requestFactory.fetchLiveboardSqlQuery(fetchLiveboardSqlQueryRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.fetchLiveboardSqlQuery(rsp)));
    }));
  }
  /**
   *   Version: 9.0.0.cl or later   Imports [TML](https://docs.thoughtspot.com/cloud/latest/tml) files into ThoughtSpot.  Requires `DATAMANAGEMENT` (**Can manage data**) or `ADMINISTRATION` (**Can administer ThoughtsSpot**) privilege.  If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the following Data control privileges may be required: - `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) - `CAN_MANAGE_WORKSHEET_VIEWS_TABLES` (**Can manage data models**)  #### Usage guidelines  *  Import all related objects in a single TML Import API call. For example, Tables that use the same Connection object and Worksheets connected to these Tables. * Include the `fqn` property to distinguish objects that have the same name.   For example, if you have multiple Connections or Worksheets with the same name on ThoughtSpot and the Connection or Worksheet referenced in your TML file does not have a unique name to distinguish, it may result in invalid object references.   Adding `fqn` helps ThoughtSpot differentiate a Table from another with the same name.   We recommend [exporting TML with FQNs](#/http/api-endpoints/metadata/export-metadata-tml) and using these during the import operation. * You can upload multiple TML files at a time.   If you import a Worksheet along with Liveboards, Answers, and other dependent objects in a single API call, the imported objects will be immediately available for use.   When you import only a Worksheet object, it may take some time for the Worksheet to become available in the ThoughtSpot system. Please wait for a few minutes, and then proceed to create an Answer and Liveboard from the newly imported Worksheet.  For more information, see [TML Documentation](https://developers.thoughtspot.com/docs/tml#_import_a_tml).      
   * @param importMetadataTMLRequest 
   */
  importMetadataTML(importMetadataTMLRequest, _options) {
    const requestContextPromise = this.requestFactory.importMetadataTML(importMetadataTMLRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.importMetadataTML(rsp)));
    }));
  }
  /**
   *   Version: 10.4.0.cl or later   Schedules a task to import [TML](https://docs.thoughtspot.com/cloud/latest/tml) files into ThoughtSpot. You can use this API endpoint to process TML objects asynchronously when importing TMLs of large and complex metadata objects into ThoughtSpot. Unlike the synchronous import TML operation, the API processes TML data in the background and returns a task ID, which can be used to check the status of the import task via `/api/rest/2.0/metadata/tml/async/status` API endpoint.  Requires `DATAMANAGEMENT` (**Can manage data**) or `ADMINISTRATION` (**Can administer ThoughtsSpot**) privilege, and edit access to the TML objects.  If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the following Data control privileges may be required: - `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) - `CAN_MANAGE_WORKSHEET_VIEWS_TABLES` (**Can manage data models**)  #### Usage guidelines  See [Async TML API Documentation](https://developers.thoughtspot.com/docs/tml#_import_tml_objects_asynchronously) for usage guidelines.      
   * @param importMetadataTMLAsyncRequest 
   */
  importMetadataTMLAsync(importMetadataTMLAsyncRequest, _options) {
    const requestContextPromise = this.requestFactory.importMetadataTMLAsync(importMetadataTMLAsyncRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.importMetadataTMLAsync(rsp)));
    }));
  }
  /**
   *  Parameterize fields in metadata objects.   Version: 10.9.0.cl or later   Allows parameterizing fields in metadata objects in ThoughtSpot.  Requires appropriate permissions to modify the metadata object.  The API endpoint allows parameterizing the following types of metadata objects: * Logical Tables * Connections  For a Logical Table the field type must be `ATTRIBUTE` and field name can be one of: * databaseName * schemaName * tableName  For a Connection the field type is always `CONNECTION_PROPERTY`. We use the field_name in this case to specify the exact property of a connection which needs to be parameterized.      
   * @param parameterizeMetadataRequest 
   */
  parameterizeMetadata(parameterizeMetadataRequest, _options) {
    const requestContextPromise = this.requestFactory.parameterizeMetadata(parameterizeMetadataRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.parameterizeMetadata(rsp)));
    }));
  }
  /**
   *   Version: 9.0.0.cl or later   Gets a list of metadata objects available on the ThoughtSpot system.  This API endpoint is available to all users who have view access to the object. Users with `ADMINISTRATION` (**Can administer ThoughtSpot**) privileges can view data for all metadata objects, including users and groups.  #### Usage guidelines  - To get all metadata objects, send the API request without any attributes. - To get metadata objects of a specific type, set the `type` attribute. For example, to fetch a Worksheet, set the type as `LOGICAL_TABLE`. - To filter metadata objects within type `LOGICAL_TABLE`, set the `subtypes` attribute. For example, to fetch a Worksheet, set the type as `LOGICAL_TABLE` & subtypes as `[WORKSHEET]`. - To get a specific metadata object, specify the GUID. - To customize your search and filter the API response, you can use several parameters.   You can search for objects created or modified by specific users, by tags applied to the objects, or by using the include parameters like `include_auto_created_objects`, `include_dependent_objects`, `include_headers`, `include_incomplete_objects`, and so on.   You can also define sorting options to sort the data retrieved in the API response. - To get discoverable objects when linientmodel is enabled you can use `include_discoverable_objects` as true else false. Default value is true. - For liveboard metadata type, to get the newer format, set the `liveboard_response_format` as V2. Default value is V1.  **NOTE**: The following parameters support pagination of metadata records:  - `tag_identifiers` - `type` - `subtypes` - `created_by_user_identifiers` - `modified_by_user_identifiers` - `owned_by_user_identifiers` - `exclude_objects` - `include_auto_created_objects` - `favorite_object_options` If you are using other parameters to search metadata, set `record_size` to `-1` and `record_offset` to `0`.      
   * @param searchMetadataRequest 
   */
  searchMetadata(searchMetadataRequest, _options) {
    const requestContextPromise = this.requestFactory.searchMetadata(searchMetadataRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.searchMetadata(rsp)));
    }));
  }
  /**
   *  Remove parameterization from fields in metadata objects.   Version: 10.9.0.cl or later   Allows removing parameterization from fields in metadata objects in ThoughtSpot.  Requires appropriate permissions to modify the metadata object.  The API endpoint allows unparameterizing the following types of metadata objects: * Logical Tables * Connections  For a Logical Table the field type must be `ATTRIBUTE` and field name can be one of: * databaseName * schemaName * tableName  For a Connection the field type is always `CONNECTION_PROPERTY`. We use the field_name in this case to specify the exact property of a connection which needs to be unparameterized.      
   * @param unparameterizeMetadataRequest 
   */
  unparameterizeMetadata(unparameterizeMetadataRequest, _options) {
    const requestContextPromise = this.requestFactory.unparameterizeMetadata(unparameterizeMetadataRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.unparameterizeMetadata(rsp)));
    }));
  }
  /**
   *  Update header attributes for a given list of header objects.   Version: 10.6.0.cl or later   ## Prerequisites - **Privileges Required:**   - `DATAMANAGEMENT` (Can manage data) or `ADMINISTRATION` (Can administer ThoughtSpot). - **Additional Privileges (if RBAC is enabled):**   - `ORG_ADMINISTRATION` (Can manage orgs).  ---  ## Usage Guidelines  ### Parameters  1. **headers_update**      - **Description:** List of header objects with their attributes to be updated. Each object contains a list of attributes to be updated in the header.    - **Usage:**       - You must provide either `identifier` or `obj_identifier`, but not both. Both fields cannot be empty.       - When `org_identifier` is set to `-1`, only the `identifier` value is accepted; `obj_identifier` is not allowed.  2. **org_identifier**      - **Description:** GUID (Globally Unique Identifier) or name of the organization.      - **Usage:**      - Leaving this field empty assumes that the changes should be applied to the current organization       - Provide `org_guid` or `org_name` to uniquely identify the organization where changes need to be applied. .      - Provide `-1` if changes have to be applied across all the org.  ---  ## Note Currently, this API is enabled only for updating the `obj_identifier` attribute. Only `text` will be allowed in attribute\'s value.  ## Best Practices  1. **Backup Before Conversion:**      Always export metadata as a backup before initiating the update process  ---  ## Examples  ### Only `identifier` is given  ```json {   \"headers_update\":   [     {       \"identifier\": \"guid_1\",       \"obj_identifier\": \"\",       \"type\": \"LOGICAL_COLUMN\",       \"attributes\":       [         {           \"name\": \"obj_id\",           \"value\": \"custom_object_id\"         }       ]     }   ],   \"org_identifier\": \"orgGuid\" } ```  ### Only `obj_identifier` is given ```json {   \"headers_update\":   [     {       \"obj_identifier\": \"custom_object_id\",       \"type\": \"ANSWER\",       \"attributes\":       [         {           \"name\": \"obj_id\",           \"value\": \"custom_object_id\"         }       ]     }   ],   \"org_identifier\": \"orgName\" } ```  ### Executing update for all org `-1` ```json {   \"headers_update\":   [     {       \"identifier\": \"guid_1\",       \"type\": \"ANSWER\",       \"attributes\":       [         {           \"name\": \"obj_id\",           \"value\": \"custom_object_id\"         }       ]     }   ],   \"org_identifier\": -1 } ```  ### Optional `type` is not provided ```json {   \"headers_update\":   [     {       \"identifier\": \"guid_1\",       \"attributes\":       [         {           \"name\": \"obj_id\",           \"value\": \"custom_object_id\"         }       ]     }   ],   \"org_identifier\": -1 } ```     
   * @param updateMetadataHeaderRequest 
   */
  updateMetadataHeader(updateMetadataHeaderRequest, _options) {
    const requestContextPromise = this.requestFactory.updateMetadataHeader(updateMetadataHeaderRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.updateMetadataHeader(rsp)));
    }));
  }
  /**
   *  Update object IDs for given metadata objects.   Version: 10.8.0.cl or later   ## Prerequisites - **Privileges Required:**   - `DATAMANAGEMENT` (Can manage data) or `ADMINISTRATION` (Can administer ThoughtSpot). - **Additional Privileges (if RBAC is enabled):**   - `ORG_ADMINISTRATION` (Can manage orgs).  ---  ## Usage Guidelines  ### Parameters  1. **metadata**      - **Description:** List of metadata objects to update their object IDs.    - **Usage:**       - Use either `current_obj_id` alone OR use `metadata_identifier` with `type` (when needed).       - When using `metadata_identifier`, the `type` field is required if using a name instead of a GUID.       - The `new_obj_id` field is always required.  ---  ## Note This API is specifically designed for updating object IDs of metadata objects. It internally uses the header update mechanism to perform the changes.  ## Best Practices  1. **Backup Before Update:**      Always export metadata as a backup before initiating the update process.  2. **Validation:**    - When using `current_obj_id`, ensure it matches the existing object ID exactly.    - When using `metadata_identifier` with a name, ensure the `type` is specified correctly.    - Verify that the `new_obj_id` follows your naming conventions and is unique within your system.  ---  ## Examples  ### Using current_obj_id ```json {   \"metadata\": [     {       \"current_obj_id\": \"existing_object_id\",       \"new_obj_id\": \"new_object_id\"     }   ] } ```  ### Using metadata_identifier with GUID ```json {   \"metadata\": [     {       \"metadata_identifier\": \"01234567-89ab-cdef-0123-456789abcdef\",       \"new_obj_id\": \"new_object_id\"     }   ] } ```  ### Using metadata_identifier with name and type ```json {   \"metadata\": [     {       \"metadata_identifier\": \"My Answer\",       \"type\": \"ANSWER\",       \"new_obj_id\": \"new_object_id\"     }   ] } ```  ### Multiple objects update ```json {   \"metadata\": [     {       \"current_obj_id\": \"existing_object_id_1\",       \"new_obj_id\": \"new_object_id_1\"     },     {       \"metadata_identifier\": \"My Worksheet\",       \"type\": \"LOGICAL_TABLE\",       \"new_obj_id\": \"new_object_id_2\"     }   ] } ```      
   * @param updateMetadataObjIdRequest 
   */
  updateMetadataObjId(updateMetadataObjIdRequest, _options) {
    const requestContextPromise = this.requestFactory.updateMetadataObjId(updateMetadataObjIdRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.updateMetadataObjId(rsp)));
    }));
  }
};
var ObservableOrgsApi = class {
  constructor(configuration, requestFactory, responseProcessor) {
    this.configuration = configuration;
    this.requestFactory = requestFactory || new OrgsApiRequestFactory(configuration);
    this.responseProcessor = responseProcessor || new OrgsApiResponseProcessor();
  }
  /**
   *   Version: 9.0.0.cl or later   Creates an Org object.  To use this API, the [Orgs](https://docs.thoughtspot.com/cloud/latest/orgs-overview) feature must be enabled in your cluster.  Requires cluster administration (**Can administer Org**) privileges. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `ORG_ADMINISTRATION` (**Can manage Orgs**) privilege is required.      
   * @param createOrgRequest 
   */
  createOrg(createOrgRequest, _options) {
    const requestContextPromise = this.requestFactory.createOrg(createOrgRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.createOrg(rsp)));
    }));
  }
  /**
   *   Version: 9.0.0.cl or later   Deletes an Org object from the ThoughtSpot system.  Requires cluster administration (**Can administer Org**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `ORG_ADMINISTRATION` (**Can manage Orgs**) privilege is required.  When you delete an Org, all its users and objects created in that Org context are removed. However, if the users in the deleted Org also exists in other Orgs, they are removed only from the deleted Org.      
   * @param orgIdentifier ID or name of the Org
   */
  deleteOrg(orgIdentifier, _options) {
    const requestContextPromise = this.requestFactory.deleteOrg(orgIdentifier, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.deleteOrg(rsp)));
    }));
  }
  /**
   *   Version: 9.0.0.cl or later   Gets a list of Orgs configured on the ThoughtSpot system. To get details of a specific Org, specify the Org ID or name. You can also pass parameters such as status, visibility, and user identifiers to get a specific list of Orgs.  Requires cluster administration (**Can administer Org**) privileges. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `ORG_ADMINISTRATION` (**Can manage Orgs**) privilege is required.      
   * @param searchOrgsRequest 
   */
  searchOrgs(searchOrgsRequest, _options) {
    const requestContextPromise = this.requestFactory.searchOrgs(searchOrgsRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.searchOrgs(rsp)));
    }));
  }
  /**
   *   Version: 9.0.0.cl or later   Updates an Org object. You can modify Org properties such as name, description, and user associations.  Requires cluster administration (**Can administer Org**) privileges. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `ORG_ADMINISTRATION` (**Can manage Orgs**) privilege is required.      
   * @param orgIdentifier ID or name of the Org
   * @param updateOrgRequest 
   */
  updateOrg(orgIdentifier, updateOrgRequest, _options) {
    const requestContextPromise = this.requestFactory.updateOrg(orgIdentifier, updateOrgRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.updateOrg(rsp)));
    }));
  }
};
var ObservableReportsApi = class {
  constructor(configuration, requestFactory, responseProcessor) {
    this.configuration = configuration;
    this.requestFactory = requestFactory || new ReportsApiRequestFactory(configuration);
    this.responseProcessor = responseProcessor || new ReportsApiResponseProcessor();
  }
  /**
   *   Version: 9.0.0.cl or later   Exports an Answer in the given file format. You can download the Answer data as a PDF, PNG, CSV, or XLSX file.  Requires at least view access to the Answer.  #### Usage guidelines  In the request body, the GUID or name of the Answer and set `file_format`. The default file format is CSV.  **NOTE**: * The downloadable file returned in API response file is extensionless. Please rename the downloaded file by typing in the relevant extension. * HTML rendering is not supported for PDF exports of Answers with tables.  Optionally, you can define [runtime overrides](https://developers.thoughtspot.com/docs/fetch-data-and-report-apis#_runtime_overrides) to apply to the Answer data.  The `record_size` attribute determines the number of records to retrieve in an API call. For more information about pagination, record size, and maximum row limit, see [Pagination and record size settings](https://developers.thoughtspot.com/docs/fetch-data-and-report-apis#_pagination_settings_for_data_and_report_api).       
   * @param exportAnswerReportRequest 
   */
  exportAnswerReport(exportAnswerReportRequest, _options) {
    const requestContextPromise = this.requestFactory.exportAnswerReport(exportAnswerReportRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.exportAnswerReport(rsp)));
    }));
  }
  /**
   *   Version: 9.0.0.cl or later   Exports a Liveboard and its visualizations in PDF or PNG file format.  Requires at least view access to the Liveboard.  #### Usage guidelines  In the request body, specify the GUID or name of the Liveboard. To generate a Liveboard report with specific visualizations, add GUIDs or names of the visualizations.  The default `file_format` is PDF. For PDF downloads, you can specify additional parameters to customize the page orientation and include or exclude the cover page, logo, footer text, and page numbers. Similar customization options are also available for PNG output.  **NOTE**: The downloadable file returned in API response file is extensionless. Please rename the downloaded file by typing in the relevant extension.  Optionally, you can define [runtime overrides](https://developers.thoughtspot.com/docs/fetch-data-and-report-apis#_runtime_overrides) to apply to the Answer data.  To include unsaved changes in the report, pass the `transient_pinboard_content` script generated from the `getExportRequestForCurrentPinboard` method in the Visual Embed SDK. Upon successful execution, the API returns the report with unsaved changes, including ad hoc changes to visualizations. For more information, see [Liveboard Report API](https://developers.thoughtspot.com/docs/fetch-data-and-report-apis#_liveboard_report_api).       
   * @param exportLiveboardReportRequest 
   */
  exportLiveboardReport(exportLiveboardReportRequest, _options) {
    const requestContextPromise = this.requestFactory.exportLiveboardReport(exportLiveboardReportRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.exportLiveboardReport(rsp)));
    }));
  }
};
var ObservableRolesApi = class {
  constructor(configuration, requestFactory, responseProcessor) {
    this.configuration = configuration;
    this.requestFactory = requestFactory || new RolesApiRequestFactory(configuration);
    this.responseProcessor = responseProcessor || new RolesApiResponseProcessor();
  }
  /**
   *   Version: 9.5.0.cl or later   Creates a Role object in ThoughtSpot.  Available only if [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance. To create a Role, the `ROLE_ADMINISTRATION` (**Can manage roles**) privilege is required.      
   * @param createRoleRequest 
   */
  createRole(createRoleRequest, _options) {
    const requestContextPromise = this.requestFactory.createRole(createRoleRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.createRole(rsp)));
    }));
  }
  /**
   *   Version: 9.5.0.cl or later   Deletes a Role object from the ThoughtSpot system.  Available only if [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance. To delete a Role, the `ROLE_ADMINISTRATION` (**Can manage roles**) privilege is required.      
   * @param roleIdentifier Unique ID or name of the Role. ReadOnly roles cannot be deleted.
   */
  deleteRole(roleIdentifier, _options) {
    const requestContextPromise = this.requestFactory.deleteRole(roleIdentifier, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.deleteRole(rsp)));
    }));
  }
  /**
   *   Version: 9.5.0.cl or later   Gets a list of Role objects from the ThoughtSpot system.  Available if [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance. To search for Roles, the `ROLE_ADMINISTRATION` (**Can manage roles**) privilege is required.  To get details of a specific Role object, specify the GUID or name. You can also filter the API response based on user group and Org identifiers, privileges assigned to the Role, and deprecation status.      
   * @param searchRolesRequest 
   */
  searchRoles(searchRolesRequest, _options) {
    const requestContextPromise = this.requestFactory.searchRoles(searchRolesRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.searchRoles(rsp)));
    }));
  }
  /**
   *   Version: 9.5.0.cl or later   Updates the properties of a Role object.  Available only if [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance. To update a Role, the `ROLE_ADMINISTRATION` (**Can manage roles**) privilege is required.      
   * @param roleIdentifier Unique ID or name of the Role.
   * @param updateRoleRequest 
   */
  updateRole(roleIdentifier, updateRoleRequest, _options) {
    const requestContextPromise = this.requestFactory.updateRole(roleIdentifier, updateRoleRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.updateRole(rsp)));
    }));
  }
};
var ObservableSchedulesApi = class {
  constructor(configuration, requestFactory, responseProcessor) {
    this.configuration = configuration;
    this.requestFactory = requestFactory || new SchedulesApiRequestFactory(configuration);
    this.responseProcessor = responseProcessor || new SchedulesApiResponseProcessor();
  }
  /**
   *  Create schedule.    Version: 9.4.0.cl or later   Creates a Liveboard schedule job.  Requires at least edit access to Liveboards. To create a schedule on behalf of another user, you need  `ADMINISTRATION` (**Can administer Org**) or `JOBSCHEDULING` (**Can schedule for others**) privilege and edit access to the Liveboard. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `JOBSCHEDULING` (**Can schedule for others**) privilege is required.  #### Usage guidelines  * The description text is mandatory.  The description text appears as **Description: <your content>** in the Liveboard schedule email notifications. * For Liveboards with both charts and tables, schedule creation is only supported in PDF and XLS formats. Schedules created in CSV formats for such Liveboards will fail to run. If `PDF` is set as the `file_format`, enable `pdf_options` to get the correct attachment. Not doing so may cause the attachment to be rendered empty. * To include only specific visualizations, specify the visualization GUIDs in the `visualization_identifiers` array. * You can schedule a Liveboard job to run periodically by setting frequency parameters. You can set the schedule to run daily, weekly, monthly or every n minutes or hours. The scheduled job can also be configured to run at a specific time of the day or on specific days of the week or month. Please ensure that when setting the schedule frequency for _minute of the object_, only values that are multiples of 5 are included. * If the `frequency` parameters are defined, you can set the time zone to a value that matches your server\'s time zone. For example, `US/Central`, `Etc/UTC`, `CET`. The default time zone is `America/Los_Angeles`.  For more information about Liveboard jobs, see [ThoughtSpot Product Documentation](https://docs.thoughtspot.com/cloud/latest/liveboard-schedule).     
   * @param createScheduleRequest 
   */
  createSchedule(createScheduleRequest, _options) {
    const requestContextPromise = this.requestFactory.createSchedule(createScheduleRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.createSchedule(rsp)));
    }));
  }
  /**
   *  Deletes a scheduled job.    Version: 9.4.0.cl or later   Deletes a scheduled Liveboard job.  Requires at least edit access to Liveboard or `ADMINISTRATION` (**Can administer Org**) privilege.    If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `JOBSCHEDULING` (**Can schedule for others**) privilege is required.      
   * @param scheduleIdentifier Unique ID or name of the scheduled job.
   */
  deleteSchedule(scheduleIdentifier, _options) {
    const requestContextPromise = this.requestFactory.deleteSchedule(scheduleIdentifier, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.deleteSchedule(rsp)));
    }));
  }
  /**
   *  Search Schedules    Version: 9.4.0.cl or later   Gets a list of scheduled jobs configured for a Liveboard.  To get details of a specific scheduled job, specify the name or GUID of the scheduled job.  Requires at least view access to Liveboards.  **NOTE**: When filtering schedules by parameters other than `metadata`, set `record_size` to `-1` and `record_offset` to `0` for accurate results.      
   * @param searchSchedulesRequest 
   */
  searchSchedules(searchSchedulesRequest, _options) {
    const requestContextPromise = this.requestFactory.searchSchedules(searchSchedulesRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.searchSchedules(rsp)));
    }));
  }
  /**
   *  Update schedule.    Version: 9.4.0.cl or later   Updates a scheduled Liveboard job.  Requires at least edit access to Liveboards. To update a schedule on behalf of another user, you need `ADMINISTRATION` (**Can administer Org**) or `JOBSCHEDULING` (**Can schedule for others**) privilege and edit access to the Liveboard. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `JOBSCHEDULING` (**Can schedule for others**) privilege is required.  The API endpoint allows you to pause a scheduled job, change the status of a paused job. You can also edit the recipients list, frequency of the job, format of the file to send to the recipients in email notifications, PDF options, and time zone setting.      
   * @param scheduleIdentifier Unique ID or name of the schedule.
   * @param updateScheduleRequest 
   */
  updateSchedule(scheduleIdentifier, updateScheduleRequest, _options) {
    const requestContextPromise = this.requestFactory.updateSchedule(scheduleIdentifier, updateScheduleRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.updateSchedule(rsp)));
    }));
  }
};
var ObservableSecurityApi = class {
  constructor(configuration, requestFactory, responseProcessor) {
    this.configuration = configuration;
    this.requestFactory = requestFactory || new SecurityApiRequestFactory(configuration);
    this.responseProcessor = responseProcessor || new SecurityApiResponseProcessor();
  }
  /**
   *   Version: 9.0.0.cl or later   Transfers the ownership of one or several objects from one user to another.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `USER_ADMINISTRATION` (**Can manage users**) privilege and edit access to the objects are required.      
   * @param assignChangeAuthorRequest 
   */
  assignChangeAuthor(assignChangeAuthorRequest, _options) {
    const requestContextPromise = this.requestFactory.assignChangeAuthor(assignChangeAuthorRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.assignChangeAuthor(rsp)));
    }));
  }
  /**
   *   Version: 9.0.0.cl or later   Fetches object permission details for a given principal object such as a user and group.  Requires view access to the metadata object.   #### Usage guidelines  * To get a list of all metadata objects that a user or group can access, specify the `type` and GUID or name of the principal. * To get permission details for a specific object, add the `type` and GUID or name of the metadata object to your API request.  Upon successful execution, the API returns a list of metadata objects and permission details for each object.        
   * @param fetchPermissionsOfPrincipalsRequest 
   */
  fetchPermissionsOfPrincipals(fetchPermissionsOfPrincipalsRequest, _options) {
    const requestContextPromise = this.requestFactory.fetchPermissionsOfPrincipals(fetchPermissionsOfPrincipalsRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.fetchPermissionsOfPrincipals(rsp)));
    }));
  }
  /**
   *   Version: 9.0.0.cl or later   Fetches permission details for a given metadata object.  Requires view access to the metadata object.  #### Usage guidelines  * To fetch a list of users and groups for a metadata object, specify `type` and GUID or name of the metadata object. * To get permission details for a specific user or group, add `type` and GUID or name of the principal object to your API request.  Upon successful execution, the API returns permission details and principal information for the object specified in the API request.      
   * @param fetchPermissionsOnMetadataRequest 
   */
  fetchPermissionsOnMetadata(fetchPermissionsOnMetadataRequest, _options) {
    const requestContextPromise = this.requestFactory.fetchPermissionsOnMetadata(fetchPermissionsOnMetadataRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.fetchPermissionsOnMetadata(rsp)));
    }));
  }
  /**
   *  Version: 10.9.0.cl or later   Allows publishing metadata objects across organizations in ThoughtSpot.  Requires ADMINISTRATION role and TENANT scope.  The API endpoint allows publishing the following types of metadata objects: * Liveboards * Answers * Logical Tables  This API will essentially share the objects along with it\'s dependencies to the org admins of the orgs to which it is being published.      
   * @param publishMetadataRequest 
   */
  publishMetadata(publishMetadataRequest, _options) {
    const requestContextPromise = this.requestFactory.publishMetadata(publishMetadataRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.publishMetadata(rsp)));
    }));
  }
  /**
   *   Version: 9.0.0.cl or later   Allows sharing one or several metadata objects with users and groups in ThoughtSpot.  Requires edit access to the metadata object.  The API endpoint allows sharing only the following types of metadata objects: * Liveboards * Visualizations * Answers * Worksheets * Views * Connections  You can provide `READ_ONLY` or `MODIFY` access when sharing an object with another user or group. With `READ_ONLY` access grants view access to the shared object, whereas `MODIFY` provides edit access.  To prevent a user or group from accessing the shared object, specify the GUID or name of the principal and set `shareMode` to `NO_ACCESS`.      
   * @param shareMetadataRequest 
   */
  shareMetadata(shareMetadataRequest, _options) {
    const requestContextPromise = this.requestFactory.shareMetadata(shareMetadataRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.shareMetadata(rsp)));
    }));
  }
  /**
   *  Version: 10.9.0.cl or later   Allows unpublishing metadata objects from organizations in ThoughtSpot.  Requires ADMINISTRATION role and TENANT scope.  The API endpoint allows unpublishing the following types of metadata objects: * Liveboards * Answers * Logical Tables  When unpublishing objects, you can: * Include dependencies by setting `include_dependencies` to true - this will unpublish all dependent objects if no other published object is using them * Force unpublish by setting `force` to true - this will break all dependent objects in the unpublished organizations      
   * @param unpublishMetadataRequest 
   */
  unpublishMetadata(unpublishMetadataRequest, _options) {
    const requestContextPromise = this.requestFactory.unpublishMetadata(unpublishMetadataRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.unpublishMetadata(rsp)));
    }));
  }
};
var ObservableSystemApi = class {
  constructor(configuration, requestFactory, responseProcessor) {
    this.configuration = configuration;
    this.requestFactory = requestFactory || new SystemApiRequestFactory(configuration);
    this.responseProcessor = responseProcessor || new SystemApiResponseProcessor();
  }
  /**
   *   Version: 9.0.0.cl or later   Retrieves the current configuration details of the cluster. If the request is successful, the API returns a list configuration settings applied on the cluster.  Requires `ADMINISTRATION`(**Can administer ThoughtSpot**) privilege to view these complete configuration settings of the cluster. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `SYSTEM_INFO_ADMINISTRATION` (**Can view system activities**) privilege is required.  This API does not require any parameters to be passed in the request.      
   */
  getSystemConfig(_options) {
    const requestContextPromise = this.requestFactory.getSystemConfig(_options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.getSystemConfig(rsp)));
    }));
  }
  /**
   *   Version: 9.0.0.cl or later   Gets system information such as the release version, locale, time zone, deployment environment, date format, and date time format of the cluster.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privileges. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `SYSTEM_INFO_ADMINISTRATION` (**Can view system activities**) privilege is required.  This API does not require any parameters to be passed in the request.        
   */
  getSystemInformation(_options) {
    const requestContextPromise = this.requestFactory.getSystemInformation(_options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.getSystemInformation(rsp)));
    }));
  }
  /**
   *   Version: 9.2.0.cl or later   Gets a list of configuration overrides applied on the cluster.    Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `APPLICATION_ADMINISTRATION` (**Can manage application settings**) privilege is required.  This API does not require any parameters to be passed in the request.        
   */
  getSystemOverrideInfo(_options) {
    const requestContextPromise = this.requestFactory.getSystemOverrideInfo(_options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.getSystemOverrideInfo(rsp)));
    }));
  }
  /**
   *   Version: 9.2.0.cl or later   Updates the current configuration of the cluster. You must send the configuration data in JSON format.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privileges. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `APPLICATION_ADMINISTRATION` (**Can manage application settings**) privilege is required.      
   * @param updateSystemConfigRequest 
   */
  updateSystemConfig(updateSystemConfigRequest, _options) {
    const requestContextPromise = this.requestFactory.updateSystemConfig(updateSystemConfigRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.updateSystemConfig(rsp)));
    }));
  }
};
var ObservableTagsApi = class {
  constructor(configuration, requestFactory, responseProcessor) {
    this.configuration = configuration;
    this.requestFactory = requestFactory || new TagsApiRequestFactory(configuration);
    this.responseProcessor = responseProcessor || new TagsApiResponseProcessor();
  }
  /**
   *   Version: 9.0.0.cl or later   Assigns tags to Liveboards, Answers, Tables, and Worksheets.  Requires edit access to the metadata object.      
   * @param assignTagRequest 
   */
  assignTag(assignTagRequest, _options) {
    const requestContextPromise = this.requestFactory.assignTag(assignTagRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.assignTag(rsp)));
    }));
  }
  /**
   *   Version: 9.0.0.cl or later   Creates a tag object.  Tags are labels that identify a metadata object. For example, you can create a tag to designate subject areas, such as sales, HR, marketing, and finance.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `TAGMANAGEMENT` (**Can manage tags**) privilege is required to create, edit, and delete tags.      
   * @param createTagRequest 
   */
  createTag(createTagRequest, _options) {
    const requestContextPromise = this.requestFactory.createTag(createTagRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.createTag(rsp)));
    }));
  }
  /**
   *   Version: 9.0.0.cl or later   Deletes a tag object from the ThoughtSpot system  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `TAGMANAGEMENT` (**Can manage tags**) privilege is required to create, edit, and delete tags.      
   * @param tagIdentifier Tag identifier Tag name or Tag id.
   */
  deleteTag(tagIdentifier, _options) {
    const requestContextPromise = this.requestFactory.deleteTag(tagIdentifier, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.deleteTag(rsp)));
    }));
  }
  /**
   *   Version: 9.0.0.cl or later   Gets a list of tag objects available on the ThoughtSpot system. To get details of a specific tag object, specify the GUID or name.  Any authenticated user can search for tag objects.      
   * @param searchTagsRequest 
   */
  searchTags(searchTagsRequest, _options) {
    const requestContextPromise = this.requestFactory.searchTags(searchTagsRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.searchTags(rsp)));
    }));
  }
  /**
   *   Version: 9.0.0.cl or later   Removes the tags applied to a Liveboard, Answer, Table, or Worksheet.  Requires edit access to the metadata object.      
   * @param assignTagRequest 
   */
  unassignTag(assignTagRequest, _options) {
    const requestContextPromise = this.requestFactory.unassignTag(assignTagRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.unassignTag(rsp)));
    }));
  }
  /**
   *   Version: 9.0.0.cl or later   Updates a tag object.  You can modify the `name` and `color` properties of a tag object.    Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `TAGMANAGEMENT` (**Can manage tags**) privilege is required to create, edit, and delete tags.      
   * @param tagIdentifier Name or Id of the tag.
   * @param updateTagRequest 
   */
  updateTag(tagIdentifier, updateTagRequest, _options) {
    const requestContextPromise = this.requestFactory.updateTag(tagIdentifier, updateTagRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.updateTag(rsp)));
    }));
  }
};
var ObservableThoughtSpotRestApi = class {
  constructor(configuration, requestFactory, responseProcessor) {
    this.configuration = configuration;
    this.requestFactory = requestFactory || new ThoughtSpotRestApiRequestFactory(configuration);
    this.responseProcessor = responseProcessor || new ThoughtSpotRestApiResponseProcessor();
  }
  /**
   *   Version: 9.7.0.cl or later   Activates a deactivated user account.  Requires `ADMINISTRATION` (**Can administer Thoughtspot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `USER_ADMINISTRATION` (**Can manage users**) privilege is required.  To activate an inactive user account, the API request body must include the following information:  - Username or the GUID of the user account. - Auth token generated for the deactivated user. The auth token is sent in the API response when a user is deactivated. - Password for the user account.      
   * @param activateUserRequest 
   */
  activateUser(activateUserRequest, _options) {
    const requestContextPromise = this.requestFactory.activateUser(activateUserRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.activateUser(rsp)));
    }));
  }
  /**
   *   Version: 9.0.0.cl or later   Transfers the ownership of one or several objects from one user to another.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `USER_ADMINISTRATION` (**Can manage users**) privilege and edit access to the objects are required.      
   * @param assignChangeAuthorRequest 
   */
  assignChangeAuthor(assignChangeAuthorRequest, _options) {
    const requestContextPromise = this.requestFactory.assignChangeAuthor(assignChangeAuthorRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.assignChangeAuthor(rsp)));
    }));
  }
  /**
   *   Version: 9.0.0.cl or later   Assigns tags to Liveboards, Answers, Tables, and Worksheets.  Requires edit access to the metadata object.      
   * @param assignTagRequest 
   */
  assignTag(assignTagRequest, _options) {
    const requestContextPromise = this.requestFactory.assignTag(assignTagRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.assignTag(rsp)));
    }));
  }
  /**
   *   Version: 9.0.0.cl or later   Updates the current password of the user.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `USER_ADMINISTRATION` (**Can manage users**) privilege is required.      
   * @param changeUserPasswordRequest 
   */
  changeUserPassword(changeUserPasswordRequest, _options) {
    const requestContextPromise = this.requestFactory.changeUserPassword(changeUserPasswordRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.changeUserPassword(rsp)));
    }));
  }
  /**
   *   Version: 9.2.0.cl or later   Commits TML files of metadata objects to the Git branch configured on your instance.  Requires at least edit access to objects used in the commit operation.  Before using this endpoint to push your commits:  * Enable Git integration on your instance. * Make sure the Git repository and branch details are configured on your instance.  For more information, see [Git integration documentation](https://developers.thoughtspot.com/docs/git-integration).      
   * @param commitBranchRequest 
   */
  commitBranch(commitBranchRequest, _options) {
    const requestContextPromise = this.requestFactory.commitBranch(commitBranchRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.commitBranch(rsp)));
    }));
  }
  /**
   *  Convert worksheets to models    Version: 10.6.0.cl or later   ## Prerequisites - **Privileges Required:**   - `DATAMANAGEMENT` (Can manage data) or `ADMINISTRATION` (Can administer ThoughtSpot). - **Additional Privileges (if RBAC is enabled):**   - `CAN_MANAGE_WORKSHEET_VIEWS_TABLES` (Can manage data models).  ---  ## Usage Guidelines  ### Parameters  1. **worksheet_ids**      - **Description:** A comma-separated list of GUIDs (Globally Unique Identifiers) specifying the Worksheets to be converted.      - **Usage:**        - Used only when `convert_all` is set to `false`.        - Leave empty or omit when `convert_all` is set to `true`.  2. **exclude_worksheet_ids**      - **Description:** A comma-separated list of GUIDs specifying Worksheets to be excluded from conversion.      - **Usage:**        - Useful when `convert_all` is set to `true` and specific Worksheets should not be converted.  3. **convert_all**      - **Description:** Sets the scope of conversion.    - **Options:**        - `true`: Converts all Worksheets in the system, except those specified in `exclude_worksheet_ids`.        - `false`: Converts only the Worksheets listed in `worksheet_ids`.  4. **apply_changes**      - **Description:** Specifies whether to apply changes directly to ThoughtSpot or to generate a preview before applying any changes.Used for validation of conversion.    - **Options:**        - `true`: Applies conversion changes directly to ThoughtSpot.      - `false`: Generates only a preview of the changes and does not apply any changes to ThoughtSpot  ---  ## Best Practices  1. **Backup Before Conversion:**      Always export metadata as a backup before initiating the conversion process  2. **Partial Conversion for Testing:**      Test the conversion process by setting `convert_all` to `false` and specifying a small number of `worksheet_ids`.  3. **Verify Dependencies:**      Check for dependent objects, such as Tables and Connections, to avoid invalid references.  4. **Review Changes:**      Use `apply_changes: false` to preview the impact of the conversion before applying changes.  ---  ## Examples  ### Convert Specific Worksheets ```json {   \"worksheet_ids\": [\"guid1\", \"guid2\", \"guid3\"],   \"exclude_worksheet_ids\": [],   \"convert_all\": false,   \"apply_changes\": true } ```  ### Convert All Accessible Worksheets ```json {   \"worksheet_ids\": [],   \"exclude_worksheet_ids\": [],   \"convert_all\": true,   \"apply_changes\": true } ```  ### Exclude Specific Worksheets While Converting All Accessible Worksheets ```json {   \"worksheet_ids\": [],   \"exclude_worksheet_ids\": [\"abc\"],   \"convert_all\": true,   \"apply_changes\": true } ```     
   * @param convertWorksheetToModelRequest 
   */
  convertWorksheetToModel(convertWorksheetToModelRequest, _options) {
    const requestContextPromise = this.requestFactory.convertWorksheetToModel(convertWorksheetToModelRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.convertWorksheetToModel(rsp)));
    }));
  }
  /**
   *  Makes a copy of an Answer or Liveboard saved in Atlas    Version: 10.3.0.cl or later   Creates a copy of a metadata object.  Requires at least view access to the metadata object being copied.  Upon successful execution, the API creates a copy of the metadata object specified in the API request and returns the ID of the new object.      
   * @param copyObjectRequest 
   */
  copyObject(copyObjectRequest, _options) {
    const requestContextPromise = this.requestFactory.copyObject(copyObjectRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.copyObject(rsp)));
    }));
  }
  /**
   *   Version: 9.2.0.cl or later   Allows you to connect a ThoughtSpot instance to a Git repository.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance on your instance, the `CAN_MANAGE_VERSION_CONTROL` (**Can toggle version control for objects**) privilege.  You can use this API endpoint to connect your ThoughtSpot development and production environments to the development and production branches of a Git repository.  Before using this endpoint to connect your ThoughtSpot instance to a Git repository, check the following prerequisites:  * You have a Git repository. If you are using GitHub, make sure you have a valid account and an access token to connect ThoughtSpot to GitHub. For information about generating a token, see [GitHub Documentation](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens).  * Your access token has `repo` scope that grants full access to public and private repositories. * Your Git repository has a branch that can be configured as a default branch in ThoughtSpot.  For more information, see [Git integration documentation](https://developers.thoughtspot.com/docs/?pageid=git-integration).  **Note**: ThoughtSpot supports only GitHub / GitHub Enterprise for CI/CD.      
   * @param createConfigRequest 
   */
  createConfig(createConfigRequest, _options) {
    const requestContextPromise = this.requestFactory.createConfig(createConfigRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.createConfig(rsp)));
    }));
  }
  /**
   *   Version: 9.2.0.cl or later   Creates a connection to a data warehouse for live query services.    Requires `DATAMANAGEMENT` (**Can manage data**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) privilege is required.  #### Create a connection without tables  To create a connection without tables:  1. Pass these parameters in your API request.  * Name of the connection.  * Type of the data warehouse to connect to.  * A JSON map of configuration attributes in `data_warehouse_config`. The following example shows the configuration attributes for a SnowFlake connection:   ```   {      \"configuration\":{         \"accountName\":\"thoughtspot_partner\",         \"user\":\"tsadmin\",         \"password\":\"TestConn123\",         \"role\":\"sysadmin\",         \"warehouse\":\"MEDIUM_WH\"      },      \"externalDatabases\":[       ]   }   ``` 2. Set `validate` to `false`.  #### Create a connection with tables  To create a connection with tables:  1. Pass these parameters in your API request.  * Name of the connection.  * Type of the data warehouse to connect to.  * A JSON map of configuration attributes, database details, and table properties in `data_warehouse_config` as shown in the following example:   ```   {      \"configuration\":{         \"accountName\":\"thoughtspot_partner\",         \"user\":\"tsadmin\",         \"password\":\"TestConn123\",         \"role\":\"sysadmin\",         \"warehouse\":\"MEDIUM_WH\"      },      \"externalDatabases\":[         {            \"name\":\"AllDatatypes\",            \"isAutoCreated\":false,            \"schemas\":[               {                  \"name\":\"alldatatypes\",                  \"tables\":[                     {                        \"name\":\"allDatatypes\",                        \"type\":\"TABLE\",                        \"description\":\"\",                        \"selected\":true,                        \"linked\":true,                        \"columns\":[                           {                              \"name\":\"CNUMBER\",                              \"type\":\"INT64\",                              \"canImport\":true,                              \"selected\":true,                              \"isLinkedActive\":true,                              \"isImported\":false,                              \"tableName\":\"allDatatypes\",                              \"schemaName\":\"alldatatypes\",                              \"dbName\":\"AllDatatypes\"                           },                           {                              \"name\":\"CDECIMAL\",                              \"type\":\"INT64\",                              \"canImport\":true,                              \"selected\":true,                              \"isLinkedActive\":true,                              \"isImported\":false,                              \"tableName\":\"allDatatypes\",                              \"schemaName\":\"alldatatypes\",                              \"dbName\":\"AllDatatypes\"                           }                        ]                     }                  ]               }            ]         }      ]   }   ``` 2. Set `validate` to `true`.      
   * @param createConnectionRequest 
   */
  createConnection(createConnectionRequest, _options) {
    const requestContextPromise = this.requestFactory.createConnection(createConnectionRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.createConnection(rsp)));
    }));
  }
  /**
   *  Version: 10.4.0.cl or later   Creates a Conversation object to start an AI-driven conversation based on a specific data model.  Requires at least view access to the metadata object specified in the request.  #### Usage guidelines  This API requires the `metadata_identifier` parameter to define the context for the conversation.  You can also specify the tokens to initiate the conversation as shown in this example:  `\"tokens\": \"[tea],[sales],[type]\"`  If the API request is successful, ThoughtSpot returns the ID of the conversation.  > ###### Note: > * This endpoint is currently in Beta. Breaking changes may be introduced before the endpoint is made Generally Available. > * This endpoint requires Spotter - please contact ThoughtSpot support to enable Spotter on your cluster.      
   * @param createConversationRequest 
   */
  createConversation(createConversationRequest, _options) {
    const requestContextPromise = this.requestFactory.createConversation(createConversationRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.createConversation(rsp)));
    }));
  }
  /**
   *   Version: 9.6.0.cl or later   Creates a custom action that appears as a menu action on a saved Answer or Liveboard visualization.  Requires `DEVELOPER` (**Has Developer privilege**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `DEVELOPER` (**Has developer privilege**) privilege is required.  #### Usage Guidelines  The API lets you create the following types of custom actions:  * URL-based action        Allows pushing data to an external URL. * Callback action           Triggers a callback to the host application and initiates a response payload on an embedded ThoughtSpot instance.  By default, custom actions are visible to only administrator or developer users. To make a custom action available to other users, and specify the groups in `group_identifiers`.  By default, the custom action is set as a _global_ action on all visualizations and saved Answers. To assign a custom action to specific Liveboard visualization, saved Answer, or Worksheet, set `visibility` to `false` in `default_action_config` property and specify the GUID or name of the object in `associate_metadata`.  For more information, see [Custom actions](https://developers.thoughtspot.com/docs/custom-action-intro).      
   * @param createCustomActionRequest 
   */
  createCustomAction(createCustomActionRequest, _options) {
    const requestContextPromise = this.requestFactory.createCustomAction(createCustomActionRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.createCustomAction(rsp)));
    }));
  }
  /**
   *  Version: 10.10.0.cl or later   Creates a custom configuration for the email customisation  #### Pre-requisites  Requires `DEVELOPER` (**has developer privilege**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `_Has developer privilege` privilege is required. Coms should be enabled on the cluster.  #### Usage guidelines  To create a custom confuguration:  1. Pass these parameters in your API request.  - A JSON map of configuration attributes `template_properties`. The following example shows the configuration attribures for a csutom configuration:  ``` {     {     \"logoUrl\": \"<logo_url>\",     \"homeUrl\": \"<home_url>\",     \"productName\": \"<Company Name in the Mail>\",     \"footerAddress\": \"<address to be visible in the footer>\",     \"ctaButtonBgColor\": \"#444DEA\",     \"ctaTextFontColor\": \"#FFFFFF\",     \"primaryBgColor\": \"#D3DEF0\",     \"hideMobileAppNudge\": <true/false>,     \"hideTsVocabularyDefinitions\": <true/false>e,     \"hideProductName\": <true/false>,     \"hideFooterPhone\": <true/false>,     \"hideFooterAddress\": <true/false>,     \"hidePrivacyPolicy\": <true/false>,     \"hideManageNotification\": <true/false>,     \"fontfamily\": \"<to maintain a single font in the entire email>\"   } } ```      
   * @param createEmailCustomisationRequest 
   */
  createEmailCustomisation(createEmailCustomisationRequest, _options) {
    const requestContextPromise = this.requestFactory.createEmailCustomisation(createEmailCustomisationRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.createEmailCustomisation(rsp)));
    }));
  }
  /**
   *   Version: 9.0.0.cl or later   Creates an Org object.  To use this API, the [Orgs](https://docs.thoughtspot.com/cloud/latest/orgs-overview) feature must be enabled in your cluster.  Requires cluster administration (**Can administer Org**) privileges. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `ORG_ADMINISTRATION` (**Can manage Orgs**) privilege is required.      
   * @param createOrgRequest 
   */
  createOrg(createOrgRequest, _options) {
    const requestContextPromise = this.requestFactory.createOrg(createOrgRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.createOrg(rsp)));
    }));
  }
  /**
   *   Version: 9.5.0.cl or later   Creates a Role object in ThoughtSpot.  Available only if [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance. To create a Role, the `ROLE_ADMINISTRATION` (**Can manage roles**) privilege is required.      
   * @param createRoleRequest 
   */
  createRole(createRoleRequest, _options) {
    const requestContextPromise = this.requestFactory.createRole(createRoleRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.createRole(rsp)));
    }));
  }
  /**
   *  Create schedule.    Version: 9.4.0.cl or later   Creates a Liveboard schedule job.  Requires at least edit access to Liveboards. To create a schedule on behalf of another user, you need  `ADMINISTRATION` (**Can administer Org**) or `JOBSCHEDULING` (**Can schedule for others**) privilege and edit access to the Liveboard. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `JOBSCHEDULING` (**Can schedule for others**) privilege is required.  #### Usage guidelines  * The description text is mandatory.  The description text appears as **Description: <your content>** in the Liveboard schedule email notifications. * For Liveboards with both charts and tables, schedule creation is only supported in PDF and XLS formats. Schedules created in CSV formats for such Liveboards will fail to run. If `PDF` is set as the `file_format`, enable `pdf_options` to get the correct attachment. Not doing so may cause the attachment to be rendered empty. * To include only specific visualizations, specify the visualization GUIDs in the `visualization_identifiers` array. * You can schedule a Liveboard job to run periodically by setting frequency parameters. You can set the schedule to run daily, weekly, monthly or every n minutes or hours. The scheduled job can also be configured to run at a specific time of the day or on specific days of the week or month. Please ensure that when setting the schedule frequency for _minute of the object_, only values that are multiples of 5 are included. * If the `frequency` parameters are defined, you can set the time zone to a value that matches your server\'s time zone. For example, `US/Central`, `Etc/UTC`, `CET`. The default time zone is `America/Los_Angeles`.  For more information about Liveboard jobs, see [ThoughtSpot Product Documentation](https://docs.thoughtspot.com/cloud/latest/liveboard-schedule).     
   * @param createScheduleRequest 
   */
  createSchedule(createScheduleRequest, _options) {
    const requestContextPromise = this.requestFactory.createSchedule(createScheduleRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.createSchedule(rsp)));
    }));
  }
  /**
   *   Version: 9.0.0.cl or later   Creates a tag object.  Tags are labels that identify a metadata object. For example, you can create a tag to designate subject areas, such as sales, HR, marketing, and finance.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `TAGMANAGEMENT` (**Can manage tags**) privilege is required to create, edit, and delete tags.      
   * @param createTagRequest 
   */
  createTag(createTagRequest, _options) {
    const requestContextPromise = this.requestFactory.createTag(createTagRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.createTag(rsp)));
    }));
  }
  /**
   *   Version: 9.0.0.cl or later   Creates a user in ThoughtSpot.  The API endpoint allows you to configure several user properties such as email address, account status, share notification preferences, and sharing visibility. You can provision the user to [groups](https://docs.thoughtspot.com/cloud/latest/groups-privileges) and [Orgs](https://docs.thoughtspot.com/cloud/latest/orgs-overview). You can also add Liveboard, Answer, and Worksheet objects to the user’s favorites list, assign a default Liveboard for the user, and set user preferences.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `USER_ADMINISTRATION` (**Can manage users**) privilege is required.      
   * @param createUserRequest 
   */
  createUser(createUserRequest, _options) {
    const requestContextPromise = this.requestFactory.createUser(createUserRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.createUser(rsp)));
    }));
  }
  /**
   *   Version: 9.0.0.cl or later   Creates a group object in ThoughtSpot.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `GROUP_ADMINISTRATION` (**Can manage groups**) privilege is required.  #### About groups Groups in ThoughtSpot are used by the administrators to define privileges and organize users based on their roles and access requirements. To know more about groups and privileges, see [ThoughtSpot Product Documentation](https://docs.thoughtspot.com/cloud/latest/groups-privileges).  #### Supported operations  The API endpoint lets you perform the following operations:  * Assign privileges * Add users * Define sharing visibility * Add sub-groups * Assign a default Liveboard      
   * @param createUserGroupRequest 
   */
  createUserGroup(createUserGroupRequest, _options) {
    const requestContextPromise = this.requestFactory.createUserGroup(createUserGroupRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.createUserGroup(rsp)));
    }));
  }
  /**
   *  Create a variable which can be used for parameterizing metadata objects   Version: 10.9.0.cl or later   Allows creating a variable which can be used for parameterizing metadata objects in ThoughtSpot.  Requires ADMINISTRATION role and TENANT scope.  The API endpoint supports the following types of variables: * CONNECTION_PROPERTY - For connection properties * TABLE_MAPPING - For table mappings * CONNECTION_PROPERTY_PER_PRINCIPAL - For connection properties per principal. In order to use this please contact support to enable this.  When creating a variable, you need to specify: * The variable type * A unique name for the variable * Whether the variable contains sensitive values (defaults to false) * The variable values (optional)  The operation will fail if: * The user lacks required permissions * The variable name already exists * The variable type is invalid * The variable values are invalid for the specified type       
   * @param createVariableRequest 
   */
  createVariable(createVariableRequest, _options) {
    const requestContextPromise = this.requestFactory.createVariable(createVariableRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.createVariable(rsp)));
    }));
  }
  /**
   *   Version: 9.9.0.cl or later   Creates a DBT connection object in ThoughtSpot.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege or `DATAMANAGEMENT` (**Can manage data**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the following Data control privileges may be required:  - `CAN_MANAGE_CUSTOM_CALENDAR`(**Can manage custom calendars**) - `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) - `CAN_MANAGE_WORKSHEET_VIEWS_TABLES` (**Can manage data models**)  #### About create DBT connection DBT connection in ThoughtSpot is used by the user to define DBT credentials for cloud . The API needs  embrace connection, embrace database name, DBT url, import type, DBT account identifier, DBT project identifier, DBT access token and environment details (or) embrace connection, embrace database name, import type, file_content to create a connection object. To know more about DBT, see ThoughtSpot Product Documentation.      
   * @param dbtConnectionRequest 
   */
  dbtConnection(dbtConnectionRequest, _options) {
    const requestContextPromise = this.requestFactory.dbtConnection(dbtConnectionRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.dbtConnection(rsp)));
    }));
  }
  /**
   *   Version: 9.9.0.cl or later   Resynchronize the existing list of models, tables, worksheet tml’s and import them to Thoughtspot based on the DBT connection object.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege or `DATAMANAGEMENT` (**Can manage data**) privilege, along with an existing DBT connection. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the following data control privileges may be required:  - `CAN_MANAGE_CUSTOM_CALENDAR`(**Can manage custom calendars**) - `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) - `CAN_MANAGE_WORKSHEET_VIEWS_TABLES` (**Can manage data models**)      
   * @param dbtGenerateSyncTmlRequest 
   */
  dbtGenerateSyncTml(dbtGenerateSyncTmlRequest, _options) {
    const requestContextPromise = this.requestFactory.dbtGenerateSyncTml(dbtGenerateSyncTmlRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.dbtGenerateSyncTml(rsp)));
    }));
  }
  /**
   *   Version: 9.9.0.cl or later   Generate required table and worksheet and import them.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege or `DATAMANAGEMENT` (**Can manage data**) privilege, along with an existing DBT connection. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the following data control privileges may be required:  - `CAN_MANAGE_CUSTOM_CALENDAR`(**Can manage custom calendars**) - `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) - `CAN_MANAGE_WORKSHEET_VIEWS_TABLES` (**Can manage data models**)  #### About generate TML Models and Worksheets to be imported can be selected by the user as part of the API.      
   * @param dbtGenerateTmlRequest 
   */
  dbtGenerateTml(dbtGenerateTmlRequest, _options) {
    const requestContextPromise = this.requestFactory.dbtGenerateTml(dbtGenerateTmlRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.dbtGenerateTml(rsp)));
    }));
  }
  /**
   *   Version: 9.9.0.cl or later   Gets a list of DBT connection objects by user and organization, available on the ThoughtSpot system.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege or `DATAMANAGEMENT` (**Can manage data**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the following Data control privileges may be required:  - `CAN_MANAGE_CUSTOM_CALENDAR`(**Can manage custom calendars**) - `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) - `CAN_MANAGE_WORKSHEET_VIEWS_TABLES` (**Can manage data models**)  #### About search DBT connection To get details of a specific DBT connection identifier, database connection identifier, database connection name, database name, project name, project identifier, environment identifier , import type and author.      
   */
  dbtSearch(_options) {
    const requestContextPromise = this.requestFactory.dbtSearch(_options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.dbtSearch(rsp)));
    }));
  }
  /**
   *   Version: 9.7.0.cl or later   Deactivates a user account.  Requires `ADMINISTRATION` (**Can administer Thoughtspot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `USER_ADMINISTRATION` (**Can manage users**) privilege is required.  To deactivate a user account, the API request body must include the following information:  - Username or the GUID of the user account - Base URL of the ThoughtSpot instance  If the API request is successful, ThoughtSpot returns the activation URL in the response. The activation URL is valid for 14 days and can be used to re-activate the account and reset the password of the deactivated account.      
   * @param deactivateUserRequest 
   */
  deactivateUser(deactivateUserRequest, _options) {
    const requestContextPromise = this.requestFactory.deactivateUser(deactivateUserRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.deactivateUser(rsp)));
    }));
  }
  /**
   *   Version: 9.2.0.cl or later   Deletes Git repository configuration from your ThoughtSpot instance.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance on your instance, the `CAN_MANAGE_VERSION_CONTROL` (**Can toggle version control for objects**) privilege.      
   * @param deleteConfigRequest 
   */
  deleteConfig(deleteConfigRequest, _options) {
    const requestContextPromise = this.requestFactory.deleteConfig(deleteConfigRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.deleteConfig(rsp)));
    }));
  }
  /**
   *   Version: 9.2.0.cl or later    **Important**: This endpoint is deprecated and will be removed from ThoughtSpot in September 2025. ThoughtSpot strongly recommends using the [Delete Connection V2](#/http/api-endpoints/connections/delete-connection-v2) endpoint to delete your connection objects.    #### Usage guidelines  Deletes a connection object.  Requires `DATAMANAGEMENT` (**Can manage data**) and edit permissions to the connection object, or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) privilege is required.  **Note**: If a connection has dependent objects, make sure you remove its associations before the delete operation.     
   * @param deleteConnectionRequest 
   */
  deleteConnection(deleteConnectionRequest, _options) {
    const requestContextPromise = this.requestFactory.deleteConnection(deleteConnectionRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.deleteConnection(rsp)));
    }));
  }
  /**
   *   Version: 10.4.0.cl or later   Deletes a connection object.  **Note**: If a connection has dependent objects, make sure you remove its associations before the delete operation.  Requires `DATAMANAGEMENT` (**Can manage data**) and edit permissions to the connection object, or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) privilege is required.      
   * @param connectionIdentifier Unique ID or name of the connection.
   */
  deleteConnectionV2(connectionIdentifier, _options) {
    const requestContextPromise = this.requestFactory.deleteConnectionV2(connectionIdentifier, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.deleteConnectionV2(rsp)));
    }));
  }
  /**
   *   Version: 9.6.0.cl or later   Removes the custom action specified in the API request.  Requires `DEVELOPER` (**Has Developer privilege**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `DEVELOPER` (**Has developer privilege**) privilege is required.      
   * @param customActionIdentifier Unique ID or name of the custom action.
   */
  deleteCustomAction(customActionIdentifier, _options) {
    const requestContextPromise = this.requestFactory.deleteCustomAction(customActionIdentifier, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.deleteCustomAction(rsp)));
    }));
  }
  /**
   *   Version: 9.9.0.cl or later   Removes the specified DBT connection object from the ThoughtSpot system.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) or `DATAMANAGEMENT` (**Can manage data ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the following Data control privileges may be required:  - `CAN_MANAGE_CUSTOM_CALENDAR`(**Can manage custom calendars**) - `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) - `CAN_MANAGE_WORKSHEET_VIEWS_TABLES` (**Can manage data models**)      
   * @param dbtConnectionIdentifier Unique ID of the DBT Connection.
   */
  deleteDbtConnection(dbtConnectionIdentifier, _options) {
    const requestContextPromise = this.requestFactory.deleteDbtConnection(dbtConnectionIdentifier, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.deleteDbtConnection(rsp)));
    }));
  }
  /**
   *  Version: 10.10.0.cl or later   Deletes the configuration for the email customisation.  #### Pre-requisites  Requires `DEVELOPER` (**has developer privilege**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `_Has developer privilege` privilege is required. Coms should be enabled on the cluster.  #### Usage guidelines  Deletes the configuration available for the cluster/org. Pass the `template_identifier` in the API request.  Note: `template_identifier` can be fetched from search API request.      
   * @param templateIdentifier Unique ID or name of the email customization.
   */
  deleteEmailCustomisation(templateIdentifier, _options) {
    const requestContextPromise = this.requestFactory.deleteEmailCustomisation(templateIdentifier, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.deleteEmailCustomisation(rsp)));
    }));
  }
  /**
   *   Version: 9.0.0.cl or later   Removes the specified metadata object from the ThoughtSpot system.  Requires edit access to the metadata object.       
   * @param deleteMetadataRequest 
   */
  deleteMetadata(deleteMetadataRequest, _options) {
    const requestContextPromise = this.requestFactory.deleteMetadata(deleteMetadataRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.deleteMetadata(rsp)));
    }));
  }
  /**
   *   Version: 9.0.0.cl or later   Deletes an Org object from the ThoughtSpot system.  Requires cluster administration (**Can administer Org**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `ORG_ADMINISTRATION` (**Can manage Orgs**) privilege is required.  When you delete an Org, all its users and objects created in that Org context are removed. However, if the users in the deleted Org also exists in other Orgs, they are removed only from the deleted Org.      
   * @param orgIdentifier ID or name of the Org
   */
  deleteOrg(orgIdentifier, _options) {
    const requestContextPromise = this.requestFactory.deleteOrg(orgIdentifier, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.deleteOrg(rsp)));
    }));
  }
  /**
   *   Version: 9.5.0.cl or later   Deletes a Role object from the ThoughtSpot system.  Available only if [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance. To delete a Role, the `ROLE_ADMINISTRATION` (**Can manage roles**) privilege is required.      
   * @param roleIdentifier Unique ID or name of the Role. ReadOnly roles cannot be deleted.
   */
  deleteRole(roleIdentifier, _options) {
    const requestContextPromise = this.requestFactory.deleteRole(roleIdentifier, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.deleteRole(rsp)));
    }));
  }
  /**
   *  Deletes a scheduled job.    Version: 9.4.0.cl or later   Deletes a scheduled Liveboard job.  Requires at least edit access to Liveboard or `ADMINISTRATION` (**Can administer Org**) privilege.    If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `JOBSCHEDULING` (**Can schedule for others**) privilege is required.      
   * @param scheduleIdentifier Unique ID or name of the scheduled job.
   */
  deleteSchedule(scheduleIdentifier, _options) {
    const requestContextPromise = this.requestFactory.deleteSchedule(scheduleIdentifier, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.deleteSchedule(rsp)));
    }));
  }
  /**
   *   Version: 9.0.0.cl or later   Deletes a tag object from the ThoughtSpot system  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `TAGMANAGEMENT` (**Can manage tags**) privilege is required to create, edit, and delete tags.      
   * @param tagIdentifier Tag identifier Tag name or Tag id.
   */
  deleteTag(tagIdentifier, _options) {
    const requestContextPromise = this.requestFactory.deleteTag(tagIdentifier, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.deleteTag(rsp)));
    }));
  }
  /**
   *   Version: 9.0.0.cl or later   Deletes a user from the ThoughtSpot system.  If you want to remove a user from a specific Org but not from ThoughtSpot, update the group and Org mapping properties of the user object via a POST API call to the [/api/rest/2.0/users/{user_identifier}/update](#/http/api-endpoints/users/update-user) endpoint.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `USER_ADMINISTRATION` (**Can manage users**) privilege is required.      
   * @param userIdentifier GUID / name of the user
   */
  deleteUser(userIdentifier, _options) {
    const requestContextPromise = this.requestFactory.deleteUser(userIdentifier, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.deleteUser(rsp)));
    }));
  }
  /**
   *   Version: 9.0.0.cl or later   Removes the specified group object from the ThoughtSpot system.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `GROUP_ADMINISTRATION` (**Can manage groups**) privilege is required.      
   * @param groupIdentifier GUID or name of the group.
   */
  deleteUserGroup(groupIdentifier, _options) {
    const requestContextPromise = this.requestFactory.deleteUserGroup(groupIdentifier, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.deleteUserGroup(rsp)));
    }));
  }
  /**
   *  Delete a variable   Version: 10.9.0.cl or later   Allows deleting a variable from ThoughtSpot.  Requires ADMINISTRATION role and TENANT scope.  The API endpoint requires: * The variable identifier (ID or name)  The operation will fail if: * The user lacks required permissions * The variable doesn\'t exist * The variable is being used by other objects      
   * @param identifier Unique id or name of the variable
   */
  deleteVariable(identifier, _options) {
    const requestContextPromise = this.requestFactory.deleteVariable(identifier, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.deleteVariable(rsp)));
    }));
  }
  /**
   *   Version: 9.2.0.cl or later   Allows you to deploy a commit and publish TML content to your ThoughtSpot instance.  Requires at least edit access to the objects used in the deploy operation.  The API deploys the head of the branch unless a `commit_id` is specified in the API request. If the branch name is not defined in the request, the default branch is considered for deploying commits.  For more information, see [Git integration documentation](https://developers.thoughtspot.com/docs/git-integration).      
   * @param deployCommitRequest 
   */
  deployCommit(deployCommitRequest, _options) {
    const requestContextPromise = this.requestFactory.deployCommit(deployCommitRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.deployCommit(rsp)));
    }));
  }
  /**
   *   Version: 9.9.0.cl or later   Exports the difference in connection metadata between CDW and ThoughtSpot  Requires `DATAMANAGEMENT` (**Can manage data**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the following Data control privileges may be required:   - `CAN_MANAGE_CUSTOM_CALENDAR`(**Can manage custom calendars**) - `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) - `CAN_MANAGE_WORKSHEET_VIEWS_TABLES` (**Can manage data models**)  To download the connection metadata difference between ThoughtSpot and CDW, pass the connection GUID as `connection_identifier` in the API request.      
   * @param connectionIdentifier GUID of the connection
   */
  downloadConnectionMetadataChanges(connectionIdentifier, _options) {
    const requestContextPromise = this.requestFactory.downloadConnectionMetadataChanges(connectionIdentifier, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.downloadConnectionMetadataChanges(rsp)));
    }));
  }
  /**
   *   Version: 9.0.0.cl or later   Exports an Answer in the given file format. You can download the Answer data as a PDF, PNG, CSV, or XLSX file.  Requires at least view access to the Answer.  #### Usage guidelines  In the request body, the GUID or name of the Answer and set `file_format`. The default file format is CSV.  **NOTE**: * The downloadable file returned in API response file is extensionless. Please rename the downloaded file by typing in the relevant extension. * HTML rendering is not supported for PDF exports of Answers with tables.  Optionally, you can define [runtime overrides](https://developers.thoughtspot.com/docs/fetch-data-and-report-apis#_runtime_overrides) to apply to the Answer data.  The `record_size` attribute determines the number of records to retrieve in an API call. For more information about pagination, record size, and maximum row limit, see [Pagination and record size settings](https://developers.thoughtspot.com/docs/fetch-data-and-report-apis#_pagination_settings_for_data_and_report_api).       
   * @param exportAnswerReportRequest 
   */
  exportAnswerReport(exportAnswerReportRequest, _options) {
    const requestContextPromise = this.requestFactory.exportAnswerReport(exportAnswerReportRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.exportAnswerReport(rsp)));
    }));
  }
  /**
   *   Version: 9.0.0.cl or later   Exports a Liveboard and its visualizations in PDF or PNG file format.  Requires at least view access to the Liveboard.  #### Usage guidelines  In the request body, specify the GUID or name of the Liveboard. To generate a Liveboard report with specific visualizations, add GUIDs or names of the visualizations.  The default `file_format` is PDF. For PDF downloads, you can specify additional parameters to customize the page orientation and include or exclude the cover page, logo, footer text, and page numbers. Similar customization options are also available for PNG output.  **NOTE**: The downloadable file returned in API response file is extensionless. Please rename the downloaded file by typing in the relevant extension.  Optionally, you can define [runtime overrides](https://developers.thoughtspot.com/docs/fetch-data-and-report-apis#_runtime_overrides) to apply to the Answer data.  To include unsaved changes in the report, pass the `transient_pinboard_content` script generated from the `getExportRequestForCurrentPinboard` method in the Visual Embed SDK. Upon successful execution, the API returns the report with unsaved changes, including ad hoc changes to visualizations. For more information, see [Liveboard Report API](https://developers.thoughtspot.com/docs/fetch-data-and-report-apis#_liveboard_report_api).       
   * @param exportLiveboardReportRequest 
   */
  exportLiveboardReport(exportLiveboardReportRequest, _options) {
    const requestContextPromise = this.requestFactory.exportLiveboardReport(exportLiveboardReportRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.exportLiveboardReport(rsp)));
    }));
  }
  /**
   *   Version: 9.0.0.cl or later   Exports the [TML](https://docs.thoughtspot.com/cloud/latest/tml) representation of metadata objects in JSON or YAML format.  Requires `DATADOWNLOADING` (**Can download Data**) and at least view access to the metadata object.  #### Usage guidelines  * You can export one or several objects by passing metadata object GUIDs in the `metadata` array. * When exporting TML content for a Liveboard or Answer object, you can set `export_associated` to `true` to retrieve TML content for underlying Worksheets, Tables, or Views, including the GUID of each object within the headers. When   `export_associated` is set to `true`, consider retrieving one metadata object at a time. * Set `export_fqns` to `true` to add FQNs of the referenced objects in the TML content. For example, if you send an API request to retrieve TML for a Liveboard and its associated objects, the API returns the TML content with FQNs of the referenced Worksheet. Exporting TML with FQNs is useful if ThoughtSpot has multiple objects with the same name and you want to eliminate ambiguity when importing TML files into ThoughtSpot. It eliminates the need for adding FQNs of the referenced objects manually during the import operation. * To export only the TML of feedbacks associated with an object, set the GUID of the object as `identifier`, and set the `type` as `FEEDBACK` in the `metadata` array. * To export the TML of an object along with the feedbacks associated with it, set the GUID of the object as `identifier`, set the `type` as `LOGIAL_TABLE` in the `metadata` array, and set `export_with_associated_feedbacks` in `export_options` to true.  For more information, see [TML Documentation](https://developers.thoughtspot.com/docs/tml#_export_a_tml).  For more information on feedbacks, see [Feedback Documentation](https://docs.thoughtspot.com/cloud/latest/sage-feedback).     
   * @param exportMetadataTMLRequest 
   */
  exportMetadataTML(exportMetadataTMLRequest, _options) {
    const requestContextPromise = this.requestFactory.exportMetadataTML(exportMetadataTMLRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.exportMetadataTML(rsp)));
    }));
  }
  /**
   *   Version: 10.1.0.cl or later   Exports the [TML](https://docs.thoughtspot.com/cloud/latest/tml) representation of metadata objects in JSON or YAML format.  ### **Permissions Required**  Requires `DATAMANAGEMENT` (**Can manage data**) and `USERMANAGEMENT` (**Can manage users**) privileges.  #### **Usage Guidelines**  This API is only applicable for `USER`, `GROUP`, and `ROLES` metadata types.  - `batch_offset` Indicates the starting position within the complete dataset from which the API should begin returning objects. Useful for paginating results efficiently. - `batch_size` Specifies the number of objects or items to retrieve in a single request. Helps control response size for better performance. - `edoc_format` Defines the format of the TML content. The exported metadata can be in JSON or YAML format. - `export_dependent` Specifies whether to include dependent metadata objects in the export. Ensures related objects are also retrieved if needed. - `all_orgs_override` Indicates whether the export operation applies across all organizations. Useful for multi-tenant environments where cross-org exports are required.      
   * @param exportMetadataTMLBatchedRequest 
   */
  exportMetadataTMLBatched(exportMetadataTMLBatchedRequest, _options) {
    const requestContextPromise = this.requestFactory.exportMetadataTMLBatched(exportMetadataTMLBatchedRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.exportMetadataTMLBatched(rsp)));
    }));
  }
  /**
   *   Version: 9.0.0.cl or later   Fetches data from a saved Answer.  Requires at least view access to the saved Answer.  The `record_size` attribute determines the number of records to retrieve in an API call. For more information about pagination, record size, and maximum row limit, see [Pagination and record size settings](https://developers.thoughtspot.com/docs/fetch-data-and-report-apis#_pagination_settings_for_data_and_report_apis).     
   * @param fetchAnswerDataRequest 
   */
  fetchAnswerData(fetchAnswerDataRequest, _options) {
    const requestContextPromise = this.requestFactory.fetchAnswerData(fetchAnswerDataRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.fetchAnswerData(rsp)));
    }));
  }
  /**
   *   Version: 9.0.0.cl or later   Fetches the underlying SQL query data for an Answer object.  Requires at least view access to the Answer object.  Upon successful execution, the API returns the SQL queries for the specified object as shown in this example: ``` {    \"metadata_id\":\"8fbe44a8-46ad-4b16-8d39-184b2fada490\",    \"metadata_name\":\"Total sales\",    \"metadata_type\":\"ANSWER\",    \"sql_queries\":[       {          \"metadata_id\":\"8fbe44a8-46ad-4b16-8d39-184b2fada490\",          \"metadata_name\":\"Total sales -test\",          \"sql_query\":\"SELECT \\n  \\\"ta_1\\\".\\\"REGION\\\" \\\"ca_1\\\", \\n  \\\"ta_2\\\".\\\"PRODUCTNAME\\\" \\\"ca_2\\\", \\n  \\\"ta_1\\\".\\\"STORENAME\\\" \\\"ca_3\\\", \\n  CASE\\n    WHEN sum(\\\"ta_3\\\".\\\"SALES\\\") IS NOT NULL THEN sum(\\\"ta_3\\\".\\\"SALES\\\")\\n    ELSE 0\\n  END \\\"ca_4\\\", \\n  CASE\\n    WHEN sum(\\\"ta_3\\\".\\\"QUANTITYPURCHASED\\\") IS NOT NULL THEN sum(\\\"ta_3\\\".\\\"QUANTITYPURCHASED\\\")\\n    ELSE 0\\n  END \\\"ca_5\\\"\\nFROM \\\"RETAILAPPAREL\\\".\\\"PUBLIC\\\".\\\"FACT_RETAPP_SALES\\\" \\\"ta_3\\\"\\n  JOIN \\\"RETAILAPPAREL\\\".\\\"PUBLIC\\\".\\\"DIM_RETAPP_STORES\\\" \\\"ta_1\\\"\\n    ON \\\"ta_3\\\".\\\"STOREID\\\" = \\\"ta_1\\\".\\\"STOREID\\\"\\n  JOIN \\\"RETAILAPPAREL\\\".\\\"PUBLIC\\\".\\\"DIM_RETAPP_PRODUCTS\\\" \\\"ta_2\\\"\\n    ON \\\"ta_3\\\".\\\"PRODUCTID\\\" = \\\"ta_2\\\".\\\"PRODUCTID\\\"\\nGROUP BY \\n  \\\"ca_1\\\", \\n  \\\"ca_2\\\", \\n  \\\"ca_3\\\"\\n\"       }    ] } ```      
   * @param fetchAnswerSqlQueryRequest 
   */
  fetchAnswerSqlQuery(fetchAnswerSqlQueryRequest, _options) {
    const requestContextPromise = this.requestFactory.fetchAnswerSqlQuery(fetchAnswerSqlQueryRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.fetchAnswerSqlQuery(rsp)));
    }));
  }
  /**
   *   Version: 10.4.0.cl or later   Gets information about the status of the TML async import task scheduled using the `/api/rest/2.0/metadata/tml/async/import` API call.  To fetch the task details, specify the ID of the TML async import task.    Requires access to the task ID. The API allows users who initiated the asynchronous TML import via `/api/rest/2.0/metadata/tml/async/import` to view the status of their tasks.  Users with administration privilege can view the status of all import tasks initiated by the users in their Org.  #### Usage guidelines  See [TML API Documentation](https://developers.thoughtspot.com/docs/tml#_fetch_status_of_the_tml_import_task) for usage guidelines.     
   * @param fetchAsyncImportTaskStatusRequest 
   */
  fetchAsyncImportTaskStatus(fetchAsyncImportTaskStatusRequest, _options) {
    const requestContextPromise = this.requestFactory.fetchAsyncImportTaskStatus(fetchAsyncImportTaskStatusRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.fetchAsyncImportTaskStatus(rsp)));
    }));
  }
  /**
   *   Version: 9.9.0.cl or later   Validates the difference in connection metadata between CDW and ThoughtSpot.  Requires `DATAMANAGEMENT` (**Can manage data**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the following Data control privileges may be required:  - `CAN_MANAGE_CUSTOM_CALENDAR`(**Can manage custom calendars**) - `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) - `CAN_MANAGE_WORKSHEET_VIEWS_TABLES` (**Can manage data models**)  Returns a boolean indicating whether there is any difference between the connection metadata at ThoughtSpot and CDW.  To get the connection metadata difference status, pass the connection GUID as `connection_identifier` in the API request.      
   * @param connectionIdentifier GUID of the connection
   */
  fetchConnectionDiffStatus(connectionIdentifier, _options) {
    const requestContextPromise = this.requestFactory.fetchConnectionDiffStatus(connectionIdentifier, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.fetchConnectionDiffStatus(rsp)));
    }));
  }
  /**
   *   Version: 9.0.0.cl or later   Gets data from a Liveboard object and its visualization.    Requires at least view access to the Liveboard.  #### Usage guidelines  In the request body, specify the GUID or name of the Liveboard. To get data for specific visualizations, add the GUIDs or names of the visualizations in the API request.  To include unsaved changes in the report, pass the `transient_pinboard_content` script generated from the `getExportRequestForCurrentPinboard` method in the Visual Embed SDK. Upon successful execution, the API returns the report with unsaved changes. If the new Liveboard experience mode, the transient content includes ad hoc changes to visualizations such as sorting, toggling of legends, and data drill down.  For more information, and see [Liveboard data API](https://developers.thoughtspot.com/docs/fetch-data-and-report-apis#_fetch_liveboard_data_api).     
   * @param fetchLiveboardDataRequest 
   */
  fetchLiveboardData(fetchLiveboardDataRequest, _options) {
    const requestContextPromise = this.requestFactory.fetchLiveboardData(fetchLiveboardDataRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.fetchLiveboardData(rsp)));
    }));
  }
  /**
   *   Version: 9.0.0.cl or later   Fetches the underlying SQL query data for a Liveboard object and its visualizations.  Requires at least view access to the Liveboard object.  To get SQL query data for a Liveboard, specify the GUID of the Liveboard. Optionally, you can add an array of visualization GUIDs to retrieve the SQL query data for visualizations in the Liveboard.  Upon successful execution, the API returns the SQL queries for the specified object as shown in this example: ``` {   \"metadata_id\": \"fa68ae91-7588-4136-bacd-d71fb12dda69\",   \"metadata_name\": \"Total Sales\",   \"metadata_type\": \"LIVEBOARD\",   \"sql_queries\": [     {       \"metadata_id\": \"b3b6d2b9-089a-490c-8e16-b144650b7843\",       \"metadata_name\": \"Total quantity purchased, Total sales by region\",       \"sql_query\": \"SELECT \\n  \\\"ta_1\\\".\\\"REGION\\\" \\\"ca_1\\\", \\n  CASE\\n    WHEN sum(\\\"ta_2\\\".\\\"QUANTITYPURCHASED\\\") IS NOT NULL THEN sum(\\\"ta_2\\\".\\\"QUANTITYPURCHASED\\\")\\n    ELSE 0\\n  END \\\"ca_2\\\", \\n  CASE\\n    WHEN sum(\\\"ta_2\\\".\\\"SALES\\\") IS NOT NULL THEN sum(\\\"ta_2\\\".\\\"SALES\\\")\\n    ELSE 0\\n  END \\\"ca_3\\\"\\nFROM \\\"RETAILAPPAREL\\\".\\\"PUBLIC\\\".\\\"FACT_RETAPP_SALES\\\" \\\"ta_2\\\"\\n  JOIN \\\"RETAILAPPAREL\\\".\\\"PUBLIC\\\".\\\"DIM_RETAPP_STORES\\\" \\\"ta_1\\\"\\n    ON \\\"ta_2\\\".\\\"STOREID\\\" = \\\"ta_1\\\".\\\"STOREID\\\"\\nGROUP BY \\\"ca_1\\\"\"     }   ] } ```      
   * @param fetchLiveboardSqlQueryRequest 
   */
  fetchLiveboardSqlQuery(fetchLiveboardSqlQueryRequest, _options) {
    const requestContextPromise = this.requestFactory.fetchLiveboardSqlQuery(fetchLiveboardSqlQueryRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.fetchLiveboardSqlQuery(rsp)));
    }));
  }
  /**
   *   Version: 9.0.0.cl or later   Fetches security audit logs.    Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the [Admin Control](https://developers.thoughtspot.com/docs/rbac#_admin_control) privileges are required.   #### Usage guidelines  By default, the API retrieves logs for the last 24 hours. You can set a custom duration in EPOCH time. Make sure the log duration specified in your API request doesn’t exceed 24 hours. If you must fetch logs for a longer time range, modify the duration and make multiple sequential API requests.  Upon successful execution, the API returns logs with the following information: * timestamp of the event * event ID * event type * name and GUID of the user * IP address of ThoughtSpot instance  For more information see [Audit logs Documentation](https://developers.thoughtspot.com/docs/audit-logs).      
   * @param fetchLogsRequest 
   */
  fetchLogs(fetchLogsRequest, _options) {
    const requestContextPromise = this.requestFactory.fetchLogs(fetchLogsRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.fetchLogs(rsp)));
    }));
  }
  /**
   *   Version: 9.0.0.cl or later   Fetches object permission details for a given principal object such as a user and group.  Requires view access to the metadata object.   #### Usage guidelines  * To get a list of all metadata objects that a user or group can access, specify the `type` and GUID or name of the principal. * To get permission details for a specific object, add the `type` and GUID or name of the metadata object to your API request.  Upon successful execution, the API returns a list of metadata objects and permission details for each object.        
   * @param fetchPermissionsOfPrincipalsRequest 
   */
  fetchPermissionsOfPrincipals(fetchPermissionsOfPrincipalsRequest, _options) {
    const requestContextPromise = this.requestFactory.fetchPermissionsOfPrincipals(fetchPermissionsOfPrincipalsRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.fetchPermissionsOfPrincipals(rsp)));
    }));
  }
  /**
   *   Version: 9.0.0.cl or later   Fetches permission details for a given metadata object.  Requires view access to the metadata object.  #### Usage guidelines  * To fetch a list of users and groups for a metadata object, specify `type` and GUID or name of the metadata object. * To get permission details for a specific user or group, add `type` and GUID or name of the principal object to your API request.  Upon successful execution, the API returns permission details and principal information for the object specified in the API request.      
   * @param fetchPermissionsOnMetadataRequest 
   */
  fetchPermissionsOnMetadata(fetchPermissionsOnMetadataRequest, _options) {
    const requestContextPromise = this.requestFactory.fetchPermissionsOnMetadata(fetchPermissionsOnMetadataRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.fetchPermissionsOnMetadata(rsp)));
    }));
  }
  /**
   *   Version: 9.0.0.cl or later   Enforces logout on current user sessions.    Use this API with caution as it may invalidate active user sessions and force users to re-login. Make sure you specify the usernames or GUIDs. If you pass null values in the API call, all user sessions on your cluster become invalid, and the users are forced to re-login.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `USER_ADMINISTRATION` (**Can manage users**) privilege is required.      
   * @param forceLogoutUsersRequest 
   */
  forceLogoutUsers(forceLogoutUsersRequest, _options) {
    const requestContextPromise = this.requestFactory.forceLogoutUsers(forceLogoutUsersRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.forceLogoutUsers(rsp)));
    }));
  }
  /**
   *   Version: 9.0.0.cl or later    Gets session information for the currently logged-in user.  This API does not require any parameters to be passed in the request.    Any ThoughtSpot user can access this endpoint and send an API request. The data returned in the API response varies according to user\'s privilege and object access permissions.      
   */
  getCurrentUserInfo(_options) {
    const requestContextPromise = this.requestFactory.getCurrentUserInfo(_options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.getCurrentUserInfo(rsp)));
    }));
  }
  /**
   *  Get token for the currently logged-in user.    Version: 9.4.0.cl or later   Gets token details for the currently logged-in user.  You can use this endpoint to obtain the token associated with the user\'s session.  This API does not require any parameters to be passed in the request.    Any ThoughtSpot user can access this endpoint and send an API request.      
   */
  getCurrentUserToken(_options) {
    const requestContextPromise = this.requestFactory.getCurrentUserToken(_options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.getCurrentUserToken(rsp)));
    }));
  }
  /**
   *   Version: 10.4.0.cl or later   Gets an authentication token with custom rules and security attributes and creates a full session in ThoughtSpot for a given user. By default, the token obtained from ThoughtSpot remains valid for 5 mins.  To add a new user and assign privileges during auto creation, you need `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled, the `CONTROL_TRUSTED_AUTH`(**Can Enable or Disable Trusted Authentication**) privilege and edit access to the data source is required.  To assign security attributes with filter rules and Parameters to the JWT token, you\'ll need administrator privileges and edit access to the data source (Worksheet or Model). If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled, the `CONTROL_TRUSTED_AUTH`(**Can Enable or Disable Trusted Authentication**) privilege and edit access to the data source is required.  #### Usage guidelines  You can generate the token for a user by providing a `username` and `password`, or by using the cluster’s `secret_key`.  To generate a `secret_key` on your cluster, the administrator must enable [Trusted authentication](https://developers.thoughtspot.com/docs/?pageid=trusted-auth#trusted-auth-enable) in the **Develop** > **Customizations** > **Security Settings** page.  **Note**: When both `password` and `secret_key` are included in the API request, `password` takes precedence.  If Multi-Factor Authentication (MFA) is enabled on your instance, the API login request with basic authentication (`username`  and `password` ) returns an error. You can switch to token-based authentication with  `secret_key`  or contact ThoughtSpot Support for assistance.  ##### Attribute-Based Access Control (ABAC) with tokens  To implement Attribute-Based Access Control (ABAC) and assign security entitlements to users during session creation, you can generate a token with custom filtering rules and Parameters in the `filter_rules` and `parameter_values` array respectively. These attributes can be configured to persist on a specific set of objects for user sessions initiated using the token. Once defined, the rules are added to the user\'s `access_control_properties` object, after which all sessions will use the persisted values.  Specify the object type as `LOGICAL_TABLE`.  The `LIVEBOARD` and `ANSWER` object types are not supported.  For more information, see [ABAC via tokens Documentation](https://developers.thoughtspot.com/docs/api-authv2#_get_tokens_with_custom_rules_and_filter_conditions).  ##### Just-in-time provisioning  For just-in-time user creation and provisioning, define the following attributes:  * `auto_create` * `username` * `display_name` * `email` * `groups`  Set `auto_create` to `true` if the user is not available in ThoughtSpot. If the user already exists in ThoughtSpot and the `auto_create` parameter is set to `true` in the API request, the user properties such as the display name, email, Org and group assignment will not be updated with new values.  For more information, see [Just-in-time provisioning](https://developers.thoughtspot.com/docs/just-in-time-provisioning).  ##### Important point to note All options in the token creation APIs that define access to the content in ThoughtSpot will do so during the token creation and not when the token is being used for authentication. For example, `auto_create:true` will create the user when the authentication token is created. Persist options such as  `APPEND`, `REPLACE`, `RESET` will persist security parameters on the user profile when the token is created, while Persist option `NONE` will not persist anything but will be honoured in the session.      
   * @param getCustomAccessTokenRequest 
   */
  getCustomAccessToken(getCustomAccessTokenRequest, _options) {
    const requestContextPromise = this.requestFactory.getCustomAccessToken(getCustomAccessTokenRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.getCustomAccessToken(rsp)));
    }));
  }
  /**
   *   Version: 9.0.0.cl or later   Gets an authentication token and creates a full session in ThoughtSpot for a given user. By default, the token obtained from ThoughtSpot remains valid for 5 mins.  You can generate the token for a user by providing a `username` and `password`, or by using the cluster’s `secret_key` (for [Trusted authentication](https://developers.thoughtspot.com/docs/?pageid=trusted-auth#trusted-auth-enable)).  To generate a `secret_key` on your cluster, the administrator must enable **Trusted authentication** in the **Develop** > **Customizations** > **Security Settings** page. For more information, see [Trusted authentication](https://developers.thoughtspot.com/docs/?pageid=trusted-auth#trusted-auth-enable).  **Note**: When both `password` and `secret_key` are included in the API request, `password` takes precedence.  If Multi-Factor Authentication (MFA) is enabled on your instance, the API login request with basic authentication (`username`  and `password` ) returns an error. You can switch to token-based authentication with  `secret_key`  or contact ThoughtSpot Support for assistance.  #### Just-in-time provisioning  For just-in-time user creation and provisioning, define the following attributes:  * `auto_create` * `username` * `display_name` * `email` * `group_identifiers`  Set `auto_create` to `True` if the user is not available in ThoughtSpot. If the user already exists in ThoughtSpot and the `auto_create` parameter is set to `true`, the API call will update user properties like display name, email and group assignment.  For more information, see [Just-in-time provisioning](https://developers.thoughtspot.com/docs/just-in-time-provisioning).  To add a new user and assign privileges, you need `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled, the `CONTROL_TRUSTED_AUTH`(**Can Enable or Disable Trusted Authentication**) privilege is required.  #### Important point to note All options in the token creation APIs changing the content in ThoughtSpot will do so during the token creation and not when the token is being used for authentication. For example, `auto_create:true` will create the user when the authentication token is created.      
   * @param getFullAccessTokenRequest 
   */
  getFullAccessToken(getFullAccessTokenRequest, _options) {
    const requestContextPromise = this.requestFactory.getFullAccessToken(getFullAccessTokenRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.getFullAccessToken(rsp)));
    }));
  }
  /**
   *   Version: 9.0.0.cl or later   Gets an authentication token that provides access to a specific metadata object. By default, the token obtained from ThoughtSpot remains valid for 5 mins.  You can generate the token for a user by providing a `username` and `password`, or by using the cluster’s `secret key` (for [Trusted authentication](https://developers.thoughtspot.com/docs/?pageid=trusted-auth#trusted-auth-enable)).  To generate a `secret_key` on your cluster, the administrator must enable **Trusted authentication** in the **Develop** > **Customizations** > **Security Settings** page.  **Note**: When both `password` and `secret_key` are included in the API request,  `password` takes precedence.  If Multi-Factor Authentication (MFA) is enabled on your instance, the API login request with basic authentication (`username`  and `password` ) returns an error. You can switch to token-based authentication with  `secret_key`  or contact ThoughtSpot Support for assistance.  #### Just-in-time provisioning  For just-in-time user creation and provisioning, define the following attributes:  * `auto_create` * `username` * `display_name` * `email` * `group_identifiers`  Set `auto_create` to `True` if the user is not available in ThoughtSpot. If the user already exists in ThoughtSpot and the `auto_create` parameter is set to `true`, the API call will update user properties like display name, email and group assignment.  For more information, see [Just-in-time provisioning](https://developers.thoughtspot.com/docs/just-in-time-provisioning).  To add a new user and assign privileges, you need `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled, the `CONTROL_TRUSTED_AUTH`(**Can Enable or Disable Trusted Authentication**) privilege is required.  #### Important point to note All options in the token creation APIs changing the content in ThoughtSpot will do so during the token creation and not when the token is being used for authentication. For example, `auto_create:true` will create the user when the authentication token is created.      
   * @param getObjectAccessTokenRequest 
   */
  getObjectAccessToken(getObjectAccessTokenRequest, _options) {
    const requestContextPromise = this.requestFactory.getObjectAccessToken(getObjectAccessTokenRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.getObjectAccessToken(rsp)));
    }));
  }
  /**
   *   Version: 9.0.0.cl or later   Retrieves the current configuration details of the cluster. If the request is successful, the API returns a list configuration settings applied on the cluster.  Requires `ADMINISTRATION`(**Can administer ThoughtSpot**) privilege to view these complete configuration settings of the cluster. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `SYSTEM_INFO_ADMINISTRATION` (**Can view system activities**) privilege is required.  This API does not require any parameters to be passed in the request.      
   */
  getSystemConfig(_options) {
    const requestContextPromise = this.requestFactory.getSystemConfig(_options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.getSystemConfig(rsp)));
    }));
  }
  /**
   *   Version: 9.0.0.cl or later   Gets system information such as the release version, locale, time zone, deployment environment, date format, and date time format of the cluster.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privileges. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `SYSTEM_INFO_ADMINISTRATION` (**Can view system activities**) privilege is required.  This API does not require any parameters to be passed in the request.        
   */
  getSystemInformation(_options) {
    const requestContextPromise = this.requestFactory.getSystemInformation(_options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.getSystemInformation(rsp)));
    }));
  }
  /**
   *   Version: 9.2.0.cl or later   Gets a list of configuration overrides applied on the cluster.    Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `APPLICATION_ADMINISTRATION` (**Can manage application settings**) privilege is required.  This API does not require any parameters to be passed in the request.        
   */
  getSystemOverrideInfo(_options) {
    const requestContextPromise = this.requestFactory.getSystemOverrideInfo(_options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.getSystemOverrideInfo(rsp)));
    }));
  }
  /**
   *   Version: 9.0.0.cl or later   Imports [TML](https://docs.thoughtspot.com/cloud/latest/tml) files into ThoughtSpot.  Requires `DATAMANAGEMENT` (**Can manage data**) or `ADMINISTRATION` (**Can administer ThoughtsSpot**) privilege.  If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the following Data control privileges may be required: - `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) - `CAN_MANAGE_WORKSHEET_VIEWS_TABLES` (**Can manage data models**)  #### Usage guidelines  *  Import all related objects in a single TML Import API call. For example, Tables that use the same Connection object and Worksheets connected to these Tables. * Include the `fqn` property to distinguish objects that have the same name.   For example, if you have multiple Connections or Worksheets with the same name on ThoughtSpot and the Connection or Worksheet referenced in your TML file does not have a unique name to distinguish, it may result in invalid object references.   Adding `fqn` helps ThoughtSpot differentiate a Table from another with the same name.   We recommend [exporting TML with FQNs](#/http/api-endpoints/metadata/export-metadata-tml) and using these during the import operation. * You can upload multiple TML files at a time.   If you import a Worksheet along with Liveboards, Answers, and other dependent objects in a single API call, the imported objects will be immediately available for use.   When you import only a Worksheet object, it may take some time for the Worksheet to become available in the ThoughtSpot system. Please wait for a few minutes, and then proceed to create an Answer and Liveboard from the newly imported Worksheet.  For more information, see [TML Documentation](https://developers.thoughtspot.com/docs/tml#_import_a_tml).      
   * @param importMetadataTMLRequest 
   */
  importMetadataTML(importMetadataTMLRequest, _options) {
    const requestContextPromise = this.requestFactory.importMetadataTML(importMetadataTMLRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.importMetadataTML(rsp)));
    }));
  }
  /**
   *   Version: 10.4.0.cl or later   Schedules a task to import [TML](https://docs.thoughtspot.com/cloud/latest/tml) files into ThoughtSpot. You can use this API endpoint to process TML objects asynchronously when importing TMLs of large and complex metadata objects into ThoughtSpot. Unlike the synchronous import TML operation, the API processes TML data in the background and returns a task ID, which can be used to check the status of the import task via `/api/rest/2.0/metadata/tml/async/status` API endpoint.  Requires `DATAMANAGEMENT` (**Can manage data**) or `ADMINISTRATION` (**Can administer ThoughtsSpot**) privilege, and edit access to the TML objects.  If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the following Data control privileges may be required: - `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) - `CAN_MANAGE_WORKSHEET_VIEWS_TABLES` (**Can manage data models**)  #### Usage guidelines  See [Async TML API Documentation](https://developers.thoughtspot.com/docs/tml#_import_tml_objects_asynchronously) for usage guidelines.      
   * @param importMetadataTMLAsyncRequest 
   */
  importMetadataTMLAsync(importMetadataTMLAsyncRequest, _options) {
    const requestContextPromise = this.requestFactory.importMetadataTMLAsync(importMetadataTMLAsyncRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.importMetadataTMLAsync(rsp)));
    }));
  }
  /**
   *   Version: 9.0.0.cl or later   Imports group objects from external databases into ThoughtSpot.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `GROUP_ADMINISTRATION` (**Can manage groups**) privilege is required.  During the import operation:  * If the specified group is not available in ThoughtSpot, it will be added to ThoughtSpot. * If `delete_unspecified_groups` is set to `true`, the groups not specified in the API request, excluding administrator and system user groups, are deleted. * If the specified groups are already available in ThoughtSpot, the object properties of these groups are modified and synchronized as per the input data in the API request.  A successful API call returns the object that represents the changes made in the ThoughtSpot system.      
   * @param importUserGroupsRequest 
   */
  importUserGroups(importUserGroupsRequest, _options) {
    const requestContextPromise = this.requestFactory.importUserGroups(importUserGroupsRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.importUserGroups(rsp)));
    }));
  }
  /**
   *   Version: 9.0.0.cl or later   Imports user data from external databases into ThoughtSpot. During the user import operation:  * If the specified users are not available in ThoughtSpot, the users are created and assigned a default password. Defining a `default_password` in the API request is optional. * If `delete_unspecified_users` is set to `true`, the users not specified in the API request, excluding the `tsadmin`, `guest`, `system` and `su` users, are deleted. * If the specified user objects are already available in ThoughtSpot, the object properties are updated and synchronized as per the input data in the API request.  A successful API call returns the object that represents the changes made in the ThoughtSpot system.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `USER_ADMINISTRATION` (**Can manage users**) privilege is required.      
   * @param importUsersRequest 
   */
  importUsers(importUsersRequest, _options) {
    const requestContextPromise = this.requestFactory.importUsers(importUsersRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.importUsers(rsp)));
    }));
  }
  /**
   *   Version: 9.0.0.cl or later   Creates a login session for a ThoughtSpot user with Basic authentication.  In Basic authentication method, REST clients log in to ThoughtSpot using `username` and `password` attributes. On a multi-tenant cluster with Orgs, users can pass the ID of the Org in the API request to log in to a specific Org context.  **Note**: If Multi-Factor Authentication (MFA) is enabled on your instance, the API login request with basic authentication (`username`  and `password` ) returns an error. Contact ThoughtSpot Support for assistance.  A successful login returns a session cookie that can be used in your subsequent API requests.     
   * @param loginRequest 
   */
  login(loginRequest, _options) {
    const requestContextPromise = this.requestFactory.login(loginRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.login(rsp)));
    }));
  }
  /**
   *   Version: 9.0.0.cl or later    Logs out a user from their current session.      
   */
  logout(_options) {
    const requestContextPromise = this.requestFactory.logout(_options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.logout(rsp)));
    }));
  }
  /**
   *  Parameterize fields in metadata objects.   Version: 10.9.0.cl or later   Allows parameterizing fields in metadata objects in ThoughtSpot.  Requires appropriate permissions to modify the metadata object.  The API endpoint allows parameterizing the following types of metadata objects: * Logical Tables * Connections  For a Logical Table the field type must be `ATTRIBUTE` and field name can be one of: * databaseName * schemaName * tableName  For a Connection the field type is always `CONNECTION_PROPERTY`. We use the field_name in this case to specify the exact property of a connection which needs to be parameterized.      
   * @param parameterizeMetadataRequest 
   */
  parameterizeMetadata(parameterizeMetadataRequest, _options) {
    const requestContextPromise = this.requestFactory.parameterizeMetadata(parameterizeMetadataRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.parameterizeMetadata(rsp)));
    }));
  }
  /**
   *  Version: 10.9.0.cl or later   Allows publishing metadata objects across organizations in ThoughtSpot.  Requires ADMINISTRATION role and TENANT scope.  The API endpoint allows publishing the following types of metadata objects: * Liveboards * Answers * Logical Tables  This API will essentially share the objects along with it\'s dependencies to the org admins of the orgs to which it is being published.      
   * @param publishMetadataRequest 
   */
  publishMetadata(publishMetadataRequest, _options) {
    const requestContextPromise = this.requestFactory.publishMetadata(publishMetadataRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.publishMetadata(rsp)));
    }));
  }
  /**
   * Version: 10.7.0.cl or later 
   * @param queryGetDecomposedQueryRequest 
   */
  queryGetDecomposedQuery(queryGetDecomposedQueryRequest, _options) {
    const requestContextPromise = this.requestFactory.queryGetDecomposedQuery(queryGetDecomposedQueryRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.queryGetDecomposedQuery(rsp)));
    }));
  }
  /**
   *   Version: 9.0.0.cl or later   Resets the password of a user account. Administrators can reset password on behalf of a user.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `USER_ADMINISTRATION` (**Can manage users**) privilege is required.      
   * @param resetUserPasswordRequest 
   */
  resetUserPassword(resetUserPasswordRequest, _options) {
    const requestContextPromise = this.requestFactory.resetUserPassword(resetUserPasswordRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.resetUserPassword(rsp)));
    }));
  }
  /**
   *   Version: 9.2.0.cl or later   Reverts TML objects to a previous commit specified in the API request.  Requires at least edit access to objects.  In the API request, specify the `commit_id`. If the branch name is not specified in the request, the API will consider the default branch configured on your instance.  By default, the API reverts all objects. If the revert operation fails for one of the objects provided in the commit, the API returns an error and does not revert any object.  For more information, see [Git integration documentation](https://developers.thoughtspot.com/docs/git-integration).      
   * @param commitId Commit id to which the object should be reverted
   * @param revertCommitRequest 
   */
  revertCommit(commitId, revertCommitRequest, _options) {
    const requestContextPromise = this.requestFactory.revertCommit(commitId, revertCommitRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.revertCommit(rsp)));
    }));
  }
  /**
   *   Version: 9.0.0.cl or later    Revokes the authentication token issued for current user session.  The token of your current session expires when you make a call to the `/api/rest/2.0/auth/token/revoke` endpoint. the users will not be able to access ThoughtSpot objects until a new token is obtained.  To restart your session, request for a new token from ThoughtSpot. See [Get Full Access Token](#/http/api-endpoints/authentication/get-full-access-token).      
   * @param revokeTokenRequest 
   */
  revokeToken(revokeTokenRequest, _options) {
    const requestContextPromise = this.requestFactory.revokeToken(revokeTokenRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.revokeToken(rsp)));
    }));
  }
  /**
   *   Version: 9.2.0.cl or later   Gets a list of commits for a given metadata object.  Requires `DATAMANAGEMENT` (**Can manage data**) privilege.  If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance on your instance, the `CAN_MANAGE_WORKSHEET_VIEWS_TABLES` (**Can manage data models**) privilege and edit access to the metadata objects.      
   * @param searchCommitsRequest 
   */
  searchCommits(searchCommitsRequest, _options) {
    const requestContextPromise = this.requestFactory.searchCommits(searchCommitsRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.searchCommits(rsp)));
    }));
  }
  /**
   *   Version: 9.2.0.cl or later   Gets Git repository connections configured on the ThoughtSpot instance.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance on your instance, the `CAN_MANAGE_VERSION_CONTROL` (**Can toggle version control for objects**) privilege.      
   * @param searchConfigRequest 
   */
  searchConfig(searchConfigRequest, _options) {
    const requestContextPromise = this.requestFactory.searchConfig(searchConfigRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.searchConfig(rsp)));
    }));
  }
  /**
   *   Version: 9.2.0.cl or later   Gets connection objects. Requires `DATAMANAGEMENT` (**Can manage data**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) privilege is required.  - To get a list of all connections available in the ThoughtSpot system, send the API request without any attributes in the request body. - To get the connection objects for a specific type of data warehouse, specify the type in `data_warehouse_types`. - To fetch details of a connection object, specify the connection object GUID or name. The `name_pattern` attribute allows passing partial text with `%` for a wildcard match. - To get details of the database, schemas, tables, or columns from a data connection object, specify `data_warehouse_object_type`. - To get a specific database, schema, table, or column from a connection object, define the object type in `data_warehouse_object_type` and object properties in the `data_warehouse_objects` array. For example, to search for a column, you must pass the database, schema, and table names in the API request.   Note that in the following example, object properties are set in a hierarchical order (`database` > `schema` > `table` > `column`).  ``` {   \"connections\": [     {       \"identifier\": \"b9d1f2ef-fa65-4a4b-994e-30fa2d57b0c2\",       \"data_warehouse_objects\": [         {           \"database\": \"NEBULADEV\",           \"schema\": \"INFORMATION_SCHEMA\",           \"table\": \"APPLICABLE_ROLES\",           \"column\": \"ROLE_NAME\"         }       ]     }   ],   \"data_warehouse_object_type\": \"COLUMN\" } ```  - To fetch data by `configuration`, specify `data_warehouse_object_type`. For example, to fetch columns from the `DEVELOPMENT` database, specify the `data_warehouse_object_type` as `DATABASE` and define the `configuration` string as `{\"database\":\"DEVELOPMENT\"}`. To get column data for a specific table, specify the table, for example,`{\"database\":\"RETAILAPPAREL\",\"table\":\"PIPES\"}`. - To query connections by `authentication_type`, specify `data_warehouse_object_type`. Supported values for `authentication_type` are:   - `SERVICE_ACCOUNT`: For connections that require service account credentials to authenticate to the Cloud Data Warehouse and fetch data.   - `OAUTH`: For connections that require OAuth credentials to authenticate to the Cloud Data Warehouse and fetch data. Teradata, Oracle, and Presto Cloud Data Warehouses do not support the OAuth authentication type.   - `IAM`: For connections that have the IAM OAuth set up. This authentication type is supported on Amazon Redshift connections only.   - `EXTOAUTH`: For connections that have external OAuth set up. ThoughtSpot supports external [OAuth with Microsoft Azure Active Directory (AD)](https://docs.thoughtspot.com/cloud/latest/ connections-snowflake-azure-ad-oauth) and [Okta for Snowflake data connections](https://docs.thoughtspot.com/cloud/latest/connections-snowflake-okta-oauth). - To include more details about connection objects in the API response, set `include_details` to `true`. - You can also sort the output by field names and filter connections by tags.  **NOTE**: When filtering connection records by parameters other than `data_warehouse_types` or `tag_identifiers`, ensure that you set `record_size` to `-1` and `record_offset` to `0` for precise results.      
   * @param searchConnectionRequest 
   */
  searchConnection(searchConnectionRequest, _options) {
    const requestContextPromise = this.requestFactory.searchConnection(searchConnectionRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.searchConnection(rsp)));
    }));
  }
  /**
   *   Version: 9.6.0.cl or later   Gets custom actions configured on the cluster.  Requires `DEVELOPER` (**Has Developer privilege**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `DEVELOPER` (**Has developer privilege**) privilege is required.      
   * @param searchCustomActionsRequest 
   */
  searchCustomActions(searchCustomActionsRequest, _options) {
    const requestContextPromise = this.requestFactory.searchCustomActions(searchCustomActionsRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.searchCustomActions(rsp)));
    }));
  }
  /**
   *   Version: 9.0.0.cl or later   Generates an Answer from a given data source.  Requires at least view access to the data source object (Worksheet or View).  #### Usage guidelines  To search data, specify the data source GUID in `logical_table_identifier`. The data source can be a Worksheet, View, Table, or SQL view.  Pass search tokens in the `query_string` attribute in the API request as shown in the following example:  ``` {   \"query_string\": \"[sales] by [store]\",   \"logical_table_identifier\": \"cd252e5c-b552-49a8-821d-3eadaa049cca\", } ```  For more information about the `query_string` format and data source attribute, see [Search data API](https://developers.thoughtspot.com/docs/fetch-data-and-report-apis#_search_data_api).    The `record_size` attribute determines the number of records to retrieve in an API call. For more information about pagination, record size, and maximum row limit, see [Pagination and record size settings](https://developers.thoughtspot.com/docs/fetch-data-and-report-apis#_pagination_settings_for_data_and_report_api).       
   * @param searchDataRequest 
   */
  searchData(searchDataRequest, _options) {
    const requestContextPromise = this.requestFactory.searchData(searchDataRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.searchData(rsp)));
    }));
  }
  /**
   *  Version: 10.10.0.cl or later   Search the email customisation configuration if any set for the ThoughtSpot system.  #### Pre-requisites  Requires `DEVELOPER` (**has developer privilege**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `_Has developer privilege` privilege is required. Coms should be enabled on the cluster.  #### Usage guidelines  To get the list of configurations set in the cluster/org.      
   */
  searchEmailCustomisation(_options) {
    const requestContextPromise = this.requestFactory.searchEmailCustomisation(_options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.searchEmailCustomisation(rsp)));
    }));
  }
  /**
   *   Version: 9.0.0.cl or later   Gets a list of metadata objects available on the ThoughtSpot system.  This API endpoint is available to all users who have view access to the object. Users with `ADMINISTRATION` (**Can administer ThoughtSpot**) privileges can view data for all metadata objects, including users and groups.  #### Usage guidelines  - To get all metadata objects, send the API request without any attributes. - To get metadata objects of a specific type, set the `type` attribute. For example, to fetch a Worksheet, set the type as `LOGICAL_TABLE`. - To filter metadata objects within type `LOGICAL_TABLE`, set the `subtypes` attribute. For example, to fetch a Worksheet, set the type as `LOGICAL_TABLE` & subtypes as `[WORKSHEET]`. - To get a specific metadata object, specify the GUID. - To customize your search and filter the API response, you can use several parameters.   You can search for objects created or modified by specific users, by tags applied to the objects, or by using the include parameters like `include_auto_created_objects`, `include_dependent_objects`, `include_headers`, `include_incomplete_objects`, and so on.   You can also define sorting options to sort the data retrieved in the API response. - To get discoverable objects when linientmodel is enabled you can use `include_discoverable_objects` as true else false. Default value is true. - For liveboard metadata type, to get the newer format, set the `liveboard_response_format` as V2. Default value is V1.  **NOTE**: The following parameters support pagination of metadata records:  - `tag_identifiers` - `type` - `subtypes` - `created_by_user_identifiers` - `modified_by_user_identifiers` - `owned_by_user_identifiers` - `exclude_objects` - `include_auto_created_objects` - `favorite_object_options` If you are using other parameters to search metadata, set `record_size` to `-1` and `record_offset` to `0`.      
   * @param searchMetadataRequest 
   */
  searchMetadata(searchMetadataRequest, _options) {
    const requestContextPromise = this.requestFactory.searchMetadata(searchMetadataRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.searchMetadata(rsp)));
    }));
  }
  /**
   *   Version: 9.0.0.cl or later   Gets a list of Orgs configured on the ThoughtSpot system. To get details of a specific Org, specify the Org ID or name. You can also pass parameters such as status, visibility, and user identifiers to get a specific list of Orgs.  Requires cluster administration (**Can administer Org**) privileges. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `ORG_ADMINISTRATION` (**Can manage Orgs**) privilege is required.      
   * @param searchOrgsRequest 
   */
  searchOrgs(searchOrgsRequest, _options) {
    const requestContextPromise = this.requestFactory.searchOrgs(searchOrgsRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.searchOrgs(rsp)));
    }));
  }
  /**
   *   Version: 9.5.0.cl or later   Gets a list of Role objects from the ThoughtSpot system.  Available if [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance. To search for Roles, the `ROLE_ADMINISTRATION` (**Can manage roles**) privilege is required.  To get details of a specific Role object, specify the GUID or name. You can also filter the API response based on user group and Org identifiers, privileges assigned to the Role, and deprecation status.      
   * @param searchRolesRequest 
   */
  searchRoles(searchRolesRequest, _options) {
    const requestContextPromise = this.requestFactory.searchRoles(searchRolesRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.searchRoles(rsp)));
    }));
  }
  /**
   *  Search Schedules    Version: 9.4.0.cl or later   Gets a list of scheduled jobs configured for a Liveboard.  To get details of a specific scheduled job, specify the name or GUID of the scheduled job.  Requires at least view access to Liveboards.  **NOTE**: When filtering schedules by parameters other than `metadata`, set `record_size` to `-1` and `record_offset` to `0` for accurate results.      
   * @param searchSchedulesRequest 
   */
  searchSchedules(searchSchedulesRequest, _options) {
    const requestContextPromise = this.requestFactory.searchSchedules(searchSchedulesRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.searchSchedules(rsp)));
    }));
  }
  /**
   *   Version: 9.0.0.cl or later   Gets a list of tag objects available on the ThoughtSpot system. To get details of a specific tag object, specify the GUID or name.  Any authenticated user can search for tag objects.      
   * @param searchTagsRequest 
   */
  searchTags(searchTagsRequest, _options) {
    const requestContextPromise = this.requestFactory.searchTags(searchTagsRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.searchTags(rsp)));
    }));
  }
  /**
   *   Version: 9.0.0.cl or later   Gets a list of user group objects from the ThoughtSpot system.  To get details of a specific user group, specify the user group GUID or name. You can also filter the API response based on User ID, Org ID, Role ID, type of group, sharing visibility, privileges assigned to the group, and the Liveboard IDs assigned to the users in the group.  Available to all users. Users with `ADMINISTRATION` (**Can administer ThoughtSpot**) privileges can view all users properties.  If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `GROUP_ADMINISTRATION` (**Can manage groups**) privilege is required.  **NOTE**: If you do not get precise results, try setting `record_size` to `-1` and `record_offset` to `0`.      
   * @param searchUserGroupsRequest 
   */
  searchUserGroups(searchUserGroupsRequest, _options) {
    const requestContextPromise = this.requestFactory.searchUserGroups(searchUserGroupsRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.searchUserGroups(rsp)));
    }));
  }
  /**
   *   Version: 9.0.0.cl or later   Gets a list of users available on the ThoughtSpot system.  To get details of a specific user, specify the user GUID or name. You can also filter the API response based on groups, Org ID, user visibility, account status, user type, and user preference settings and favorites.  Available to all users. Users with `ADMINISTRATION` (**Can administer ThoughtSpot**) privileges can view all users properties. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `USER_ADMINISTRATION` (**Can manage users**) privilege is required.  **NOTE**: If the API returns an empty list, consider increasing the value of the `record_size` parameter. To search across all available users, set `record_size` to `-1`.      
   * @param searchUsersRequest 
   */
  searchUsers(searchUsersRequest, _options) {
    const requestContextPromise = this.requestFactory.searchUsers(searchUsersRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.searchUsers(rsp)));
    }));
  }
  /**
   *  Search variables   Version: 10.9.0.cl or later   Allows searching for variables in ThoughtSpot.  Requires ADMINISTRATION role.  The API endpoint supports searching variables by: * Variable identifier (ID or name) * Variable type * Name pattern (case-insensitive, supports % for wildcard)  The search results can be formatted in three ways: * METADATA_ONLY - Returns only variable metadata (default) * METADATA_AND_VALUES - Returns variable metadata and values * EDITABLE_METADATA_AND_VALUES - Returns only editable variable metadata and values       
   * @param searchVariablesRequest 
   */
  searchVariables(searchVariablesRequest, _options) {
    const requestContextPromise = this.requestFactory.searchVariables(searchVariablesRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.searchVariables(rsp)));
    }));
  }
  /**
   *  Version: 10.4.0.cl or later   Allows sending a follow-up message to an ongoing conversation within the context of the metadata model.  Requires at least view access to the metadata object specified in the request.  #### Usage guidelines  The API requires you to specify the `conversation_identifier` in the request path, and a `metadata_identifier` and `message` string in the request body.  If the API request is successful, ThoughtSpot returns the session ID, tokens used in the conversation, and visualization type.  > ###### Note: > * This endpoint is currently in Beta. Breaking changes may be introduced before the endpoint is made Generally Available. > * This endpoint requires Spotter - please contact ThoughtSpot support to enable Spotter on your cluster.      
   * @param conversationIdentifier Unique identifier of the conversation.
   * @param sendMessageRequest 
   */
  sendMessage(conversationIdentifier, sendMessageRequest, _options) {
    const requestContextPromise = this.requestFactory.sendMessage(conversationIdentifier, sendMessageRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.sendMessage(rsp)));
    }));
  }
  /**
   *   Version: 9.0.0.cl or later   Allows sharing one or several metadata objects with users and groups in ThoughtSpot.  Requires edit access to the metadata object.  The API endpoint allows sharing only the following types of metadata objects: * Liveboards * Visualizations * Answers * Worksheets * Views * Connections  You can provide `READ_ONLY` or `MODIFY` access when sharing an object with another user or group. With `READ_ONLY` access grants view access to the shared object, whereas `MODIFY` provides edit access.  To prevent a user or group from accessing the shared object, specify the GUID or name of the principal and set `shareMode` to `NO_ACCESS`.      
   * @param shareMetadataRequest 
   */
  shareMetadata(shareMetadataRequest, _options) {
    const requestContextPromise = this.requestFactory.shareMetadata(shareMetadataRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.shareMetadata(rsp)));
    }));
  }
  /**
   *  Version: 10.4.0.cl or later   Processes a natural language query and returns an AI-generated response based on a specified data model.  Requires at least view access to the metadata object specified in the request.  > ###### Note: > * This endpoint is currently in Beta. Breaking changes may be introduced before the endpoint is made Generally Available. > * This endpoint requires Spotter - please contact ThoughtSpot support to enable Spotter on your cluster.      
   * @param singleAnswerRequest 
   */
  singleAnswer(singleAnswerRequest, _options) {
    const requestContextPromise = this.requestFactory.singleAnswer(singleAnswerRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.singleAnswer(rsp)));
    }));
  }
  /**
   *   Version: 9.0.0.cl or later   Removes the tags applied to a Liveboard, Answer, Table, or Worksheet.  Requires edit access to the metadata object.      
   * @param assignTagRequest 
   */
  unassignTag(assignTagRequest, _options) {
    const requestContextPromise = this.requestFactory.unassignTag(assignTagRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.unassignTag(rsp)));
    }));
  }
  /**
   *  Remove parameterization from fields in metadata objects.   Version: 10.9.0.cl or later   Allows removing parameterization from fields in metadata objects in ThoughtSpot.  Requires appropriate permissions to modify the metadata object.  The API endpoint allows unparameterizing the following types of metadata objects: * Logical Tables * Connections  For a Logical Table the field type must be `ATTRIBUTE` and field name can be one of: * databaseName * schemaName * tableName  For a Connection the field type is always `CONNECTION_PROPERTY`. We use the field_name in this case to specify the exact property of a connection which needs to be unparameterized.      
   * @param unparameterizeMetadataRequest 
   */
  unparameterizeMetadata(unparameterizeMetadataRequest, _options) {
    const requestContextPromise = this.requestFactory.unparameterizeMetadata(unparameterizeMetadataRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.unparameterizeMetadata(rsp)));
    }));
  }
  /**
   *  Version: 10.9.0.cl or later   Allows unpublishing metadata objects from organizations in ThoughtSpot.  Requires ADMINISTRATION role and TENANT scope.  The API endpoint allows unpublishing the following types of metadata objects: * Liveboards * Answers * Logical Tables  When unpublishing objects, you can: * Include dependencies by setting `include_dependencies` to true - this will unpublish all dependent objects if no other published object is using them * Force unpublish by setting `force` to true - this will break all dependent objects in the unpublished organizations      
   * @param unpublishMetadataRequest 
   */
  unpublishMetadata(unpublishMetadataRequest, _options) {
    const requestContextPromise = this.requestFactory.unpublishMetadata(unpublishMetadataRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.unpublishMetadata(rsp)));
    }));
  }
  /**
   *   Version: 9.2.0.cl or later   Updates Git repository configuration settings.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance on your instance, the `CAN_MANAGE_VERSION_CONTROL` (**Can toggle version control for objects**) privilege.      
   * @param updateConfigRequest 
   */
  updateConfig(updateConfigRequest, _options) {
    const requestContextPromise = this.requestFactory.updateConfig(updateConfigRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.updateConfig(rsp)));
    }));
  }
  /**
   *   Version: 9.2.0.cl or later   **Important**: This endpoint is deprecated and will be removed from ThoughtSpot in September 2025. ThoughtSpot strongly recommends using the [Update connection V2](#/http/api-endpoints/connections/update-connection-v2) endpoint to update your connection objects.  #### Usage guidelines  Updates a connection object.    Requires `DATAMANAGEMENT` (**Can manage data**) and edit permissions to the connection object, or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) privilege is required.  To update a connection object, pass these parameters in your API request:  1. GUID of the connection object. 2. If you are updating tables or database schema of a connection object:    a. Add the updated JSON map of metadata with database, schema, and tables in `data_warehouse_config`.    b. Set `validate` to `true`. 3. If you are updating a configuration attribute, connection name, or description, you can set `validate` to `false`.      
   * @param updateConnectionRequest 
   */
  updateConnection(updateConnectionRequest, _options) {
    const requestContextPromise = this.requestFactory.updateConnection(updateConnectionRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.updateConnection(rsp)));
    }));
  }
  /**
   *   Version: 10.4.0.cl or later   Updates a connection object.  Requires `DATAMANAGEMENT` (**Can manage data**) and edit permissions to the connection object, or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) privilege is required.  To update a connection object, pass these parameters in your API request:  1. GUID of the connection object. 2. If you are updating tables or database schema of a connection object:    a. Add the updated JSON map of metadata with database, schema, and tables in `data_warehouse_config`.    b. Set `validate` to `true`. 3. If you are updating a configuration attribute, connection name, or description, you can set `validate` to `false`.      
   * @param connectionIdentifier Unique ID or name of the connection.
   * @param updateConnectionV2Request 
   */
  updateConnectionV2(connectionIdentifier, updateConnectionV2Request, _options) {
    const requestContextPromise = this.requestFactory.updateConnectionV2(connectionIdentifier, updateConnectionV2Request, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.updateConnectionV2(rsp)));
    }));
  }
  /**
   *   Version: 9.6.0.cl or later   Updates a custom action.  Requires `DEVELOPER` (**Has Developer privilege**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `DEVELOPER` (**Has developer privilege**) privilege is required.  #### Usage Guidelines  The API allows you to modify the following properties:  * Name of the custom action * Action availability to groups * Association to metadata objects * Authentication settings for a URL-based action  For more information, see [Custom actions](https://developers.thoughtspot.com/docs/custom-action-intro).      
   * @param customActionIdentifier Unique ID or name of the custom action.
   * @param updateCustomActionRequest 
   */
  updateCustomAction(customActionIdentifier, updateCustomActionRequest, _options) {
    const requestContextPromise = this.requestFactory.updateCustomAction(customActionIdentifier, updateCustomActionRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.updateCustomAction(rsp)));
    }));
  }
  /**
   *   Version: 9.9.0.cl or later   Updates a DBT connection object.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege or `DATAMANAGEMENT` (**Can manage data ThoughtSpot**) privilege, along with an existing DBT connection. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the following data control privileges may be required:  - `CAN_MANAGE_CUSTOM_CALENDAR`(**Can manage custom calendars**) - `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) - `CAN_MANAGE_WORKSHEET_VIEWS_TABLES` (**Can manage data models**)  #### About update DBT connection You can modify DBT connection object properties such as embrace connection name, embrace database name, import type, account identifier, access token, project identifier and environment (or) embrace connection, embrace database name, import type, file_content settings.      
   * @param updateDbtConnectionRequest 
   */
  updateDbtConnection(updateDbtConnectionRequest, _options) {
    const requestContextPromise = this.requestFactory.updateDbtConnection(updateDbtConnectionRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.updateDbtConnection(rsp)));
    }));
  }
  /**
   *  Update header attributes for a given list of header objects.   Version: 10.6.0.cl or later   ## Prerequisites - **Privileges Required:**   - `DATAMANAGEMENT` (Can manage data) or `ADMINISTRATION` (Can administer ThoughtSpot). - **Additional Privileges (if RBAC is enabled):**   - `ORG_ADMINISTRATION` (Can manage orgs).  ---  ## Usage Guidelines  ### Parameters  1. **headers_update**      - **Description:** List of header objects with their attributes to be updated. Each object contains a list of attributes to be updated in the header.    - **Usage:**       - You must provide either `identifier` or `obj_identifier`, but not both. Both fields cannot be empty.       - When `org_identifier` is set to `-1`, only the `identifier` value is accepted; `obj_identifier` is not allowed.  2. **org_identifier**      - **Description:** GUID (Globally Unique Identifier) or name of the organization.      - **Usage:**      - Leaving this field empty assumes that the changes should be applied to the current organization       - Provide `org_guid` or `org_name` to uniquely identify the organization where changes need to be applied. .      - Provide `-1` if changes have to be applied across all the org.  ---  ## Note Currently, this API is enabled only for updating the `obj_identifier` attribute. Only `text` will be allowed in attribute\'s value.  ## Best Practices  1. **Backup Before Conversion:**      Always export metadata as a backup before initiating the update process  ---  ## Examples  ### Only `identifier` is given  ```json {   \"headers_update\":   [     {       \"identifier\": \"guid_1\",       \"obj_identifier\": \"\",       \"type\": \"LOGICAL_COLUMN\",       \"attributes\":       [         {           \"name\": \"obj_id\",           \"value\": \"custom_object_id\"         }       ]     }   ],   \"org_identifier\": \"orgGuid\" } ```  ### Only `obj_identifier` is given ```json {   \"headers_update\":   [     {       \"obj_identifier\": \"custom_object_id\",       \"type\": \"ANSWER\",       \"attributes\":       [         {           \"name\": \"obj_id\",           \"value\": \"custom_object_id\"         }       ]     }   ],   \"org_identifier\": \"orgName\" } ```  ### Executing update for all org `-1` ```json {   \"headers_update\":   [     {       \"identifier\": \"guid_1\",       \"type\": \"ANSWER\",       \"attributes\":       [         {           \"name\": \"obj_id\",           \"value\": \"custom_object_id\"         }       ]     }   ],   \"org_identifier\": -1 } ```  ### Optional `type` is not provided ```json {   \"headers_update\":   [     {       \"identifier\": \"guid_1\",       \"attributes\":       [         {           \"name\": \"obj_id\",           \"value\": \"custom_object_id\"         }       ]     }   ],   \"org_identifier\": -1 } ```     
   * @param updateMetadataHeaderRequest 
   */
  updateMetadataHeader(updateMetadataHeaderRequest, _options) {
    const requestContextPromise = this.requestFactory.updateMetadataHeader(updateMetadataHeaderRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.updateMetadataHeader(rsp)));
    }));
  }
  /**
   *  Update object IDs for given metadata objects.   Version: 10.8.0.cl or later   ## Prerequisites - **Privileges Required:**   - `DATAMANAGEMENT` (Can manage data) or `ADMINISTRATION` (Can administer ThoughtSpot). - **Additional Privileges (if RBAC is enabled):**   - `ORG_ADMINISTRATION` (Can manage orgs).  ---  ## Usage Guidelines  ### Parameters  1. **metadata**      - **Description:** List of metadata objects to update their object IDs.    - **Usage:**       - Use either `current_obj_id` alone OR use `metadata_identifier` with `type` (when needed).       - When using `metadata_identifier`, the `type` field is required if using a name instead of a GUID.       - The `new_obj_id` field is always required.  ---  ## Note This API is specifically designed for updating object IDs of metadata objects. It internally uses the header update mechanism to perform the changes.  ## Best Practices  1. **Backup Before Update:**      Always export metadata as a backup before initiating the update process.  2. **Validation:**    - When using `current_obj_id`, ensure it matches the existing object ID exactly.    - When using `metadata_identifier` with a name, ensure the `type` is specified correctly.    - Verify that the `new_obj_id` follows your naming conventions and is unique within your system.  ---  ## Examples  ### Using current_obj_id ```json {   \"metadata\": [     {       \"current_obj_id\": \"existing_object_id\",       \"new_obj_id\": \"new_object_id\"     }   ] } ```  ### Using metadata_identifier with GUID ```json {   \"metadata\": [     {       \"metadata_identifier\": \"01234567-89ab-cdef-0123-456789abcdef\",       \"new_obj_id\": \"new_object_id\"     }   ] } ```  ### Using metadata_identifier with name and type ```json {   \"metadata\": [     {       \"metadata_identifier\": \"My Answer\",       \"type\": \"ANSWER\",       \"new_obj_id\": \"new_object_id\"     }   ] } ```  ### Multiple objects update ```json {   \"metadata\": [     {       \"current_obj_id\": \"existing_object_id_1\",       \"new_obj_id\": \"new_object_id_1\"     },     {       \"metadata_identifier\": \"My Worksheet\",       \"type\": \"LOGICAL_TABLE\",       \"new_obj_id\": \"new_object_id_2\"     }   ] } ```      
   * @param updateMetadataObjIdRequest 
   */
  updateMetadataObjId(updateMetadataObjIdRequest, _options) {
    const requestContextPromise = this.requestFactory.updateMetadataObjId(updateMetadataObjIdRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.updateMetadataObjId(rsp)));
    }));
  }
  /**
   *   Version: 9.0.0.cl or later   Updates an Org object. You can modify Org properties such as name, description, and user associations.  Requires cluster administration (**Can administer Org**) privileges. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `ORG_ADMINISTRATION` (**Can manage Orgs**) privilege is required.      
   * @param orgIdentifier ID or name of the Org
   * @param updateOrgRequest 
   */
  updateOrg(orgIdentifier, updateOrgRequest, _options) {
    const requestContextPromise = this.requestFactory.updateOrg(orgIdentifier, updateOrgRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.updateOrg(rsp)));
    }));
  }
  /**
   *   Version: 9.5.0.cl or later   Updates the properties of a Role object.  Available only if [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance. To update a Role, the `ROLE_ADMINISTRATION` (**Can manage roles**) privilege is required.      
   * @param roleIdentifier Unique ID or name of the Role.
   * @param updateRoleRequest 
   */
  updateRole(roleIdentifier, updateRoleRequest, _options) {
    const requestContextPromise = this.requestFactory.updateRole(roleIdentifier, updateRoleRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.updateRole(rsp)));
    }));
  }
  /**
   *  Update schedule.    Version: 9.4.0.cl or later   Updates a scheduled Liveboard job.  Requires at least edit access to Liveboards. To update a schedule on behalf of another user, you need `ADMINISTRATION` (**Can administer Org**) or `JOBSCHEDULING` (**Can schedule for others**) privilege and edit access to the Liveboard. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `JOBSCHEDULING` (**Can schedule for others**) privilege is required.  The API endpoint allows you to pause a scheduled job, change the status of a paused job. You can also edit the recipients list, frequency of the job, format of the file to send to the recipients in email notifications, PDF options, and time zone setting.      
   * @param scheduleIdentifier Unique ID or name of the schedule.
   * @param updateScheduleRequest 
   */
  updateSchedule(scheduleIdentifier, updateScheduleRequest, _options) {
    const requestContextPromise = this.requestFactory.updateSchedule(scheduleIdentifier, updateScheduleRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.updateSchedule(rsp)));
    }));
  }
  /**
   *   Version: 9.2.0.cl or later   Updates the current configuration of the cluster. You must send the configuration data in JSON format.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privileges. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `APPLICATION_ADMINISTRATION` (**Can manage application settings**) privilege is required.      
   * @param updateSystemConfigRequest 
   */
  updateSystemConfig(updateSystemConfigRequest, _options) {
    const requestContextPromise = this.requestFactory.updateSystemConfig(updateSystemConfigRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.updateSystemConfig(rsp)));
    }));
  }
  /**
   *   Version: 9.0.0.cl or later   Updates a tag object.  You can modify the `name` and `color` properties of a tag object.    Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `TAGMANAGEMENT` (**Can manage tags**) privilege is required to create, edit, and delete tags.      
   * @param tagIdentifier Name or Id of the tag.
   * @param updateTagRequest 
   */
  updateTag(tagIdentifier, updateTagRequest, _options) {
    const requestContextPromise = this.requestFactory.updateTag(tagIdentifier, updateTagRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.updateTag(rsp)));
    }));
  }
  /**
   *   Version: 9.0.0.cl or later   Updates the properties of a user object.  You can modify user properties such as username, email, and share notification settings. You can also assign new groups and Orgs, remove the user from a group or Org, reset password, and modify user preferences.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `USER_ADMINISTRATION` (**Can manage users**) privilege is required.      
   * @param userIdentifier GUID / name of the user
   * @param updateUserRequest 
   */
  updateUser(userIdentifier, updateUserRequest, _options) {
    const requestContextPromise = this.requestFactory.updateUser(userIdentifier, updateUserRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.updateUser(rsp)));
    }));
  }
  /**
   *   Version: 9.0.0.cl or later   Updates the properties of a group object in ThoughtSpot.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `GROUP_ADMINISTRATION` (**Can manage groups**) privilege is required.  #### Supported operations  This API endpoint lets you perform the following operations in a single API request:  * Edit [privileges](https://developers.thoughtspot.com/docs/?pageid=api-user-management#group-privileges) * Add or remove users * Change sharing visibility settings * Add or remove sub-groups * Assign a default Liveboard  or update the existing settings      
   * @param groupIdentifier GUID or name of the group.
   * @param updateUserGroupRequest 
   */
  updateUserGroup(groupIdentifier, updateUserGroupRequest, _options) {
    const requestContextPromise = this.requestFactory.updateUserGroup(groupIdentifier, updateUserGroupRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.updateUserGroup(rsp)));
    }));
  }
  /**
   *  Update a variable\'s properties   Version: 10.9.0.cl or later   Allows updating a variable\'s properties in ThoughtSpot.  Requires ADMINISTRATION role and TENANT scope.  The API endpoint allows updating: * The variable name * The variable values  When updating variable values, you need to specify: * The operation to perform (ADD, REPLACE, REMOVE) * The new values to add/replace/remove  When the operation is ADD, a value any pre-existing value with the same set of constraints will be replaced. When the operation is REPLACE, all values of the variable are replaced with the values specified. When the operation is REMOVE, all values with the given set of conditions are removed.      
   * @param identifier Unique id or name of the variable to update.
   * @param updateVariableRequest 
   */
  updateVariable(identifier, updateVariableRequest, _options) {
    const requestContextPromise = this.requestFactory.updateVariable(identifier, updateVariableRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.updateVariable(rsp)));
    }));
  }
  /**
   *  Update values for multiple variables   Version: 10.9.0.cl or later   Allows updating values for multiple variables in ThoughtSpot.  Requires ADMINISTRATION role.  The API endpoint allows: * Adding new values to variables * Replacing existing values * Deleting values from variables  When updating variable values, you need to specify: * The variable identifiers * The values to add/replace/remove for each variable * The operation to perform (ADD, REPLACE, REMOVE)  Behaviour based on operation type: * ADD - Adds values to the variable. Any pre-existing values with the same conditions are replaced. * REPLACE - Replaces all values of a given org with the current set of values. * REMOVE - Removes any values which match the set of conditions of the variables.      
   * @param updateVariableValuesRequest 
   */
  updateVariableValues(updateVariableValuesRequest, _options) {
    const requestContextPromise = this.requestFactory.updateVariableValues(updateVariableValuesRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.updateVariableValues(rsp)));
    }));
  }
  /**
   *  Version: 10.10.0.cl or later   Validates the email customisation configuration if any set for the ThoughtSpot system.  #### Pre-requisites  Requires `DEVELOPER` (**has developer privilege**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `_Has developer privilege` privilege is required. Coms should be enabled on the cluster.      
   */
  validateEmailCustomisation(_options) {
    const requestContextPromise = this.requestFactory.validateEmailCustomisation(_options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.validateEmailCustomisation(rsp)));
    }));
  }
  /**
   *   Version: 9.2.0.cl or later   Validates the content of your source branch against the objects in your destination environment.  Before merging content from your source branch to the destination branch, run this API operation from your destination environment and ensure that the changes from the source branch function in the destination environment.  Requires `DATAMANAGEMENT` (**Can manage data**) privilege.  If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance on your instance, the `CAN_MANAGE_WORKSHEET_VIEWS_TABLES` (**Can manage data models**) privilege and edit access to the metadata objects.      
   * @param validateMergeRequest 
   */
  validateMerge(validateMergeRequest, _options) {
    const requestContextPromise = this.requestFactory.validateMerge(validateMergeRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.validateMerge(rsp)));
    }));
  }
  /**
   *   Version: 9.12.0.cl or later    Validates the authentication token specified in the API request.  If your token is not valid, [Get a new token](#/http/api-endpoints/authentication/get-full-access-token).      
   * @param validateTokenRequest 
   */
  validateToken(validateTokenRequest, _options) {
    const requestContextPromise = this.requestFactory.validateToken(validateTokenRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.validateToken(rsp)));
    }));
  }
};
var ObservableUsersApi = class {
  constructor(configuration, requestFactory, responseProcessor) {
    this.configuration = configuration;
    this.requestFactory = requestFactory || new UsersApiRequestFactory(configuration);
    this.responseProcessor = responseProcessor || new UsersApiResponseProcessor();
  }
  /**
   *   Version: 9.7.0.cl or later   Activates a deactivated user account.  Requires `ADMINISTRATION` (**Can administer Thoughtspot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `USER_ADMINISTRATION` (**Can manage users**) privilege is required.  To activate an inactive user account, the API request body must include the following information:  - Username or the GUID of the user account. - Auth token generated for the deactivated user. The auth token is sent in the API response when a user is deactivated. - Password for the user account.      
   * @param activateUserRequest 
   */
  activateUser(activateUserRequest, _options) {
    const requestContextPromise = this.requestFactory.activateUser(activateUserRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.activateUser(rsp)));
    }));
  }
  /**
   *   Version: 9.0.0.cl or later   Updates the current password of the user.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `USER_ADMINISTRATION` (**Can manage users**) privilege is required.      
   * @param changeUserPasswordRequest 
   */
  changeUserPassword(changeUserPasswordRequest, _options) {
    const requestContextPromise = this.requestFactory.changeUserPassword(changeUserPasswordRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.changeUserPassword(rsp)));
    }));
  }
  /**
   *   Version: 9.0.0.cl or later   Creates a user in ThoughtSpot.  The API endpoint allows you to configure several user properties such as email address, account status, share notification preferences, and sharing visibility. You can provision the user to [groups](https://docs.thoughtspot.com/cloud/latest/groups-privileges) and [Orgs](https://docs.thoughtspot.com/cloud/latest/orgs-overview). You can also add Liveboard, Answer, and Worksheet objects to the user’s favorites list, assign a default Liveboard for the user, and set user preferences.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `USER_ADMINISTRATION` (**Can manage users**) privilege is required.      
   * @param createUserRequest 
   */
  createUser(createUserRequest, _options) {
    const requestContextPromise = this.requestFactory.createUser(createUserRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.createUser(rsp)));
    }));
  }
  /**
   *   Version: 9.7.0.cl or later   Deactivates a user account.  Requires `ADMINISTRATION` (**Can administer Thoughtspot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `USER_ADMINISTRATION` (**Can manage users**) privilege is required.  To deactivate a user account, the API request body must include the following information:  - Username or the GUID of the user account - Base URL of the ThoughtSpot instance  If the API request is successful, ThoughtSpot returns the activation URL in the response. The activation URL is valid for 14 days and can be used to re-activate the account and reset the password of the deactivated account.      
   * @param deactivateUserRequest 
   */
  deactivateUser(deactivateUserRequest, _options) {
    const requestContextPromise = this.requestFactory.deactivateUser(deactivateUserRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.deactivateUser(rsp)));
    }));
  }
  /**
   *   Version: 9.0.0.cl or later   Deletes a user from the ThoughtSpot system.  If you want to remove a user from a specific Org but not from ThoughtSpot, update the group and Org mapping properties of the user object via a POST API call to the [/api/rest/2.0/users/{user_identifier}/update](#/http/api-endpoints/users/update-user) endpoint.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `USER_ADMINISTRATION` (**Can manage users**) privilege is required.      
   * @param userIdentifier GUID / name of the user
   */
  deleteUser(userIdentifier, _options) {
    const requestContextPromise = this.requestFactory.deleteUser(userIdentifier, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.deleteUser(rsp)));
    }));
  }
  /**
   *   Version: 9.0.0.cl or later   Enforces logout on current user sessions.    Use this API with caution as it may invalidate active user sessions and force users to re-login. Make sure you specify the usernames or GUIDs. If you pass null values in the API call, all user sessions on your cluster become invalid, and the users are forced to re-login.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `USER_ADMINISTRATION` (**Can manage users**) privilege is required.      
   * @param forceLogoutUsersRequest 
   */
  forceLogoutUsers(forceLogoutUsersRequest, _options) {
    const requestContextPromise = this.requestFactory.forceLogoutUsers(forceLogoutUsersRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.forceLogoutUsers(rsp)));
    }));
  }
  /**
   *   Version: 9.0.0.cl or later   Imports user data from external databases into ThoughtSpot. During the user import operation:  * If the specified users are not available in ThoughtSpot, the users are created and assigned a default password. Defining a `default_password` in the API request is optional. * If `delete_unspecified_users` is set to `true`, the users not specified in the API request, excluding the `tsadmin`, `guest`, `system` and `su` users, are deleted. * If the specified user objects are already available in ThoughtSpot, the object properties are updated and synchronized as per the input data in the API request.  A successful API call returns the object that represents the changes made in the ThoughtSpot system.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `USER_ADMINISTRATION` (**Can manage users**) privilege is required.      
   * @param importUsersRequest 
   */
  importUsers(importUsersRequest, _options) {
    const requestContextPromise = this.requestFactory.importUsers(importUsersRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.importUsers(rsp)));
    }));
  }
  /**
   *   Version: 9.0.0.cl or later   Resets the password of a user account. Administrators can reset password on behalf of a user.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `USER_ADMINISTRATION` (**Can manage users**) privilege is required.      
   * @param resetUserPasswordRequest 
   */
  resetUserPassword(resetUserPasswordRequest, _options) {
    const requestContextPromise = this.requestFactory.resetUserPassword(resetUserPasswordRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.resetUserPassword(rsp)));
    }));
  }
  /**
   *   Version: 9.0.0.cl or later   Gets a list of users available on the ThoughtSpot system.  To get details of a specific user, specify the user GUID or name. You can also filter the API response based on groups, Org ID, user visibility, account status, user type, and user preference settings and favorites.  Available to all users. Users with `ADMINISTRATION` (**Can administer ThoughtSpot**) privileges can view all users properties. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `USER_ADMINISTRATION` (**Can manage users**) privilege is required.  **NOTE**: If the API returns an empty list, consider increasing the value of the `record_size` parameter. To search across all available users, set `record_size` to `-1`.      
   * @param searchUsersRequest 
   */
  searchUsers(searchUsersRequest, _options) {
    const requestContextPromise = this.requestFactory.searchUsers(searchUsersRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.searchUsers(rsp)));
    }));
  }
  /**
   *   Version: 9.0.0.cl or later   Updates the properties of a user object.  You can modify user properties such as username, email, and share notification settings. You can also assign new groups and Orgs, remove the user from a group or Org, reset password, and modify user preferences.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `USER_ADMINISTRATION` (**Can manage users**) privilege is required.      
   * @param userIdentifier GUID / name of the user
   * @param updateUserRequest 
   */
  updateUser(userIdentifier, updateUserRequest, _options) {
    const requestContextPromise = this.requestFactory.updateUser(userIdentifier, updateUserRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.updateUser(rsp)));
    }));
  }
};
var ObservableVariableApi = class {
  constructor(configuration, requestFactory, responseProcessor) {
    this.configuration = configuration;
    this.requestFactory = requestFactory || new VariableApiRequestFactory(configuration);
    this.responseProcessor = responseProcessor || new VariableApiResponseProcessor();
  }
  /**
   *  Create a variable which can be used for parameterizing metadata objects   Version: 10.9.0.cl or later   Allows creating a variable which can be used for parameterizing metadata objects in ThoughtSpot.  Requires ADMINISTRATION role and TENANT scope.  The API endpoint supports the following types of variables: * CONNECTION_PROPERTY - For connection properties * TABLE_MAPPING - For table mappings * CONNECTION_PROPERTY_PER_PRINCIPAL - For connection properties per principal. In order to use this please contact support to enable this.  When creating a variable, you need to specify: * The variable type * A unique name for the variable * Whether the variable contains sensitive values (defaults to false) * The variable values (optional)  The operation will fail if: * The user lacks required permissions * The variable name already exists * The variable type is invalid * The variable values are invalid for the specified type       
   * @param createVariableRequest 
   */
  createVariable(createVariableRequest, _options) {
    const requestContextPromise = this.requestFactory.createVariable(createVariableRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.createVariable(rsp)));
    }));
  }
  /**
   *  Delete a variable   Version: 10.9.0.cl or later   Allows deleting a variable from ThoughtSpot.  Requires ADMINISTRATION role and TENANT scope.  The API endpoint requires: * The variable identifier (ID or name)  The operation will fail if: * The user lacks required permissions * The variable doesn\'t exist * The variable is being used by other objects      
   * @param identifier Unique id or name of the variable
   */
  deleteVariable(identifier, _options) {
    const requestContextPromise = this.requestFactory.deleteVariable(identifier, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.deleteVariable(rsp)));
    }));
  }
  /**
   *  Search variables   Version: 10.9.0.cl or later   Allows searching for variables in ThoughtSpot.  Requires ADMINISTRATION role.  The API endpoint supports searching variables by: * Variable identifier (ID or name) * Variable type * Name pattern (case-insensitive, supports % for wildcard)  The search results can be formatted in three ways: * METADATA_ONLY - Returns only variable metadata (default) * METADATA_AND_VALUES - Returns variable metadata and values * EDITABLE_METADATA_AND_VALUES - Returns only editable variable metadata and values       
   * @param searchVariablesRequest 
   */
  searchVariables(searchVariablesRequest, _options) {
    const requestContextPromise = this.requestFactory.searchVariables(searchVariablesRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.searchVariables(rsp)));
    }));
  }
  /**
   *  Update a variable\'s properties   Version: 10.9.0.cl or later   Allows updating a variable\'s properties in ThoughtSpot.  Requires ADMINISTRATION role and TENANT scope.  The API endpoint allows updating: * The variable name * The variable values  When updating variable values, you need to specify: * The operation to perform (ADD, REPLACE, REMOVE) * The new values to add/replace/remove  When the operation is ADD, a value any pre-existing value with the same set of constraints will be replaced. When the operation is REPLACE, all values of the variable are replaced with the values specified. When the operation is REMOVE, all values with the given set of conditions are removed.      
   * @param identifier Unique id or name of the variable to update.
   * @param updateVariableRequest 
   */
  updateVariable(identifier, updateVariableRequest, _options) {
    const requestContextPromise = this.requestFactory.updateVariable(identifier, updateVariableRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.updateVariable(rsp)));
    }));
  }
  /**
   *  Update values for multiple variables   Version: 10.9.0.cl or later   Allows updating values for multiple variables in ThoughtSpot.  Requires ADMINISTRATION role.  The API endpoint allows: * Adding new values to variables * Replacing existing values * Deleting values from variables  When updating variable values, you need to specify: * The variable identifiers * The values to add/replace/remove for each variable * The operation to perform (ADD, REPLACE, REMOVE)  Behaviour based on operation type: * ADD - Adds values to the variable. Any pre-existing values with the same conditions are replaced. * REPLACE - Replaces all values of a given org with the current set of values. * REMOVE - Removes any values which match the set of conditions of the variables.      
   * @param updateVariableValuesRequest 
   */
  updateVariableValues(updateVariableValuesRequest, _options) {
    const requestContextPromise = this.requestFactory.updateVariableValues(updateVariableValuesRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.updateVariableValues(rsp)));
    }));
  }
};
var ObservableVersionControlApi = class {
  constructor(configuration, requestFactory, responseProcessor) {
    this.configuration = configuration;
    this.requestFactory = requestFactory || new VersionControlApiRequestFactory(configuration);
    this.responseProcessor = responseProcessor || new VersionControlApiResponseProcessor();
  }
  /**
   *   Version: 9.2.0.cl or later   Commits TML files of metadata objects to the Git branch configured on your instance.  Requires at least edit access to objects used in the commit operation.  Before using this endpoint to push your commits:  * Enable Git integration on your instance. * Make sure the Git repository and branch details are configured on your instance.  For more information, see [Git integration documentation](https://developers.thoughtspot.com/docs/git-integration).      
   * @param commitBranchRequest 
   */
  commitBranch(commitBranchRequest, _options) {
    const requestContextPromise = this.requestFactory.commitBranch(commitBranchRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.commitBranch(rsp)));
    }));
  }
  /**
   *   Version: 9.2.0.cl or later   Allows you to connect a ThoughtSpot instance to a Git repository.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance on your instance, the `CAN_MANAGE_VERSION_CONTROL` (**Can toggle version control for objects**) privilege.  You can use this API endpoint to connect your ThoughtSpot development and production environments to the development and production branches of a Git repository.  Before using this endpoint to connect your ThoughtSpot instance to a Git repository, check the following prerequisites:  * You have a Git repository. If you are using GitHub, make sure you have a valid account and an access token to connect ThoughtSpot to GitHub. For information about generating a token, see [GitHub Documentation](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens).  * Your access token has `repo` scope that grants full access to public and private repositories. * Your Git repository has a branch that can be configured as a default branch in ThoughtSpot.  For more information, see [Git integration documentation](https://developers.thoughtspot.com/docs/?pageid=git-integration).  **Note**: ThoughtSpot supports only GitHub / GitHub Enterprise for CI/CD.      
   * @param createConfigRequest 
   */
  createConfig(createConfigRequest, _options) {
    const requestContextPromise = this.requestFactory.createConfig(createConfigRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.createConfig(rsp)));
    }));
  }
  /**
   *   Version: 9.2.0.cl or later   Deletes Git repository configuration from your ThoughtSpot instance.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance on your instance, the `CAN_MANAGE_VERSION_CONTROL` (**Can toggle version control for objects**) privilege.      
   * @param deleteConfigRequest 
   */
  deleteConfig(deleteConfigRequest, _options) {
    const requestContextPromise = this.requestFactory.deleteConfig(deleteConfigRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.deleteConfig(rsp)));
    }));
  }
  /**
   *   Version: 9.2.0.cl or later   Allows you to deploy a commit and publish TML content to your ThoughtSpot instance.  Requires at least edit access to the objects used in the deploy operation.  The API deploys the head of the branch unless a `commit_id` is specified in the API request. If the branch name is not defined in the request, the default branch is considered for deploying commits.  For more information, see [Git integration documentation](https://developers.thoughtspot.com/docs/git-integration).      
   * @param deployCommitRequest 
   */
  deployCommit(deployCommitRequest, _options) {
    const requestContextPromise = this.requestFactory.deployCommit(deployCommitRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.deployCommit(rsp)));
    }));
  }
  /**
   *   Version: 9.2.0.cl or later   Reverts TML objects to a previous commit specified in the API request.  Requires at least edit access to objects.  In the API request, specify the `commit_id`. If the branch name is not specified in the request, the API will consider the default branch configured on your instance.  By default, the API reverts all objects. If the revert operation fails for one of the objects provided in the commit, the API returns an error and does not revert any object.  For more information, see [Git integration documentation](https://developers.thoughtspot.com/docs/git-integration).      
   * @param commitId Commit id to which the object should be reverted
   * @param revertCommitRequest 
   */
  revertCommit(commitId, revertCommitRequest, _options) {
    const requestContextPromise = this.requestFactory.revertCommit(commitId, revertCommitRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.revertCommit(rsp)));
    }));
  }
  /**
   *   Version: 9.2.0.cl or later   Gets a list of commits for a given metadata object.  Requires `DATAMANAGEMENT` (**Can manage data**) privilege.  If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance on your instance, the `CAN_MANAGE_WORKSHEET_VIEWS_TABLES` (**Can manage data models**) privilege and edit access to the metadata objects.      
   * @param searchCommitsRequest 
   */
  searchCommits(searchCommitsRequest, _options) {
    const requestContextPromise = this.requestFactory.searchCommits(searchCommitsRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.searchCommits(rsp)));
    }));
  }
  /**
   *   Version: 9.2.0.cl or later   Gets Git repository connections configured on the ThoughtSpot instance.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance on your instance, the `CAN_MANAGE_VERSION_CONTROL` (**Can toggle version control for objects**) privilege.      
   * @param searchConfigRequest 
   */
  searchConfig(searchConfigRequest, _options) {
    const requestContextPromise = this.requestFactory.searchConfig(searchConfigRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.searchConfig(rsp)));
    }));
  }
  /**
   *   Version: 9.2.0.cl or later   Updates Git repository configuration settings.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance on your instance, the `CAN_MANAGE_VERSION_CONTROL` (**Can toggle version control for objects**) privilege.      
   * @param updateConfigRequest 
   */
  updateConfig(updateConfigRequest, _options) {
    const requestContextPromise = this.requestFactory.updateConfig(updateConfigRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.updateConfig(rsp)));
    }));
  }
  /**
   *   Version: 9.2.0.cl or later   Validates the content of your source branch against the objects in your destination environment.  Before merging content from your source branch to the destination branch, run this API operation from your destination environment and ensure that the changes from the source branch function in the destination environment.  Requires `DATAMANAGEMENT` (**Can manage data**) privilege.  If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance on your instance, the `CAN_MANAGE_WORKSHEET_VIEWS_TABLES` (**Can manage data models**) privilege and edit access to the metadata objects.      
   * @param validateMergeRequest 
   */
  validateMerge(validateMergeRequest, _options) {
    const requestContextPromise = this.requestFactory.validateMerge(validateMergeRequest, _options);
    let middlewarePreObservable = from(requestContextPromise);
    for (let middleware of this.configuration.middleware) {
      middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx) => middleware.pre(ctx)));
    }
    return middlewarePreObservable.pipe(mergeMap((ctx) => this.configuration.httpApi.send(ctx))).pipe(mergeMap((response) => {
      let middlewarePostObservable = of(response);
      for (let middleware of this.configuration.middleware) {
        middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp) => middleware.post(rsp)));
      }
      return middlewarePostObservable.pipe(map((rsp) => this.responseProcessor.validateMerge(rsp)));
    }));
  }
};

// types/PromiseAPI.ts
var PromiseAIApi = class {
  constructor(configuration, requestFactory, responseProcessor) {
    this.api = new ObservableAIApi(configuration, requestFactory, responseProcessor);
  }
  /**
   *  Version: 10.4.0.cl or later   Creates a Conversation object to start an AI-driven conversation based on a specific data model.  Requires at least view access to the metadata object specified in the request.  #### Usage guidelines  This API requires the `metadata_identifier` parameter to define the context for the conversation.  You can also specify the tokens to initiate the conversation as shown in this example:  `\"tokens\": \"[tea],[sales],[type]\"`  If the API request is successful, ThoughtSpot returns the ID of the conversation.  > ###### Note: > * This endpoint is currently in Beta. Breaking changes may be introduced before the endpoint is made Generally Available. > * This endpoint requires Spotter - please contact ThoughtSpot support to enable Spotter on your cluster.      
   * @param createConversationRequest 
   */
  createConversation(createConversationRequest, _options) {
    const result = this.api.createConversation(createConversationRequest, _options);
    return result.toPromise();
  }
  /**
   * Version: 10.7.0.cl or later 
   * @param queryGetDecomposedQueryRequest 
   */
  queryGetDecomposedQuery(queryGetDecomposedQueryRequest, _options) {
    const result = this.api.queryGetDecomposedQuery(queryGetDecomposedQueryRequest, _options);
    return result.toPromise();
  }
  /**
   *  Version: 10.4.0.cl or later   Allows sending a follow-up message to an ongoing conversation within the context of the metadata model.  Requires at least view access to the metadata object specified in the request.  #### Usage guidelines  The API requires you to specify the `conversation_identifier` in the request path, and a `metadata_identifier` and `message` string in the request body.  If the API request is successful, ThoughtSpot returns the session ID, tokens used in the conversation, and visualization type.  > ###### Note: > * This endpoint is currently in Beta. Breaking changes may be introduced before the endpoint is made Generally Available. > * This endpoint requires Spotter - please contact ThoughtSpot support to enable Spotter on your cluster.      
   * @param conversationIdentifier Unique identifier of the conversation.
   * @param sendMessageRequest 
   */
  sendMessage(conversationIdentifier, sendMessageRequest, _options) {
    const result = this.api.sendMessage(conversationIdentifier, sendMessageRequest, _options);
    return result.toPromise();
  }
  /**
   *  Version: 10.4.0.cl or later   Processes a natural language query and returns an AI-generated response based on a specified data model.  Requires at least view access to the metadata object specified in the request.  > ###### Note: > * This endpoint is currently in Beta. Breaking changes may be introduced before the endpoint is made Generally Available. > * This endpoint requires Spotter - please contact ThoughtSpot support to enable Spotter on your cluster.      
   * @param singleAnswerRequest 
   */
  singleAnswer(singleAnswerRequest, _options) {
    const result = this.api.singleAnswer(singleAnswerRequest, _options);
    return result.toPromise();
  }
};
var PromiseAuthenticationApi = class {
  constructor(configuration, requestFactory, responseProcessor) {
    this.api = new ObservableAuthenticationApi(configuration, requestFactory, responseProcessor);
  }
  /**
   *   Version: 9.0.0.cl or later    Gets session information for the currently logged-in user.  This API does not require any parameters to be passed in the request.    Any ThoughtSpot user can access this endpoint and send an API request. The data returned in the API response varies according to user\'s privilege and object access permissions.      
   */
  getCurrentUserInfo(_options) {
    const result = this.api.getCurrentUserInfo(_options);
    return result.toPromise();
  }
  /**
   *  Get token for the currently logged-in user.    Version: 9.4.0.cl or later   Gets token details for the currently logged-in user.  You can use this endpoint to obtain the token associated with the user\'s session.  This API does not require any parameters to be passed in the request.    Any ThoughtSpot user can access this endpoint and send an API request.      
   */
  getCurrentUserToken(_options) {
    const result = this.api.getCurrentUserToken(_options);
    return result.toPromise();
  }
  /**
   *   Version: 10.4.0.cl or later   Gets an authentication token with custom rules and security attributes and creates a full session in ThoughtSpot for a given user. By default, the token obtained from ThoughtSpot remains valid for 5 mins.  To add a new user and assign privileges during auto creation, you need `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled, the `CONTROL_TRUSTED_AUTH`(**Can Enable or Disable Trusted Authentication**) privilege and edit access to the data source is required.  To assign security attributes with filter rules and Parameters to the JWT token, you\'ll need administrator privileges and edit access to the data source (Worksheet or Model). If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled, the `CONTROL_TRUSTED_AUTH`(**Can Enable or Disable Trusted Authentication**) privilege and edit access to the data source is required.  #### Usage guidelines  You can generate the token for a user by providing a `username` and `password`, or by using the cluster’s `secret_key`.  To generate a `secret_key` on your cluster, the administrator must enable [Trusted authentication](https://developers.thoughtspot.com/docs/?pageid=trusted-auth#trusted-auth-enable) in the **Develop** > **Customizations** > **Security Settings** page.  **Note**: When both `password` and `secret_key` are included in the API request, `password` takes precedence.  If Multi-Factor Authentication (MFA) is enabled on your instance, the API login request with basic authentication (`username`  and `password` ) returns an error. You can switch to token-based authentication with  `secret_key`  or contact ThoughtSpot Support for assistance.  ##### Attribute-Based Access Control (ABAC) with tokens  To implement Attribute-Based Access Control (ABAC) and assign security entitlements to users during session creation, you can generate a token with custom filtering rules and Parameters in the `filter_rules` and `parameter_values` array respectively. These attributes can be configured to persist on a specific set of objects for user sessions initiated using the token. Once defined, the rules are added to the user\'s `access_control_properties` object, after which all sessions will use the persisted values.  Specify the object type as `LOGICAL_TABLE`.  The `LIVEBOARD` and `ANSWER` object types are not supported.  For more information, see [ABAC via tokens Documentation](https://developers.thoughtspot.com/docs/api-authv2#_get_tokens_with_custom_rules_and_filter_conditions).  ##### Just-in-time provisioning  For just-in-time user creation and provisioning, define the following attributes:  * `auto_create` * `username` * `display_name` * `email` * `groups`  Set `auto_create` to `true` if the user is not available in ThoughtSpot. If the user already exists in ThoughtSpot and the `auto_create` parameter is set to `true` in the API request, the user properties such as the display name, email, Org and group assignment will not be updated with new values.  For more information, see [Just-in-time provisioning](https://developers.thoughtspot.com/docs/just-in-time-provisioning).  ##### Important point to note All options in the token creation APIs that define access to the content in ThoughtSpot will do so during the token creation and not when the token is being used for authentication. For example, `auto_create:true` will create the user when the authentication token is created. Persist options such as  `APPEND`, `REPLACE`, `RESET` will persist security parameters on the user profile when the token is created, while Persist option `NONE` will not persist anything but will be honoured in the session.      
   * @param getCustomAccessTokenRequest 
   */
  getCustomAccessToken(getCustomAccessTokenRequest, _options) {
    const result = this.api.getCustomAccessToken(getCustomAccessTokenRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.0.0.cl or later   Gets an authentication token and creates a full session in ThoughtSpot for a given user. By default, the token obtained from ThoughtSpot remains valid for 5 mins.  You can generate the token for a user by providing a `username` and `password`, or by using the cluster’s `secret_key` (for [Trusted authentication](https://developers.thoughtspot.com/docs/?pageid=trusted-auth#trusted-auth-enable)).  To generate a `secret_key` on your cluster, the administrator must enable **Trusted authentication** in the **Develop** > **Customizations** > **Security Settings** page. For more information, see [Trusted authentication](https://developers.thoughtspot.com/docs/?pageid=trusted-auth#trusted-auth-enable).  **Note**: When both `password` and `secret_key` are included in the API request, `password` takes precedence.  If Multi-Factor Authentication (MFA) is enabled on your instance, the API login request with basic authentication (`username`  and `password` ) returns an error. You can switch to token-based authentication with  `secret_key`  or contact ThoughtSpot Support for assistance.  #### Just-in-time provisioning  For just-in-time user creation and provisioning, define the following attributes:  * `auto_create` * `username` * `display_name` * `email` * `group_identifiers`  Set `auto_create` to `True` if the user is not available in ThoughtSpot. If the user already exists in ThoughtSpot and the `auto_create` parameter is set to `true`, the API call will update user properties like display name, email and group assignment.  For more information, see [Just-in-time provisioning](https://developers.thoughtspot.com/docs/just-in-time-provisioning).  To add a new user and assign privileges, you need `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled, the `CONTROL_TRUSTED_AUTH`(**Can Enable or Disable Trusted Authentication**) privilege is required.  #### Important point to note All options in the token creation APIs changing the content in ThoughtSpot will do so during the token creation and not when the token is being used for authentication. For example, `auto_create:true` will create the user when the authentication token is created.      
   * @param getFullAccessTokenRequest 
   */
  getFullAccessToken(getFullAccessTokenRequest, _options) {
    const result = this.api.getFullAccessToken(getFullAccessTokenRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.0.0.cl or later   Gets an authentication token that provides access to a specific metadata object. By default, the token obtained from ThoughtSpot remains valid for 5 mins.  You can generate the token for a user by providing a `username` and `password`, or by using the cluster’s `secret key` (for [Trusted authentication](https://developers.thoughtspot.com/docs/?pageid=trusted-auth#trusted-auth-enable)).  To generate a `secret_key` on your cluster, the administrator must enable **Trusted authentication** in the **Develop** > **Customizations** > **Security Settings** page.  **Note**: When both `password` and `secret_key` are included in the API request,  `password` takes precedence.  If Multi-Factor Authentication (MFA) is enabled on your instance, the API login request with basic authentication (`username`  and `password` ) returns an error. You can switch to token-based authentication with  `secret_key`  or contact ThoughtSpot Support for assistance.  #### Just-in-time provisioning  For just-in-time user creation and provisioning, define the following attributes:  * `auto_create` * `username` * `display_name` * `email` * `group_identifiers`  Set `auto_create` to `True` if the user is not available in ThoughtSpot. If the user already exists in ThoughtSpot and the `auto_create` parameter is set to `true`, the API call will update user properties like display name, email and group assignment.  For more information, see [Just-in-time provisioning](https://developers.thoughtspot.com/docs/just-in-time-provisioning).  To add a new user and assign privileges, you need `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled, the `CONTROL_TRUSTED_AUTH`(**Can Enable or Disable Trusted Authentication**) privilege is required.  #### Important point to note All options in the token creation APIs changing the content in ThoughtSpot will do so during the token creation and not when the token is being used for authentication. For example, `auto_create:true` will create the user when the authentication token is created.      
   * @param getObjectAccessTokenRequest 
   */
  getObjectAccessToken(getObjectAccessTokenRequest, _options) {
    const result = this.api.getObjectAccessToken(getObjectAccessTokenRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.0.0.cl or later   Creates a login session for a ThoughtSpot user with Basic authentication.  In Basic authentication method, REST clients log in to ThoughtSpot using `username` and `password` attributes. On a multi-tenant cluster with Orgs, users can pass the ID of the Org in the API request to log in to a specific Org context.  **Note**: If Multi-Factor Authentication (MFA) is enabled on your instance, the API login request with basic authentication (`username`  and `password` ) returns an error. Contact ThoughtSpot Support for assistance.  A successful login returns a session cookie that can be used in your subsequent API requests.     
   * @param loginRequest 
   */
  login(loginRequest, _options) {
    const result = this.api.login(loginRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.0.0.cl or later    Logs out a user from their current session.      
   */
  logout(_options) {
    const result = this.api.logout(_options);
    return result.toPromise();
  }
  /**
   *   Version: 9.0.0.cl or later    Revokes the authentication token issued for current user session.  The token of your current session expires when you make a call to the `/api/rest/2.0/auth/token/revoke` endpoint. the users will not be able to access ThoughtSpot objects until a new token is obtained.  To restart your session, request for a new token from ThoughtSpot. See [Get Full Access Token](#/http/api-endpoints/authentication/get-full-access-token).      
   * @param revokeTokenRequest 
   */
  revokeToken(revokeTokenRequest, _options) {
    const result = this.api.revokeToken(revokeTokenRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.12.0.cl or later    Validates the authentication token specified in the API request.  If your token is not valid, [Get a new token](#/http/api-endpoints/authentication/get-full-access-token).      
   * @param validateTokenRequest 
   */
  validateToken(validateTokenRequest, _options) {
    const result = this.api.validateToken(validateTokenRequest, _options);
    return result.toPromise();
  }
};
var PromiseConnectionsApi = class {
  constructor(configuration, requestFactory, responseProcessor) {
    this.api = new ObservableConnectionsApi(configuration, requestFactory, responseProcessor);
  }
  /**
   *   Version: 9.2.0.cl or later   Creates a connection to a data warehouse for live query services.    Requires `DATAMANAGEMENT` (**Can manage data**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) privilege is required.  #### Create a connection without tables  To create a connection without tables:  1. Pass these parameters in your API request.  * Name of the connection.  * Type of the data warehouse to connect to.  * A JSON map of configuration attributes in `data_warehouse_config`. The following example shows the configuration attributes for a SnowFlake connection:   ```   {      \"configuration\":{         \"accountName\":\"thoughtspot_partner\",         \"user\":\"tsadmin\",         \"password\":\"TestConn123\",         \"role\":\"sysadmin\",         \"warehouse\":\"MEDIUM_WH\"      },      \"externalDatabases\":[       ]   }   ``` 2. Set `validate` to `false`.  #### Create a connection with tables  To create a connection with tables:  1. Pass these parameters in your API request.  * Name of the connection.  * Type of the data warehouse to connect to.  * A JSON map of configuration attributes, database details, and table properties in `data_warehouse_config` as shown in the following example:   ```   {      \"configuration\":{         \"accountName\":\"thoughtspot_partner\",         \"user\":\"tsadmin\",         \"password\":\"TestConn123\",         \"role\":\"sysadmin\",         \"warehouse\":\"MEDIUM_WH\"      },      \"externalDatabases\":[         {            \"name\":\"AllDatatypes\",            \"isAutoCreated\":false,            \"schemas\":[               {                  \"name\":\"alldatatypes\",                  \"tables\":[                     {                        \"name\":\"allDatatypes\",                        \"type\":\"TABLE\",                        \"description\":\"\",                        \"selected\":true,                        \"linked\":true,                        \"columns\":[                           {                              \"name\":\"CNUMBER\",                              \"type\":\"INT64\",                              \"canImport\":true,                              \"selected\":true,                              \"isLinkedActive\":true,                              \"isImported\":false,                              \"tableName\":\"allDatatypes\",                              \"schemaName\":\"alldatatypes\",                              \"dbName\":\"AllDatatypes\"                           },                           {                              \"name\":\"CDECIMAL\",                              \"type\":\"INT64\",                              \"canImport\":true,                              \"selected\":true,                              \"isLinkedActive\":true,                              \"isImported\":false,                              \"tableName\":\"allDatatypes\",                              \"schemaName\":\"alldatatypes\",                              \"dbName\":\"AllDatatypes\"                           }                        ]                     }                  ]               }            ]         }      ]   }   ``` 2. Set `validate` to `true`.      
   * @param createConnectionRequest 
   */
  createConnection(createConnectionRequest, _options) {
    const result = this.api.createConnection(createConnectionRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.2.0.cl or later    **Important**: This endpoint is deprecated and will be removed from ThoughtSpot in September 2025. ThoughtSpot strongly recommends using the [Delete Connection V2](#/http/api-endpoints/connections/delete-connection-v2) endpoint to delete your connection objects.    #### Usage guidelines  Deletes a connection object.  Requires `DATAMANAGEMENT` (**Can manage data**) and edit permissions to the connection object, or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) privilege is required.  **Note**: If a connection has dependent objects, make sure you remove its associations before the delete operation.     
   * @param deleteConnectionRequest 
   */
  deleteConnection(deleteConnectionRequest, _options) {
    const result = this.api.deleteConnection(deleteConnectionRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 10.4.0.cl or later   Deletes a connection object.  **Note**: If a connection has dependent objects, make sure you remove its associations before the delete operation.  Requires `DATAMANAGEMENT` (**Can manage data**) and edit permissions to the connection object, or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) privilege is required.      
   * @param connectionIdentifier Unique ID or name of the connection.
   */
  deleteConnectionV2(connectionIdentifier, _options) {
    const result = this.api.deleteConnectionV2(connectionIdentifier, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.9.0.cl or later   Exports the difference in connection metadata between CDW and ThoughtSpot  Requires `DATAMANAGEMENT` (**Can manage data**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the following Data control privileges may be required:   - `CAN_MANAGE_CUSTOM_CALENDAR`(**Can manage custom calendars**) - `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) - `CAN_MANAGE_WORKSHEET_VIEWS_TABLES` (**Can manage data models**)  To download the connection metadata difference between ThoughtSpot and CDW, pass the connection GUID as `connection_identifier` in the API request.      
   * @param connectionIdentifier GUID of the connection
   */
  downloadConnectionMetadataChanges(connectionIdentifier, _options) {
    const result = this.api.downloadConnectionMetadataChanges(connectionIdentifier, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.9.0.cl or later   Validates the difference in connection metadata between CDW and ThoughtSpot.  Requires `DATAMANAGEMENT` (**Can manage data**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the following Data control privileges may be required:  - `CAN_MANAGE_CUSTOM_CALENDAR`(**Can manage custom calendars**) - `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) - `CAN_MANAGE_WORKSHEET_VIEWS_TABLES` (**Can manage data models**)  Returns a boolean indicating whether there is any difference between the connection metadata at ThoughtSpot and CDW.  To get the connection metadata difference status, pass the connection GUID as `connection_identifier` in the API request.      
   * @param connectionIdentifier GUID of the connection
   */
  fetchConnectionDiffStatus(connectionIdentifier, _options) {
    const result = this.api.fetchConnectionDiffStatus(connectionIdentifier, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.2.0.cl or later   Gets connection objects. Requires `DATAMANAGEMENT` (**Can manage data**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) privilege is required.  - To get a list of all connections available in the ThoughtSpot system, send the API request without any attributes in the request body. - To get the connection objects for a specific type of data warehouse, specify the type in `data_warehouse_types`. - To fetch details of a connection object, specify the connection object GUID or name. The `name_pattern` attribute allows passing partial text with `%` for a wildcard match. - To get details of the database, schemas, tables, or columns from a data connection object, specify `data_warehouse_object_type`. - To get a specific database, schema, table, or column from a connection object, define the object type in `data_warehouse_object_type` and object properties in the `data_warehouse_objects` array. For example, to search for a column, you must pass the database, schema, and table names in the API request.   Note that in the following example, object properties are set in a hierarchical order (`database` > `schema` > `table` > `column`).  ``` {   \"connections\": [     {       \"identifier\": \"b9d1f2ef-fa65-4a4b-994e-30fa2d57b0c2\",       \"data_warehouse_objects\": [         {           \"database\": \"NEBULADEV\",           \"schema\": \"INFORMATION_SCHEMA\",           \"table\": \"APPLICABLE_ROLES\",           \"column\": \"ROLE_NAME\"         }       ]     }   ],   \"data_warehouse_object_type\": \"COLUMN\" } ```  - To fetch data by `configuration`, specify `data_warehouse_object_type`. For example, to fetch columns from the `DEVELOPMENT` database, specify the `data_warehouse_object_type` as `DATABASE` and define the `configuration` string as `{\"database\":\"DEVELOPMENT\"}`. To get column data for a specific table, specify the table, for example,`{\"database\":\"RETAILAPPAREL\",\"table\":\"PIPES\"}`. - To query connections by `authentication_type`, specify `data_warehouse_object_type`. Supported values for `authentication_type` are:   - `SERVICE_ACCOUNT`: For connections that require service account credentials to authenticate to the Cloud Data Warehouse and fetch data.   - `OAUTH`: For connections that require OAuth credentials to authenticate to the Cloud Data Warehouse and fetch data. Teradata, Oracle, and Presto Cloud Data Warehouses do not support the OAuth authentication type.   - `IAM`: For connections that have the IAM OAuth set up. This authentication type is supported on Amazon Redshift connections only.   - `EXTOAUTH`: For connections that have external OAuth set up. ThoughtSpot supports external [OAuth with Microsoft Azure Active Directory (AD)](https://docs.thoughtspot.com/cloud/latest/ connections-snowflake-azure-ad-oauth) and [Okta for Snowflake data connections](https://docs.thoughtspot.com/cloud/latest/connections-snowflake-okta-oauth). - To include more details about connection objects in the API response, set `include_details` to `true`. - You can also sort the output by field names and filter connections by tags.  **NOTE**: When filtering connection records by parameters other than `data_warehouse_types` or `tag_identifiers`, ensure that you set `record_size` to `-1` and `record_offset` to `0` for precise results.      
   * @param searchConnectionRequest 
   */
  searchConnection(searchConnectionRequest, _options) {
    const result = this.api.searchConnection(searchConnectionRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.2.0.cl or later   **Important**: This endpoint is deprecated and will be removed from ThoughtSpot in September 2025. ThoughtSpot strongly recommends using the [Update connection V2](#/http/api-endpoints/connections/update-connection-v2) endpoint to update your connection objects.  #### Usage guidelines  Updates a connection object.    Requires `DATAMANAGEMENT` (**Can manage data**) and edit permissions to the connection object, or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) privilege is required.  To update a connection object, pass these parameters in your API request:  1. GUID of the connection object. 2. If you are updating tables or database schema of a connection object:    a. Add the updated JSON map of metadata with database, schema, and tables in `data_warehouse_config`.    b. Set `validate` to `true`. 3. If you are updating a configuration attribute, connection name, or description, you can set `validate` to `false`.      
   * @param updateConnectionRequest 
   */
  updateConnection(updateConnectionRequest, _options) {
    const result = this.api.updateConnection(updateConnectionRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 10.4.0.cl or later   Updates a connection object.  Requires `DATAMANAGEMENT` (**Can manage data**) and edit permissions to the connection object, or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) privilege is required.  To update a connection object, pass these parameters in your API request:  1. GUID of the connection object. 2. If you are updating tables or database schema of a connection object:    a. Add the updated JSON map of metadata with database, schema, and tables in `data_warehouse_config`.    b. Set `validate` to `true`. 3. If you are updating a configuration attribute, connection name, or description, you can set `validate` to `false`.      
   * @param connectionIdentifier Unique ID or name of the connection.
   * @param updateConnectionV2Request 
   */
  updateConnectionV2(connectionIdentifier, updateConnectionV2Request, _options) {
    const result = this.api.updateConnectionV2(connectionIdentifier, updateConnectionV2Request, _options);
    return result.toPromise();
  }
};
var PromiseCustomActionApi = class {
  constructor(configuration, requestFactory, responseProcessor) {
    this.api = new ObservableCustomActionApi(configuration, requestFactory, responseProcessor);
  }
  /**
   *   Version: 9.6.0.cl or later   Creates a custom action that appears as a menu action on a saved Answer or Liveboard visualization.  Requires `DEVELOPER` (**Has Developer privilege**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `DEVELOPER` (**Has developer privilege**) privilege is required.  #### Usage Guidelines  The API lets you create the following types of custom actions:  * URL-based action        Allows pushing data to an external URL. * Callback action           Triggers a callback to the host application and initiates a response payload on an embedded ThoughtSpot instance.  By default, custom actions are visible to only administrator or developer users. To make a custom action available to other users, and specify the groups in `group_identifiers`.  By default, the custom action is set as a _global_ action on all visualizations and saved Answers. To assign a custom action to specific Liveboard visualization, saved Answer, or Worksheet, set `visibility` to `false` in `default_action_config` property and specify the GUID or name of the object in `associate_metadata`.  For more information, see [Custom actions](https://developers.thoughtspot.com/docs/custom-action-intro).      
   * @param createCustomActionRequest 
   */
  createCustomAction(createCustomActionRequest, _options) {
    const result = this.api.createCustomAction(createCustomActionRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.6.0.cl or later   Removes the custom action specified in the API request.  Requires `DEVELOPER` (**Has Developer privilege**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `DEVELOPER` (**Has developer privilege**) privilege is required.      
   * @param customActionIdentifier Unique ID or name of the custom action.
   */
  deleteCustomAction(customActionIdentifier, _options) {
    const result = this.api.deleteCustomAction(customActionIdentifier, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.6.0.cl or later   Gets custom actions configured on the cluster.  Requires `DEVELOPER` (**Has Developer privilege**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `DEVELOPER` (**Has developer privilege**) privilege is required.      
   * @param searchCustomActionsRequest 
   */
  searchCustomActions(searchCustomActionsRequest, _options) {
    const result = this.api.searchCustomActions(searchCustomActionsRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.6.0.cl or later   Updates a custom action.  Requires `DEVELOPER` (**Has Developer privilege**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `DEVELOPER` (**Has developer privilege**) privilege is required.  #### Usage Guidelines  The API allows you to modify the following properties:  * Name of the custom action * Action availability to groups * Association to metadata objects * Authentication settings for a URL-based action  For more information, see [Custom actions](https://developers.thoughtspot.com/docs/custom-action-intro).      
   * @param customActionIdentifier Unique ID or name of the custom action.
   * @param updateCustomActionRequest 
   */
  updateCustomAction(customActionIdentifier, updateCustomActionRequest, _options) {
    const result = this.api.updateCustomAction(customActionIdentifier, updateCustomActionRequest, _options);
    return result.toPromise();
  }
};
var PromiseDBTApi = class {
  constructor(configuration, requestFactory, responseProcessor) {
    this.api = new ObservableDBTApi(configuration, requestFactory, responseProcessor);
  }
  /**
   *   Version: 9.9.0.cl or later   Creates a DBT connection object in ThoughtSpot.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege or `DATAMANAGEMENT` (**Can manage data**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the following Data control privileges may be required:  - `CAN_MANAGE_CUSTOM_CALENDAR`(**Can manage custom calendars**) - `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) - `CAN_MANAGE_WORKSHEET_VIEWS_TABLES` (**Can manage data models**)  #### About create DBT connection DBT connection in ThoughtSpot is used by the user to define DBT credentials for cloud . The API needs  embrace connection, embrace database name, DBT url, import type, DBT account identifier, DBT project identifier, DBT access token and environment details (or) embrace connection, embrace database name, import type, file_content to create a connection object. To know more about DBT, see ThoughtSpot Product Documentation.      
   * @param dbtConnectionRequest 
   */
  dbtConnection(dbtConnectionRequest, _options) {
    const result = this.api.dbtConnection(dbtConnectionRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.9.0.cl or later   Resynchronize the existing list of models, tables, worksheet tml’s and import them to Thoughtspot based on the DBT connection object.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege or `DATAMANAGEMENT` (**Can manage data**) privilege, along with an existing DBT connection. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the following data control privileges may be required:  - `CAN_MANAGE_CUSTOM_CALENDAR`(**Can manage custom calendars**) - `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) - `CAN_MANAGE_WORKSHEET_VIEWS_TABLES` (**Can manage data models**)      
   * @param dbtGenerateSyncTmlRequest 
   */
  dbtGenerateSyncTml(dbtGenerateSyncTmlRequest, _options) {
    const result = this.api.dbtGenerateSyncTml(dbtGenerateSyncTmlRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.9.0.cl or later   Generate required table and worksheet and import them.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege or `DATAMANAGEMENT` (**Can manage data**) privilege, along with an existing DBT connection. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the following data control privileges may be required:  - `CAN_MANAGE_CUSTOM_CALENDAR`(**Can manage custom calendars**) - `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) - `CAN_MANAGE_WORKSHEET_VIEWS_TABLES` (**Can manage data models**)  #### About generate TML Models and Worksheets to be imported can be selected by the user as part of the API.      
   * @param dbtGenerateTmlRequest 
   */
  dbtGenerateTml(dbtGenerateTmlRequest, _options) {
    const result = this.api.dbtGenerateTml(dbtGenerateTmlRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.9.0.cl or later   Gets a list of DBT connection objects by user and organization, available on the ThoughtSpot system.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege or `DATAMANAGEMENT` (**Can manage data**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the following Data control privileges may be required:  - `CAN_MANAGE_CUSTOM_CALENDAR`(**Can manage custom calendars**) - `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) - `CAN_MANAGE_WORKSHEET_VIEWS_TABLES` (**Can manage data models**)  #### About search DBT connection To get details of a specific DBT connection identifier, database connection identifier, database connection name, database name, project name, project identifier, environment identifier , import type and author.      
   */
  dbtSearch(_options) {
    const result = this.api.dbtSearch(_options);
    return result.toPromise();
  }
  /**
   *   Version: 9.9.0.cl or later   Removes the specified DBT connection object from the ThoughtSpot system.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) or `DATAMANAGEMENT` (**Can manage data ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the following Data control privileges may be required:  - `CAN_MANAGE_CUSTOM_CALENDAR`(**Can manage custom calendars**) - `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) - `CAN_MANAGE_WORKSHEET_VIEWS_TABLES` (**Can manage data models**)      
   * @param dbtConnectionIdentifier Unique ID of the DBT Connection.
   */
  deleteDbtConnection(dbtConnectionIdentifier, _options) {
    const result = this.api.deleteDbtConnection(dbtConnectionIdentifier, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.9.0.cl or later   Updates a DBT connection object.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege or `DATAMANAGEMENT` (**Can manage data ThoughtSpot**) privilege, along with an existing DBT connection. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the following data control privileges may be required:  - `CAN_MANAGE_CUSTOM_CALENDAR`(**Can manage custom calendars**) - `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) - `CAN_MANAGE_WORKSHEET_VIEWS_TABLES` (**Can manage data models**)  #### About update DBT connection You can modify DBT connection object properties such as embrace connection name, embrace database name, import type, account identifier, access token, project identifier and environment (or) embrace connection, embrace database name, import type, file_content settings.      
   * @param updateDbtConnectionRequest 
   */
  updateDbtConnection(updateDbtConnectionRequest, _options) {
    const result = this.api.updateDbtConnection(updateDbtConnectionRequest, _options);
    return result.toPromise();
  }
};
var PromiseDataApi = class {
  constructor(configuration, requestFactory, responseProcessor) {
    this.api = new ObservableDataApi(configuration, requestFactory, responseProcessor);
  }
  /**
   *   Version: 9.0.0.cl or later   Fetches data from a saved Answer.  Requires at least view access to the saved Answer.  The `record_size` attribute determines the number of records to retrieve in an API call. For more information about pagination, record size, and maximum row limit, see [Pagination and record size settings](https://developers.thoughtspot.com/docs/fetch-data-and-report-apis#_pagination_settings_for_data_and_report_apis).     
   * @param fetchAnswerDataRequest 
   */
  fetchAnswerData(fetchAnswerDataRequest, _options) {
    const result = this.api.fetchAnswerData(fetchAnswerDataRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.0.0.cl or later   Gets data from a Liveboard object and its visualization.    Requires at least view access to the Liveboard.  #### Usage guidelines  In the request body, specify the GUID or name of the Liveboard. To get data for specific visualizations, add the GUIDs or names of the visualizations in the API request.  To include unsaved changes in the report, pass the `transient_pinboard_content` script generated from the `getExportRequestForCurrentPinboard` method in the Visual Embed SDK. Upon successful execution, the API returns the report with unsaved changes. If the new Liveboard experience mode, the transient content includes ad hoc changes to visualizations such as sorting, toggling of legends, and data drill down.  For more information, and see [Liveboard data API](https://developers.thoughtspot.com/docs/fetch-data-and-report-apis#_fetch_liveboard_data_api).     
   * @param fetchLiveboardDataRequest 
   */
  fetchLiveboardData(fetchLiveboardDataRequest, _options) {
    const result = this.api.fetchLiveboardData(fetchLiveboardDataRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.0.0.cl or later   Generates an Answer from a given data source.  Requires at least view access to the data source object (Worksheet or View).  #### Usage guidelines  To search data, specify the data source GUID in `logical_table_identifier`. The data source can be a Worksheet, View, Table, or SQL view.  Pass search tokens in the `query_string` attribute in the API request as shown in the following example:  ``` {   \"query_string\": \"[sales] by [store]\",   \"logical_table_identifier\": \"cd252e5c-b552-49a8-821d-3eadaa049cca\", } ```  For more information about the `query_string` format and data source attribute, see [Search data API](https://developers.thoughtspot.com/docs/fetch-data-and-report-apis#_search_data_api).    The `record_size` attribute determines the number of records to retrieve in an API call. For more information about pagination, record size, and maximum row limit, see [Pagination and record size settings](https://developers.thoughtspot.com/docs/fetch-data-and-report-apis#_pagination_settings_for_data_and_report_api).       
   * @param searchDataRequest 
   */
  searchData(searchDataRequest, _options) {
    const result = this.api.searchData(searchDataRequest, _options);
    return result.toPromise();
  }
};
var PromiseEmailCustomisationApi = class {
  constructor(configuration, requestFactory, responseProcessor) {
    this.api = new ObservableEmailCustomisationApi(configuration, requestFactory, responseProcessor);
  }
  /**
   *  Version: 10.10.0.cl or later   Creates a custom configuration for the email customisation  #### Pre-requisites  Requires `DEVELOPER` (**has developer privilege**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `_Has developer privilege` privilege is required. Coms should be enabled on the cluster.  #### Usage guidelines  To create a custom confuguration:  1. Pass these parameters in your API request.  - A JSON map of configuration attributes `template_properties`. The following example shows the configuration attribures for a csutom configuration:  ``` {     {     \"logoUrl\": \"<logo_url>\",     \"homeUrl\": \"<home_url>\",     \"productName\": \"<Company Name in the Mail>\",     \"footerAddress\": \"<address to be visible in the footer>\",     \"ctaButtonBgColor\": \"#444DEA\",     \"ctaTextFontColor\": \"#FFFFFF\",     \"primaryBgColor\": \"#D3DEF0\",     \"hideMobileAppNudge\": <true/false>,     \"hideTsVocabularyDefinitions\": <true/false>e,     \"hideProductName\": <true/false>,     \"hideFooterPhone\": <true/false>,     \"hideFooterAddress\": <true/false>,     \"hidePrivacyPolicy\": <true/false>,     \"hideManageNotification\": <true/false>,     \"fontfamily\": \"<to maintain a single font in the entire email>\"   } } ```      
   * @param createEmailCustomisationRequest 
   */
  createEmailCustomisation(createEmailCustomisationRequest, _options) {
    const result = this.api.createEmailCustomisation(createEmailCustomisationRequest, _options);
    return result.toPromise();
  }
  /**
   *  Version: 10.10.0.cl or later   Deletes the configuration for the email customisation.  #### Pre-requisites  Requires `DEVELOPER` (**has developer privilege**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `_Has developer privilege` privilege is required. Coms should be enabled on the cluster.  #### Usage guidelines  Deletes the configuration available for the cluster/org. Pass the `template_identifier` in the API request.  Note: `template_identifier` can be fetched from search API request.      
   * @param templateIdentifier Unique ID or name of the email customization.
   */
  deleteEmailCustomisation(templateIdentifier, _options) {
    const result = this.api.deleteEmailCustomisation(templateIdentifier, _options);
    return result.toPromise();
  }
  /**
   *  Version: 10.10.0.cl or later   Search the email customisation configuration if any set for the ThoughtSpot system.  #### Pre-requisites  Requires `DEVELOPER` (**has developer privilege**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `_Has developer privilege` privilege is required. Coms should be enabled on the cluster.  #### Usage guidelines  To get the list of configurations set in the cluster/org.      
   */
  searchEmailCustomisation(_options) {
    const result = this.api.searchEmailCustomisation(_options);
    return result.toPromise();
  }
  /**
   *  Version: 10.10.0.cl or later   Validates the email customisation configuration if any set for the ThoughtSpot system.  #### Pre-requisites  Requires `DEVELOPER` (**has developer privilege**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `_Has developer privilege` privilege is required. Coms should be enabled on the cluster.      
   */
  validateEmailCustomisation(_options) {
    const result = this.api.validateEmailCustomisation(_options);
    return result.toPromise();
  }
};
var PromiseGroupsApi = class {
  constructor(configuration, requestFactory, responseProcessor) {
    this.api = new ObservableGroupsApi(configuration, requestFactory, responseProcessor);
  }
  /**
   *   Version: 9.0.0.cl or later   Creates a group object in ThoughtSpot.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `GROUP_ADMINISTRATION` (**Can manage groups**) privilege is required.  #### About groups Groups in ThoughtSpot are used by the administrators to define privileges and organize users based on their roles and access requirements. To know more about groups and privileges, see [ThoughtSpot Product Documentation](https://docs.thoughtspot.com/cloud/latest/groups-privileges).  #### Supported operations  The API endpoint lets you perform the following operations:  * Assign privileges * Add users * Define sharing visibility * Add sub-groups * Assign a default Liveboard      
   * @param createUserGroupRequest 
   */
  createUserGroup(createUserGroupRequest, _options) {
    const result = this.api.createUserGroup(createUserGroupRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.0.0.cl or later   Removes the specified group object from the ThoughtSpot system.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `GROUP_ADMINISTRATION` (**Can manage groups**) privilege is required.      
   * @param groupIdentifier GUID or name of the group.
   */
  deleteUserGroup(groupIdentifier, _options) {
    const result = this.api.deleteUserGroup(groupIdentifier, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.0.0.cl or later   Imports group objects from external databases into ThoughtSpot.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `GROUP_ADMINISTRATION` (**Can manage groups**) privilege is required.  During the import operation:  * If the specified group is not available in ThoughtSpot, it will be added to ThoughtSpot. * If `delete_unspecified_groups` is set to `true`, the groups not specified in the API request, excluding administrator and system user groups, are deleted. * If the specified groups are already available in ThoughtSpot, the object properties of these groups are modified and synchronized as per the input data in the API request.  A successful API call returns the object that represents the changes made in the ThoughtSpot system.      
   * @param importUserGroupsRequest 
   */
  importUserGroups(importUserGroupsRequest, _options) {
    const result = this.api.importUserGroups(importUserGroupsRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.0.0.cl or later   Gets a list of user group objects from the ThoughtSpot system.  To get details of a specific user group, specify the user group GUID or name. You can also filter the API response based on User ID, Org ID, Role ID, type of group, sharing visibility, privileges assigned to the group, and the Liveboard IDs assigned to the users in the group.  Available to all users. Users with `ADMINISTRATION` (**Can administer ThoughtSpot**) privileges can view all users properties.  If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `GROUP_ADMINISTRATION` (**Can manage groups**) privilege is required.  **NOTE**: If you do not get precise results, try setting `record_size` to `-1` and `record_offset` to `0`.      
   * @param searchUserGroupsRequest 
   */
  searchUserGroups(searchUserGroupsRequest, _options) {
    const result = this.api.searchUserGroups(searchUserGroupsRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.0.0.cl or later   Updates the properties of a group object in ThoughtSpot.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `GROUP_ADMINISTRATION` (**Can manage groups**) privilege is required.  #### Supported operations  This API endpoint lets you perform the following operations in a single API request:  * Edit [privileges](https://developers.thoughtspot.com/docs/?pageid=api-user-management#group-privileges) * Add or remove users * Change sharing visibility settings * Add or remove sub-groups * Assign a default Liveboard  or update the existing settings      
   * @param groupIdentifier GUID or name of the group.
   * @param updateUserGroupRequest 
   */
  updateUserGroup(groupIdentifier, updateUserGroupRequest, _options) {
    const result = this.api.updateUserGroup(groupIdentifier, updateUserGroupRequest, _options);
    return result.toPromise();
  }
};
var PromiseLogApi = class {
  constructor(configuration, requestFactory, responseProcessor) {
    this.api = new ObservableLogApi(configuration, requestFactory, responseProcessor);
  }
  /**
   *   Version: 9.0.0.cl or later   Fetches security audit logs.    Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the [Admin Control](https://developers.thoughtspot.com/docs/rbac#_admin_control) privileges are required.   #### Usage guidelines  By default, the API retrieves logs for the last 24 hours. You can set a custom duration in EPOCH time. Make sure the log duration specified in your API request doesn’t exceed 24 hours. If you must fetch logs for a longer time range, modify the duration and make multiple sequential API requests.  Upon successful execution, the API returns logs with the following information: * timestamp of the event * event ID * event type * name and GUID of the user * IP address of ThoughtSpot instance  For more information see [Audit logs Documentation](https://developers.thoughtspot.com/docs/audit-logs).      
   * @param fetchLogsRequest 
   */
  fetchLogs(fetchLogsRequest, _options) {
    const result = this.api.fetchLogs(fetchLogsRequest, _options);
    return result.toPromise();
  }
};
var PromiseMetadataApi = class {
  constructor(configuration, requestFactory, responseProcessor) {
    this.api = new ObservableMetadataApi(configuration, requestFactory, responseProcessor);
  }
  /**
   *  Convert worksheets to models    Version: 10.6.0.cl or later   ## Prerequisites - **Privileges Required:**   - `DATAMANAGEMENT` (Can manage data) or `ADMINISTRATION` (Can administer ThoughtSpot). - **Additional Privileges (if RBAC is enabled):**   - `CAN_MANAGE_WORKSHEET_VIEWS_TABLES` (Can manage data models).  ---  ## Usage Guidelines  ### Parameters  1. **worksheet_ids**      - **Description:** A comma-separated list of GUIDs (Globally Unique Identifiers) specifying the Worksheets to be converted.      - **Usage:**        - Used only when `convert_all` is set to `false`.        - Leave empty or omit when `convert_all` is set to `true`.  2. **exclude_worksheet_ids**      - **Description:** A comma-separated list of GUIDs specifying Worksheets to be excluded from conversion.      - **Usage:**        - Useful when `convert_all` is set to `true` and specific Worksheets should not be converted.  3. **convert_all**      - **Description:** Sets the scope of conversion.    - **Options:**        - `true`: Converts all Worksheets in the system, except those specified in `exclude_worksheet_ids`.        - `false`: Converts only the Worksheets listed in `worksheet_ids`.  4. **apply_changes**      - **Description:** Specifies whether to apply changes directly to ThoughtSpot or to generate a preview before applying any changes.Used for validation of conversion.    - **Options:**        - `true`: Applies conversion changes directly to ThoughtSpot.      - `false`: Generates only a preview of the changes and does not apply any changes to ThoughtSpot  ---  ## Best Practices  1. **Backup Before Conversion:**      Always export metadata as a backup before initiating the conversion process  2. **Partial Conversion for Testing:**      Test the conversion process by setting `convert_all` to `false` and specifying a small number of `worksheet_ids`.  3. **Verify Dependencies:**      Check for dependent objects, such as Tables and Connections, to avoid invalid references.  4. **Review Changes:**      Use `apply_changes: false` to preview the impact of the conversion before applying changes.  ---  ## Examples  ### Convert Specific Worksheets ```json {   \"worksheet_ids\": [\"guid1\", \"guid2\", \"guid3\"],   \"exclude_worksheet_ids\": [],   \"convert_all\": false,   \"apply_changes\": true } ```  ### Convert All Accessible Worksheets ```json {   \"worksheet_ids\": [],   \"exclude_worksheet_ids\": [],   \"convert_all\": true,   \"apply_changes\": true } ```  ### Exclude Specific Worksheets While Converting All Accessible Worksheets ```json {   \"worksheet_ids\": [],   \"exclude_worksheet_ids\": [\"abc\"],   \"convert_all\": true,   \"apply_changes\": true } ```     
   * @param convertWorksheetToModelRequest 
   */
  convertWorksheetToModel(convertWorksheetToModelRequest, _options) {
    const result = this.api.convertWorksheetToModel(convertWorksheetToModelRequest, _options);
    return result.toPromise();
  }
  /**
   *  Makes a copy of an Answer or Liveboard saved in Atlas    Version: 10.3.0.cl or later   Creates a copy of a metadata object.  Requires at least view access to the metadata object being copied.  Upon successful execution, the API creates a copy of the metadata object specified in the API request and returns the ID of the new object.      
   * @param copyObjectRequest 
   */
  copyObject(copyObjectRequest, _options) {
    const result = this.api.copyObject(copyObjectRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.0.0.cl or later   Removes the specified metadata object from the ThoughtSpot system.  Requires edit access to the metadata object.       
   * @param deleteMetadataRequest 
   */
  deleteMetadata(deleteMetadataRequest, _options) {
    const result = this.api.deleteMetadata(deleteMetadataRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.0.0.cl or later   Exports the [TML](https://docs.thoughtspot.com/cloud/latest/tml) representation of metadata objects in JSON or YAML format.  Requires `DATADOWNLOADING` (**Can download Data**) and at least view access to the metadata object.  #### Usage guidelines  * You can export one or several objects by passing metadata object GUIDs in the `metadata` array. * When exporting TML content for a Liveboard or Answer object, you can set `export_associated` to `true` to retrieve TML content for underlying Worksheets, Tables, or Views, including the GUID of each object within the headers. When   `export_associated` is set to `true`, consider retrieving one metadata object at a time. * Set `export_fqns` to `true` to add FQNs of the referenced objects in the TML content. For example, if you send an API request to retrieve TML for a Liveboard and its associated objects, the API returns the TML content with FQNs of the referenced Worksheet. Exporting TML with FQNs is useful if ThoughtSpot has multiple objects with the same name and you want to eliminate ambiguity when importing TML files into ThoughtSpot. It eliminates the need for adding FQNs of the referenced objects manually during the import operation. * To export only the TML of feedbacks associated with an object, set the GUID of the object as `identifier`, and set the `type` as `FEEDBACK` in the `metadata` array. * To export the TML of an object along with the feedbacks associated with it, set the GUID of the object as `identifier`, set the `type` as `LOGIAL_TABLE` in the `metadata` array, and set `export_with_associated_feedbacks` in `export_options` to true.  For more information, see [TML Documentation](https://developers.thoughtspot.com/docs/tml#_export_a_tml).  For more information on feedbacks, see [Feedback Documentation](https://docs.thoughtspot.com/cloud/latest/sage-feedback).     
   * @param exportMetadataTMLRequest 
   */
  exportMetadataTML(exportMetadataTMLRequest, _options) {
    const result = this.api.exportMetadataTML(exportMetadataTMLRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 10.1.0.cl or later   Exports the [TML](https://docs.thoughtspot.com/cloud/latest/tml) representation of metadata objects in JSON or YAML format.  ### **Permissions Required**  Requires `DATAMANAGEMENT` (**Can manage data**) and `USERMANAGEMENT` (**Can manage users**) privileges.  #### **Usage Guidelines**  This API is only applicable for `USER`, `GROUP`, and `ROLES` metadata types.  - `batch_offset` Indicates the starting position within the complete dataset from which the API should begin returning objects. Useful for paginating results efficiently. - `batch_size` Specifies the number of objects or items to retrieve in a single request. Helps control response size for better performance. - `edoc_format` Defines the format of the TML content. The exported metadata can be in JSON or YAML format. - `export_dependent` Specifies whether to include dependent metadata objects in the export. Ensures related objects are also retrieved if needed. - `all_orgs_override` Indicates whether the export operation applies across all organizations. Useful for multi-tenant environments where cross-org exports are required.      
   * @param exportMetadataTMLBatchedRequest 
   */
  exportMetadataTMLBatched(exportMetadataTMLBatchedRequest, _options) {
    const result = this.api.exportMetadataTMLBatched(exportMetadataTMLBatchedRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.0.0.cl or later   Fetches the underlying SQL query data for an Answer object.  Requires at least view access to the Answer object.  Upon successful execution, the API returns the SQL queries for the specified object as shown in this example: ``` {    \"metadata_id\":\"8fbe44a8-46ad-4b16-8d39-184b2fada490\",    \"metadata_name\":\"Total sales\",    \"metadata_type\":\"ANSWER\",    \"sql_queries\":[       {          \"metadata_id\":\"8fbe44a8-46ad-4b16-8d39-184b2fada490\",          \"metadata_name\":\"Total sales -test\",          \"sql_query\":\"SELECT \\n  \\\"ta_1\\\".\\\"REGION\\\" \\\"ca_1\\\", \\n  \\\"ta_2\\\".\\\"PRODUCTNAME\\\" \\\"ca_2\\\", \\n  \\\"ta_1\\\".\\\"STORENAME\\\" \\\"ca_3\\\", \\n  CASE\\n    WHEN sum(\\\"ta_3\\\".\\\"SALES\\\") IS NOT NULL THEN sum(\\\"ta_3\\\".\\\"SALES\\\")\\n    ELSE 0\\n  END \\\"ca_4\\\", \\n  CASE\\n    WHEN sum(\\\"ta_3\\\".\\\"QUANTITYPURCHASED\\\") IS NOT NULL THEN sum(\\\"ta_3\\\".\\\"QUANTITYPURCHASED\\\")\\n    ELSE 0\\n  END \\\"ca_5\\\"\\nFROM \\\"RETAILAPPAREL\\\".\\\"PUBLIC\\\".\\\"FACT_RETAPP_SALES\\\" \\\"ta_3\\\"\\n  JOIN \\\"RETAILAPPAREL\\\".\\\"PUBLIC\\\".\\\"DIM_RETAPP_STORES\\\" \\\"ta_1\\\"\\n    ON \\\"ta_3\\\".\\\"STOREID\\\" = \\\"ta_1\\\".\\\"STOREID\\\"\\n  JOIN \\\"RETAILAPPAREL\\\".\\\"PUBLIC\\\".\\\"DIM_RETAPP_PRODUCTS\\\" \\\"ta_2\\\"\\n    ON \\\"ta_3\\\".\\\"PRODUCTID\\\" = \\\"ta_2\\\".\\\"PRODUCTID\\\"\\nGROUP BY \\n  \\\"ca_1\\\", \\n  \\\"ca_2\\\", \\n  \\\"ca_3\\\"\\n\"       }    ] } ```      
   * @param fetchAnswerSqlQueryRequest 
   */
  fetchAnswerSqlQuery(fetchAnswerSqlQueryRequest, _options) {
    const result = this.api.fetchAnswerSqlQuery(fetchAnswerSqlQueryRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 10.4.0.cl or later   Gets information about the status of the TML async import task scheduled using the `/api/rest/2.0/metadata/tml/async/import` API call.  To fetch the task details, specify the ID of the TML async import task.    Requires access to the task ID. The API allows users who initiated the asynchronous TML import via `/api/rest/2.0/metadata/tml/async/import` to view the status of their tasks.  Users with administration privilege can view the status of all import tasks initiated by the users in their Org.  #### Usage guidelines  See [TML API Documentation](https://developers.thoughtspot.com/docs/tml#_fetch_status_of_the_tml_import_task) for usage guidelines.     
   * @param fetchAsyncImportTaskStatusRequest 
   */
  fetchAsyncImportTaskStatus(fetchAsyncImportTaskStatusRequest, _options) {
    const result = this.api.fetchAsyncImportTaskStatus(fetchAsyncImportTaskStatusRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.0.0.cl or later   Fetches the underlying SQL query data for a Liveboard object and its visualizations.  Requires at least view access to the Liveboard object.  To get SQL query data for a Liveboard, specify the GUID of the Liveboard. Optionally, you can add an array of visualization GUIDs to retrieve the SQL query data for visualizations in the Liveboard.  Upon successful execution, the API returns the SQL queries for the specified object as shown in this example: ``` {   \"metadata_id\": \"fa68ae91-7588-4136-bacd-d71fb12dda69\",   \"metadata_name\": \"Total Sales\",   \"metadata_type\": \"LIVEBOARD\",   \"sql_queries\": [     {       \"metadata_id\": \"b3b6d2b9-089a-490c-8e16-b144650b7843\",       \"metadata_name\": \"Total quantity purchased, Total sales by region\",       \"sql_query\": \"SELECT \\n  \\\"ta_1\\\".\\\"REGION\\\" \\\"ca_1\\\", \\n  CASE\\n    WHEN sum(\\\"ta_2\\\".\\\"QUANTITYPURCHASED\\\") IS NOT NULL THEN sum(\\\"ta_2\\\".\\\"QUANTITYPURCHASED\\\")\\n    ELSE 0\\n  END \\\"ca_2\\\", \\n  CASE\\n    WHEN sum(\\\"ta_2\\\".\\\"SALES\\\") IS NOT NULL THEN sum(\\\"ta_2\\\".\\\"SALES\\\")\\n    ELSE 0\\n  END \\\"ca_3\\\"\\nFROM \\\"RETAILAPPAREL\\\".\\\"PUBLIC\\\".\\\"FACT_RETAPP_SALES\\\" \\\"ta_2\\\"\\n  JOIN \\\"RETAILAPPAREL\\\".\\\"PUBLIC\\\".\\\"DIM_RETAPP_STORES\\\" \\\"ta_1\\\"\\n    ON \\\"ta_2\\\".\\\"STOREID\\\" = \\\"ta_1\\\".\\\"STOREID\\\"\\nGROUP BY \\\"ca_1\\\"\"     }   ] } ```      
   * @param fetchLiveboardSqlQueryRequest 
   */
  fetchLiveboardSqlQuery(fetchLiveboardSqlQueryRequest, _options) {
    const result = this.api.fetchLiveboardSqlQuery(fetchLiveboardSqlQueryRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.0.0.cl or later   Imports [TML](https://docs.thoughtspot.com/cloud/latest/tml) files into ThoughtSpot.  Requires `DATAMANAGEMENT` (**Can manage data**) or `ADMINISTRATION` (**Can administer ThoughtsSpot**) privilege.  If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the following Data control privileges may be required: - `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) - `CAN_MANAGE_WORKSHEET_VIEWS_TABLES` (**Can manage data models**)  #### Usage guidelines  *  Import all related objects in a single TML Import API call. For example, Tables that use the same Connection object and Worksheets connected to these Tables. * Include the `fqn` property to distinguish objects that have the same name.   For example, if you have multiple Connections or Worksheets with the same name on ThoughtSpot and the Connection or Worksheet referenced in your TML file does not have a unique name to distinguish, it may result in invalid object references.   Adding `fqn` helps ThoughtSpot differentiate a Table from another with the same name.   We recommend [exporting TML with FQNs](#/http/api-endpoints/metadata/export-metadata-tml) and using these during the import operation. * You can upload multiple TML files at a time.   If you import a Worksheet along with Liveboards, Answers, and other dependent objects in a single API call, the imported objects will be immediately available for use.   When you import only a Worksheet object, it may take some time for the Worksheet to become available in the ThoughtSpot system. Please wait for a few minutes, and then proceed to create an Answer and Liveboard from the newly imported Worksheet.  For more information, see [TML Documentation](https://developers.thoughtspot.com/docs/tml#_import_a_tml).      
   * @param importMetadataTMLRequest 
   */
  importMetadataTML(importMetadataTMLRequest, _options) {
    const result = this.api.importMetadataTML(importMetadataTMLRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 10.4.0.cl or later   Schedules a task to import [TML](https://docs.thoughtspot.com/cloud/latest/tml) files into ThoughtSpot. You can use this API endpoint to process TML objects asynchronously when importing TMLs of large and complex metadata objects into ThoughtSpot. Unlike the synchronous import TML operation, the API processes TML data in the background and returns a task ID, which can be used to check the status of the import task via `/api/rest/2.0/metadata/tml/async/status` API endpoint.  Requires `DATAMANAGEMENT` (**Can manage data**) or `ADMINISTRATION` (**Can administer ThoughtsSpot**) privilege, and edit access to the TML objects.  If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the following Data control privileges may be required: - `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) - `CAN_MANAGE_WORKSHEET_VIEWS_TABLES` (**Can manage data models**)  #### Usage guidelines  See [Async TML API Documentation](https://developers.thoughtspot.com/docs/tml#_import_tml_objects_asynchronously) for usage guidelines.      
   * @param importMetadataTMLAsyncRequest 
   */
  importMetadataTMLAsync(importMetadataTMLAsyncRequest, _options) {
    const result = this.api.importMetadataTMLAsync(importMetadataTMLAsyncRequest, _options);
    return result.toPromise();
  }
  /**
   *  Parameterize fields in metadata objects.   Version: 10.9.0.cl or later   Allows parameterizing fields in metadata objects in ThoughtSpot.  Requires appropriate permissions to modify the metadata object.  The API endpoint allows parameterizing the following types of metadata objects: * Logical Tables * Connections  For a Logical Table the field type must be `ATTRIBUTE` and field name can be one of: * databaseName * schemaName * tableName  For a Connection the field type is always `CONNECTION_PROPERTY`. We use the field_name in this case to specify the exact property of a connection which needs to be parameterized.      
   * @param parameterizeMetadataRequest 
   */
  parameterizeMetadata(parameterizeMetadataRequest, _options) {
    const result = this.api.parameterizeMetadata(parameterizeMetadataRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.0.0.cl or later   Gets a list of metadata objects available on the ThoughtSpot system.  This API endpoint is available to all users who have view access to the object. Users with `ADMINISTRATION` (**Can administer ThoughtSpot**) privileges can view data for all metadata objects, including users and groups.  #### Usage guidelines  - To get all metadata objects, send the API request without any attributes. - To get metadata objects of a specific type, set the `type` attribute. For example, to fetch a Worksheet, set the type as `LOGICAL_TABLE`. - To filter metadata objects within type `LOGICAL_TABLE`, set the `subtypes` attribute. For example, to fetch a Worksheet, set the type as `LOGICAL_TABLE` & subtypes as `[WORKSHEET]`. - To get a specific metadata object, specify the GUID. - To customize your search and filter the API response, you can use several parameters.   You can search for objects created or modified by specific users, by tags applied to the objects, or by using the include parameters like `include_auto_created_objects`, `include_dependent_objects`, `include_headers`, `include_incomplete_objects`, and so on.   You can also define sorting options to sort the data retrieved in the API response. - To get discoverable objects when linientmodel is enabled you can use `include_discoverable_objects` as true else false. Default value is true. - For liveboard metadata type, to get the newer format, set the `liveboard_response_format` as V2. Default value is V1.  **NOTE**: The following parameters support pagination of metadata records:  - `tag_identifiers` - `type` - `subtypes` - `created_by_user_identifiers` - `modified_by_user_identifiers` - `owned_by_user_identifiers` - `exclude_objects` - `include_auto_created_objects` - `favorite_object_options` If you are using other parameters to search metadata, set `record_size` to `-1` and `record_offset` to `0`.      
   * @param searchMetadataRequest 
   */
  searchMetadata(searchMetadataRequest, _options) {
    const result = this.api.searchMetadata(searchMetadataRequest, _options);
    return result.toPromise();
  }
  /**
   *  Remove parameterization from fields in metadata objects.   Version: 10.9.0.cl or later   Allows removing parameterization from fields in metadata objects in ThoughtSpot.  Requires appropriate permissions to modify the metadata object.  The API endpoint allows unparameterizing the following types of metadata objects: * Logical Tables * Connections  For a Logical Table the field type must be `ATTRIBUTE` and field name can be one of: * databaseName * schemaName * tableName  For a Connection the field type is always `CONNECTION_PROPERTY`. We use the field_name in this case to specify the exact property of a connection which needs to be unparameterized.      
   * @param unparameterizeMetadataRequest 
   */
  unparameterizeMetadata(unparameterizeMetadataRequest, _options) {
    const result = this.api.unparameterizeMetadata(unparameterizeMetadataRequest, _options);
    return result.toPromise();
  }
  /**
   *  Update header attributes for a given list of header objects.   Version: 10.6.0.cl or later   ## Prerequisites - **Privileges Required:**   - `DATAMANAGEMENT` (Can manage data) or `ADMINISTRATION` (Can administer ThoughtSpot). - **Additional Privileges (if RBAC is enabled):**   - `ORG_ADMINISTRATION` (Can manage orgs).  ---  ## Usage Guidelines  ### Parameters  1. **headers_update**      - **Description:** List of header objects with their attributes to be updated. Each object contains a list of attributes to be updated in the header.    - **Usage:**       - You must provide either `identifier` or `obj_identifier`, but not both. Both fields cannot be empty.       - When `org_identifier` is set to `-1`, only the `identifier` value is accepted; `obj_identifier` is not allowed.  2. **org_identifier**      - **Description:** GUID (Globally Unique Identifier) or name of the organization.      - **Usage:**      - Leaving this field empty assumes that the changes should be applied to the current organization       - Provide `org_guid` or `org_name` to uniquely identify the organization where changes need to be applied. .      - Provide `-1` if changes have to be applied across all the org.  ---  ## Note Currently, this API is enabled only for updating the `obj_identifier` attribute. Only `text` will be allowed in attribute\'s value.  ## Best Practices  1. **Backup Before Conversion:**      Always export metadata as a backup before initiating the update process  ---  ## Examples  ### Only `identifier` is given  ```json {   \"headers_update\":   [     {       \"identifier\": \"guid_1\",       \"obj_identifier\": \"\",       \"type\": \"LOGICAL_COLUMN\",       \"attributes\":       [         {           \"name\": \"obj_id\",           \"value\": \"custom_object_id\"         }       ]     }   ],   \"org_identifier\": \"orgGuid\" } ```  ### Only `obj_identifier` is given ```json {   \"headers_update\":   [     {       \"obj_identifier\": \"custom_object_id\",       \"type\": \"ANSWER\",       \"attributes\":       [         {           \"name\": \"obj_id\",           \"value\": \"custom_object_id\"         }       ]     }   ],   \"org_identifier\": \"orgName\" } ```  ### Executing update for all org `-1` ```json {   \"headers_update\":   [     {       \"identifier\": \"guid_1\",       \"type\": \"ANSWER\",       \"attributes\":       [         {           \"name\": \"obj_id\",           \"value\": \"custom_object_id\"         }       ]     }   ],   \"org_identifier\": -1 } ```  ### Optional `type` is not provided ```json {   \"headers_update\":   [     {       \"identifier\": \"guid_1\",       \"attributes\":       [         {           \"name\": \"obj_id\",           \"value\": \"custom_object_id\"         }       ]     }   ],   \"org_identifier\": -1 } ```     
   * @param updateMetadataHeaderRequest 
   */
  updateMetadataHeader(updateMetadataHeaderRequest, _options) {
    const result = this.api.updateMetadataHeader(updateMetadataHeaderRequest, _options);
    return result.toPromise();
  }
  /**
   *  Update object IDs for given metadata objects.   Version: 10.8.0.cl or later   ## Prerequisites - **Privileges Required:**   - `DATAMANAGEMENT` (Can manage data) or `ADMINISTRATION` (Can administer ThoughtSpot). - **Additional Privileges (if RBAC is enabled):**   - `ORG_ADMINISTRATION` (Can manage orgs).  ---  ## Usage Guidelines  ### Parameters  1. **metadata**      - **Description:** List of metadata objects to update their object IDs.    - **Usage:**       - Use either `current_obj_id` alone OR use `metadata_identifier` with `type` (when needed).       - When using `metadata_identifier`, the `type` field is required if using a name instead of a GUID.       - The `new_obj_id` field is always required.  ---  ## Note This API is specifically designed for updating object IDs of metadata objects. It internally uses the header update mechanism to perform the changes.  ## Best Practices  1. **Backup Before Update:**      Always export metadata as a backup before initiating the update process.  2. **Validation:**    - When using `current_obj_id`, ensure it matches the existing object ID exactly.    - When using `metadata_identifier` with a name, ensure the `type` is specified correctly.    - Verify that the `new_obj_id` follows your naming conventions and is unique within your system.  ---  ## Examples  ### Using current_obj_id ```json {   \"metadata\": [     {       \"current_obj_id\": \"existing_object_id\",       \"new_obj_id\": \"new_object_id\"     }   ] } ```  ### Using metadata_identifier with GUID ```json {   \"metadata\": [     {       \"metadata_identifier\": \"01234567-89ab-cdef-0123-456789abcdef\",       \"new_obj_id\": \"new_object_id\"     }   ] } ```  ### Using metadata_identifier with name and type ```json {   \"metadata\": [     {       \"metadata_identifier\": \"My Answer\",       \"type\": \"ANSWER\",       \"new_obj_id\": \"new_object_id\"     }   ] } ```  ### Multiple objects update ```json {   \"metadata\": [     {       \"current_obj_id\": \"existing_object_id_1\",       \"new_obj_id\": \"new_object_id_1\"     },     {       \"metadata_identifier\": \"My Worksheet\",       \"type\": \"LOGICAL_TABLE\",       \"new_obj_id\": \"new_object_id_2\"     }   ] } ```      
   * @param updateMetadataObjIdRequest 
   */
  updateMetadataObjId(updateMetadataObjIdRequest, _options) {
    const result = this.api.updateMetadataObjId(updateMetadataObjIdRequest, _options);
    return result.toPromise();
  }
};
var PromiseOrgsApi = class {
  constructor(configuration, requestFactory, responseProcessor) {
    this.api = new ObservableOrgsApi(configuration, requestFactory, responseProcessor);
  }
  /**
   *   Version: 9.0.0.cl or later   Creates an Org object.  To use this API, the [Orgs](https://docs.thoughtspot.com/cloud/latest/orgs-overview) feature must be enabled in your cluster.  Requires cluster administration (**Can administer Org**) privileges. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `ORG_ADMINISTRATION` (**Can manage Orgs**) privilege is required.      
   * @param createOrgRequest 
   */
  createOrg(createOrgRequest, _options) {
    const result = this.api.createOrg(createOrgRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.0.0.cl or later   Deletes an Org object from the ThoughtSpot system.  Requires cluster administration (**Can administer Org**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `ORG_ADMINISTRATION` (**Can manage Orgs**) privilege is required.  When you delete an Org, all its users and objects created in that Org context are removed. However, if the users in the deleted Org also exists in other Orgs, they are removed only from the deleted Org.      
   * @param orgIdentifier ID or name of the Org
   */
  deleteOrg(orgIdentifier, _options) {
    const result = this.api.deleteOrg(orgIdentifier, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.0.0.cl or later   Gets a list of Orgs configured on the ThoughtSpot system. To get details of a specific Org, specify the Org ID or name. You can also pass parameters such as status, visibility, and user identifiers to get a specific list of Orgs.  Requires cluster administration (**Can administer Org**) privileges. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `ORG_ADMINISTRATION` (**Can manage Orgs**) privilege is required.      
   * @param searchOrgsRequest 
   */
  searchOrgs(searchOrgsRequest, _options) {
    const result = this.api.searchOrgs(searchOrgsRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.0.0.cl or later   Updates an Org object. You can modify Org properties such as name, description, and user associations.  Requires cluster administration (**Can administer Org**) privileges. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `ORG_ADMINISTRATION` (**Can manage Orgs**) privilege is required.      
   * @param orgIdentifier ID or name of the Org
   * @param updateOrgRequest 
   */
  updateOrg(orgIdentifier, updateOrgRequest, _options) {
    const result = this.api.updateOrg(orgIdentifier, updateOrgRequest, _options);
    return result.toPromise();
  }
};
var PromiseReportsApi = class {
  constructor(configuration, requestFactory, responseProcessor) {
    this.api = new ObservableReportsApi(configuration, requestFactory, responseProcessor);
  }
  /**
   *   Version: 9.0.0.cl or later   Exports an Answer in the given file format. You can download the Answer data as a PDF, PNG, CSV, or XLSX file.  Requires at least view access to the Answer.  #### Usage guidelines  In the request body, the GUID or name of the Answer and set `file_format`. The default file format is CSV.  **NOTE**: * The downloadable file returned in API response file is extensionless. Please rename the downloaded file by typing in the relevant extension. * HTML rendering is not supported for PDF exports of Answers with tables.  Optionally, you can define [runtime overrides](https://developers.thoughtspot.com/docs/fetch-data-and-report-apis#_runtime_overrides) to apply to the Answer data.  The `record_size` attribute determines the number of records to retrieve in an API call. For more information about pagination, record size, and maximum row limit, see [Pagination and record size settings](https://developers.thoughtspot.com/docs/fetch-data-and-report-apis#_pagination_settings_for_data_and_report_api).       
   * @param exportAnswerReportRequest 
   */
  exportAnswerReport(exportAnswerReportRequest, _options) {
    const result = this.api.exportAnswerReport(exportAnswerReportRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.0.0.cl or later   Exports a Liveboard and its visualizations in PDF or PNG file format.  Requires at least view access to the Liveboard.  #### Usage guidelines  In the request body, specify the GUID or name of the Liveboard. To generate a Liveboard report with specific visualizations, add GUIDs or names of the visualizations.  The default `file_format` is PDF. For PDF downloads, you can specify additional parameters to customize the page orientation and include or exclude the cover page, logo, footer text, and page numbers. Similar customization options are also available for PNG output.  **NOTE**: The downloadable file returned in API response file is extensionless. Please rename the downloaded file by typing in the relevant extension.  Optionally, you can define [runtime overrides](https://developers.thoughtspot.com/docs/fetch-data-and-report-apis#_runtime_overrides) to apply to the Answer data.  To include unsaved changes in the report, pass the `transient_pinboard_content` script generated from the `getExportRequestForCurrentPinboard` method in the Visual Embed SDK. Upon successful execution, the API returns the report with unsaved changes, including ad hoc changes to visualizations. For more information, see [Liveboard Report API](https://developers.thoughtspot.com/docs/fetch-data-and-report-apis#_liveboard_report_api).       
   * @param exportLiveboardReportRequest 
   */
  exportLiveboardReport(exportLiveboardReportRequest, _options) {
    const result = this.api.exportLiveboardReport(exportLiveboardReportRequest, _options);
    return result.toPromise();
  }
};
var PromiseRolesApi = class {
  constructor(configuration, requestFactory, responseProcessor) {
    this.api = new ObservableRolesApi(configuration, requestFactory, responseProcessor);
  }
  /**
   *   Version: 9.5.0.cl or later   Creates a Role object in ThoughtSpot.  Available only if [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance. To create a Role, the `ROLE_ADMINISTRATION` (**Can manage roles**) privilege is required.      
   * @param createRoleRequest 
   */
  createRole(createRoleRequest, _options) {
    const result = this.api.createRole(createRoleRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.5.0.cl or later   Deletes a Role object from the ThoughtSpot system.  Available only if [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance. To delete a Role, the `ROLE_ADMINISTRATION` (**Can manage roles**) privilege is required.      
   * @param roleIdentifier Unique ID or name of the Role. ReadOnly roles cannot be deleted.
   */
  deleteRole(roleIdentifier, _options) {
    const result = this.api.deleteRole(roleIdentifier, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.5.0.cl or later   Gets a list of Role objects from the ThoughtSpot system.  Available if [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance. To search for Roles, the `ROLE_ADMINISTRATION` (**Can manage roles**) privilege is required.  To get details of a specific Role object, specify the GUID or name. You can also filter the API response based on user group and Org identifiers, privileges assigned to the Role, and deprecation status.      
   * @param searchRolesRequest 
   */
  searchRoles(searchRolesRequest, _options) {
    const result = this.api.searchRoles(searchRolesRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.5.0.cl or later   Updates the properties of a Role object.  Available only if [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance. To update a Role, the `ROLE_ADMINISTRATION` (**Can manage roles**) privilege is required.      
   * @param roleIdentifier Unique ID or name of the Role.
   * @param updateRoleRequest 
   */
  updateRole(roleIdentifier, updateRoleRequest, _options) {
    const result = this.api.updateRole(roleIdentifier, updateRoleRequest, _options);
    return result.toPromise();
  }
};
var PromiseSchedulesApi = class {
  constructor(configuration, requestFactory, responseProcessor) {
    this.api = new ObservableSchedulesApi(configuration, requestFactory, responseProcessor);
  }
  /**
   *  Create schedule.    Version: 9.4.0.cl or later   Creates a Liveboard schedule job.  Requires at least edit access to Liveboards. To create a schedule on behalf of another user, you need  `ADMINISTRATION` (**Can administer Org**) or `JOBSCHEDULING` (**Can schedule for others**) privilege and edit access to the Liveboard. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `JOBSCHEDULING` (**Can schedule for others**) privilege is required.  #### Usage guidelines  * The description text is mandatory.  The description text appears as **Description: <your content>** in the Liveboard schedule email notifications. * For Liveboards with both charts and tables, schedule creation is only supported in PDF and XLS formats. Schedules created in CSV formats for such Liveboards will fail to run. If `PDF` is set as the `file_format`, enable `pdf_options` to get the correct attachment. Not doing so may cause the attachment to be rendered empty. * To include only specific visualizations, specify the visualization GUIDs in the `visualization_identifiers` array. * You can schedule a Liveboard job to run periodically by setting frequency parameters. You can set the schedule to run daily, weekly, monthly or every n minutes or hours. The scheduled job can also be configured to run at a specific time of the day or on specific days of the week or month. Please ensure that when setting the schedule frequency for _minute of the object_, only values that are multiples of 5 are included. * If the `frequency` parameters are defined, you can set the time zone to a value that matches your server\'s time zone. For example, `US/Central`, `Etc/UTC`, `CET`. The default time zone is `America/Los_Angeles`.  For more information about Liveboard jobs, see [ThoughtSpot Product Documentation](https://docs.thoughtspot.com/cloud/latest/liveboard-schedule).     
   * @param createScheduleRequest 
   */
  createSchedule(createScheduleRequest, _options) {
    const result = this.api.createSchedule(createScheduleRequest, _options);
    return result.toPromise();
  }
  /**
   *  Deletes a scheduled job.    Version: 9.4.0.cl or later   Deletes a scheduled Liveboard job.  Requires at least edit access to Liveboard or `ADMINISTRATION` (**Can administer Org**) privilege.    If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `JOBSCHEDULING` (**Can schedule for others**) privilege is required.      
   * @param scheduleIdentifier Unique ID or name of the scheduled job.
   */
  deleteSchedule(scheduleIdentifier, _options) {
    const result = this.api.deleteSchedule(scheduleIdentifier, _options);
    return result.toPromise();
  }
  /**
   *  Search Schedules    Version: 9.4.0.cl or later   Gets a list of scheduled jobs configured for a Liveboard.  To get details of a specific scheduled job, specify the name or GUID of the scheduled job.  Requires at least view access to Liveboards.  **NOTE**: When filtering schedules by parameters other than `metadata`, set `record_size` to `-1` and `record_offset` to `0` for accurate results.      
   * @param searchSchedulesRequest 
   */
  searchSchedules(searchSchedulesRequest, _options) {
    const result = this.api.searchSchedules(searchSchedulesRequest, _options);
    return result.toPromise();
  }
  /**
   *  Update schedule.    Version: 9.4.0.cl or later   Updates a scheduled Liveboard job.  Requires at least edit access to Liveboards. To update a schedule on behalf of another user, you need `ADMINISTRATION` (**Can administer Org**) or `JOBSCHEDULING` (**Can schedule for others**) privilege and edit access to the Liveboard. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `JOBSCHEDULING` (**Can schedule for others**) privilege is required.  The API endpoint allows you to pause a scheduled job, change the status of a paused job. You can also edit the recipients list, frequency of the job, format of the file to send to the recipients in email notifications, PDF options, and time zone setting.      
   * @param scheduleIdentifier Unique ID or name of the schedule.
   * @param updateScheduleRequest 
   */
  updateSchedule(scheduleIdentifier, updateScheduleRequest, _options) {
    const result = this.api.updateSchedule(scheduleIdentifier, updateScheduleRequest, _options);
    return result.toPromise();
  }
};
var PromiseSecurityApi = class {
  constructor(configuration, requestFactory, responseProcessor) {
    this.api = new ObservableSecurityApi(configuration, requestFactory, responseProcessor);
  }
  /**
   *   Version: 9.0.0.cl or later   Transfers the ownership of one or several objects from one user to another.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `USER_ADMINISTRATION` (**Can manage users**) privilege and edit access to the objects are required.      
   * @param assignChangeAuthorRequest 
   */
  assignChangeAuthor(assignChangeAuthorRequest, _options) {
    const result = this.api.assignChangeAuthor(assignChangeAuthorRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.0.0.cl or later   Fetches object permission details for a given principal object such as a user and group.  Requires view access to the metadata object.   #### Usage guidelines  * To get a list of all metadata objects that a user or group can access, specify the `type` and GUID or name of the principal. * To get permission details for a specific object, add the `type` and GUID or name of the metadata object to your API request.  Upon successful execution, the API returns a list of metadata objects and permission details for each object.        
   * @param fetchPermissionsOfPrincipalsRequest 
   */
  fetchPermissionsOfPrincipals(fetchPermissionsOfPrincipalsRequest, _options) {
    const result = this.api.fetchPermissionsOfPrincipals(fetchPermissionsOfPrincipalsRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.0.0.cl or later   Fetches permission details for a given metadata object.  Requires view access to the metadata object.  #### Usage guidelines  * To fetch a list of users and groups for a metadata object, specify `type` and GUID or name of the metadata object. * To get permission details for a specific user or group, add `type` and GUID or name of the principal object to your API request.  Upon successful execution, the API returns permission details and principal information for the object specified in the API request.      
   * @param fetchPermissionsOnMetadataRequest 
   */
  fetchPermissionsOnMetadata(fetchPermissionsOnMetadataRequest, _options) {
    const result = this.api.fetchPermissionsOnMetadata(fetchPermissionsOnMetadataRequest, _options);
    return result.toPromise();
  }
  /**
   *  Version: 10.9.0.cl or later   Allows publishing metadata objects across organizations in ThoughtSpot.  Requires ADMINISTRATION role and TENANT scope.  The API endpoint allows publishing the following types of metadata objects: * Liveboards * Answers * Logical Tables  This API will essentially share the objects along with it\'s dependencies to the org admins of the orgs to which it is being published.      
   * @param publishMetadataRequest 
   */
  publishMetadata(publishMetadataRequest, _options) {
    const result = this.api.publishMetadata(publishMetadataRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.0.0.cl or later   Allows sharing one or several metadata objects with users and groups in ThoughtSpot.  Requires edit access to the metadata object.  The API endpoint allows sharing only the following types of metadata objects: * Liveboards * Visualizations * Answers * Worksheets * Views * Connections  You can provide `READ_ONLY` or `MODIFY` access when sharing an object with another user or group. With `READ_ONLY` access grants view access to the shared object, whereas `MODIFY` provides edit access.  To prevent a user or group from accessing the shared object, specify the GUID or name of the principal and set `shareMode` to `NO_ACCESS`.      
   * @param shareMetadataRequest 
   */
  shareMetadata(shareMetadataRequest, _options) {
    const result = this.api.shareMetadata(shareMetadataRequest, _options);
    return result.toPromise();
  }
  /**
   *  Version: 10.9.0.cl or later   Allows unpublishing metadata objects from organizations in ThoughtSpot.  Requires ADMINISTRATION role and TENANT scope.  The API endpoint allows unpublishing the following types of metadata objects: * Liveboards * Answers * Logical Tables  When unpublishing objects, you can: * Include dependencies by setting `include_dependencies` to true - this will unpublish all dependent objects if no other published object is using them * Force unpublish by setting `force` to true - this will break all dependent objects in the unpublished organizations      
   * @param unpublishMetadataRequest 
   */
  unpublishMetadata(unpublishMetadataRequest, _options) {
    const result = this.api.unpublishMetadata(unpublishMetadataRequest, _options);
    return result.toPromise();
  }
};
var PromiseSystemApi = class {
  constructor(configuration, requestFactory, responseProcessor) {
    this.api = new ObservableSystemApi(configuration, requestFactory, responseProcessor);
  }
  /**
   *   Version: 9.0.0.cl or later   Retrieves the current configuration details of the cluster. If the request is successful, the API returns a list configuration settings applied on the cluster.  Requires `ADMINISTRATION`(**Can administer ThoughtSpot**) privilege to view these complete configuration settings of the cluster. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `SYSTEM_INFO_ADMINISTRATION` (**Can view system activities**) privilege is required.  This API does not require any parameters to be passed in the request.      
   */
  getSystemConfig(_options) {
    const result = this.api.getSystemConfig(_options);
    return result.toPromise();
  }
  /**
   *   Version: 9.0.0.cl or later   Gets system information such as the release version, locale, time zone, deployment environment, date format, and date time format of the cluster.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privileges. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `SYSTEM_INFO_ADMINISTRATION` (**Can view system activities**) privilege is required.  This API does not require any parameters to be passed in the request.        
   */
  getSystemInformation(_options) {
    const result = this.api.getSystemInformation(_options);
    return result.toPromise();
  }
  /**
   *   Version: 9.2.0.cl or later   Gets a list of configuration overrides applied on the cluster.    Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `APPLICATION_ADMINISTRATION` (**Can manage application settings**) privilege is required.  This API does not require any parameters to be passed in the request.        
   */
  getSystemOverrideInfo(_options) {
    const result = this.api.getSystemOverrideInfo(_options);
    return result.toPromise();
  }
  /**
   *   Version: 9.2.0.cl or later   Updates the current configuration of the cluster. You must send the configuration data in JSON format.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privileges. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `APPLICATION_ADMINISTRATION` (**Can manage application settings**) privilege is required.      
   * @param updateSystemConfigRequest 
   */
  updateSystemConfig(updateSystemConfigRequest, _options) {
    const result = this.api.updateSystemConfig(updateSystemConfigRequest, _options);
    return result.toPromise();
  }
};
var PromiseTagsApi = class {
  constructor(configuration, requestFactory, responseProcessor) {
    this.api = new ObservableTagsApi(configuration, requestFactory, responseProcessor);
  }
  /**
   *   Version: 9.0.0.cl or later   Assigns tags to Liveboards, Answers, Tables, and Worksheets.  Requires edit access to the metadata object.      
   * @param assignTagRequest 
   */
  assignTag(assignTagRequest, _options) {
    const result = this.api.assignTag(assignTagRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.0.0.cl or later   Creates a tag object.  Tags are labels that identify a metadata object. For example, you can create a tag to designate subject areas, such as sales, HR, marketing, and finance.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `TAGMANAGEMENT` (**Can manage tags**) privilege is required to create, edit, and delete tags.      
   * @param createTagRequest 
   */
  createTag(createTagRequest, _options) {
    const result = this.api.createTag(createTagRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.0.0.cl or later   Deletes a tag object from the ThoughtSpot system  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `TAGMANAGEMENT` (**Can manage tags**) privilege is required to create, edit, and delete tags.      
   * @param tagIdentifier Tag identifier Tag name or Tag id.
   */
  deleteTag(tagIdentifier, _options) {
    const result = this.api.deleteTag(tagIdentifier, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.0.0.cl or later   Gets a list of tag objects available on the ThoughtSpot system. To get details of a specific tag object, specify the GUID or name.  Any authenticated user can search for tag objects.      
   * @param searchTagsRequest 
   */
  searchTags(searchTagsRequest, _options) {
    const result = this.api.searchTags(searchTagsRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.0.0.cl or later   Removes the tags applied to a Liveboard, Answer, Table, or Worksheet.  Requires edit access to the metadata object.      
   * @param assignTagRequest 
   */
  unassignTag(assignTagRequest, _options) {
    const result = this.api.unassignTag(assignTagRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.0.0.cl or later   Updates a tag object.  You can modify the `name` and `color` properties of a tag object.    Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `TAGMANAGEMENT` (**Can manage tags**) privilege is required to create, edit, and delete tags.      
   * @param tagIdentifier Name or Id of the tag.
   * @param updateTagRequest 
   */
  updateTag(tagIdentifier, updateTagRequest, _options) {
    const result = this.api.updateTag(tagIdentifier, updateTagRequest, _options);
    return result.toPromise();
  }
};
var PromiseThoughtSpotRestApi = class {
  constructor(configuration, requestFactory, responseProcessor) {
    this.api = new ObservableThoughtSpotRestApi(configuration, requestFactory, responseProcessor);
  }
  /**
   *   Version: 9.7.0.cl or later   Activates a deactivated user account.  Requires `ADMINISTRATION` (**Can administer Thoughtspot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `USER_ADMINISTRATION` (**Can manage users**) privilege is required.  To activate an inactive user account, the API request body must include the following information:  - Username or the GUID of the user account. - Auth token generated for the deactivated user. The auth token is sent in the API response when a user is deactivated. - Password for the user account.      
   * @param activateUserRequest 
   */
  activateUser(activateUserRequest, _options) {
    const result = this.api.activateUser(activateUserRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.0.0.cl or later   Transfers the ownership of one or several objects from one user to another.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `USER_ADMINISTRATION` (**Can manage users**) privilege and edit access to the objects are required.      
   * @param assignChangeAuthorRequest 
   */
  assignChangeAuthor(assignChangeAuthorRequest, _options) {
    const result = this.api.assignChangeAuthor(assignChangeAuthorRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.0.0.cl or later   Assigns tags to Liveboards, Answers, Tables, and Worksheets.  Requires edit access to the metadata object.      
   * @param assignTagRequest 
   */
  assignTag(assignTagRequest, _options) {
    const result = this.api.assignTag(assignTagRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.0.0.cl or later   Updates the current password of the user.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `USER_ADMINISTRATION` (**Can manage users**) privilege is required.      
   * @param changeUserPasswordRequest 
   */
  changeUserPassword(changeUserPasswordRequest, _options) {
    const result = this.api.changeUserPassword(changeUserPasswordRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.2.0.cl or later   Commits TML files of metadata objects to the Git branch configured on your instance.  Requires at least edit access to objects used in the commit operation.  Before using this endpoint to push your commits:  * Enable Git integration on your instance. * Make sure the Git repository and branch details are configured on your instance.  For more information, see [Git integration documentation](https://developers.thoughtspot.com/docs/git-integration).      
   * @param commitBranchRequest 
   */
  commitBranch(commitBranchRequest, _options) {
    const result = this.api.commitBranch(commitBranchRequest, _options);
    return result.toPromise();
  }
  /**
   *  Convert worksheets to models    Version: 10.6.0.cl or later   ## Prerequisites - **Privileges Required:**   - `DATAMANAGEMENT` (Can manage data) or `ADMINISTRATION` (Can administer ThoughtSpot). - **Additional Privileges (if RBAC is enabled):**   - `CAN_MANAGE_WORKSHEET_VIEWS_TABLES` (Can manage data models).  ---  ## Usage Guidelines  ### Parameters  1. **worksheet_ids**      - **Description:** A comma-separated list of GUIDs (Globally Unique Identifiers) specifying the Worksheets to be converted.      - **Usage:**        - Used only when `convert_all` is set to `false`.        - Leave empty or omit when `convert_all` is set to `true`.  2. **exclude_worksheet_ids**      - **Description:** A comma-separated list of GUIDs specifying Worksheets to be excluded from conversion.      - **Usage:**        - Useful when `convert_all` is set to `true` and specific Worksheets should not be converted.  3. **convert_all**      - **Description:** Sets the scope of conversion.    - **Options:**        - `true`: Converts all Worksheets in the system, except those specified in `exclude_worksheet_ids`.        - `false`: Converts only the Worksheets listed in `worksheet_ids`.  4. **apply_changes**      - **Description:** Specifies whether to apply changes directly to ThoughtSpot or to generate a preview before applying any changes.Used for validation of conversion.    - **Options:**        - `true`: Applies conversion changes directly to ThoughtSpot.      - `false`: Generates only a preview of the changes and does not apply any changes to ThoughtSpot  ---  ## Best Practices  1. **Backup Before Conversion:**      Always export metadata as a backup before initiating the conversion process  2. **Partial Conversion for Testing:**      Test the conversion process by setting `convert_all` to `false` and specifying a small number of `worksheet_ids`.  3. **Verify Dependencies:**      Check for dependent objects, such as Tables and Connections, to avoid invalid references.  4. **Review Changes:**      Use `apply_changes: false` to preview the impact of the conversion before applying changes.  ---  ## Examples  ### Convert Specific Worksheets ```json {   \"worksheet_ids\": [\"guid1\", \"guid2\", \"guid3\"],   \"exclude_worksheet_ids\": [],   \"convert_all\": false,   \"apply_changes\": true } ```  ### Convert All Accessible Worksheets ```json {   \"worksheet_ids\": [],   \"exclude_worksheet_ids\": [],   \"convert_all\": true,   \"apply_changes\": true } ```  ### Exclude Specific Worksheets While Converting All Accessible Worksheets ```json {   \"worksheet_ids\": [],   \"exclude_worksheet_ids\": [\"abc\"],   \"convert_all\": true,   \"apply_changes\": true } ```     
   * @param convertWorksheetToModelRequest 
   */
  convertWorksheetToModel(convertWorksheetToModelRequest, _options) {
    const result = this.api.convertWorksheetToModel(convertWorksheetToModelRequest, _options);
    return result.toPromise();
  }
  /**
   *  Makes a copy of an Answer or Liveboard saved in Atlas    Version: 10.3.0.cl or later   Creates a copy of a metadata object.  Requires at least view access to the metadata object being copied.  Upon successful execution, the API creates a copy of the metadata object specified in the API request and returns the ID of the new object.      
   * @param copyObjectRequest 
   */
  copyObject(copyObjectRequest, _options) {
    const result = this.api.copyObject(copyObjectRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.2.0.cl or later   Allows you to connect a ThoughtSpot instance to a Git repository.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance on your instance, the `CAN_MANAGE_VERSION_CONTROL` (**Can toggle version control for objects**) privilege.  You can use this API endpoint to connect your ThoughtSpot development and production environments to the development and production branches of a Git repository.  Before using this endpoint to connect your ThoughtSpot instance to a Git repository, check the following prerequisites:  * You have a Git repository. If you are using GitHub, make sure you have a valid account and an access token to connect ThoughtSpot to GitHub. For information about generating a token, see [GitHub Documentation](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens).  * Your access token has `repo` scope that grants full access to public and private repositories. * Your Git repository has a branch that can be configured as a default branch in ThoughtSpot.  For more information, see [Git integration documentation](https://developers.thoughtspot.com/docs/?pageid=git-integration).  **Note**: ThoughtSpot supports only GitHub / GitHub Enterprise for CI/CD.      
   * @param createConfigRequest 
   */
  createConfig(createConfigRequest, _options) {
    const result = this.api.createConfig(createConfigRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.2.0.cl or later   Creates a connection to a data warehouse for live query services.    Requires `DATAMANAGEMENT` (**Can manage data**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) privilege is required.  #### Create a connection without tables  To create a connection without tables:  1. Pass these parameters in your API request.  * Name of the connection.  * Type of the data warehouse to connect to.  * A JSON map of configuration attributes in `data_warehouse_config`. The following example shows the configuration attributes for a SnowFlake connection:   ```   {      \"configuration\":{         \"accountName\":\"thoughtspot_partner\",         \"user\":\"tsadmin\",         \"password\":\"TestConn123\",         \"role\":\"sysadmin\",         \"warehouse\":\"MEDIUM_WH\"      },      \"externalDatabases\":[       ]   }   ``` 2. Set `validate` to `false`.  #### Create a connection with tables  To create a connection with tables:  1. Pass these parameters in your API request.  * Name of the connection.  * Type of the data warehouse to connect to.  * A JSON map of configuration attributes, database details, and table properties in `data_warehouse_config` as shown in the following example:   ```   {      \"configuration\":{         \"accountName\":\"thoughtspot_partner\",         \"user\":\"tsadmin\",         \"password\":\"TestConn123\",         \"role\":\"sysadmin\",         \"warehouse\":\"MEDIUM_WH\"      },      \"externalDatabases\":[         {            \"name\":\"AllDatatypes\",            \"isAutoCreated\":false,            \"schemas\":[               {                  \"name\":\"alldatatypes\",                  \"tables\":[                     {                        \"name\":\"allDatatypes\",                        \"type\":\"TABLE\",                        \"description\":\"\",                        \"selected\":true,                        \"linked\":true,                        \"columns\":[                           {                              \"name\":\"CNUMBER\",                              \"type\":\"INT64\",                              \"canImport\":true,                              \"selected\":true,                              \"isLinkedActive\":true,                              \"isImported\":false,                              \"tableName\":\"allDatatypes\",                              \"schemaName\":\"alldatatypes\",                              \"dbName\":\"AllDatatypes\"                           },                           {                              \"name\":\"CDECIMAL\",                              \"type\":\"INT64\",                              \"canImport\":true,                              \"selected\":true,                              \"isLinkedActive\":true,                              \"isImported\":false,                              \"tableName\":\"allDatatypes\",                              \"schemaName\":\"alldatatypes\",                              \"dbName\":\"AllDatatypes\"                           }                        ]                     }                  ]               }            ]         }      ]   }   ``` 2. Set `validate` to `true`.      
   * @param createConnectionRequest 
   */
  createConnection(createConnectionRequest, _options) {
    const result = this.api.createConnection(createConnectionRequest, _options);
    return result.toPromise();
  }
  /**
   *  Version: 10.4.0.cl or later   Creates a Conversation object to start an AI-driven conversation based on a specific data model.  Requires at least view access to the metadata object specified in the request.  #### Usage guidelines  This API requires the `metadata_identifier` parameter to define the context for the conversation.  You can also specify the tokens to initiate the conversation as shown in this example:  `\"tokens\": \"[tea],[sales],[type]\"`  If the API request is successful, ThoughtSpot returns the ID of the conversation.  > ###### Note: > * This endpoint is currently in Beta. Breaking changes may be introduced before the endpoint is made Generally Available. > * This endpoint requires Spotter - please contact ThoughtSpot support to enable Spotter on your cluster.      
   * @param createConversationRequest 
   */
  createConversation(createConversationRequest, _options) {
    const result = this.api.createConversation(createConversationRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.6.0.cl or later   Creates a custom action that appears as a menu action on a saved Answer or Liveboard visualization.  Requires `DEVELOPER` (**Has Developer privilege**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `DEVELOPER` (**Has developer privilege**) privilege is required.  #### Usage Guidelines  The API lets you create the following types of custom actions:  * URL-based action        Allows pushing data to an external URL. * Callback action           Triggers a callback to the host application and initiates a response payload on an embedded ThoughtSpot instance.  By default, custom actions are visible to only administrator or developer users. To make a custom action available to other users, and specify the groups in `group_identifiers`.  By default, the custom action is set as a _global_ action on all visualizations and saved Answers. To assign a custom action to specific Liveboard visualization, saved Answer, or Worksheet, set `visibility` to `false` in `default_action_config` property and specify the GUID or name of the object in `associate_metadata`.  For more information, see [Custom actions](https://developers.thoughtspot.com/docs/custom-action-intro).      
   * @param createCustomActionRequest 
   */
  createCustomAction(createCustomActionRequest, _options) {
    const result = this.api.createCustomAction(createCustomActionRequest, _options);
    return result.toPromise();
  }
  /**
   *  Version: 10.10.0.cl or later   Creates a custom configuration for the email customisation  #### Pre-requisites  Requires `DEVELOPER` (**has developer privilege**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `_Has developer privilege` privilege is required. Coms should be enabled on the cluster.  #### Usage guidelines  To create a custom confuguration:  1. Pass these parameters in your API request.  - A JSON map of configuration attributes `template_properties`. The following example shows the configuration attribures for a csutom configuration:  ``` {     {     \"logoUrl\": \"<logo_url>\",     \"homeUrl\": \"<home_url>\",     \"productName\": \"<Company Name in the Mail>\",     \"footerAddress\": \"<address to be visible in the footer>\",     \"ctaButtonBgColor\": \"#444DEA\",     \"ctaTextFontColor\": \"#FFFFFF\",     \"primaryBgColor\": \"#D3DEF0\",     \"hideMobileAppNudge\": <true/false>,     \"hideTsVocabularyDefinitions\": <true/false>e,     \"hideProductName\": <true/false>,     \"hideFooterPhone\": <true/false>,     \"hideFooterAddress\": <true/false>,     \"hidePrivacyPolicy\": <true/false>,     \"hideManageNotification\": <true/false>,     \"fontfamily\": \"<to maintain a single font in the entire email>\"   } } ```      
   * @param createEmailCustomisationRequest 
   */
  createEmailCustomisation(createEmailCustomisationRequest, _options) {
    const result = this.api.createEmailCustomisation(createEmailCustomisationRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.0.0.cl or later   Creates an Org object.  To use this API, the [Orgs](https://docs.thoughtspot.com/cloud/latest/orgs-overview) feature must be enabled in your cluster.  Requires cluster administration (**Can administer Org**) privileges. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `ORG_ADMINISTRATION` (**Can manage Orgs**) privilege is required.      
   * @param createOrgRequest 
   */
  createOrg(createOrgRequest, _options) {
    const result = this.api.createOrg(createOrgRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.5.0.cl or later   Creates a Role object in ThoughtSpot.  Available only if [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance. To create a Role, the `ROLE_ADMINISTRATION` (**Can manage roles**) privilege is required.      
   * @param createRoleRequest 
   */
  createRole(createRoleRequest, _options) {
    const result = this.api.createRole(createRoleRequest, _options);
    return result.toPromise();
  }
  /**
   *  Create schedule.    Version: 9.4.0.cl or later   Creates a Liveboard schedule job.  Requires at least edit access to Liveboards. To create a schedule on behalf of another user, you need  `ADMINISTRATION` (**Can administer Org**) or `JOBSCHEDULING` (**Can schedule for others**) privilege and edit access to the Liveboard. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `JOBSCHEDULING` (**Can schedule for others**) privilege is required.  #### Usage guidelines  * The description text is mandatory.  The description text appears as **Description: <your content>** in the Liveboard schedule email notifications. * For Liveboards with both charts and tables, schedule creation is only supported in PDF and XLS formats. Schedules created in CSV formats for such Liveboards will fail to run. If `PDF` is set as the `file_format`, enable `pdf_options` to get the correct attachment. Not doing so may cause the attachment to be rendered empty. * To include only specific visualizations, specify the visualization GUIDs in the `visualization_identifiers` array. * You can schedule a Liveboard job to run periodically by setting frequency parameters. You can set the schedule to run daily, weekly, monthly or every n minutes or hours. The scheduled job can also be configured to run at a specific time of the day or on specific days of the week or month. Please ensure that when setting the schedule frequency for _minute of the object_, only values that are multiples of 5 are included. * If the `frequency` parameters are defined, you can set the time zone to a value that matches your server\'s time zone. For example, `US/Central`, `Etc/UTC`, `CET`. The default time zone is `America/Los_Angeles`.  For more information about Liveboard jobs, see [ThoughtSpot Product Documentation](https://docs.thoughtspot.com/cloud/latest/liveboard-schedule).     
   * @param createScheduleRequest 
   */
  createSchedule(createScheduleRequest, _options) {
    const result = this.api.createSchedule(createScheduleRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.0.0.cl or later   Creates a tag object.  Tags are labels that identify a metadata object. For example, you can create a tag to designate subject areas, such as sales, HR, marketing, and finance.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `TAGMANAGEMENT` (**Can manage tags**) privilege is required to create, edit, and delete tags.      
   * @param createTagRequest 
   */
  createTag(createTagRequest, _options) {
    const result = this.api.createTag(createTagRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.0.0.cl or later   Creates a user in ThoughtSpot.  The API endpoint allows you to configure several user properties such as email address, account status, share notification preferences, and sharing visibility. You can provision the user to [groups](https://docs.thoughtspot.com/cloud/latest/groups-privileges) and [Orgs](https://docs.thoughtspot.com/cloud/latest/orgs-overview). You can also add Liveboard, Answer, and Worksheet objects to the user’s favorites list, assign a default Liveboard for the user, and set user preferences.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `USER_ADMINISTRATION` (**Can manage users**) privilege is required.      
   * @param createUserRequest 
   */
  createUser(createUserRequest, _options) {
    const result = this.api.createUser(createUserRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.0.0.cl or later   Creates a group object in ThoughtSpot.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `GROUP_ADMINISTRATION` (**Can manage groups**) privilege is required.  #### About groups Groups in ThoughtSpot are used by the administrators to define privileges and organize users based on their roles and access requirements. To know more about groups and privileges, see [ThoughtSpot Product Documentation](https://docs.thoughtspot.com/cloud/latest/groups-privileges).  #### Supported operations  The API endpoint lets you perform the following operations:  * Assign privileges * Add users * Define sharing visibility * Add sub-groups * Assign a default Liveboard      
   * @param createUserGroupRequest 
   */
  createUserGroup(createUserGroupRequest, _options) {
    const result = this.api.createUserGroup(createUserGroupRequest, _options);
    return result.toPromise();
  }
  /**
   *  Create a variable which can be used for parameterizing metadata objects   Version: 10.9.0.cl or later   Allows creating a variable which can be used for parameterizing metadata objects in ThoughtSpot.  Requires ADMINISTRATION role and TENANT scope.  The API endpoint supports the following types of variables: * CONNECTION_PROPERTY - For connection properties * TABLE_MAPPING - For table mappings * CONNECTION_PROPERTY_PER_PRINCIPAL - For connection properties per principal. In order to use this please contact support to enable this.  When creating a variable, you need to specify: * The variable type * A unique name for the variable * Whether the variable contains sensitive values (defaults to false) * The variable values (optional)  The operation will fail if: * The user lacks required permissions * The variable name already exists * The variable type is invalid * The variable values are invalid for the specified type       
   * @param createVariableRequest 
   */
  createVariable(createVariableRequest, _options) {
    const result = this.api.createVariable(createVariableRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.9.0.cl or later   Creates a DBT connection object in ThoughtSpot.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege or `DATAMANAGEMENT` (**Can manage data**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the following Data control privileges may be required:  - `CAN_MANAGE_CUSTOM_CALENDAR`(**Can manage custom calendars**) - `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) - `CAN_MANAGE_WORKSHEET_VIEWS_TABLES` (**Can manage data models**)  #### About create DBT connection DBT connection in ThoughtSpot is used by the user to define DBT credentials for cloud . The API needs  embrace connection, embrace database name, DBT url, import type, DBT account identifier, DBT project identifier, DBT access token and environment details (or) embrace connection, embrace database name, import type, file_content to create a connection object. To know more about DBT, see ThoughtSpot Product Documentation.      
   * @param dbtConnectionRequest 
   */
  dbtConnection(dbtConnectionRequest, _options) {
    const result = this.api.dbtConnection(dbtConnectionRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.9.0.cl or later   Resynchronize the existing list of models, tables, worksheet tml’s and import them to Thoughtspot based on the DBT connection object.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege or `DATAMANAGEMENT` (**Can manage data**) privilege, along with an existing DBT connection. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the following data control privileges may be required:  - `CAN_MANAGE_CUSTOM_CALENDAR`(**Can manage custom calendars**) - `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) - `CAN_MANAGE_WORKSHEET_VIEWS_TABLES` (**Can manage data models**)      
   * @param dbtGenerateSyncTmlRequest 
   */
  dbtGenerateSyncTml(dbtGenerateSyncTmlRequest, _options) {
    const result = this.api.dbtGenerateSyncTml(dbtGenerateSyncTmlRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.9.0.cl or later   Generate required table and worksheet and import them.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege or `DATAMANAGEMENT` (**Can manage data**) privilege, along with an existing DBT connection. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the following data control privileges may be required:  - `CAN_MANAGE_CUSTOM_CALENDAR`(**Can manage custom calendars**) - `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) - `CAN_MANAGE_WORKSHEET_VIEWS_TABLES` (**Can manage data models**)  #### About generate TML Models and Worksheets to be imported can be selected by the user as part of the API.      
   * @param dbtGenerateTmlRequest 
   */
  dbtGenerateTml(dbtGenerateTmlRequest, _options) {
    const result = this.api.dbtGenerateTml(dbtGenerateTmlRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.9.0.cl or later   Gets a list of DBT connection objects by user and organization, available on the ThoughtSpot system.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege or `DATAMANAGEMENT` (**Can manage data**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the following Data control privileges may be required:  - `CAN_MANAGE_CUSTOM_CALENDAR`(**Can manage custom calendars**) - `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) - `CAN_MANAGE_WORKSHEET_VIEWS_TABLES` (**Can manage data models**)  #### About search DBT connection To get details of a specific DBT connection identifier, database connection identifier, database connection name, database name, project name, project identifier, environment identifier , import type and author.      
   */
  dbtSearch(_options) {
    const result = this.api.dbtSearch(_options);
    return result.toPromise();
  }
  /**
   *   Version: 9.7.0.cl or later   Deactivates a user account.  Requires `ADMINISTRATION` (**Can administer Thoughtspot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `USER_ADMINISTRATION` (**Can manage users**) privilege is required.  To deactivate a user account, the API request body must include the following information:  - Username or the GUID of the user account - Base URL of the ThoughtSpot instance  If the API request is successful, ThoughtSpot returns the activation URL in the response. The activation URL is valid for 14 days and can be used to re-activate the account and reset the password of the deactivated account.      
   * @param deactivateUserRequest 
   */
  deactivateUser(deactivateUserRequest, _options) {
    const result = this.api.deactivateUser(deactivateUserRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.2.0.cl or later   Deletes Git repository configuration from your ThoughtSpot instance.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance on your instance, the `CAN_MANAGE_VERSION_CONTROL` (**Can toggle version control for objects**) privilege.      
   * @param deleteConfigRequest 
   */
  deleteConfig(deleteConfigRequest, _options) {
    const result = this.api.deleteConfig(deleteConfigRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.2.0.cl or later    **Important**: This endpoint is deprecated and will be removed from ThoughtSpot in September 2025. ThoughtSpot strongly recommends using the [Delete Connection V2](#/http/api-endpoints/connections/delete-connection-v2) endpoint to delete your connection objects.    #### Usage guidelines  Deletes a connection object.  Requires `DATAMANAGEMENT` (**Can manage data**) and edit permissions to the connection object, or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) privilege is required.  **Note**: If a connection has dependent objects, make sure you remove its associations before the delete operation.     
   * @param deleteConnectionRequest 
   */
  deleteConnection(deleteConnectionRequest, _options) {
    const result = this.api.deleteConnection(deleteConnectionRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 10.4.0.cl or later   Deletes a connection object.  **Note**: If a connection has dependent objects, make sure you remove its associations before the delete operation.  Requires `DATAMANAGEMENT` (**Can manage data**) and edit permissions to the connection object, or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) privilege is required.      
   * @param connectionIdentifier Unique ID or name of the connection.
   */
  deleteConnectionV2(connectionIdentifier, _options) {
    const result = this.api.deleteConnectionV2(connectionIdentifier, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.6.0.cl or later   Removes the custom action specified in the API request.  Requires `DEVELOPER` (**Has Developer privilege**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `DEVELOPER` (**Has developer privilege**) privilege is required.      
   * @param customActionIdentifier Unique ID or name of the custom action.
   */
  deleteCustomAction(customActionIdentifier, _options) {
    const result = this.api.deleteCustomAction(customActionIdentifier, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.9.0.cl or later   Removes the specified DBT connection object from the ThoughtSpot system.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) or `DATAMANAGEMENT` (**Can manage data ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the following Data control privileges may be required:  - `CAN_MANAGE_CUSTOM_CALENDAR`(**Can manage custom calendars**) - `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) - `CAN_MANAGE_WORKSHEET_VIEWS_TABLES` (**Can manage data models**)      
   * @param dbtConnectionIdentifier Unique ID of the DBT Connection.
   */
  deleteDbtConnection(dbtConnectionIdentifier, _options) {
    const result = this.api.deleteDbtConnection(dbtConnectionIdentifier, _options);
    return result.toPromise();
  }
  /**
   *  Version: 10.10.0.cl or later   Deletes the configuration for the email customisation.  #### Pre-requisites  Requires `DEVELOPER` (**has developer privilege**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `_Has developer privilege` privilege is required. Coms should be enabled on the cluster.  #### Usage guidelines  Deletes the configuration available for the cluster/org. Pass the `template_identifier` in the API request.  Note: `template_identifier` can be fetched from search API request.      
   * @param templateIdentifier Unique ID or name of the email customization.
   */
  deleteEmailCustomisation(templateIdentifier, _options) {
    const result = this.api.deleteEmailCustomisation(templateIdentifier, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.0.0.cl or later   Removes the specified metadata object from the ThoughtSpot system.  Requires edit access to the metadata object.       
   * @param deleteMetadataRequest 
   */
  deleteMetadata(deleteMetadataRequest, _options) {
    const result = this.api.deleteMetadata(deleteMetadataRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.0.0.cl or later   Deletes an Org object from the ThoughtSpot system.  Requires cluster administration (**Can administer Org**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `ORG_ADMINISTRATION` (**Can manage Orgs**) privilege is required.  When you delete an Org, all its users and objects created in that Org context are removed. However, if the users in the deleted Org also exists in other Orgs, they are removed only from the deleted Org.      
   * @param orgIdentifier ID or name of the Org
   */
  deleteOrg(orgIdentifier, _options) {
    const result = this.api.deleteOrg(orgIdentifier, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.5.0.cl or later   Deletes a Role object from the ThoughtSpot system.  Available only if [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance. To delete a Role, the `ROLE_ADMINISTRATION` (**Can manage roles**) privilege is required.      
   * @param roleIdentifier Unique ID or name of the Role. ReadOnly roles cannot be deleted.
   */
  deleteRole(roleIdentifier, _options) {
    const result = this.api.deleteRole(roleIdentifier, _options);
    return result.toPromise();
  }
  /**
   *  Deletes a scheduled job.    Version: 9.4.0.cl or later   Deletes a scheduled Liveboard job.  Requires at least edit access to Liveboard or `ADMINISTRATION` (**Can administer Org**) privilege.    If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `JOBSCHEDULING` (**Can schedule for others**) privilege is required.      
   * @param scheduleIdentifier Unique ID or name of the scheduled job.
   */
  deleteSchedule(scheduleIdentifier, _options) {
    const result = this.api.deleteSchedule(scheduleIdentifier, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.0.0.cl or later   Deletes a tag object from the ThoughtSpot system  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `TAGMANAGEMENT` (**Can manage tags**) privilege is required to create, edit, and delete tags.      
   * @param tagIdentifier Tag identifier Tag name or Tag id.
   */
  deleteTag(tagIdentifier, _options) {
    const result = this.api.deleteTag(tagIdentifier, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.0.0.cl or later   Deletes a user from the ThoughtSpot system.  If you want to remove a user from a specific Org but not from ThoughtSpot, update the group and Org mapping properties of the user object via a POST API call to the [/api/rest/2.0/users/{user_identifier}/update](#/http/api-endpoints/users/update-user) endpoint.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `USER_ADMINISTRATION` (**Can manage users**) privilege is required.      
   * @param userIdentifier GUID / name of the user
   */
  deleteUser(userIdentifier, _options) {
    const result = this.api.deleteUser(userIdentifier, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.0.0.cl or later   Removes the specified group object from the ThoughtSpot system.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `GROUP_ADMINISTRATION` (**Can manage groups**) privilege is required.      
   * @param groupIdentifier GUID or name of the group.
   */
  deleteUserGroup(groupIdentifier, _options) {
    const result = this.api.deleteUserGroup(groupIdentifier, _options);
    return result.toPromise();
  }
  /**
   *  Delete a variable   Version: 10.9.0.cl or later   Allows deleting a variable from ThoughtSpot.  Requires ADMINISTRATION role and TENANT scope.  The API endpoint requires: * The variable identifier (ID or name)  The operation will fail if: * The user lacks required permissions * The variable doesn\'t exist * The variable is being used by other objects      
   * @param identifier Unique id or name of the variable
   */
  deleteVariable(identifier, _options) {
    const result = this.api.deleteVariable(identifier, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.2.0.cl or later   Allows you to deploy a commit and publish TML content to your ThoughtSpot instance.  Requires at least edit access to the objects used in the deploy operation.  The API deploys the head of the branch unless a `commit_id` is specified in the API request. If the branch name is not defined in the request, the default branch is considered for deploying commits.  For more information, see [Git integration documentation](https://developers.thoughtspot.com/docs/git-integration).      
   * @param deployCommitRequest 
   */
  deployCommit(deployCommitRequest, _options) {
    const result = this.api.deployCommit(deployCommitRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.9.0.cl or later   Exports the difference in connection metadata between CDW and ThoughtSpot  Requires `DATAMANAGEMENT` (**Can manage data**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the following Data control privileges may be required:   - `CAN_MANAGE_CUSTOM_CALENDAR`(**Can manage custom calendars**) - `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) - `CAN_MANAGE_WORKSHEET_VIEWS_TABLES` (**Can manage data models**)  To download the connection metadata difference between ThoughtSpot and CDW, pass the connection GUID as `connection_identifier` in the API request.      
   * @param connectionIdentifier GUID of the connection
   */
  downloadConnectionMetadataChanges(connectionIdentifier, _options) {
    const result = this.api.downloadConnectionMetadataChanges(connectionIdentifier, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.0.0.cl or later   Exports an Answer in the given file format. You can download the Answer data as a PDF, PNG, CSV, or XLSX file.  Requires at least view access to the Answer.  #### Usage guidelines  In the request body, the GUID or name of the Answer and set `file_format`. The default file format is CSV.  **NOTE**: * The downloadable file returned in API response file is extensionless. Please rename the downloaded file by typing in the relevant extension. * HTML rendering is not supported for PDF exports of Answers with tables.  Optionally, you can define [runtime overrides](https://developers.thoughtspot.com/docs/fetch-data-and-report-apis#_runtime_overrides) to apply to the Answer data.  The `record_size` attribute determines the number of records to retrieve in an API call. For more information about pagination, record size, and maximum row limit, see [Pagination and record size settings](https://developers.thoughtspot.com/docs/fetch-data-and-report-apis#_pagination_settings_for_data_and_report_api).       
   * @param exportAnswerReportRequest 
   */
  exportAnswerReport(exportAnswerReportRequest, _options) {
    const result = this.api.exportAnswerReport(exportAnswerReportRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.0.0.cl or later   Exports a Liveboard and its visualizations in PDF or PNG file format.  Requires at least view access to the Liveboard.  #### Usage guidelines  In the request body, specify the GUID or name of the Liveboard. To generate a Liveboard report with specific visualizations, add GUIDs or names of the visualizations.  The default `file_format` is PDF. For PDF downloads, you can specify additional parameters to customize the page orientation and include or exclude the cover page, logo, footer text, and page numbers. Similar customization options are also available for PNG output.  **NOTE**: The downloadable file returned in API response file is extensionless. Please rename the downloaded file by typing in the relevant extension.  Optionally, you can define [runtime overrides](https://developers.thoughtspot.com/docs/fetch-data-and-report-apis#_runtime_overrides) to apply to the Answer data.  To include unsaved changes in the report, pass the `transient_pinboard_content` script generated from the `getExportRequestForCurrentPinboard` method in the Visual Embed SDK. Upon successful execution, the API returns the report with unsaved changes, including ad hoc changes to visualizations. For more information, see [Liveboard Report API](https://developers.thoughtspot.com/docs/fetch-data-and-report-apis#_liveboard_report_api).       
   * @param exportLiveboardReportRequest 
   */
  exportLiveboardReport(exportLiveboardReportRequest, _options) {
    const result = this.api.exportLiveboardReport(exportLiveboardReportRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.0.0.cl or later   Exports the [TML](https://docs.thoughtspot.com/cloud/latest/tml) representation of metadata objects in JSON or YAML format.  Requires `DATADOWNLOADING` (**Can download Data**) and at least view access to the metadata object.  #### Usage guidelines  * You can export one or several objects by passing metadata object GUIDs in the `metadata` array. * When exporting TML content for a Liveboard or Answer object, you can set `export_associated` to `true` to retrieve TML content for underlying Worksheets, Tables, or Views, including the GUID of each object within the headers. When   `export_associated` is set to `true`, consider retrieving one metadata object at a time. * Set `export_fqns` to `true` to add FQNs of the referenced objects in the TML content. For example, if you send an API request to retrieve TML for a Liveboard and its associated objects, the API returns the TML content with FQNs of the referenced Worksheet. Exporting TML with FQNs is useful if ThoughtSpot has multiple objects with the same name and you want to eliminate ambiguity when importing TML files into ThoughtSpot. It eliminates the need for adding FQNs of the referenced objects manually during the import operation. * To export only the TML of feedbacks associated with an object, set the GUID of the object as `identifier`, and set the `type` as `FEEDBACK` in the `metadata` array. * To export the TML of an object along with the feedbacks associated with it, set the GUID of the object as `identifier`, set the `type` as `LOGIAL_TABLE` in the `metadata` array, and set `export_with_associated_feedbacks` in `export_options` to true.  For more information, see [TML Documentation](https://developers.thoughtspot.com/docs/tml#_export_a_tml).  For more information on feedbacks, see [Feedback Documentation](https://docs.thoughtspot.com/cloud/latest/sage-feedback).     
   * @param exportMetadataTMLRequest 
   */
  exportMetadataTML(exportMetadataTMLRequest, _options) {
    const result = this.api.exportMetadataTML(exportMetadataTMLRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 10.1.0.cl or later   Exports the [TML](https://docs.thoughtspot.com/cloud/latest/tml) representation of metadata objects in JSON or YAML format.  ### **Permissions Required**  Requires `DATAMANAGEMENT` (**Can manage data**) and `USERMANAGEMENT` (**Can manage users**) privileges.  #### **Usage Guidelines**  This API is only applicable for `USER`, `GROUP`, and `ROLES` metadata types.  - `batch_offset` Indicates the starting position within the complete dataset from which the API should begin returning objects. Useful for paginating results efficiently. - `batch_size` Specifies the number of objects or items to retrieve in a single request. Helps control response size for better performance. - `edoc_format` Defines the format of the TML content. The exported metadata can be in JSON or YAML format. - `export_dependent` Specifies whether to include dependent metadata objects in the export. Ensures related objects are also retrieved if needed. - `all_orgs_override` Indicates whether the export operation applies across all organizations. Useful for multi-tenant environments where cross-org exports are required.      
   * @param exportMetadataTMLBatchedRequest 
   */
  exportMetadataTMLBatched(exportMetadataTMLBatchedRequest, _options) {
    const result = this.api.exportMetadataTMLBatched(exportMetadataTMLBatchedRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.0.0.cl or later   Fetches data from a saved Answer.  Requires at least view access to the saved Answer.  The `record_size` attribute determines the number of records to retrieve in an API call. For more information about pagination, record size, and maximum row limit, see [Pagination and record size settings](https://developers.thoughtspot.com/docs/fetch-data-and-report-apis#_pagination_settings_for_data_and_report_apis).     
   * @param fetchAnswerDataRequest 
   */
  fetchAnswerData(fetchAnswerDataRequest, _options) {
    const result = this.api.fetchAnswerData(fetchAnswerDataRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.0.0.cl or later   Fetches the underlying SQL query data for an Answer object.  Requires at least view access to the Answer object.  Upon successful execution, the API returns the SQL queries for the specified object as shown in this example: ``` {    \"metadata_id\":\"8fbe44a8-46ad-4b16-8d39-184b2fada490\",    \"metadata_name\":\"Total sales\",    \"metadata_type\":\"ANSWER\",    \"sql_queries\":[       {          \"metadata_id\":\"8fbe44a8-46ad-4b16-8d39-184b2fada490\",          \"metadata_name\":\"Total sales -test\",          \"sql_query\":\"SELECT \\n  \\\"ta_1\\\".\\\"REGION\\\" \\\"ca_1\\\", \\n  \\\"ta_2\\\".\\\"PRODUCTNAME\\\" \\\"ca_2\\\", \\n  \\\"ta_1\\\".\\\"STORENAME\\\" \\\"ca_3\\\", \\n  CASE\\n    WHEN sum(\\\"ta_3\\\".\\\"SALES\\\") IS NOT NULL THEN sum(\\\"ta_3\\\".\\\"SALES\\\")\\n    ELSE 0\\n  END \\\"ca_4\\\", \\n  CASE\\n    WHEN sum(\\\"ta_3\\\".\\\"QUANTITYPURCHASED\\\") IS NOT NULL THEN sum(\\\"ta_3\\\".\\\"QUANTITYPURCHASED\\\")\\n    ELSE 0\\n  END \\\"ca_5\\\"\\nFROM \\\"RETAILAPPAREL\\\".\\\"PUBLIC\\\".\\\"FACT_RETAPP_SALES\\\" \\\"ta_3\\\"\\n  JOIN \\\"RETAILAPPAREL\\\".\\\"PUBLIC\\\".\\\"DIM_RETAPP_STORES\\\" \\\"ta_1\\\"\\n    ON \\\"ta_3\\\".\\\"STOREID\\\" = \\\"ta_1\\\".\\\"STOREID\\\"\\n  JOIN \\\"RETAILAPPAREL\\\".\\\"PUBLIC\\\".\\\"DIM_RETAPP_PRODUCTS\\\" \\\"ta_2\\\"\\n    ON \\\"ta_3\\\".\\\"PRODUCTID\\\" = \\\"ta_2\\\".\\\"PRODUCTID\\\"\\nGROUP BY \\n  \\\"ca_1\\\", \\n  \\\"ca_2\\\", \\n  \\\"ca_3\\\"\\n\"       }    ] } ```      
   * @param fetchAnswerSqlQueryRequest 
   */
  fetchAnswerSqlQuery(fetchAnswerSqlQueryRequest, _options) {
    const result = this.api.fetchAnswerSqlQuery(fetchAnswerSqlQueryRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 10.4.0.cl or later   Gets information about the status of the TML async import task scheduled using the `/api/rest/2.0/metadata/tml/async/import` API call.  To fetch the task details, specify the ID of the TML async import task.    Requires access to the task ID. The API allows users who initiated the asynchronous TML import via `/api/rest/2.0/metadata/tml/async/import` to view the status of their tasks.  Users with administration privilege can view the status of all import tasks initiated by the users in their Org.  #### Usage guidelines  See [TML API Documentation](https://developers.thoughtspot.com/docs/tml#_fetch_status_of_the_tml_import_task) for usage guidelines.     
   * @param fetchAsyncImportTaskStatusRequest 
   */
  fetchAsyncImportTaskStatus(fetchAsyncImportTaskStatusRequest, _options) {
    const result = this.api.fetchAsyncImportTaskStatus(fetchAsyncImportTaskStatusRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.9.0.cl or later   Validates the difference in connection metadata between CDW and ThoughtSpot.  Requires `DATAMANAGEMENT` (**Can manage data**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the following Data control privileges may be required:  - `CAN_MANAGE_CUSTOM_CALENDAR`(**Can manage custom calendars**) - `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) - `CAN_MANAGE_WORKSHEET_VIEWS_TABLES` (**Can manage data models**)  Returns a boolean indicating whether there is any difference between the connection metadata at ThoughtSpot and CDW.  To get the connection metadata difference status, pass the connection GUID as `connection_identifier` in the API request.      
   * @param connectionIdentifier GUID of the connection
   */
  fetchConnectionDiffStatus(connectionIdentifier, _options) {
    const result = this.api.fetchConnectionDiffStatus(connectionIdentifier, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.0.0.cl or later   Gets data from a Liveboard object and its visualization.    Requires at least view access to the Liveboard.  #### Usage guidelines  In the request body, specify the GUID or name of the Liveboard. To get data for specific visualizations, add the GUIDs or names of the visualizations in the API request.  To include unsaved changes in the report, pass the `transient_pinboard_content` script generated from the `getExportRequestForCurrentPinboard` method in the Visual Embed SDK. Upon successful execution, the API returns the report with unsaved changes. If the new Liveboard experience mode, the transient content includes ad hoc changes to visualizations such as sorting, toggling of legends, and data drill down.  For more information, and see [Liveboard data API](https://developers.thoughtspot.com/docs/fetch-data-and-report-apis#_fetch_liveboard_data_api).     
   * @param fetchLiveboardDataRequest 
   */
  fetchLiveboardData(fetchLiveboardDataRequest, _options) {
    const result = this.api.fetchLiveboardData(fetchLiveboardDataRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.0.0.cl or later   Fetches the underlying SQL query data for a Liveboard object and its visualizations.  Requires at least view access to the Liveboard object.  To get SQL query data for a Liveboard, specify the GUID of the Liveboard. Optionally, you can add an array of visualization GUIDs to retrieve the SQL query data for visualizations in the Liveboard.  Upon successful execution, the API returns the SQL queries for the specified object as shown in this example: ``` {   \"metadata_id\": \"fa68ae91-7588-4136-bacd-d71fb12dda69\",   \"metadata_name\": \"Total Sales\",   \"metadata_type\": \"LIVEBOARD\",   \"sql_queries\": [     {       \"metadata_id\": \"b3b6d2b9-089a-490c-8e16-b144650b7843\",       \"metadata_name\": \"Total quantity purchased, Total sales by region\",       \"sql_query\": \"SELECT \\n  \\\"ta_1\\\".\\\"REGION\\\" \\\"ca_1\\\", \\n  CASE\\n    WHEN sum(\\\"ta_2\\\".\\\"QUANTITYPURCHASED\\\") IS NOT NULL THEN sum(\\\"ta_2\\\".\\\"QUANTITYPURCHASED\\\")\\n    ELSE 0\\n  END \\\"ca_2\\\", \\n  CASE\\n    WHEN sum(\\\"ta_2\\\".\\\"SALES\\\") IS NOT NULL THEN sum(\\\"ta_2\\\".\\\"SALES\\\")\\n    ELSE 0\\n  END \\\"ca_3\\\"\\nFROM \\\"RETAILAPPAREL\\\".\\\"PUBLIC\\\".\\\"FACT_RETAPP_SALES\\\" \\\"ta_2\\\"\\n  JOIN \\\"RETAILAPPAREL\\\".\\\"PUBLIC\\\".\\\"DIM_RETAPP_STORES\\\" \\\"ta_1\\\"\\n    ON \\\"ta_2\\\".\\\"STOREID\\\" = \\\"ta_1\\\".\\\"STOREID\\\"\\nGROUP BY \\\"ca_1\\\"\"     }   ] } ```      
   * @param fetchLiveboardSqlQueryRequest 
   */
  fetchLiveboardSqlQuery(fetchLiveboardSqlQueryRequest, _options) {
    const result = this.api.fetchLiveboardSqlQuery(fetchLiveboardSqlQueryRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.0.0.cl or later   Fetches security audit logs.    Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the [Admin Control](https://developers.thoughtspot.com/docs/rbac#_admin_control) privileges are required.   #### Usage guidelines  By default, the API retrieves logs for the last 24 hours. You can set a custom duration in EPOCH time. Make sure the log duration specified in your API request doesn’t exceed 24 hours. If you must fetch logs for a longer time range, modify the duration and make multiple sequential API requests.  Upon successful execution, the API returns logs with the following information: * timestamp of the event * event ID * event type * name and GUID of the user * IP address of ThoughtSpot instance  For more information see [Audit logs Documentation](https://developers.thoughtspot.com/docs/audit-logs).      
   * @param fetchLogsRequest 
   */
  fetchLogs(fetchLogsRequest, _options) {
    const result = this.api.fetchLogs(fetchLogsRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.0.0.cl or later   Fetches object permission details for a given principal object such as a user and group.  Requires view access to the metadata object.   #### Usage guidelines  * To get a list of all metadata objects that a user or group can access, specify the `type` and GUID or name of the principal. * To get permission details for a specific object, add the `type` and GUID or name of the metadata object to your API request.  Upon successful execution, the API returns a list of metadata objects and permission details for each object.        
   * @param fetchPermissionsOfPrincipalsRequest 
   */
  fetchPermissionsOfPrincipals(fetchPermissionsOfPrincipalsRequest, _options) {
    const result = this.api.fetchPermissionsOfPrincipals(fetchPermissionsOfPrincipalsRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.0.0.cl or later   Fetches permission details for a given metadata object.  Requires view access to the metadata object.  #### Usage guidelines  * To fetch a list of users and groups for a metadata object, specify `type` and GUID or name of the metadata object. * To get permission details for a specific user or group, add `type` and GUID or name of the principal object to your API request.  Upon successful execution, the API returns permission details and principal information for the object specified in the API request.      
   * @param fetchPermissionsOnMetadataRequest 
   */
  fetchPermissionsOnMetadata(fetchPermissionsOnMetadataRequest, _options) {
    const result = this.api.fetchPermissionsOnMetadata(fetchPermissionsOnMetadataRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.0.0.cl or later   Enforces logout on current user sessions.    Use this API with caution as it may invalidate active user sessions and force users to re-login. Make sure you specify the usernames or GUIDs. If you pass null values in the API call, all user sessions on your cluster become invalid, and the users are forced to re-login.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `USER_ADMINISTRATION` (**Can manage users**) privilege is required.      
   * @param forceLogoutUsersRequest 
   */
  forceLogoutUsers(forceLogoutUsersRequest, _options) {
    const result = this.api.forceLogoutUsers(forceLogoutUsersRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.0.0.cl or later    Gets session information for the currently logged-in user.  This API does not require any parameters to be passed in the request.    Any ThoughtSpot user can access this endpoint and send an API request. The data returned in the API response varies according to user\'s privilege and object access permissions.      
   */
  getCurrentUserInfo(_options) {
    const result = this.api.getCurrentUserInfo(_options);
    return result.toPromise();
  }
  /**
   *  Get token for the currently logged-in user.    Version: 9.4.0.cl or later   Gets token details for the currently logged-in user.  You can use this endpoint to obtain the token associated with the user\'s session.  This API does not require any parameters to be passed in the request.    Any ThoughtSpot user can access this endpoint and send an API request.      
   */
  getCurrentUserToken(_options) {
    const result = this.api.getCurrentUserToken(_options);
    return result.toPromise();
  }
  /**
   *   Version: 10.4.0.cl or later   Gets an authentication token with custom rules and security attributes and creates a full session in ThoughtSpot for a given user. By default, the token obtained from ThoughtSpot remains valid for 5 mins.  To add a new user and assign privileges during auto creation, you need `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled, the `CONTROL_TRUSTED_AUTH`(**Can Enable or Disable Trusted Authentication**) privilege and edit access to the data source is required.  To assign security attributes with filter rules and Parameters to the JWT token, you\'ll need administrator privileges and edit access to the data source (Worksheet or Model). If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled, the `CONTROL_TRUSTED_AUTH`(**Can Enable or Disable Trusted Authentication**) privilege and edit access to the data source is required.  #### Usage guidelines  You can generate the token for a user by providing a `username` and `password`, or by using the cluster’s `secret_key`.  To generate a `secret_key` on your cluster, the administrator must enable [Trusted authentication](https://developers.thoughtspot.com/docs/?pageid=trusted-auth#trusted-auth-enable) in the **Develop** > **Customizations** > **Security Settings** page.  **Note**: When both `password` and `secret_key` are included in the API request, `password` takes precedence.  If Multi-Factor Authentication (MFA) is enabled on your instance, the API login request with basic authentication (`username`  and `password` ) returns an error. You can switch to token-based authentication with  `secret_key`  or contact ThoughtSpot Support for assistance.  ##### Attribute-Based Access Control (ABAC) with tokens  To implement Attribute-Based Access Control (ABAC) and assign security entitlements to users during session creation, you can generate a token with custom filtering rules and Parameters in the `filter_rules` and `parameter_values` array respectively. These attributes can be configured to persist on a specific set of objects for user sessions initiated using the token. Once defined, the rules are added to the user\'s `access_control_properties` object, after which all sessions will use the persisted values.  Specify the object type as `LOGICAL_TABLE`.  The `LIVEBOARD` and `ANSWER` object types are not supported.  For more information, see [ABAC via tokens Documentation](https://developers.thoughtspot.com/docs/api-authv2#_get_tokens_with_custom_rules_and_filter_conditions).  ##### Just-in-time provisioning  For just-in-time user creation and provisioning, define the following attributes:  * `auto_create` * `username` * `display_name` * `email` * `groups`  Set `auto_create` to `true` if the user is not available in ThoughtSpot. If the user already exists in ThoughtSpot and the `auto_create` parameter is set to `true` in the API request, the user properties such as the display name, email, Org and group assignment will not be updated with new values.  For more information, see [Just-in-time provisioning](https://developers.thoughtspot.com/docs/just-in-time-provisioning).  ##### Important point to note All options in the token creation APIs that define access to the content in ThoughtSpot will do so during the token creation and not when the token is being used for authentication. For example, `auto_create:true` will create the user when the authentication token is created. Persist options such as  `APPEND`, `REPLACE`, `RESET` will persist security parameters on the user profile when the token is created, while Persist option `NONE` will not persist anything but will be honoured in the session.      
   * @param getCustomAccessTokenRequest 
   */
  getCustomAccessToken(getCustomAccessTokenRequest, _options) {
    const result = this.api.getCustomAccessToken(getCustomAccessTokenRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.0.0.cl or later   Gets an authentication token and creates a full session in ThoughtSpot for a given user. By default, the token obtained from ThoughtSpot remains valid for 5 mins.  You can generate the token for a user by providing a `username` and `password`, or by using the cluster’s `secret_key` (for [Trusted authentication](https://developers.thoughtspot.com/docs/?pageid=trusted-auth#trusted-auth-enable)).  To generate a `secret_key` on your cluster, the administrator must enable **Trusted authentication** in the **Develop** > **Customizations** > **Security Settings** page. For more information, see [Trusted authentication](https://developers.thoughtspot.com/docs/?pageid=trusted-auth#trusted-auth-enable).  **Note**: When both `password` and `secret_key` are included in the API request, `password` takes precedence.  If Multi-Factor Authentication (MFA) is enabled on your instance, the API login request with basic authentication (`username`  and `password` ) returns an error. You can switch to token-based authentication with  `secret_key`  or contact ThoughtSpot Support for assistance.  #### Just-in-time provisioning  For just-in-time user creation and provisioning, define the following attributes:  * `auto_create` * `username` * `display_name` * `email` * `group_identifiers`  Set `auto_create` to `True` if the user is not available in ThoughtSpot. If the user already exists in ThoughtSpot and the `auto_create` parameter is set to `true`, the API call will update user properties like display name, email and group assignment.  For more information, see [Just-in-time provisioning](https://developers.thoughtspot.com/docs/just-in-time-provisioning).  To add a new user and assign privileges, you need `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled, the `CONTROL_TRUSTED_AUTH`(**Can Enable or Disable Trusted Authentication**) privilege is required.  #### Important point to note All options in the token creation APIs changing the content in ThoughtSpot will do so during the token creation and not when the token is being used for authentication. For example, `auto_create:true` will create the user when the authentication token is created.      
   * @param getFullAccessTokenRequest 
   */
  getFullAccessToken(getFullAccessTokenRequest, _options) {
    const result = this.api.getFullAccessToken(getFullAccessTokenRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.0.0.cl or later   Gets an authentication token that provides access to a specific metadata object. By default, the token obtained from ThoughtSpot remains valid for 5 mins.  You can generate the token for a user by providing a `username` and `password`, or by using the cluster’s `secret key` (for [Trusted authentication](https://developers.thoughtspot.com/docs/?pageid=trusted-auth#trusted-auth-enable)).  To generate a `secret_key` on your cluster, the administrator must enable **Trusted authentication** in the **Develop** > **Customizations** > **Security Settings** page.  **Note**: When both `password` and `secret_key` are included in the API request,  `password` takes precedence.  If Multi-Factor Authentication (MFA) is enabled on your instance, the API login request with basic authentication (`username`  and `password` ) returns an error. You can switch to token-based authentication with  `secret_key`  or contact ThoughtSpot Support for assistance.  #### Just-in-time provisioning  For just-in-time user creation and provisioning, define the following attributes:  * `auto_create` * `username` * `display_name` * `email` * `group_identifiers`  Set `auto_create` to `True` if the user is not available in ThoughtSpot. If the user already exists in ThoughtSpot and the `auto_create` parameter is set to `true`, the API call will update user properties like display name, email and group assignment.  For more information, see [Just-in-time provisioning](https://developers.thoughtspot.com/docs/just-in-time-provisioning).  To add a new user and assign privileges, you need `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled, the `CONTROL_TRUSTED_AUTH`(**Can Enable or Disable Trusted Authentication**) privilege is required.  #### Important point to note All options in the token creation APIs changing the content in ThoughtSpot will do so during the token creation and not when the token is being used for authentication. For example, `auto_create:true` will create the user when the authentication token is created.      
   * @param getObjectAccessTokenRequest 
   */
  getObjectAccessToken(getObjectAccessTokenRequest, _options) {
    const result = this.api.getObjectAccessToken(getObjectAccessTokenRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.0.0.cl or later   Retrieves the current configuration details of the cluster. If the request is successful, the API returns a list configuration settings applied on the cluster.  Requires `ADMINISTRATION`(**Can administer ThoughtSpot**) privilege to view these complete configuration settings of the cluster. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `SYSTEM_INFO_ADMINISTRATION` (**Can view system activities**) privilege is required.  This API does not require any parameters to be passed in the request.      
   */
  getSystemConfig(_options) {
    const result = this.api.getSystemConfig(_options);
    return result.toPromise();
  }
  /**
   *   Version: 9.0.0.cl or later   Gets system information such as the release version, locale, time zone, deployment environment, date format, and date time format of the cluster.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privileges. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `SYSTEM_INFO_ADMINISTRATION` (**Can view system activities**) privilege is required.  This API does not require any parameters to be passed in the request.        
   */
  getSystemInformation(_options) {
    const result = this.api.getSystemInformation(_options);
    return result.toPromise();
  }
  /**
   *   Version: 9.2.0.cl or later   Gets a list of configuration overrides applied on the cluster.    Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `APPLICATION_ADMINISTRATION` (**Can manage application settings**) privilege is required.  This API does not require any parameters to be passed in the request.        
   */
  getSystemOverrideInfo(_options) {
    const result = this.api.getSystemOverrideInfo(_options);
    return result.toPromise();
  }
  /**
   *   Version: 9.0.0.cl or later   Imports [TML](https://docs.thoughtspot.com/cloud/latest/tml) files into ThoughtSpot.  Requires `DATAMANAGEMENT` (**Can manage data**) or `ADMINISTRATION` (**Can administer ThoughtsSpot**) privilege.  If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the following Data control privileges may be required: - `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) - `CAN_MANAGE_WORKSHEET_VIEWS_TABLES` (**Can manage data models**)  #### Usage guidelines  *  Import all related objects in a single TML Import API call. For example, Tables that use the same Connection object and Worksheets connected to these Tables. * Include the `fqn` property to distinguish objects that have the same name.   For example, if you have multiple Connections or Worksheets with the same name on ThoughtSpot and the Connection or Worksheet referenced in your TML file does not have a unique name to distinguish, it may result in invalid object references.   Adding `fqn` helps ThoughtSpot differentiate a Table from another with the same name.   We recommend [exporting TML with FQNs](#/http/api-endpoints/metadata/export-metadata-tml) and using these during the import operation. * You can upload multiple TML files at a time.   If you import a Worksheet along with Liveboards, Answers, and other dependent objects in a single API call, the imported objects will be immediately available for use.   When you import only a Worksheet object, it may take some time for the Worksheet to become available in the ThoughtSpot system. Please wait for a few minutes, and then proceed to create an Answer and Liveboard from the newly imported Worksheet.  For more information, see [TML Documentation](https://developers.thoughtspot.com/docs/tml#_import_a_tml).      
   * @param importMetadataTMLRequest 
   */
  importMetadataTML(importMetadataTMLRequest, _options) {
    const result = this.api.importMetadataTML(importMetadataTMLRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 10.4.0.cl or later   Schedules a task to import [TML](https://docs.thoughtspot.com/cloud/latest/tml) files into ThoughtSpot. You can use this API endpoint to process TML objects asynchronously when importing TMLs of large and complex metadata objects into ThoughtSpot. Unlike the synchronous import TML operation, the API processes TML data in the background and returns a task ID, which can be used to check the status of the import task via `/api/rest/2.0/metadata/tml/async/status` API endpoint.  Requires `DATAMANAGEMENT` (**Can manage data**) or `ADMINISTRATION` (**Can administer ThoughtsSpot**) privilege, and edit access to the TML objects.  If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the following Data control privileges may be required: - `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) - `CAN_MANAGE_WORKSHEET_VIEWS_TABLES` (**Can manage data models**)  #### Usage guidelines  See [Async TML API Documentation](https://developers.thoughtspot.com/docs/tml#_import_tml_objects_asynchronously) for usage guidelines.      
   * @param importMetadataTMLAsyncRequest 
   */
  importMetadataTMLAsync(importMetadataTMLAsyncRequest, _options) {
    const result = this.api.importMetadataTMLAsync(importMetadataTMLAsyncRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.0.0.cl or later   Imports group objects from external databases into ThoughtSpot.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `GROUP_ADMINISTRATION` (**Can manage groups**) privilege is required.  During the import operation:  * If the specified group is not available in ThoughtSpot, it will be added to ThoughtSpot. * If `delete_unspecified_groups` is set to `true`, the groups not specified in the API request, excluding administrator and system user groups, are deleted. * If the specified groups are already available in ThoughtSpot, the object properties of these groups are modified and synchronized as per the input data in the API request.  A successful API call returns the object that represents the changes made in the ThoughtSpot system.      
   * @param importUserGroupsRequest 
   */
  importUserGroups(importUserGroupsRequest, _options) {
    const result = this.api.importUserGroups(importUserGroupsRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.0.0.cl or later   Imports user data from external databases into ThoughtSpot. During the user import operation:  * If the specified users are not available in ThoughtSpot, the users are created and assigned a default password. Defining a `default_password` in the API request is optional. * If `delete_unspecified_users` is set to `true`, the users not specified in the API request, excluding the `tsadmin`, `guest`, `system` and `su` users, are deleted. * If the specified user objects are already available in ThoughtSpot, the object properties are updated and synchronized as per the input data in the API request.  A successful API call returns the object that represents the changes made in the ThoughtSpot system.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `USER_ADMINISTRATION` (**Can manage users**) privilege is required.      
   * @param importUsersRequest 
   */
  importUsers(importUsersRequest, _options) {
    const result = this.api.importUsers(importUsersRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.0.0.cl or later   Creates a login session for a ThoughtSpot user with Basic authentication.  In Basic authentication method, REST clients log in to ThoughtSpot using `username` and `password` attributes. On a multi-tenant cluster with Orgs, users can pass the ID of the Org in the API request to log in to a specific Org context.  **Note**: If Multi-Factor Authentication (MFA) is enabled on your instance, the API login request with basic authentication (`username`  and `password` ) returns an error. Contact ThoughtSpot Support for assistance.  A successful login returns a session cookie that can be used in your subsequent API requests.     
   * @param loginRequest 
   */
  login(loginRequest, _options) {
    const result = this.api.login(loginRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.0.0.cl or later    Logs out a user from their current session.      
   */
  logout(_options) {
    const result = this.api.logout(_options);
    return result.toPromise();
  }
  /**
   *  Parameterize fields in metadata objects.   Version: 10.9.0.cl or later   Allows parameterizing fields in metadata objects in ThoughtSpot.  Requires appropriate permissions to modify the metadata object.  The API endpoint allows parameterizing the following types of metadata objects: * Logical Tables * Connections  For a Logical Table the field type must be `ATTRIBUTE` and field name can be one of: * databaseName * schemaName * tableName  For a Connection the field type is always `CONNECTION_PROPERTY`. We use the field_name in this case to specify the exact property of a connection which needs to be parameterized.      
   * @param parameterizeMetadataRequest 
   */
  parameterizeMetadata(parameterizeMetadataRequest, _options) {
    const result = this.api.parameterizeMetadata(parameterizeMetadataRequest, _options);
    return result.toPromise();
  }
  /**
   *  Version: 10.9.0.cl or later   Allows publishing metadata objects across organizations in ThoughtSpot.  Requires ADMINISTRATION role and TENANT scope.  The API endpoint allows publishing the following types of metadata objects: * Liveboards * Answers * Logical Tables  This API will essentially share the objects along with it\'s dependencies to the org admins of the orgs to which it is being published.      
   * @param publishMetadataRequest 
   */
  publishMetadata(publishMetadataRequest, _options) {
    const result = this.api.publishMetadata(publishMetadataRequest, _options);
    return result.toPromise();
  }
  /**
   * Version: 10.7.0.cl or later 
   * @param queryGetDecomposedQueryRequest 
   */
  queryGetDecomposedQuery(queryGetDecomposedQueryRequest, _options) {
    const result = this.api.queryGetDecomposedQuery(queryGetDecomposedQueryRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.0.0.cl or later   Resets the password of a user account. Administrators can reset password on behalf of a user.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `USER_ADMINISTRATION` (**Can manage users**) privilege is required.      
   * @param resetUserPasswordRequest 
   */
  resetUserPassword(resetUserPasswordRequest, _options) {
    const result = this.api.resetUserPassword(resetUserPasswordRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.2.0.cl or later   Reverts TML objects to a previous commit specified in the API request.  Requires at least edit access to objects.  In the API request, specify the `commit_id`. If the branch name is not specified in the request, the API will consider the default branch configured on your instance.  By default, the API reverts all objects. If the revert operation fails for one of the objects provided in the commit, the API returns an error and does not revert any object.  For more information, see [Git integration documentation](https://developers.thoughtspot.com/docs/git-integration).      
   * @param commitId Commit id to which the object should be reverted
   * @param revertCommitRequest 
   */
  revertCommit(commitId, revertCommitRequest, _options) {
    const result = this.api.revertCommit(commitId, revertCommitRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.0.0.cl or later    Revokes the authentication token issued for current user session.  The token of your current session expires when you make a call to the `/api/rest/2.0/auth/token/revoke` endpoint. the users will not be able to access ThoughtSpot objects until a new token is obtained.  To restart your session, request for a new token from ThoughtSpot. See [Get Full Access Token](#/http/api-endpoints/authentication/get-full-access-token).      
   * @param revokeTokenRequest 
   */
  revokeToken(revokeTokenRequest, _options) {
    const result = this.api.revokeToken(revokeTokenRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.2.0.cl or later   Gets a list of commits for a given metadata object.  Requires `DATAMANAGEMENT` (**Can manage data**) privilege.  If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance on your instance, the `CAN_MANAGE_WORKSHEET_VIEWS_TABLES` (**Can manage data models**) privilege and edit access to the metadata objects.      
   * @param searchCommitsRequest 
   */
  searchCommits(searchCommitsRequest, _options) {
    const result = this.api.searchCommits(searchCommitsRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.2.0.cl or later   Gets Git repository connections configured on the ThoughtSpot instance.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance on your instance, the `CAN_MANAGE_VERSION_CONTROL` (**Can toggle version control for objects**) privilege.      
   * @param searchConfigRequest 
   */
  searchConfig(searchConfigRequest, _options) {
    const result = this.api.searchConfig(searchConfigRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.2.0.cl or later   Gets connection objects. Requires `DATAMANAGEMENT` (**Can manage data**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) privilege is required.  - To get a list of all connections available in the ThoughtSpot system, send the API request without any attributes in the request body. - To get the connection objects for a specific type of data warehouse, specify the type in `data_warehouse_types`. - To fetch details of a connection object, specify the connection object GUID or name. The `name_pattern` attribute allows passing partial text with `%` for a wildcard match. - To get details of the database, schemas, tables, or columns from a data connection object, specify `data_warehouse_object_type`. - To get a specific database, schema, table, or column from a connection object, define the object type in `data_warehouse_object_type` and object properties in the `data_warehouse_objects` array. For example, to search for a column, you must pass the database, schema, and table names in the API request.   Note that in the following example, object properties are set in a hierarchical order (`database` > `schema` > `table` > `column`).  ``` {   \"connections\": [     {       \"identifier\": \"b9d1f2ef-fa65-4a4b-994e-30fa2d57b0c2\",       \"data_warehouse_objects\": [         {           \"database\": \"NEBULADEV\",           \"schema\": \"INFORMATION_SCHEMA\",           \"table\": \"APPLICABLE_ROLES\",           \"column\": \"ROLE_NAME\"         }       ]     }   ],   \"data_warehouse_object_type\": \"COLUMN\" } ```  - To fetch data by `configuration`, specify `data_warehouse_object_type`. For example, to fetch columns from the `DEVELOPMENT` database, specify the `data_warehouse_object_type` as `DATABASE` and define the `configuration` string as `{\"database\":\"DEVELOPMENT\"}`. To get column data for a specific table, specify the table, for example,`{\"database\":\"RETAILAPPAREL\",\"table\":\"PIPES\"}`. - To query connections by `authentication_type`, specify `data_warehouse_object_type`. Supported values for `authentication_type` are:   - `SERVICE_ACCOUNT`: For connections that require service account credentials to authenticate to the Cloud Data Warehouse and fetch data.   - `OAUTH`: For connections that require OAuth credentials to authenticate to the Cloud Data Warehouse and fetch data. Teradata, Oracle, and Presto Cloud Data Warehouses do not support the OAuth authentication type.   - `IAM`: For connections that have the IAM OAuth set up. This authentication type is supported on Amazon Redshift connections only.   - `EXTOAUTH`: For connections that have external OAuth set up. ThoughtSpot supports external [OAuth with Microsoft Azure Active Directory (AD)](https://docs.thoughtspot.com/cloud/latest/ connections-snowflake-azure-ad-oauth) and [Okta for Snowflake data connections](https://docs.thoughtspot.com/cloud/latest/connections-snowflake-okta-oauth). - To include more details about connection objects in the API response, set `include_details` to `true`. - You can also sort the output by field names and filter connections by tags.  **NOTE**: When filtering connection records by parameters other than `data_warehouse_types` or `tag_identifiers`, ensure that you set `record_size` to `-1` and `record_offset` to `0` for precise results.      
   * @param searchConnectionRequest 
   */
  searchConnection(searchConnectionRequest, _options) {
    const result = this.api.searchConnection(searchConnectionRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.6.0.cl or later   Gets custom actions configured on the cluster.  Requires `DEVELOPER` (**Has Developer privilege**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `DEVELOPER` (**Has developer privilege**) privilege is required.      
   * @param searchCustomActionsRequest 
   */
  searchCustomActions(searchCustomActionsRequest, _options) {
    const result = this.api.searchCustomActions(searchCustomActionsRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.0.0.cl or later   Generates an Answer from a given data source.  Requires at least view access to the data source object (Worksheet or View).  #### Usage guidelines  To search data, specify the data source GUID in `logical_table_identifier`. The data source can be a Worksheet, View, Table, or SQL view.  Pass search tokens in the `query_string` attribute in the API request as shown in the following example:  ``` {   \"query_string\": \"[sales] by [store]\",   \"logical_table_identifier\": \"cd252e5c-b552-49a8-821d-3eadaa049cca\", } ```  For more information about the `query_string` format and data source attribute, see [Search data API](https://developers.thoughtspot.com/docs/fetch-data-and-report-apis#_search_data_api).    The `record_size` attribute determines the number of records to retrieve in an API call. For more information about pagination, record size, and maximum row limit, see [Pagination and record size settings](https://developers.thoughtspot.com/docs/fetch-data-and-report-apis#_pagination_settings_for_data_and_report_api).       
   * @param searchDataRequest 
   */
  searchData(searchDataRequest, _options) {
    const result = this.api.searchData(searchDataRequest, _options);
    return result.toPromise();
  }
  /**
   *  Version: 10.10.0.cl or later   Search the email customisation configuration if any set for the ThoughtSpot system.  #### Pre-requisites  Requires `DEVELOPER` (**has developer privilege**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `_Has developer privilege` privilege is required. Coms should be enabled on the cluster.  #### Usage guidelines  To get the list of configurations set in the cluster/org.      
   */
  searchEmailCustomisation(_options) {
    const result = this.api.searchEmailCustomisation(_options);
    return result.toPromise();
  }
  /**
   *   Version: 9.0.0.cl or later   Gets a list of metadata objects available on the ThoughtSpot system.  This API endpoint is available to all users who have view access to the object. Users with `ADMINISTRATION` (**Can administer ThoughtSpot**) privileges can view data for all metadata objects, including users and groups.  #### Usage guidelines  - To get all metadata objects, send the API request without any attributes. - To get metadata objects of a specific type, set the `type` attribute. For example, to fetch a Worksheet, set the type as `LOGICAL_TABLE`. - To filter metadata objects within type `LOGICAL_TABLE`, set the `subtypes` attribute. For example, to fetch a Worksheet, set the type as `LOGICAL_TABLE` & subtypes as `[WORKSHEET]`. - To get a specific metadata object, specify the GUID. - To customize your search and filter the API response, you can use several parameters.   You can search for objects created or modified by specific users, by tags applied to the objects, or by using the include parameters like `include_auto_created_objects`, `include_dependent_objects`, `include_headers`, `include_incomplete_objects`, and so on.   You can also define sorting options to sort the data retrieved in the API response. - To get discoverable objects when linientmodel is enabled you can use `include_discoverable_objects` as true else false. Default value is true. - For liveboard metadata type, to get the newer format, set the `liveboard_response_format` as V2. Default value is V1.  **NOTE**: The following parameters support pagination of metadata records:  - `tag_identifiers` - `type` - `subtypes` - `created_by_user_identifiers` - `modified_by_user_identifiers` - `owned_by_user_identifiers` - `exclude_objects` - `include_auto_created_objects` - `favorite_object_options` If you are using other parameters to search metadata, set `record_size` to `-1` and `record_offset` to `0`.      
   * @param searchMetadataRequest 
   */
  searchMetadata(searchMetadataRequest, _options) {
    const result = this.api.searchMetadata(searchMetadataRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.0.0.cl or later   Gets a list of Orgs configured on the ThoughtSpot system. To get details of a specific Org, specify the Org ID or name. You can also pass parameters such as status, visibility, and user identifiers to get a specific list of Orgs.  Requires cluster administration (**Can administer Org**) privileges. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `ORG_ADMINISTRATION` (**Can manage Orgs**) privilege is required.      
   * @param searchOrgsRequest 
   */
  searchOrgs(searchOrgsRequest, _options) {
    const result = this.api.searchOrgs(searchOrgsRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.5.0.cl or later   Gets a list of Role objects from the ThoughtSpot system.  Available if [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance. To search for Roles, the `ROLE_ADMINISTRATION` (**Can manage roles**) privilege is required.  To get details of a specific Role object, specify the GUID or name. You can also filter the API response based on user group and Org identifiers, privileges assigned to the Role, and deprecation status.      
   * @param searchRolesRequest 
   */
  searchRoles(searchRolesRequest, _options) {
    const result = this.api.searchRoles(searchRolesRequest, _options);
    return result.toPromise();
  }
  /**
   *  Search Schedules    Version: 9.4.0.cl or later   Gets a list of scheduled jobs configured for a Liveboard.  To get details of a specific scheduled job, specify the name or GUID of the scheduled job.  Requires at least view access to Liveboards.  **NOTE**: When filtering schedules by parameters other than `metadata`, set `record_size` to `-1` and `record_offset` to `0` for accurate results.      
   * @param searchSchedulesRequest 
   */
  searchSchedules(searchSchedulesRequest, _options) {
    const result = this.api.searchSchedules(searchSchedulesRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.0.0.cl or later   Gets a list of tag objects available on the ThoughtSpot system. To get details of a specific tag object, specify the GUID or name.  Any authenticated user can search for tag objects.      
   * @param searchTagsRequest 
   */
  searchTags(searchTagsRequest, _options) {
    const result = this.api.searchTags(searchTagsRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.0.0.cl or later   Gets a list of user group objects from the ThoughtSpot system.  To get details of a specific user group, specify the user group GUID or name. You can also filter the API response based on User ID, Org ID, Role ID, type of group, sharing visibility, privileges assigned to the group, and the Liveboard IDs assigned to the users in the group.  Available to all users. Users with `ADMINISTRATION` (**Can administer ThoughtSpot**) privileges can view all users properties.  If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `GROUP_ADMINISTRATION` (**Can manage groups**) privilege is required.  **NOTE**: If you do not get precise results, try setting `record_size` to `-1` and `record_offset` to `0`.      
   * @param searchUserGroupsRequest 
   */
  searchUserGroups(searchUserGroupsRequest, _options) {
    const result = this.api.searchUserGroups(searchUserGroupsRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.0.0.cl or later   Gets a list of users available on the ThoughtSpot system.  To get details of a specific user, specify the user GUID or name. You can also filter the API response based on groups, Org ID, user visibility, account status, user type, and user preference settings and favorites.  Available to all users. Users with `ADMINISTRATION` (**Can administer ThoughtSpot**) privileges can view all users properties. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `USER_ADMINISTRATION` (**Can manage users**) privilege is required.  **NOTE**: If the API returns an empty list, consider increasing the value of the `record_size` parameter. To search across all available users, set `record_size` to `-1`.      
   * @param searchUsersRequest 
   */
  searchUsers(searchUsersRequest, _options) {
    const result = this.api.searchUsers(searchUsersRequest, _options);
    return result.toPromise();
  }
  /**
   *  Search variables   Version: 10.9.0.cl or later   Allows searching for variables in ThoughtSpot.  Requires ADMINISTRATION role.  The API endpoint supports searching variables by: * Variable identifier (ID or name) * Variable type * Name pattern (case-insensitive, supports % for wildcard)  The search results can be formatted in three ways: * METADATA_ONLY - Returns only variable metadata (default) * METADATA_AND_VALUES - Returns variable metadata and values * EDITABLE_METADATA_AND_VALUES - Returns only editable variable metadata and values       
   * @param searchVariablesRequest 
   */
  searchVariables(searchVariablesRequest, _options) {
    const result = this.api.searchVariables(searchVariablesRequest, _options);
    return result.toPromise();
  }
  /**
   *  Version: 10.4.0.cl or later   Allows sending a follow-up message to an ongoing conversation within the context of the metadata model.  Requires at least view access to the metadata object specified in the request.  #### Usage guidelines  The API requires you to specify the `conversation_identifier` in the request path, and a `metadata_identifier` and `message` string in the request body.  If the API request is successful, ThoughtSpot returns the session ID, tokens used in the conversation, and visualization type.  > ###### Note: > * This endpoint is currently in Beta. Breaking changes may be introduced before the endpoint is made Generally Available. > * This endpoint requires Spotter - please contact ThoughtSpot support to enable Spotter on your cluster.      
   * @param conversationIdentifier Unique identifier of the conversation.
   * @param sendMessageRequest 
   */
  sendMessage(conversationIdentifier, sendMessageRequest, _options) {
    const result = this.api.sendMessage(conversationIdentifier, sendMessageRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.0.0.cl or later   Allows sharing one or several metadata objects with users and groups in ThoughtSpot.  Requires edit access to the metadata object.  The API endpoint allows sharing only the following types of metadata objects: * Liveboards * Visualizations * Answers * Worksheets * Views * Connections  You can provide `READ_ONLY` or `MODIFY` access when sharing an object with another user or group. With `READ_ONLY` access grants view access to the shared object, whereas `MODIFY` provides edit access.  To prevent a user or group from accessing the shared object, specify the GUID or name of the principal and set `shareMode` to `NO_ACCESS`.      
   * @param shareMetadataRequest 
   */
  shareMetadata(shareMetadataRequest, _options) {
    const result = this.api.shareMetadata(shareMetadataRequest, _options);
    return result.toPromise();
  }
  /**
   *  Version: 10.4.0.cl or later   Processes a natural language query and returns an AI-generated response based on a specified data model.  Requires at least view access to the metadata object specified in the request.  > ###### Note: > * This endpoint is currently in Beta. Breaking changes may be introduced before the endpoint is made Generally Available. > * This endpoint requires Spotter - please contact ThoughtSpot support to enable Spotter on your cluster.      
   * @param singleAnswerRequest 
   */
  singleAnswer(singleAnswerRequest, _options) {
    const result = this.api.singleAnswer(singleAnswerRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.0.0.cl or later   Removes the tags applied to a Liveboard, Answer, Table, or Worksheet.  Requires edit access to the metadata object.      
   * @param assignTagRequest 
   */
  unassignTag(assignTagRequest, _options) {
    const result = this.api.unassignTag(assignTagRequest, _options);
    return result.toPromise();
  }
  /**
   *  Remove parameterization from fields in metadata objects.   Version: 10.9.0.cl or later   Allows removing parameterization from fields in metadata objects in ThoughtSpot.  Requires appropriate permissions to modify the metadata object.  The API endpoint allows unparameterizing the following types of metadata objects: * Logical Tables * Connections  For a Logical Table the field type must be `ATTRIBUTE` and field name can be one of: * databaseName * schemaName * tableName  For a Connection the field type is always `CONNECTION_PROPERTY`. We use the field_name in this case to specify the exact property of a connection which needs to be unparameterized.      
   * @param unparameterizeMetadataRequest 
   */
  unparameterizeMetadata(unparameterizeMetadataRequest, _options) {
    const result = this.api.unparameterizeMetadata(unparameterizeMetadataRequest, _options);
    return result.toPromise();
  }
  /**
   *  Version: 10.9.0.cl or later   Allows unpublishing metadata objects from organizations in ThoughtSpot.  Requires ADMINISTRATION role and TENANT scope.  The API endpoint allows unpublishing the following types of metadata objects: * Liveboards * Answers * Logical Tables  When unpublishing objects, you can: * Include dependencies by setting `include_dependencies` to true - this will unpublish all dependent objects if no other published object is using them * Force unpublish by setting `force` to true - this will break all dependent objects in the unpublished organizations      
   * @param unpublishMetadataRequest 
   */
  unpublishMetadata(unpublishMetadataRequest, _options) {
    const result = this.api.unpublishMetadata(unpublishMetadataRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.2.0.cl or later   Updates Git repository configuration settings.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance on your instance, the `CAN_MANAGE_VERSION_CONTROL` (**Can toggle version control for objects**) privilege.      
   * @param updateConfigRequest 
   */
  updateConfig(updateConfigRequest, _options) {
    const result = this.api.updateConfig(updateConfigRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.2.0.cl or later   **Important**: This endpoint is deprecated and will be removed from ThoughtSpot in September 2025. ThoughtSpot strongly recommends using the [Update connection V2](#/http/api-endpoints/connections/update-connection-v2) endpoint to update your connection objects.  #### Usage guidelines  Updates a connection object.    Requires `DATAMANAGEMENT` (**Can manage data**) and edit permissions to the connection object, or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) privilege is required.  To update a connection object, pass these parameters in your API request:  1. GUID of the connection object. 2. If you are updating tables or database schema of a connection object:    a. Add the updated JSON map of metadata with database, schema, and tables in `data_warehouse_config`.    b. Set `validate` to `true`. 3. If you are updating a configuration attribute, connection name, or description, you can set `validate` to `false`.      
   * @param updateConnectionRequest 
   */
  updateConnection(updateConnectionRequest, _options) {
    const result = this.api.updateConnection(updateConnectionRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 10.4.0.cl or later   Updates a connection object.  Requires `DATAMANAGEMENT` (**Can manage data**) and edit permissions to the connection object, or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) privilege is required.  To update a connection object, pass these parameters in your API request:  1. GUID of the connection object. 2. If you are updating tables or database schema of a connection object:    a. Add the updated JSON map of metadata with database, schema, and tables in `data_warehouse_config`.    b. Set `validate` to `true`. 3. If you are updating a configuration attribute, connection name, or description, you can set `validate` to `false`.      
   * @param connectionIdentifier Unique ID or name of the connection.
   * @param updateConnectionV2Request 
   */
  updateConnectionV2(connectionIdentifier, updateConnectionV2Request, _options) {
    const result = this.api.updateConnectionV2(connectionIdentifier, updateConnectionV2Request, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.6.0.cl or later   Updates a custom action.  Requires `DEVELOPER` (**Has Developer privilege**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `DEVELOPER` (**Has developer privilege**) privilege is required.  #### Usage Guidelines  The API allows you to modify the following properties:  * Name of the custom action * Action availability to groups * Association to metadata objects * Authentication settings for a URL-based action  For more information, see [Custom actions](https://developers.thoughtspot.com/docs/custom-action-intro).      
   * @param customActionIdentifier Unique ID or name of the custom action.
   * @param updateCustomActionRequest 
   */
  updateCustomAction(customActionIdentifier, updateCustomActionRequest, _options) {
    const result = this.api.updateCustomAction(customActionIdentifier, updateCustomActionRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.9.0.cl or later   Updates a DBT connection object.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege or `DATAMANAGEMENT` (**Can manage data ThoughtSpot**) privilege, along with an existing DBT connection. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the following data control privileges may be required:  - `CAN_MANAGE_CUSTOM_CALENDAR`(**Can manage custom calendars**) - `CAN_CREATE_OR_EDIT_CONNECTIONS` (**Can create/edit Connections**) - `CAN_MANAGE_WORKSHEET_VIEWS_TABLES` (**Can manage data models**)  #### About update DBT connection You can modify DBT connection object properties such as embrace connection name, embrace database name, import type, account identifier, access token, project identifier and environment (or) embrace connection, embrace database name, import type, file_content settings.      
   * @param updateDbtConnectionRequest 
   */
  updateDbtConnection(updateDbtConnectionRequest, _options) {
    const result = this.api.updateDbtConnection(updateDbtConnectionRequest, _options);
    return result.toPromise();
  }
  /**
   *  Update header attributes for a given list of header objects.   Version: 10.6.0.cl or later   ## Prerequisites - **Privileges Required:**   - `DATAMANAGEMENT` (Can manage data) or `ADMINISTRATION` (Can administer ThoughtSpot). - **Additional Privileges (if RBAC is enabled):**   - `ORG_ADMINISTRATION` (Can manage orgs).  ---  ## Usage Guidelines  ### Parameters  1. **headers_update**      - **Description:** List of header objects with their attributes to be updated. Each object contains a list of attributes to be updated in the header.    - **Usage:**       - You must provide either `identifier` or `obj_identifier`, but not both. Both fields cannot be empty.       - When `org_identifier` is set to `-1`, only the `identifier` value is accepted; `obj_identifier` is not allowed.  2. **org_identifier**      - **Description:** GUID (Globally Unique Identifier) or name of the organization.      - **Usage:**      - Leaving this field empty assumes that the changes should be applied to the current organization       - Provide `org_guid` or `org_name` to uniquely identify the organization where changes need to be applied. .      - Provide `-1` if changes have to be applied across all the org.  ---  ## Note Currently, this API is enabled only for updating the `obj_identifier` attribute. Only `text` will be allowed in attribute\'s value.  ## Best Practices  1. **Backup Before Conversion:**      Always export metadata as a backup before initiating the update process  ---  ## Examples  ### Only `identifier` is given  ```json {   \"headers_update\":   [     {       \"identifier\": \"guid_1\",       \"obj_identifier\": \"\",       \"type\": \"LOGICAL_COLUMN\",       \"attributes\":       [         {           \"name\": \"obj_id\",           \"value\": \"custom_object_id\"         }       ]     }   ],   \"org_identifier\": \"orgGuid\" } ```  ### Only `obj_identifier` is given ```json {   \"headers_update\":   [     {       \"obj_identifier\": \"custom_object_id\",       \"type\": \"ANSWER\",       \"attributes\":       [         {           \"name\": \"obj_id\",           \"value\": \"custom_object_id\"         }       ]     }   ],   \"org_identifier\": \"orgName\" } ```  ### Executing update for all org `-1` ```json {   \"headers_update\":   [     {       \"identifier\": \"guid_1\",       \"type\": \"ANSWER\",       \"attributes\":       [         {           \"name\": \"obj_id\",           \"value\": \"custom_object_id\"         }       ]     }   ],   \"org_identifier\": -1 } ```  ### Optional `type` is not provided ```json {   \"headers_update\":   [     {       \"identifier\": \"guid_1\",       \"attributes\":       [         {           \"name\": \"obj_id\",           \"value\": \"custom_object_id\"         }       ]     }   ],   \"org_identifier\": -1 } ```     
   * @param updateMetadataHeaderRequest 
   */
  updateMetadataHeader(updateMetadataHeaderRequest, _options) {
    const result = this.api.updateMetadataHeader(updateMetadataHeaderRequest, _options);
    return result.toPromise();
  }
  /**
   *  Update object IDs for given metadata objects.   Version: 10.8.0.cl or later   ## Prerequisites - **Privileges Required:**   - `DATAMANAGEMENT` (Can manage data) or `ADMINISTRATION` (Can administer ThoughtSpot). - **Additional Privileges (if RBAC is enabled):**   - `ORG_ADMINISTRATION` (Can manage orgs).  ---  ## Usage Guidelines  ### Parameters  1. **metadata**      - **Description:** List of metadata objects to update their object IDs.    - **Usage:**       - Use either `current_obj_id` alone OR use `metadata_identifier` with `type` (when needed).       - When using `metadata_identifier`, the `type` field is required if using a name instead of a GUID.       - The `new_obj_id` field is always required.  ---  ## Note This API is specifically designed for updating object IDs of metadata objects. It internally uses the header update mechanism to perform the changes.  ## Best Practices  1. **Backup Before Update:**      Always export metadata as a backup before initiating the update process.  2. **Validation:**    - When using `current_obj_id`, ensure it matches the existing object ID exactly.    - When using `metadata_identifier` with a name, ensure the `type` is specified correctly.    - Verify that the `new_obj_id` follows your naming conventions and is unique within your system.  ---  ## Examples  ### Using current_obj_id ```json {   \"metadata\": [     {       \"current_obj_id\": \"existing_object_id\",       \"new_obj_id\": \"new_object_id\"     }   ] } ```  ### Using metadata_identifier with GUID ```json {   \"metadata\": [     {       \"metadata_identifier\": \"01234567-89ab-cdef-0123-456789abcdef\",       \"new_obj_id\": \"new_object_id\"     }   ] } ```  ### Using metadata_identifier with name and type ```json {   \"metadata\": [     {       \"metadata_identifier\": \"My Answer\",       \"type\": \"ANSWER\",       \"new_obj_id\": \"new_object_id\"     }   ] } ```  ### Multiple objects update ```json {   \"metadata\": [     {       \"current_obj_id\": \"existing_object_id_1\",       \"new_obj_id\": \"new_object_id_1\"     },     {       \"metadata_identifier\": \"My Worksheet\",       \"type\": \"LOGICAL_TABLE\",       \"new_obj_id\": \"new_object_id_2\"     }   ] } ```      
   * @param updateMetadataObjIdRequest 
   */
  updateMetadataObjId(updateMetadataObjIdRequest, _options) {
    const result = this.api.updateMetadataObjId(updateMetadataObjIdRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.0.0.cl or later   Updates an Org object. You can modify Org properties such as name, description, and user associations.  Requires cluster administration (**Can administer Org**) privileges. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `ORG_ADMINISTRATION` (**Can manage Orgs**) privilege is required.      
   * @param orgIdentifier ID or name of the Org
   * @param updateOrgRequest 
   */
  updateOrg(orgIdentifier, updateOrgRequest, _options) {
    const result = this.api.updateOrg(orgIdentifier, updateOrgRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.5.0.cl or later   Updates the properties of a Role object.  Available only if [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance. To update a Role, the `ROLE_ADMINISTRATION` (**Can manage roles**) privilege is required.      
   * @param roleIdentifier Unique ID or name of the Role.
   * @param updateRoleRequest 
   */
  updateRole(roleIdentifier, updateRoleRequest, _options) {
    const result = this.api.updateRole(roleIdentifier, updateRoleRequest, _options);
    return result.toPromise();
  }
  /**
   *  Update schedule.    Version: 9.4.0.cl or later   Updates a scheduled Liveboard job.  Requires at least edit access to Liveboards. To update a schedule on behalf of another user, you need `ADMINISTRATION` (**Can administer Org**) or `JOBSCHEDULING` (**Can schedule for others**) privilege and edit access to the Liveboard. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `JOBSCHEDULING` (**Can schedule for others**) privilege is required.  The API endpoint allows you to pause a scheduled job, change the status of a paused job. You can also edit the recipients list, frequency of the job, format of the file to send to the recipients in email notifications, PDF options, and time zone setting.      
   * @param scheduleIdentifier Unique ID or name of the schedule.
   * @param updateScheduleRequest 
   */
  updateSchedule(scheduleIdentifier, updateScheduleRequest, _options) {
    const result = this.api.updateSchedule(scheduleIdentifier, updateScheduleRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.2.0.cl or later   Updates the current configuration of the cluster. You must send the configuration data in JSON format.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privileges. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `APPLICATION_ADMINISTRATION` (**Can manage application settings**) privilege is required.      
   * @param updateSystemConfigRequest 
   */
  updateSystemConfig(updateSystemConfigRequest, _options) {
    const result = this.api.updateSystemConfig(updateSystemConfigRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.0.0.cl or later   Updates a tag object.  You can modify the `name` and `color` properties of a tag object.    Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `TAGMANAGEMENT` (**Can manage tags**) privilege is required to create, edit, and delete tags.      
   * @param tagIdentifier Name or Id of the tag.
   * @param updateTagRequest 
   */
  updateTag(tagIdentifier, updateTagRequest, _options) {
    const result = this.api.updateTag(tagIdentifier, updateTagRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.0.0.cl or later   Updates the properties of a user object.  You can modify user properties such as username, email, and share notification settings. You can also assign new groups and Orgs, remove the user from a group or Org, reset password, and modify user preferences.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `USER_ADMINISTRATION` (**Can manage users**) privilege is required.      
   * @param userIdentifier GUID / name of the user
   * @param updateUserRequest 
   */
  updateUser(userIdentifier, updateUserRequest, _options) {
    const result = this.api.updateUser(userIdentifier, updateUserRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.0.0.cl or later   Updates the properties of a group object in ThoughtSpot.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `GROUP_ADMINISTRATION` (**Can manage groups**) privilege is required.  #### Supported operations  This API endpoint lets you perform the following operations in a single API request:  * Edit [privileges](https://developers.thoughtspot.com/docs/?pageid=api-user-management#group-privileges) * Add or remove users * Change sharing visibility settings * Add or remove sub-groups * Assign a default Liveboard  or update the existing settings      
   * @param groupIdentifier GUID or name of the group.
   * @param updateUserGroupRequest 
   */
  updateUserGroup(groupIdentifier, updateUserGroupRequest, _options) {
    const result = this.api.updateUserGroup(groupIdentifier, updateUserGroupRequest, _options);
    return result.toPromise();
  }
  /**
   *  Update a variable\'s properties   Version: 10.9.0.cl or later   Allows updating a variable\'s properties in ThoughtSpot.  Requires ADMINISTRATION role and TENANT scope.  The API endpoint allows updating: * The variable name * The variable values  When updating variable values, you need to specify: * The operation to perform (ADD, REPLACE, REMOVE) * The new values to add/replace/remove  When the operation is ADD, a value any pre-existing value with the same set of constraints will be replaced. When the operation is REPLACE, all values of the variable are replaced with the values specified. When the operation is REMOVE, all values with the given set of conditions are removed.      
   * @param identifier Unique id or name of the variable to update.
   * @param updateVariableRequest 
   */
  updateVariable(identifier, updateVariableRequest, _options) {
    const result = this.api.updateVariable(identifier, updateVariableRequest, _options);
    return result.toPromise();
  }
  /**
   *  Update values for multiple variables   Version: 10.9.0.cl or later   Allows updating values for multiple variables in ThoughtSpot.  Requires ADMINISTRATION role.  The API endpoint allows: * Adding new values to variables * Replacing existing values * Deleting values from variables  When updating variable values, you need to specify: * The variable identifiers * The values to add/replace/remove for each variable * The operation to perform (ADD, REPLACE, REMOVE)  Behaviour based on operation type: * ADD - Adds values to the variable. Any pre-existing values with the same conditions are replaced. * REPLACE - Replaces all values of a given org with the current set of values. * REMOVE - Removes any values which match the set of conditions of the variables.      
   * @param updateVariableValuesRequest 
   */
  updateVariableValues(updateVariableValuesRequest, _options) {
    const result = this.api.updateVariableValues(updateVariableValuesRequest, _options);
    return result.toPromise();
  }
  /**
   *  Version: 10.10.0.cl or later   Validates the email customisation configuration if any set for the ThoughtSpot system.  #### Pre-requisites  Requires `DEVELOPER` (**has developer privilege**) or `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `_Has developer privilege` privilege is required. Coms should be enabled on the cluster.      
   */
  validateEmailCustomisation(_options) {
    const result = this.api.validateEmailCustomisation(_options);
    return result.toPromise();
  }
  /**
   *   Version: 9.2.0.cl or later   Validates the content of your source branch against the objects in your destination environment.  Before merging content from your source branch to the destination branch, run this API operation from your destination environment and ensure that the changes from the source branch function in the destination environment.  Requires `DATAMANAGEMENT` (**Can manage data**) privilege.  If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance on your instance, the `CAN_MANAGE_WORKSHEET_VIEWS_TABLES` (**Can manage data models**) privilege and edit access to the metadata objects.      
   * @param validateMergeRequest 
   */
  validateMerge(validateMergeRequest, _options) {
    const result = this.api.validateMerge(validateMergeRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.12.0.cl or later    Validates the authentication token specified in the API request.  If your token is not valid, [Get a new token](#/http/api-endpoints/authentication/get-full-access-token).      
   * @param validateTokenRequest 
   */
  validateToken(validateTokenRequest, _options) {
    const result = this.api.validateToken(validateTokenRequest, _options);
    return result.toPromise();
  }
};
var PromiseUsersApi = class {
  constructor(configuration, requestFactory, responseProcessor) {
    this.api = new ObservableUsersApi(configuration, requestFactory, responseProcessor);
  }
  /**
   *   Version: 9.7.0.cl or later   Activates a deactivated user account.  Requires `ADMINISTRATION` (**Can administer Thoughtspot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `USER_ADMINISTRATION` (**Can manage users**) privilege is required.  To activate an inactive user account, the API request body must include the following information:  - Username or the GUID of the user account. - Auth token generated for the deactivated user. The auth token is sent in the API response when a user is deactivated. - Password for the user account.      
   * @param activateUserRequest 
   */
  activateUser(activateUserRequest, _options) {
    const result = this.api.activateUser(activateUserRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.0.0.cl or later   Updates the current password of the user.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `USER_ADMINISTRATION` (**Can manage users**) privilege is required.      
   * @param changeUserPasswordRequest 
   */
  changeUserPassword(changeUserPasswordRequest, _options) {
    const result = this.api.changeUserPassword(changeUserPasswordRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.0.0.cl or later   Creates a user in ThoughtSpot.  The API endpoint allows you to configure several user properties such as email address, account status, share notification preferences, and sharing visibility. You can provision the user to [groups](https://docs.thoughtspot.com/cloud/latest/groups-privileges) and [Orgs](https://docs.thoughtspot.com/cloud/latest/orgs-overview). You can also add Liveboard, Answer, and Worksheet objects to the user’s favorites list, assign a default Liveboard for the user, and set user preferences.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `USER_ADMINISTRATION` (**Can manage users**) privilege is required.      
   * @param createUserRequest 
   */
  createUser(createUserRequest, _options) {
    const result = this.api.createUser(createUserRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.7.0.cl or later   Deactivates a user account.  Requires `ADMINISTRATION` (**Can administer Thoughtspot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `USER_ADMINISTRATION` (**Can manage users**) privilege is required.  To deactivate a user account, the API request body must include the following information:  - Username or the GUID of the user account - Base URL of the ThoughtSpot instance  If the API request is successful, ThoughtSpot returns the activation URL in the response. The activation URL is valid for 14 days and can be used to re-activate the account and reset the password of the deactivated account.      
   * @param deactivateUserRequest 
   */
  deactivateUser(deactivateUserRequest, _options) {
    const result = this.api.deactivateUser(deactivateUserRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.0.0.cl or later   Deletes a user from the ThoughtSpot system.  If you want to remove a user from a specific Org but not from ThoughtSpot, update the group and Org mapping properties of the user object via a POST API call to the [/api/rest/2.0/users/{user_identifier}/update](#/http/api-endpoints/users/update-user) endpoint.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `USER_ADMINISTRATION` (**Can manage users**) privilege is required.      
   * @param userIdentifier GUID / name of the user
   */
  deleteUser(userIdentifier, _options) {
    const result = this.api.deleteUser(userIdentifier, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.0.0.cl or later   Enforces logout on current user sessions.    Use this API with caution as it may invalidate active user sessions and force users to re-login. Make sure you specify the usernames or GUIDs. If you pass null values in the API call, all user sessions on your cluster become invalid, and the users are forced to re-login.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `USER_ADMINISTRATION` (**Can manage users**) privilege is required.      
   * @param forceLogoutUsersRequest 
   */
  forceLogoutUsers(forceLogoutUsersRequest, _options) {
    const result = this.api.forceLogoutUsers(forceLogoutUsersRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.0.0.cl or later   Imports user data from external databases into ThoughtSpot. During the user import operation:  * If the specified users are not available in ThoughtSpot, the users are created and assigned a default password. Defining a `default_password` in the API request is optional. * If `delete_unspecified_users` is set to `true`, the users not specified in the API request, excluding the `tsadmin`, `guest`, `system` and `su` users, are deleted. * If the specified user objects are already available in ThoughtSpot, the object properties are updated and synchronized as per the input data in the API request.  A successful API call returns the object that represents the changes made in the ThoughtSpot system.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `USER_ADMINISTRATION` (**Can manage users**) privilege is required.      
   * @param importUsersRequest 
   */
  importUsers(importUsersRequest, _options) {
    const result = this.api.importUsers(importUsersRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.0.0.cl or later   Resets the password of a user account. Administrators can reset password on behalf of a user.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `USER_ADMINISTRATION` (**Can manage users**) privilege is required.      
   * @param resetUserPasswordRequest 
   */
  resetUserPassword(resetUserPasswordRequest, _options) {
    const result = this.api.resetUserPassword(resetUserPasswordRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.0.0.cl or later   Gets a list of users available on the ThoughtSpot system.  To get details of a specific user, specify the user GUID or name. You can also filter the API response based on groups, Org ID, user visibility, account status, user type, and user preference settings and favorites.  Available to all users. Users with `ADMINISTRATION` (**Can administer ThoughtSpot**) privileges can view all users properties. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `USER_ADMINISTRATION` (**Can manage users**) privilege is required.  **NOTE**: If the API returns an empty list, consider increasing the value of the `record_size` parameter. To search across all available users, set `record_size` to `-1`.      
   * @param searchUsersRequest 
   */
  searchUsers(searchUsersRequest, _options) {
    const result = this.api.searchUsers(searchUsersRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.0.0.cl or later   Updates the properties of a user object.  You can modify user properties such as username, email, and share notification settings. You can also assign new groups and Orgs, remove the user from a group or Org, reset password, and modify user preferences.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege. If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance, the `USER_ADMINISTRATION` (**Can manage users**) privilege is required.      
   * @param userIdentifier GUID / name of the user
   * @param updateUserRequest 
   */
  updateUser(userIdentifier, updateUserRequest, _options) {
    const result = this.api.updateUser(userIdentifier, updateUserRequest, _options);
    return result.toPromise();
  }
};
var PromiseVariableApi = class {
  constructor(configuration, requestFactory, responseProcessor) {
    this.api = new ObservableVariableApi(configuration, requestFactory, responseProcessor);
  }
  /**
   *  Create a variable which can be used for parameterizing metadata objects   Version: 10.9.0.cl or later   Allows creating a variable which can be used for parameterizing metadata objects in ThoughtSpot.  Requires ADMINISTRATION role and TENANT scope.  The API endpoint supports the following types of variables: * CONNECTION_PROPERTY - For connection properties * TABLE_MAPPING - For table mappings * CONNECTION_PROPERTY_PER_PRINCIPAL - For connection properties per principal. In order to use this please contact support to enable this.  When creating a variable, you need to specify: * The variable type * A unique name for the variable * Whether the variable contains sensitive values (defaults to false) * The variable values (optional)  The operation will fail if: * The user lacks required permissions * The variable name already exists * The variable type is invalid * The variable values are invalid for the specified type       
   * @param createVariableRequest 
   */
  createVariable(createVariableRequest, _options) {
    const result = this.api.createVariable(createVariableRequest, _options);
    return result.toPromise();
  }
  /**
   *  Delete a variable   Version: 10.9.0.cl or later   Allows deleting a variable from ThoughtSpot.  Requires ADMINISTRATION role and TENANT scope.  The API endpoint requires: * The variable identifier (ID or name)  The operation will fail if: * The user lacks required permissions * The variable doesn\'t exist * The variable is being used by other objects      
   * @param identifier Unique id or name of the variable
   */
  deleteVariable(identifier, _options) {
    const result = this.api.deleteVariable(identifier, _options);
    return result.toPromise();
  }
  /**
   *  Search variables   Version: 10.9.0.cl or later   Allows searching for variables in ThoughtSpot.  Requires ADMINISTRATION role.  The API endpoint supports searching variables by: * Variable identifier (ID or name) * Variable type * Name pattern (case-insensitive, supports % for wildcard)  The search results can be formatted in three ways: * METADATA_ONLY - Returns only variable metadata (default) * METADATA_AND_VALUES - Returns variable metadata and values * EDITABLE_METADATA_AND_VALUES - Returns only editable variable metadata and values       
   * @param searchVariablesRequest 
   */
  searchVariables(searchVariablesRequest, _options) {
    const result = this.api.searchVariables(searchVariablesRequest, _options);
    return result.toPromise();
  }
  /**
   *  Update a variable\'s properties   Version: 10.9.0.cl or later   Allows updating a variable\'s properties in ThoughtSpot.  Requires ADMINISTRATION role and TENANT scope.  The API endpoint allows updating: * The variable name * The variable values  When updating variable values, you need to specify: * The operation to perform (ADD, REPLACE, REMOVE) * The new values to add/replace/remove  When the operation is ADD, a value any pre-existing value with the same set of constraints will be replaced. When the operation is REPLACE, all values of the variable are replaced with the values specified. When the operation is REMOVE, all values with the given set of conditions are removed.      
   * @param identifier Unique id or name of the variable to update.
   * @param updateVariableRequest 
   */
  updateVariable(identifier, updateVariableRequest, _options) {
    const result = this.api.updateVariable(identifier, updateVariableRequest, _options);
    return result.toPromise();
  }
  /**
   *  Update values for multiple variables   Version: 10.9.0.cl or later   Allows updating values for multiple variables in ThoughtSpot.  Requires ADMINISTRATION role.  The API endpoint allows: * Adding new values to variables * Replacing existing values * Deleting values from variables  When updating variable values, you need to specify: * The variable identifiers * The values to add/replace/remove for each variable * The operation to perform (ADD, REPLACE, REMOVE)  Behaviour based on operation type: * ADD - Adds values to the variable. Any pre-existing values with the same conditions are replaced. * REPLACE - Replaces all values of a given org with the current set of values. * REMOVE - Removes any values which match the set of conditions of the variables.      
   * @param updateVariableValuesRequest 
   */
  updateVariableValues(updateVariableValuesRequest, _options) {
    const result = this.api.updateVariableValues(updateVariableValuesRequest, _options);
    return result.toPromise();
  }
};
var PromiseVersionControlApi = class {
  constructor(configuration, requestFactory, responseProcessor) {
    this.api = new ObservableVersionControlApi(configuration, requestFactory, responseProcessor);
  }
  /**
   *   Version: 9.2.0.cl or later   Commits TML files of metadata objects to the Git branch configured on your instance.  Requires at least edit access to objects used in the commit operation.  Before using this endpoint to push your commits:  * Enable Git integration on your instance. * Make sure the Git repository and branch details are configured on your instance.  For more information, see [Git integration documentation](https://developers.thoughtspot.com/docs/git-integration).      
   * @param commitBranchRequest 
   */
  commitBranch(commitBranchRequest, _options) {
    const result = this.api.commitBranch(commitBranchRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.2.0.cl or later   Allows you to connect a ThoughtSpot instance to a Git repository.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance on your instance, the `CAN_MANAGE_VERSION_CONTROL` (**Can toggle version control for objects**) privilege.  You can use this API endpoint to connect your ThoughtSpot development and production environments to the development and production branches of a Git repository.  Before using this endpoint to connect your ThoughtSpot instance to a Git repository, check the following prerequisites:  * You have a Git repository. If you are using GitHub, make sure you have a valid account and an access token to connect ThoughtSpot to GitHub. For information about generating a token, see [GitHub Documentation](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens).  * Your access token has `repo` scope that grants full access to public and private repositories. * Your Git repository has a branch that can be configured as a default branch in ThoughtSpot.  For more information, see [Git integration documentation](https://developers.thoughtspot.com/docs/?pageid=git-integration).  **Note**: ThoughtSpot supports only GitHub / GitHub Enterprise for CI/CD.      
   * @param createConfigRequest 
   */
  createConfig(createConfigRequest, _options) {
    const result = this.api.createConfig(createConfigRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.2.0.cl or later   Deletes Git repository configuration from your ThoughtSpot instance.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance on your instance, the `CAN_MANAGE_VERSION_CONTROL` (**Can toggle version control for objects**) privilege.      
   * @param deleteConfigRequest 
   */
  deleteConfig(deleteConfigRequest, _options) {
    const result = this.api.deleteConfig(deleteConfigRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.2.0.cl or later   Allows you to deploy a commit and publish TML content to your ThoughtSpot instance.  Requires at least edit access to the objects used in the deploy operation.  The API deploys the head of the branch unless a `commit_id` is specified in the API request. If the branch name is not defined in the request, the default branch is considered for deploying commits.  For more information, see [Git integration documentation](https://developers.thoughtspot.com/docs/git-integration).      
   * @param deployCommitRequest 
   */
  deployCommit(deployCommitRequest, _options) {
    const result = this.api.deployCommit(deployCommitRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.2.0.cl or later   Reverts TML objects to a previous commit specified in the API request.  Requires at least edit access to objects.  In the API request, specify the `commit_id`. If the branch name is not specified in the request, the API will consider the default branch configured on your instance.  By default, the API reverts all objects. If the revert operation fails for one of the objects provided in the commit, the API returns an error and does not revert any object.  For more information, see [Git integration documentation](https://developers.thoughtspot.com/docs/git-integration).      
   * @param commitId Commit id to which the object should be reverted
   * @param revertCommitRequest 
   */
  revertCommit(commitId, revertCommitRequest, _options) {
    const result = this.api.revertCommit(commitId, revertCommitRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.2.0.cl or later   Gets a list of commits for a given metadata object.  Requires `DATAMANAGEMENT` (**Can manage data**) privilege.  If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance on your instance, the `CAN_MANAGE_WORKSHEET_VIEWS_TABLES` (**Can manage data models**) privilege and edit access to the metadata objects.      
   * @param searchCommitsRequest 
   */
  searchCommits(searchCommitsRequest, _options) {
    const result = this.api.searchCommits(searchCommitsRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.2.0.cl or later   Gets Git repository connections configured on the ThoughtSpot instance.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance on your instance, the `CAN_MANAGE_VERSION_CONTROL` (**Can toggle version control for objects**) privilege.      
   * @param searchConfigRequest 
   */
  searchConfig(searchConfigRequest, _options) {
    const result = this.api.searchConfig(searchConfigRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.2.0.cl or later   Updates Git repository configuration settings.  Requires `ADMINISTRATION` (**Can administer ThoughtSpot**) privilege.  If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance on your instance, the `CAN_MANAGE_VERSION_CONTROL` (**Can toggle version control for objects**) privilege.      
   * @param updateConfigRequest 
   */
  updateConfig(updateConfigRequest, _options) {
    const result = this.api.updateConfig(updateConfigRequest, _options);
    return result.toPromise();
  }
  /**
   *   Version: 9.2.0.cl or later   Validates the content of your source branch against the objects in your destination environment.  Before merging content from your source branch to the destination branch, run this API operation from your destination environment and ensure that the changes from the source branch function in the destination environment.  Requires `DATAMANAGEMENT` (**Can manage data**) privilege.  If [Role-Based Access Control (RBAC)](https://developers.thoughtspot.com/docs/rbac) is enabled on your instance on your instance, the `CAN_MANAGE_WORKSHEET_VIEWS_TABLES` (**Can manage data models**) privilege and edit access to the metadata objects.      
   * @param validateMergeRequest 
   */
  validateMerge(validateMergeRequest, _options) {
    const result = this.api.validateMerge(validateMergeRequest, _options);
    return result.toPromise();
  }
};

// utils/config.ts
var createBearerAuthenticationConfig = (thoughtSpotHost, paramOrTokenProvider) => {
  const serverConfig = new ServerConfiguration(
    thoughtSpotHost,
    {}
  );
  const config = createConfiguration({
    baseServer: serverConfig
  });
  const authApiClient = new PromiseAuthenticationApi(config);
  let configTokenProvider;
  if (paramOrTokenProvider.hasOwnProperty("username")) {
    configTokenProvider = {
      getToken: () => __async(void 0, null, function* () {
        const token = (yield authApiClient.getFullAccessToken(paramOrTokenProvider)).token;
        return token;
      })
    };
  } else if (typeof paramOrTokenProvider === "function") {
    configTokenProvider = {
      getToken: paramOrTokenProvider
    };
  } else {
    throw new Error("Pass a proper GetFullAccessTokenRequest or a function which returns a token");
  }
  const authConfig = {
    bearerAuth: {
      tokenProvider: configTokenProvider
    }
  };
  const globalConfig = createConfiguration({
    authMethods: authConfig,
    baseServer: serverConfig
  });
  return globalConfig;
};
var createBasicConfig = (thoughtSpotHost) => {
  const thoughtSpotServer = new ServerConfiguration(thoughtSpotHost, {});
  const basicClientConfig = createConfiguration({
    baseServer: thoughtSpotServer
  });
  return basicClientConfig;
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  AIApi,
  APIKey,
  APIKeyInput,
  AccessToken,
  ActionConfig,
  ActionConfigInput,
  ActionConfigInputCreate,
  ActionDetails,
  ActionDetailsInput,
  ActionDetailsInputCreate,
  ActivateUserRequest,
  AnswerContent,
  AnswerDataResponse,
  ApiException,
  AssignChangeAuthorRequest,
  AssignTagRequest,
  AssociateMetadataInput,
  AssociateMetadataInputCreate,
  Authentication,
  AuthenticationApi,
  AuthenticationInput,
  Author,
  AuthorMetadataTypeInput,
  AuthorType,
  BasicAuth,
  BasicAuthInput,
  BearerAuthAuthentication,
  CALLBACK,
  CALLBACKInput,
  CALLBACKInputMandatory,
  ChangeUserPasswordRequest,
  Column,
  CommitBranchRequest,
  CommitFileType,
  CommitHistoryResponse,
  CommitResponse,
  CommiterType,
  ConnectionInput,
  ConnectionsApi,
  Conversation,
  ConvertWorksheetToModelRequest,
  CopyObjectRequest,
  CreateConfigRequest,
  CreateConnectionRequest,
  CreateConnectionResponse,
  CreateConversationRequest,
  CreateCustomActionRequest,
  CreateCustomActionRequestActionDetails,
  CreateCustomActionRequestDefaultActionConfig,
  CreateEmailCustomisationRequest,
  CreateEmailCustomisationResponse,
  CreateOrgRequest,
  CreateRoleRequest,
  CreateScheduleRequest,
  CreateScheduleRequestFrequency,
  CreateScheduleRequestLiveboardOptions,
  CreateScheduleRequestPdfOptions,
  CreateScheduleRequestRecipientDetails,
  CreateTagRequest,
  CreateUserGroupRequest,
  CreateUserRequest,
  CreateVariableRequest,
  CronExpression,
  CronExpressionInput,
  CustomActionApi,
  CustomActionMetadataTypeInput,
  DBTApi,
  DataApi,
  DataWarehouseObjectInput,
  DataWarehouseObjects,
  Database,
  DbtConnectionRequest,
  DbtGenerateSyncTmlRequest,
  DbtGenerateTmlRequest,
  DbtSearchResponse,
  DeactivateUserRequest,
  DefaultActionConfig,
  DefaultActionConfigInput,
  DefaultActionConfigInputCreate,
  DefaultActionConfigSearchInput,
  DeleteConfigRequest,
  DeleteConnectionRequest,
  DeleteMetadataRequest,
  DeleteMetadataTypeInput,
  DeployCommitRequest,
  DeployResponse,
  EmailCustomisationApi,
  ErrorResponse,
  EurekaDecomposeQueryResponse,
  EurekaLLMDecomposeQueryResponse,
  EurekaLLMSuggestedQuery,
  ExcludeMetadataListItemInput,
  ExportAnswerReportRequest,
  ExportAnswerReportRequestRegionalSettings,
  ExportLiveboardReportRequest,
  ExportLiveboardReportRequestPdfOptions,
  ExportLiveboardReportRequestPngOptions,
  ExportMetadataTMLBatchedRequest,
  ExportMetadataTMLRequest,
  ExportMetadataTMLRequestExportOptions,
  ExportMetadataTypeInput,
  ExportOptions,
  FavoriteMetadataInput,
  FavoriteMetadataItem,
  FavoriteObjectOptionsInput,
  FetchAnswerDataRequest,
  FetchAnswerSqlQueryRequest,
  FetchAsyncImportTaskStatusRequest,
  FetchConnectionDiffStatusResponse,
  FetchLiveboardDataRequest,
  FetchLiveboardSqlQueryRequest,
  FetchLogsRequest,
  FetchPermissionsOfPrincipalsRequest,
  FetchPermissionsOnMetadataRequest,
  FilterRules,
  ForceLogoutUsersRequest,
  Frequency,
  FrequencyInput,
  GenericInfo,
  GetAsyncImportStatusResponse,
  GetCustomAccessTokenRequest,
  GetFullAccessTokenRequest,
  GetObjectAccessTokenRequest,
  GetTokenResponse,
  GroupObject,
  GroupsApi,
  GroupsImportListInput,
  HeaderAttributeInput,
  HeaderUpdateInput,
  HttpException,
  HttpMethod,
  ImportEPackAsyncTaskStatus,
  ImportMetadataTMLAsyncRequest,
  ImportMetadataTMLRequest,
  ImportUser,
  ImportUserGroupsRequest,
  ImportUserGroupsResponse,
  ImportUserType,
  ImportUsersRequest,
  ImportUsersResponse,
  InputEurekaNLSRequest,
  InputVariableValue,
  IsomorphicFetchHttpLibrary,
  JWTMetadataObject,
  JWTParameter,
  JWTUserOptions,
  JWTUserOptionsFull,
  LiveboardContent,
  LiveboardDataResponse,
  LiveboardOptions,
  LiveboardOptionsInput,
  LogApi,
  LogResponse,
  LoginRequest,
  MetadataApi,
  MetadataAssociationItem,
  MetadataInput,
  MetadataListItemInput,
  MetadataObject,
  MetadataResponse,
  MetadataSearchResponse,
  MetadataSearchSortOptions,
  ModelTableList,
  ObjectIDAndName,
  Org,
  OrgInfo,
  OrgResponse,
  OrgType,
  OrgsApi,
  ParameterValues,
  ParameterizeMetadataRequest,
  ParametersListItem,
  ParametersListItemInput,
  PdfOptions,
  PdfOptionsInput,
  PermissionInput,
  PermissionOfMetadataResponse,
  PermissionOfPrincipalsResponse,
  PermissionsMetadataTypeInput,
  PngOptionsInput,
  PrincipalsInput,
  PrincipalsListItem,
  PrincipalsListItemInput,
  PublishMetadataListItem,
  PublishMetadataRequest,
  QueryGetDecomposedQueryRequest,
  QueryGetDecomposedQueryRequestNlsRequest,
  RecipientDetails,
  RecipientDetailsInput,
  RegionalSettingsInput,
  RepoConfigObject,
  ReportsApi,
  RequestContext,
  RequiredError,
  ResetUserPasswordRequest,
  ResponseActivationURL,
  ResponseContext,
  ResponseCopyObject,
  ResponseCustomAction,
  ResponseFailedEntities,
  ResponseFailedEntity,
  ResponseIncompleteEntities,
  ResponseIncompleteEntity,
  ResponseMessage,
  ResponsePostUpgradeFailedEntities,
  ResponsePostUpgradeFailedEntity,
  ResponseSchedule,
  ResponseScheduleRun,
  ResponseSuccessfulEntities,
  ResponseSuccessfulEntity,
  ResponseWorksheetToModelConversion,
  RevertCommitRequest,
  RevertResponse,
  RevertedMetadata,
  RevokeTokenRequest,
  RiseGQLArgWrapper,
  RiseSetter,
  Role,
  RoleResponse,
  RolesApi,
  RuntimeFilter,
  RuntimeFilters,
  RuntimeParamOverride,
  RuntimeParameters,
  RuntimeSort,
  RuntimeSorts,
  ScheduleHistoryRunsOptionsInput,
  SchedulesApi,
  SchedulesPdfOptionsInput,
  SchemaObject,
  Scope,
  SearchCommitsRequest,
  SearchConfigRequest,
  SearchConnectionRequest,
  SearchConnectionRequestSortOptions,
  SearchConnectionResponse,
  SearchCustomActionsRequest,
  SearchCustomActionsRequestDefaultActionConfig,
  SearchDataRequest,
  SearchDataResponse,
  SearchMetadataRequest,
  SearchMetadataRequestFavoriteObjectOptions,
  SearchMetadataRequestSortOptions,
  SearchOrgsRequest,
  SearchRoleResponse,
  SearchRolesRequest,
  SearchSchedulesRequest,
  SearchSchedulesRequestHistoryRunsOptions,
  SearchSchedulesRequestSortOptions,
  SearchTagsRequest,
  SearchUserGroupsRequest,
  SearchUserGroupsRequestSortOptions,
  SearchUsersRequest,
  SearchUsersRequestSortOptions,
  SearchVariablesRequest,
  SecurityApi,
  SelfDecodingBody,
  SendMessageRequest,
  ServerConfiguration,
  ShareMetadataRequest,
  ShareMetadataTypeInput,
  SharePermissionsInput,
  SingleAnswerRequest,
  SortOptionInput,
  SortOptions,
  SortingOptions,
  SqlQuery,
  SqlQueryResponse,
  SystemApi,
  SystemConfig,
  SystemInfo,
  Table,
  Tag,
  TagMetadataTypeInput,
  TagsApi,
  ThoughtSpotRestApi,
  Token,
  TokenAccessScopeObject,
  TokenValidationResponse,
  URL,
  URLInput,
  URLInputMandatory,
  UnparameterizeMetadataRequest,
  UnpublishMetadataRequest,
  UpdateConfigRequest,
  UpdateConnectionRequest,
  UpdateConnectionV2Request,
  UpdateCustomActionRequest,
  UpdateCustomActionRequestActionDetails,
  UpdateCustomActionRequestDefaultActionConfig,
  UpdateDbtConnectionRequest,
  UpdateMetadataHeaderRequest,
  UpdateMetadataObjIdRequest,
  UpdateObjIdInput,
  UpdateOrgRequest,
  UpdateRoleRequest,
  UpdateScheduleRequest,
  UpdateScheduleRequestFrequency,
  UpdateScheduleRequestLiveboardOptions,
  UpdateScheduleRequestPdfOptions,
  UpdateScheduleRequestRecipientDetails,
  UpdateSystemConfigRequest,
  UpdateTagRequest,
  UpdateUserGroupRequest,
  UpdateUserRequest,
  UpdateVariableRequest,
  UpdateVariableValuesRequest,
  User,
  UserGroup,
  UserGroupResponse,
  UserInfo,
  UserObject,
  UserParameterOptions,
  UsersApi,
  ValidateMergeRequest,
  ValidateTokenRequest,
  Variable,
  VariableApi,
  VariableDetailInput,
  VariableValue,
  VariableValueInput,
  VersionControlApi,
  configureAuthMethods,
  createBasicConfig,
  createBearerAuthenticationConfig,
  createConfiguration,
  server1,
  servers,
  wrapHttpLibrary
});
