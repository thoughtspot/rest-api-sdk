/**
 * ThoughtSpot Public REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { HttpFile } from '../http/http';

/**
* Metadata Search Response Object.
*/
export class MetadataSearchResponse {
    /**
    * Unique identifier of the metadata.
    */
    'metadata_id'?: string | null;
    /**
    * Name of the metadata.
    */
    'metadata_name'?: string | null;
    /**
    * Type of the metadata.
    */
    'metadata_type': MetadataSearchResponseMetadataTypeEnum;
    /**
    * Details of dependent objects of the metadata objects.
    */
    'dependent_objects'?: any | null;
    /**
    * Details of incomplete information of the metadata objects if any.
    */
    'incomplete_objects'?: Array<any> | null;
    /**
    * Complete details of the metadata objects.
    */
    'metadata_detail'?: any | null;
    /**
    * Header information of the metadata objects.
    */
    'metadata_header'?: any | null;
    /**
    * Visualization header information of the metadata objects.
    */
    'visualization_headers'?: Array<any> | null;
    /**
    * Stats of the metadata object. Includes views, favorites, last_accessed.
    */
    'stats'?: any | null;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "metadata_id",
            "baseName": "metadata_id",
            "type": "string",
            "format": ""
        },
        {
            "name": "metadata_name",
            "baseName": "metadata_name",
            "type": "string",
            "format": ""
        },
        {
            "name": "metadata_type",
            "baseName": "metadata_type",
            "type": "MetadataSearchResponseMetadataTypeEnum",
            "format": ""
        },
        {
            "name": "dependent_objects",
            "baseName": "dependent_objects",
            "type": "any",
            "format": ""
        },
        {
            "name": "incomplete_objects",
            "baseName": "incomplete_objects",
            "type": "Array<any>",
            "format": ""
        },
        {
            "name": "metadata_detail",
            "baseName": "metadata_detail",
            "type": "any",
            "format": ""
        },
        {
            "name": "metadata_header",
            "baseName": "metadata_header",
            "type": "any",
            "format": ""
        },
        {
            "name": "visualization_headers",
            "baseName": "visualization_headers",
            "type": "Array<any>",
            "format": ""
        },
        {
            "name": "stats",
            "baseName": "stats",
            "type": "any",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return MetadataSearchResponse.attributeTypeMap;
    }

    public constructor() {
    }
}


export type MetadataSearchResponseMetadataTypeEnum = "LIVEBOARD" | "ANSWER" | "LOGICAL_TABLE" | "LOGICAL_COLUMN" | "CONNECTION" | "TAG" | "USER" | "USER_GROUP" | "LOGICAL_RELATIONSHIP" ;

