/*
 * ThoughtSpot Public REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.thoughtspot.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.thoughtspot.client.JSON;

/**
 * ExportAnswerReportRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-13T10:48:17.127921870Z[Etc/UTC]")
public class ExportAnswerReportRequest {
  public static final String SERIALIZED_NAME_METADATA_IDENTIFIER = "metadata_identifier";
  @SerializedName(SERIALIZED_NAME_METADATA_IDENTIFIER)
  private String metadataIdentifier;

  public static final String SERIALIZED_NAME_SESSION_IDENTIFIER = "session_identifier";
  @SerializedName(SERIALIZED_NAME_SESSION_IDENTIFIER)
  private String sessionIdentifier;

  public static final String SERIALIZED_NAME_GENERATION_NUMBER = "generation_number";
  @SerializedName(SERIALIZED_NAME_GENERATION_NUMBER)
  private Integer generationNumber;

  /**
   * Export file format.
   */
  @JsonAdapter(FileFormatEnum.Adapter.class)
  public enum FileFormatEnum {
    CSV("CSV"),
    
    PDF("PDF"),
    
    XLSX("XLSX"),
    
    PNG("PNG");

    private String value;

    FileFormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FileFormatEnum fromValue(String value) {
      for (FileFormatEnum b : FileFormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FileFormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FileFormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FileFormatEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FileFormatEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_FILE_FORMAT = "file_format";
  @SerializedName(SERIALIZED_NAME_FILE_FORMAT)
  private FileFormatEnum fileFormat = FileFormatEnum.CSV;

  public static final String SERIALIZED_NAME_RUNTIME_FILTER = "runtime_filter";
  @SerializedName(SERIALIZED_NAME_RUNTIME_FILTER)
  private Object runtimeFilter;

  public static final String SERIALIZED_NAME_RUNTIME_SORT = "runtime_sort";
  @SerializedName(SERIALIZED_NAME_RUNTIME_SORT)
  private Object runtimeSort;

  public static final String SERIALIZED_NAME_RUNTIME_PARAM_OVERRIDE = "runtime_param_override";
  @SerializedName(SERIALIZED_NAME_RUNTIME_PARAM_OVERRIDE)
  private Object runtimeParamOverride;

  public ExportAnswerReportRequest() {
  }

  public ExportAnswerReportRequest metadataIdentifier(String metadataIdentifier) {
    
    this.metadataIdentifier = metadataIdentifier;
    return this;
  }

   /**
   * Unique ID or name of the metadata object.
   * @return metadataIdentifier
  **/
  @javax.annotation.Nullable
  public String getMetadataIdentifier() {
    return metadataIdentifier;
  }


  public void setMetadataIdentifier(String metadataIdentifier) {
    this.metadataIdentifier = metadataIdentifier;
  }


  public ExportAnswerReportRequest sessionIdentifier(String sessionIdentifier) {
    
    this.sessionIdentifier = sessionIdentifier;
    return this;
  }

   /**
   * Unique ID of the answer session.
   * @return sessionIdentifier
  **/
  @javax.annotation.Nullable
  public String getSessionIdentifier() {
    return sessionIdentifier;
  }


  public void setSessionIdentifier(String sessionIdentifier) {
    this.sessionIdentifier = sessionIdentifier;
  }


  public ExportAnswerReportRequest generationNumber(Integer generationNumber) {
    
    this.generationNumber = generationNumber;
    return this;
  }

   /**
   * Generation number of the answer session.
   * @return generationNumber
  **/
  @javax.annotation.Nullable
  public Integer getGenerationNumber() {
    return generationNumber;
  }


  public void setGenerationNumber(Integer generationNumber) {
    this.generationNumber = generationNumber;
  }


  public ExportAnswerReportRequest fileFormat(FileFormatEnum fileFormat) {
    
    this.fileFormat = fileFormat;
    return this;
  }

   /**
   * Export file format.
   * @return fileFormat
  **/
  @javax.annotation.Nullable
  public FileFormatEnum getFileFormat() {
    return fileFormat;
  }


  public void setFileFormat(FileFormatEnum fileFormat) {
    this.fileFormat = fileFormat;
  }


  public ExportAnswerReportRequest runtimeFilter(Object runtimeFilter) {
    
    this.runtimeFilter = runtimeFilter;
    return this;
  }

   /**
   * JSON string representing runtime filter. { col1:region, op1: EQ, val1: northeast }
   * @return runtimeFilter
  **/
  @javax.annotation.Nullable
  public Object getRuntimeFilter() {
    return runtimeFilter;
  }


  public void setRuntimeFilter(Object runtimeFilter) {
    this.runtimeFilter = runtimeFilter;
  }


  public ExportAnswerReportRequest runtimeSort(Object runtimeSort) {
    
    this.runtimeSort = runtimeSort;
    return this;
  }

   /**
   * JSON string representing runtime sort. { sortCol1: region, asc1 :true, sortCol2 : date }
   * @return runtimeSort
  **/
  @javax.annotation.Nullable
  public Object getRuntimeSort() {
    return runtimeSort;
  }


  public void setRuntimeSort(Object runtimeSort) {
    this.runtimeSort = runtimeSort;
  }


  public ExportAnswerReportRequest runtimeParamOverride(Object runtimeParamOverride) {
    
    this.runtimeParamOverride = runtimeParamOverride;
    return this;
  }

   /**
   * JSON object for setting values of parameters in runtime.
   * @return runtimeParamOverride
  **/
  @javax.annotation.Nullable
  public Object getRuntimeParamOverride() {
    return runtimeParamOverride;
  }


  public void setRuntimeParamOverride(Object runtimeParamOverride) {
    this.runtimeParamOverride = runtimeParamOverride;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExportAnswerReportRequest exportAnswerReportRequest = (ExportAnswerReportRequest) o;
    return Objects.equals(this.metadataIdentifier, exportAnswerReportRequest.metadataIdentifier) &&
        Objects.equals(this.sessionIdentifier, exportAnswerReportRequest.sessionIdentifier) &&
        Objects.equals(this.generationNumber, exportAnswerReportRequest.generationNumber) &&
        Objects.equals(this.fileFormat, exportAnswerReportRequest.fileFormat) &&
        Objects.equals(this.runtimeFilter, exportAnswerReportRequest.runtimeFilter) &&
        Objects.equals(this.runtimeSort, exportAnswerReportRequest.runtimeSort) &&
        Objects.equals(this.runtimeParamOverride, exportAnswerReportRequest.runtimeParamOverride);
  }

  @Override
  public int hashCode() {
    return Objects.hash(metadataIdentifier, sessionIdentifier, generationNumber, fileFormat, runtimeFilter, runtimeSort, runtimeParamOverride);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExportAnswerReportRequest {\n");
    sb.append("    metadataIdentifier: ").append(toIndentedString(metadataIdentifier)).append("\n");
    sb.append("    sessionIdentifier: ").append(toIndentedString(sessionIdentifier)).append("\n");
    sb.append("    generationNumber: ").append(toIndentedString(generationNumber)).append("\n");
    sb.append("    fileFormat: ").append(toIndentedString(fileFormat)).append("\n");
    sb.append("    runtimeFilter: ").append(toIndentedString(runtimeFilter)).append("\n");
    sb.append("    runtimeSort: ").append(toIndentedString(runtimeSort)).append("\n");
    sb.append("    runtimeParamOverride: ").append(toIndentedString(runtimeParamOverride)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("metadata_identifier");
    openapiFields.add("session_identifier");
    openapiFields.add("generation_number");
    openapiFields.add("file_format");
    openapiFields.add("runtime_filter");
    openapiFields.add("runtime_sort");
    openapiFields.add("runtime_param_override");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ExportAnswerReportRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ExportAnswerReportRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExportAnswerReportRequest is not found in the empty JSON string", ExportAnswerReportRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ExportAnswerReportRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExportAnswerReportRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("metadata_identifier") != null && !jsonObj.get("metadata_identifier").isJsonNull()) && !jsonObj.get("metadata_identifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metadata_identifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metadata_identifier").toString()));
      }
      if ((jsonObj.get("session_identifier") != null && !jsonObj.get("session_identifier").isJsonNull()) && !jsonObj.get("session_identifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `session_identifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("session_identifier").toString()));
      }
      if ((jsonObj.get("file_format") != null && !jsonObj.get("file_format").isJsonNull()) && !jsonObj.get("file_format").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `file_format` to be a primitive type in the JSON string but got `%s`", jsonObj.get("file_format").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExportAnswerReportRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExportAnswerReportRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExportAnswerReportRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExportAnswerReportRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ExportAnswerReportRequest>() {
           @Override
           public void write(JsonWriter out, ExportAnswerReportRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExportAnswerReportRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ExportAnswerReportRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ExportAnswerReportRequest
  * @throws IOException if the JSON string is invalid with respect to ExportAnswerReportRequest
  */
  public static ExportAnswerReportRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExportAnswerReportRequest.class);
  }

 /**
  * Convert an instance of ExportAnswerReportRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

