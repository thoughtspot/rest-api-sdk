/*
 * ThoughtSpot Public REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.thoughtspot.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.thoughtspot.client.model.ExportLiveboardReportRequestPdfOptions;
import org.thoughtspot.client.model.ExportLiveboardReportRequestPngOptions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.thoughtspot.client.JSON;

/**
 * ExportLiveboardReportRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-31T09:43:29.263117728Z[Etc/UTC]")
public class ExportLiveboardReportRequest {
  public static final String SERIALIZED_NAME_METADATA_IDENTIFIER = "metadata_identifier";
  @SerializedName(SERIALIZED_NAME_METADATA_IDENTIFIER)
  private String metadataIdentifier;

  public static final String SERIALIZED_NAME_VISUALIZATION_IDENTIFIERS = "visualization_identifiers";
  @SerializedName(SERIALIZED_NAME_VISUALIZATION_IDENTIFIERS)
  private List<String> visualizationIdentifiers;

  public static final String SERIALIZED_NAME_TRANSIENT_CONTENT = "transient_content";
  @SerializedName(SERIALIZED_NAME_TRANSIENT_CONTENT)
  private String transientContent;

  /**
   * Export file format.
   */
  @JsonAdapter(FileFormatEnum.Adapter.class)
  public enum FileFormatEnum {
    CSV("CSV"),
    
    PDF("PDF"),
    
    XLSX("XLSX"),
    
    PNG("PNG");

    private String value;

    FileFormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FileFormatEnum fromValue(String value) {
      for (FileFormatEnum b : FileFormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FileFormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FileFormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FileFormatEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FileFormatEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_FILE_FORMAT = "file_format";
  @SerializedName(SERIALIZED_NAME_FILE_FORMAT)
  private FileFormatEnum fileFormat = FileFormatEnum.CSV;

  public static final String SERIALIZED_NAME_RUNTIME_FILTER = "runtime_filter";
  @SerializedName(SERIALIZED_NAME_RUNTIME_FILTER)
  private Object runtimeFilter;

  public static final String SERIALIZED_NAME_RUNTIME_SORT = "runtime_sort";
  @SerializedName(SERIALIZED_NAME_RUNTIME_SORT)
  private Object runtimeSort;

  public static final String SERIALIZED_NAME_PDF_OPTIONS = "pdf_options";
  @SerializedName(SERIALIZED_NAME_PDF_OPTIONS)
  private ExportLiveboardReportRequestPdfOptions pdfOptions;

  public static final String SERIALIZED_NAME_PNG_OPTIONS = "png_options";
  @SerializedName(SERIALIZED_NAME_PNG_OPTIONS)
  private ExportLiveboardReportRequestPngOptions pngOptions;

  public static final String SERIALIZED_NAME_RUNTIME_PARAM_OVERRIDE = "runtime_param_override";
  @SerializedName(SERIALIZED_NAME_RUNTIME_PARAM_OVERRIDE)
  private Object runtimeParamOverride;

  public ExportLiveboardReportRequest() {
  }

  public ExportLiveboardReportRequest metadataIdentifier(String metadataIdentifier) {
    
    this.metadataIdentifier = metadataIdentifier;
    return this;
  }

   /**
   * GUID or name of the Liveboard object.
   * @return metadataIdentifier
  **/
  @javax.annotation.Nonnull
  public String getMetadataIdentifier() {
    return metadataIdentifier;
  }


  public void setMetadataIdentifier(String metadataIdentifier) {
    this.metadataIdentifier = metadataIdentifier;
  }


  public ExportLiveboardReportRequest visualizationIdentifiers(List<String> visualizationIdentifiers) {
    
    this.visualizationIdentifiers = visualizationIdentifiers;
    return this;
  }

  public ExportLiveboardReportRequest addVisualizationIdentifiersItem(String visualizationIdentifiersItem) {
    if (this.visualizationIdentifiers == null) {
      this.visualizationIdentifiers = new ArrayList<>();
    }
    this.visualizationIdentifiers.add(visualizationIdentifiersItem);
    return this;
  }

   /**
   * GUID or name of visualizations on the Liveboard. If this parameter is not defined, the API returns a report with all visualizations saved on a Liveboard.
   * @return visualizationIdentifiers
  **/
  @javax.annotation.Nullable
  public List<String> getVisualizationIdentifiers() {
    return visualizationIdentifiers;
  }


  public void setVisualizationIdentifiers(List<String> visualizationIdentifiers) {
    this.visualizationIdentifiers = visualizationIdentifiers;
  }


  public ExportLiveboardReportRequest transientContent(String transientContent) {
    
    this.transientContent = transientContent;
    return this;
  }

   /**
   * Transient content of the Liveboard.
   * @return transientContent
  **/
  @javax.annotation.Nullable
  public String getTransientContent() {
    return transientContent;
  }


  public void setTransientContent(String transientContent) {
    this.transientContent = transientContent;
  }


  public ExportLiveboardReportRequest fileFormat(FileFormatEnum fileFormat) {
    
    this.fileFormat = fileFormat;
    return this;
  }

   /**
   * Export file format.
   * @return fileFormat
  **/
  @javax.annotation.Nullable
  public FileFormatEnum getFileFormat() {
    return fileFormat;
  }


  public void setFileFormat(FileFormatEnum fileFormat) {
    this.fileFormat = fileFormat;
  }


  public ExportLiveboardReportRequest runtimeFilter(Object runtimeFilter) {
    
    this.runtimeFilter = runtimeFilter;
    return this;
  }

   /**
   * JSON object with representing filter condition to apply filters at runtime. For example, {\&quot;col1\&quot;: \&quot;region\&quot;, \&quot;op1\&quot;: \&quot;EQ\&quot;, \&quot;val1\&quot;: \&quot;northeast\&quot; }. You can add multiple keys by incrementing the number at the end, for example, col2, op2, val2. For more information, see [API Documentation](https://developers.thoughtspot.com/docs/fetch-data-and-report-apis#_runtime_filters).
   * @return runtimeFilter
  **/
  @javax.annotation.Nullable
  public Object getRuntimeFilter() {
    return runtimeFilter;
  }


  public void setRuntimeFilter(Object runtimeFilter) {
    this.runtimeFilter = runtimeFilter;
  }


  public ExportLiveboardReportRequest runtimeSort(Object runtimeSort) {
    
    this.runtimeSort = runtimeSort;
    return this;
  }

   /**
   * JSON string representing runtime sort. For example, {\&quot;sortCol1\&quot;: \&quot;region\&quot;, \&quot;asc1\&quot; : true}. For more information, see [API Documentation](https://developers.thoughtspot.com/docs/fetch-data-and-report-apis#_runtime_sort).
   * @return runtimeSort
  **/
  @javax.annotation.Nullable
  public Object getRuntimeSort() {
    return runtimeSort;
  }


  public void setRuntimeSort(Object runtimeSort) {
    this.runtimeSort = runtimeSort;
  }


  public ExportLiveboardReportRequest pdfOptions(ExportLiveboardReportRequestPdfOptions pdfOptions) {
    
    this.pdfOptions = pdfOptions;
    return this;
  }

   /**
   * Get pdfOptions
   * @return pdfOptions
  **/
  @javax.annotation.Nullable
  public ExportLiveboardReportRequestPdfOptions getPdfOptions() {
    return pdfOptions;
  }


  public void setPdfOptions(ExportLiveboardReportRequestPdfOptions pdfOptions) {
    this.pdfOptions = pdfOptions;
  }


  public ExportLiveboardReportRequest pngOptions(ExportLiveboardReportRequestPngOptions pngOptions) {
    
    this.pngOptions = pngOptions;
    return this;
  }

   /**
   * Get pngOptions
   * @return pngOptions
  **/
  @javax.annotation.Nullable
  public ExportLiveboardReportRequestPngOptions getPngOptions() {
    return pngOptions;
  }


  public void setPngOptions(ExportLiveboardReportRequestPngOptions pngOptions) {
    this.pngOptions = pngOptions;
  }


  public ExportLiveboardReportRequest runtimeParamOverride(Object runtimeParamOverride) {
    
    this.runtimeParamOverride = runtimeParamOverride;
    return this;
  }

   /**
   * JSON object for setting values of parameters at runtime. For example, &lt;code&gt; {\&quot;param1\&quot;: \&quot;Double List Param\&quot;, \&quot;paramVal1\&quot;: 0.5}&lt;/code&gt;. You can add multiple keys by incrementing the number at the end, for example, param2, paramVal2. For more information, see [API Documentation](https://developers.thoughtspot.com/docs/fetch-data-and-report-apis#_runtime_parameters).
   * @return runtimeParamOverride
  **/
  @javax.annotation.Nullable
  public Object getRuntimeParamOverride() {
    return runtimeParamOverride;
  }


  public void setRuntimeParamOverride(Object runtimeParamOverride) {
    this.runtimeParamOverride = runtimeParamOverride;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExportLiveboardReportRequest exportLiveboardReportRequest = (ExportLiveboardReportRequest) o;
    return Objects.equals(this.metadataIdentifier, exportLiveboardReportRequest.metadataIdentifier) &&
        Objects.equals(this.visualizationIdentifiers, exportLiveboardReportRequest.visualizationIdentifiers) &&
        Objects.equals(this.transientContent, exportLiveboardReportRequest.transientContent) &&
        Objects.equals(this.fileFormat, exportLiveboardReportRequest.fileFormat) &&
        Objects.equals(this.runtimeFilter, exportLiveboardReportRequest.runtimeFilter) &&
        Objects.equals(this.runtimeSort, exportLiveboardReportRequest.runtimeSort) &&
        Objects.equals(this.pdfOptions, exportLiveboardReportRequest.pdfOptions) &&
        Objects.equals(this.pngOptions, exportLiveboardReportRequest.pngOptions) &&
        Objects.equals(this.runtimeParamOverride, exportLiveboardReportRequest.runtimeParamOverride);
  }

  @Override
  public int hashCode() {
    return Objects.hash(metadataIdentifier, visualizationIdentifiers, transientContent, fileFormat, runtimeFilter, runtimeSort, pdfOptions, pngOptions, runtimeParamOverride);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExportLiveboardReportRequest {\n");
    sb.append("    metadataIdentifier: ").append(toIndentedString(metadataIdentifier)).append("\n");
    sb.append("    visualizationIdentifiers: ").append(toIndentedString(visualizationIdentifiers)).append("\n");
    sb.append("    transientContent: ").append(toIndentedString(transientContent)).append("\n");
    sb.append("    fileFormat: ").append(toIndentedString(fileFormat)).append("\n");
    sb.append("    runtimeFilter: ").append(toIndentedString(runtimeFilter)).append("\n");
    sb.append("    runtimeSort: ").append(toIndentedString(runtimeSort)).append("\n");
    sb.append("    pdfOptions: ").append(toIndentedString(pdfOptions)).append("\n");
    sb.append("    pngOptions: ").append(toIndentedString(pngOptions)).append("\n");
    sb.append("    runtimeParamOverride: ").append(toIndentedString(runtimeParamOverride)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("metadata_identifier");
    openapiFields.add("visualization_identifiers");
    openapiFields.add("transient_content");
    openapiFields.add("file_format");
    openapiFields.add("runtime_filter");
    openapiFields.add("runtime_sort");
    openapiFields.add("pdf_options");
    openapiFields.add("png_options");
    openapiFields.add("runtime_param_override");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("metadata_identifier");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ExportLiveboardReportRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ExportLiveboardReportRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExportLiveboardReportRequest is not found in the empty JSON string", ExportLiveboardReportRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ExportLiveboardReportRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExportLiveboardReportRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ExportLiveboardReportRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("metadata_identifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metadata_identifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metadata_identifier").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("visualization_identifiers") != null && !jsonObj.get("visualization_identifiers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `visualization_identifiers` to be an array in the JSON string but got `%s`", jsonObj.get("visualization_identifiers").toString()));
      }
      if ((jsonObj.get("transient_content") != null && !jsonObj.get("transient_content").isJsonNull()) && !jsonObj.get("transient_content").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transient_content` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transient_content").toString()));
      }
      if ((jsonObj.get("file_format") != null && !jsonObj.get("file_format").isJsonNull()) && !jsonObj.get("file_format").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `file_format` to be a primitive type in the JSON string but got `%s`", jsonObj.get("file_format").toString()));
      }
      // validate the optional field `pdf_options`
      if (jsonObj.get("pdf_options") != null && !jsonObj.get("pdf_options").isJsonNull()) {
        ExportLiveboardReportRequestPdfOptions.validateJsonObject(jsonObj.getAsJsonObject("pdf_options"));
      }
      // validate the optional field `png_options`
      if (jsonObj.get("png_options") != null && !jsonObj.get("png_options").isJsonNull()) {
        ExportLiveboardReportRequestPngOptions.validateJsonObject(jsonObj.getAsJsonObject("png_options"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExportLiveboardReportRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExportLiveboardReportRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExportLiveboardReportRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExportLiveboardReportRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ExportLiveboardReportRequest>() {
           @Override
           public void write(JsonWriter out, ExportLiveboardReportRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExportLiveboardReportRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ExportLiveboardReportRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ExportLiveboardReportRequest
  * @throws IOException if the JSON string is invalid with respect to ExportLiveboardReportRequest
  */
  public static ExportLiveboardReportRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExportLiveboardReportRequest.class);
  }

 /**
  * Convert an instance of ExportLiveboardReportRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

